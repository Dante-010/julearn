
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/advanced/dis_run_hyperparameter_tuning.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_advanced_dis_run_hyperparameter_tuning.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_advanced_dis_run_hyperparameter_tuning.py:


Tuning Hyperparameters
=======================

This example uses the 'fmri' dataset, performs simple binary classification
using a Support Vector Machine classifier and analyse the model.


References
----------
Waskom, M.L., Frank, M.C., Wagner, A.D. (2016). Adaptive engagement of
cognitive control in context-dependent decision-making. Cerebral Cortex.


.. include:: ../../links.inc

.. GENERATED FROM PYTHON SOURCE LINES 17-26

.. code-block:: default

    # Authors: Federico Raimondo <f.raimondo@fz-juelich.de>
    #
    # License: AGPL
    import numpy as np
    from seaborn import load_dataset

    from julearn import run_cross_validation
    from julearn.utils import configure_logging


.. GENERATED FROM PYTHON SOURCE LINES 27-28

Set the logging level to info to see extra information

.. GENERATED FROM PYTHON SOURCE LINES 28-30

.. code-block:: default

    configure_logging(level="DEBUG")


.. GENERATED FROM PYTHON SOURCE LINES 31-32

Set the random seed to always have the same example

.. GENERATED FROM PYTHON SOURCE LINES 32-35

.. code-block:: default

    np.random.seed(42)



.. GENERATED FROM PYTHON SOURCE LINES 36-37

Load the dataset

.. GENERATED FROM PYTHON SOURCE LINES 37-40

.. code-block:: default

    df_fmri = load_dataset("fmri")
    print(df_fmri.head())


.. GENERATED FROM PYTHON SOURCE LINES 41-42

Set the dataframe in the right format

.. GENERATED FROM PYTHON SOURCE LINES 42-49

.. code-block:: default

    df_fmri = df_fmri.pivot(
        index=["subject", "timepoint", "event"], columns="region", values="signal"
    )

    df_fmri = df_fmri.reset_index()
    print(df_fmri.head())


.. GENERATED FROM PYTHON SOURCE LINES 50-51

Lets do a first attempt and use a linear SVM with the default parameters.

.. GENERATED FROM PYTHON SOURCE LINES 51-60

.. code-block:: default

    model_params = {'svm__kernel': 'linear'}
    X = ['frontal', 'parietal']
    y = 'event'
    scores = run_cross_validation(
        X=X, y=y, data=df_fmri, model='svm', preprocess='zscore',
        model_params=model_params)

    print(scores['test_score'].mean())


.. GENERATED FROM PYTHON SOURCE LINES 61-63

The score is not so good. Lets try to see if there is an optimal
regularization parameter (C) for the linear SVM.

.. GENERATED FROM PYTHON SOURCE LINES 63-82

.. code-block:: default

    model_params = {
        "svm__kernel": "linear",
        "svm__C": [0.01, 0.1],
        "cv": 2,
    }  # CV=2 too speed up the example
    X = ["frontal", "parietal"]
    y = "event"
    scores, estimator = run_cross_validation(
        X=X,
        y=y,
        data=df_fmri,
        model="svm",
        preprocess="zscore",
        model_params=model_params,
        return_estimator="final",
    )

    print(scores["test_score"].mean())


.. GENERATED FROM PYTHON SOURCE LINES 83-84

This did not change much, lets explore other kernels too.

.. GENERATED FROM PYTHON SOURCE LINES 84-102

.. code-block:: default

    model_params = {
        "svm__kernel": ["linear", "rbf", "poly"],
        "svm__C": [0.01, 0.1],
        "cv": 2,
    }  # CV=2 too speed up the example
    X = ["frontal", "parietal"]
    y = "event"
    scores, estimator = run_cross_validation(
        X=X,
        y=y,
        data=df_fmri,
        model="svm",
        preprocess="zscore",
        model_params=model_params,
        return_estimator="final",
    )

    print(scores["test_score"].mean())

.. GENERATED FROM PYTHON SOURCE LINES 103-104

It seems that we might have found a better model, but which one is it?

.. GENERATED FROM PYTHON SOURCE LINES 104-106

.. code-block:: default

    print(estimator.best_params_)


.. GENERATED FROM PYTHON SOURCE LINES 107-109

Now that we know that a RBF kernel is better, lest test different *gamma*
parameters.

.. GENERATED FROM PYTHON SOURCE LINES 109-130

.. code-block:: default

    model_params = {
        "svm__kernel": "rbf",
        "svm__C": [0.01, 0.1],
        "svm__gamma": [1e-2, 1e-3],
        "cv": 2,
    }  # CV=2 too speed up the example
    X = ["frontal", "parietal"]
    y = "event"
    scores, estimator = run_cross_validation(
        X=X,
        y=y,
        data=df_fmri,
        model="svm",
        preprocess="zscore",
        model_params=model_params,
        return_estimator="final",
    )

    print(scores["test_score"].mean())
    print(estimator.best_params_)


.. GENERATED FROM PYTHON SOURCE LINES 131-133

It seems that without tuning the gamma parameter we had a better accuracy.
Let's add the default value and see what happens.

.. GENERATED FROM PYTHON SOURCE LINES 133-154

.. code-block:: default

    model_params = {
        "svm__kernel": "rbf",
        "svm__C": [0.01, 0.1],
        "svm__gamma": [1e-2, 1e-3, "scale"],
        "cv": 2,
    }  # CV=2 too speed up the example
    X = ["frontal", "parietal"]
    y = "event"
    scores, estimator = run_cross_validation(
        X=X,
        y=y,
        data=df_fmri,
        model="svm",
        preprocess="zscore",
        model_params=model_params,
        return_estimator="final",
    )

    print(scores["test_score"].mean())
    print(estimator.best_params_)


.. GENERATED FROM PYTHON SOURCE LINES 155-156

So what was the best ``gamma`` in the end?

.. GENERATED FROM PYTHON SOURCE LINES 156-157

.. code-block:: default

    print(estimator.best_estimator_["svm"]._gamma)


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.000 seconds)


.. _sphx_glr_download_auto_examples_advanced_dis_run_hyperparameter_tuning.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dis_run_hyperparameter_tuning.py <dis_run_hyperparameter_tuning.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dis_run_hyperparameter_tuning.ipynb <dis_run_hyperparameter_tuning.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
