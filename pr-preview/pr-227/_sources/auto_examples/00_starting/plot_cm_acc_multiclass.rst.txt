
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/00_starting/plot_cm_acc_multiclass.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_00_starting_plot_cm_acc_multiclass.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_00_starting_plot_cm_acc_multiclass.py:


Multiclass Classification.
==========================

This example uses the 'iris' dataset and performs multiclass
classification using a Support Vector Machine classifier and plots
heatmaps for cross-validation accuracies and plots confusion matrix
for the test data.

.. GENERATED FROM PYTHON SOURCE LINES 11-27

.. code-block:: default

    # Authors: Shammi More <s.more@fz-juelich.de>
    #          Federico Raimondo <f.raimondo@fz-juelich.de>
    #
    # License: AGPL

    import pandas as pd
    import seaborn as sns
    import numpy as np
    import matplotlib.pyplot as plt
    from seaborn import load_dataset
    from sklearn.model_selection import train_test_split, RepeatedKFold
    from sklearn.metrics import confusion_matrix

    from julearn import run_cross_validation
    from julearn.utils import configure_logging








.. GENERATED FROM PYTHON SOURCE LINES 28-29

Set the logging level to info to see extra information

.. GENERATED FROM PYTHON SOURCE LINES 29-31

.. code-block:: default

    configure_logging(level="INFO")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    2023-04-25 15:01:50,439 - julearn - INFO - ===== Lib Versions =====
    2023-04-25 15:01:50,439 - julearn - INFO - numpy: 1.23.5
    2023-04-25 15:01:50,439 - julearn - INFO - scipy: 1.10.1
    2023-04-25 15:01:50,439 - julearn - INFO - sklearn: 1.2.2
    2023-04-25 15:01:50,439 - julearn - INFO - pandas: 1.5.3
    2023-04-25 15:01:50,439 - julearn - INFO - julearn: 0.2.6.dev161
    2023-04-25 15:01:50,439 - julearn - INFO - ========================




.. GENERATED FROM PYTHON SOURCE LINES 32-33

load the iris data from seaborn

.. GENERATED FROM PYTHON SOURCE LINES 33-37

.. code-block:: default

    df_iris = load_dataset("iris")
    X = ["sepal_length", "sepal_width", "petal_length"]
    y = "species"








.. GENERATED FROM PYTHON SOURCE LINES 38-39

Split the dataset into train and test

.. GENERATED FROM PYTHON SOURCE LINES 39-43

.. code-block:: default

    train_iris, test_iris = train_test_split(
        df_iris, test_size=0.2, stratify=df_iris[y], random_state=200
    )








.. GENERATED FROM PYTHON SOURCE LINES 44-47

We want to perform multiclass classification as iris dataset contains 3 kinds
of species. We will first zscore all the features and then train a support
vector machine classifier.

.. GENERATED FROM PYTHON SOURCE LINES 47-61

.. code-block:: default


    cv = RepeatedKFold(n_splits=5, n_repeats=5, random_state=200)
    scores, model_iris = run_cross_validation(
        X=X,
        y=y,
        data=train_iris,
        model="svm",
        preprocess="zscore",
        problem_type="classification",
        cv=cv,
        scoring=["accuracy"],
        return_estimator="final",
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    2023-04-25 15:01:50,445 - julearn - INFO - ==== Input Data ====
    2023-04-25 15:01:50,445 - julearn - INFO - Using dataframe as input
    2023-04-25 15:01:50,445 - julearn - INFO -      Features: ['sepal_length', 'sepal_width', 'petal_length']
    2023-04-25 15:01:50,446 - julearn - INFO -      Target: species
    2023-04-25 15:01:50,446 - julearn - INFO -      Expanded features: ['sepal_length', 'sepal_width', 'petal_length']
    2023-04-25 15:01:50,446 - julearn - INFO -      X_types:{}
    2023-04-25 15:01:50,446 - julearn - WARNING - The following columns are not defined in X_types: ['sepal_length', 'sepal_width', 'petal_length']. They will be treated as continuous.
    /home/runner/work/julearn/julearn/julearn/utils/logging.py:238: RuntimeWarning: The following columns are not defined in X_types: ['sepal_length', 'sepal_width', 'petal_length']. They will be treated as continuous.
      warn(msg, category=category)
    2023-04-25 15:01:50,447 - julearn - INFO - ====================
    2023-04-25 15:01:50,449 - julearn - INFO - 
    2023-04-25 15:01:50,449 - julearn - INFO - Adding step zscore that applies to ColumnTypes<types={'continuous'}; pattern=(?:__:type:__continuous)>
    2023-04-25 15:01:50,449 - julearn - INFO - Step added
    2023-04-25 15:01:50,449 - julearn - INFO - Adding step svm that applies to ColumnTypes<types={'continuous'}; pattern=(?:__:type:__continuous)>
    2023-04-25 15:01:50,449 - julearn - INFO - Step added
    2023-04-25 15:01:50,450 - julearn - INFO - = Model Parameters =
    2023-04-25 15:01:50,450 - julearn - INFO - ====================
    2023-04-25 15:01:50,450 - julearn - INFO - 
    2023-04-25 15:01:50,450 - julearn - INFO - = Data Information =
    2023-04-25 15:01:50,450 - julearn - INFO -      Problem type: classification
    2023-04-25 15:01:50,450 - julearn - INFO -      Number of samples: 120
    2023-04-25 15:01:50,451 - julearn - INFO -      Number of features: 3
    2023-04-25 15:01:50,451 - julearn - INFO - ====================
    2023-04-25 15:01:50,451 - julearn - INFO - 
    2023-04-25 15:01:50,451 - julearn - INFO -      Number of classes: 3
    2023-04-25 15:01:50,451 - julearn - INFO -      Target type: object
    2023-04-25 15:01:50,452 - julearn - INFO -      Class distributions: versicolor    40
    virginica     40
    setosa        40
    Name: species, dtype: int64
    2023-04-25 15:01:50,452 - julearn - INFO - Using outer CV scheme RepeatedKFold(n_repeats=5, n_splits=5, random_state=200)
    2023-04-25 15:01:50,452 - julearn - INFO - Multi-class classification problem detected #classes = 3.




.. GENERATED FROM PYTHON SOURCE LINES 62-63

The scores dataframe has all the values for each CV split.

.. GENERATED FROM PYTHON SOURCE LINES 63-66

.. code-block:: default


    print(scores.head())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

       fit_time  score_time  ...  fold                          cv_mdsum
    0  0.008041    0.003854  ...     0  fa5ab7a2b930761687a8e82d9971ebca
    1  0.007753    0.004120  ...     1  fa5ab7a2b930761687a8e82d9971ebca
    2  0.007397    0.005295  ...     2  fa5ab7a2b930761687a8e82d9971ebca
    3  0.011637    0.004897  ...     3  fa5ab7a2b930761687a8e82d9971ebca
    4  0.007065    0.004050  ...     4  fa5ab7a2b930761687a8e82d9971ebca

    [5 rows x 8 columns]




.. GENERATED FROM PYTHON SOURCE LINES 67-68

Now we can get the accuracy per fold and repetition:

.. GENERATED FROM PYTHON SOURCE LINES 68-74

.. code-block:: default


    df_accuracy = scores.set_index(["repeat", "fold"])["test_accuracy"].unstack()
    df_accuracy.index.name = "Repeats"
    df_accuracy.columns.name = "K-fold splits"
    print(df_accuracy)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    K-fold splits         0         1         2         3         4
    Repeats                                                        
    0              0.916667  0.833333  0.958333  0.916667  0.833333
    1              0.875000  0.833333  0.916667  0.833333  0.833333
    2              0.750000  0.916667  0.916667  0.958333  0.916667
    3              1.000000  0.791667  0.875000  1.000000  0.791667
    4              0.875000  0.833333  0.875000  0.916667  0.958333




.. GENERATED FROM PYTHON SOURCE LINES 75-76

Plot heatmap of accuracy over all repeats and CV splits

.. GENERATED FROM PYTHON SOURCE LINES 76-81

.. code-block:: default

    sns.set(font_scale=1.2)
    fig, ax = plt.subplots(1, 1, figsize=(10, 7))
    sns.heatmap(df_accuracy, cmap="YlGnBu")
    plt.title("Cross-validation Accuracy")




.. image-sg:: /auto_examples/00_starting/images/sphx_glr_plot_cm_acc_multiclass_001.png
   :alt: Cross-validation Accuracy
   :srcset: /auto_examples/00_starting/images/sphx_glr_plot_cm_acc_multiclass_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Text(0.5, 1.0, 'Cross-validation Accuracy')



.. GENERATED FROM PYTHON SOURCE LINES 82-84

We can also test our final model's accuracy and plot the confusion matrix
for the test data as an annotated heatmap

.. GENERATED FROM PYTHON SOURCE LINES 84-89

.. code-block:: default

    y_true = test_iris[y]
    y_pred = model_iris.predict(test_iris[X])
    cm = confusion_matrix(y_true, y_pred, labels=np.unique(y_true))

    print(cm)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [[9 1 0]
     [0 9 1]
     [0 2 8]]




.. GENERATED FROM PYTHON SOURCE LINES 90-92

Now that we have our confusion matrix, let's build another matrix with
annotations.

.. GENERATED FROM PYTHON SOURCE LINES 92-105

.. code-block:: default

    cm_sum = np.sum(cm, axis=1, keepdims=True)
    cm_perc = cm / cm_sum.astype(float) * 100
    annot = np.empty_like(cm).astype(str)
    nrows, ncols = cm.shape
    for i in range(nrows):
        for j in range(ncols):
            c = cm[i, j]
            p = cm_perc[i, j]
            if c == 0:
                annot[i, j] = ""
            else:
                s = cm_sum[i]
                annot[i, j] = "%.1f%%\n%d/%d" % (p, c, s)







.. GENERATED FROM PYTHON SOURCE LINES 106-108

Finally we create another dataframe with the confusion matrix and plot
the heatmap with annotations.

.. GENERATED FROM PYTHON SOURCE LINES 108-114

.. code-block:: default

    cm = pd.DataFrame(cm, index=np.unique(y_true), columns=np.unique(y_true))
    cm.index.name = "Actual"
    cm.columns.name = "Predicted"
    fig, ax = plt.subplots(1, 1, figsize=(10, 7))
    sns.heatmap(cm, cmap="YlGnBu", annot=annot, fmt="", ax=ax)
    plt.title("Confusion matrix")



.. image-sg:: /auto_examples/00_starting/images/sphx_glr_plot_cm_acc_multiclass_002.png
   :alt: Confusion matrix
   :srcset: /auto_examples/00_starting/images/sphx_glr_plot_cm_acc_multiclass_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Text(0.5, 1.0, 'Confusion matrix')




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.821 seconds)


.. _sphx_glr_download_auto_examples_00_starting_plot_cm_acc_multiclass.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_cm_acc_multiclass.py <plot_cm_acc_multiclass.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_cm_acc_multiclass.ipynb <plot_cm_acc_multiclass.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
