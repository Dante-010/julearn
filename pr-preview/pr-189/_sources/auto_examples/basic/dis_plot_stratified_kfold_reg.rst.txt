
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/basic/dis_plot_stratified_kfold_reg.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_basic_dis_plot_stratified_kfold_reg.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_basic_dis_plot_stratified_kfold_reg.py:


Stratified K-fold CV for regression analysis
============================================

This example uses the 'diabetes' data from sklearn datasets to
perform stratified Kfold CV for a regression problem,

.. include:: ../../links.inc

.. GENERATED FROM PYTHON SOURCE LINES 10-27

.. code-block:: default


    # Authors: Shammi More <s.more@fz-juelich.de>
    #          Federico Raimondo <f.raimondo@fz-juelich.de>
    #          Leonard Sasse <l.sasse@fz-juelich.de>
    # License: AGPL

    import math
    import pandas as pd
    import seaborn as sns
    import matplotlib.pyplot as plt
    from sklearn.datasets import load_diabetes
    from sklearn.model_selection import KFold

    from julearn import run_cross_validation
    from julearn.utils import configure_logging
    from julearn.model_selection import StratifiedGroupsKFold


.. GENERATED FROM PYTHON SOURCE LINES 28-29

Set the logging level to info to see extra information

.. GENERATED FROM PYTHON SOURCE LINES 29-31

.. code-block:: default

    configure_logging(level='INFO')


.. GENERATED FROM PYTHON SOURCE LINES 32-33

load the diabetes data from sklearn as a pandas dataframe

.. GENERATED FROM PYTHON SOURCE LINES 33-35

.. code-block:: default

    features, target = load_diabetes(return_X_y=True, as_frame=True)


.. GENERATED FROM PYTHON SOURCE LINES 36-40

Dataset contains ten variables age, sex, body mass index, average  blood
pressure, and six blood serum measurements (s1-s6) diabetes patients and
a quantitative measure of disease progression one year after baseline which
is the target we are interested in predicting.

.. GENERATED FROM PYTHON SOURCE LINES 40-44

.. code-block:: default


    print('Features: \n', features.head())
    print('Target: \n', target.describe())


.. GENERATED FROM PYTHON SOURCE LINES 45-48

Let's combine features and target together in one dataframe and create some
outliers to see the difference in model performance with and without
stratification

.. GENERATED FROM PYTHON SOURCE LINES 48-61

.. code-block:: default


    data_df = pd.concat([features, target], axis=1)

    # Create outliers for test purpose
    new_df = data_df[(data_df.target > 145) & (data_df.target <= 150)]
    new_df['target'] = [590, 580, 597, 595, 590, 590, 600]
    data_df = pd.concat([data_df, new_df], axis=0)
    data_df =  data_df.reset_index(drop=True)

    # define X, y
    X = ['age', 'sex', 'bmi', 'bp', 's1', 's2', 's3', 's4', 's5', 's6']
    y = 'target'


.. GENERATED FROM PYTHON SOURCE LINES 62-63

Define number of splits for CV and create bins/group for stratification

.. GENERATED FROM PYTHON SOURCE LINES 63-71

.. code-block:: default

    num_splits = 7

    num_bins = math.floor(len(data_df) / num_splits)  # num of bins to be created
    bins_on = data_df.target  # variable to be used for stratification
    qc = pd.cut(bins_on.tolist(), num_bins)  # divides data in bins
    data_df['bins'] = qc.codes
    groups = 'bins'


.. GENERATED FROM PYTHON SOURCE LINES 72-73

Train a linear regression model with stratification on target

.. GENERATED FROM PYTHON SOURCE LINES 73-80

.. code-block:: default


    cv_stratified = StratifiedGroupsKFold(n_splits=num_splits, shuffle=False)
    scores_strat, model = run_cross_validation(
        X=X, y=y, data=data_df, preprocess='zscore', cv=cv_stratified,
        groups=groups, problem_type='regression', model='linreg',
        return_estimator='final', scoring='neg_mean_absolute_error')


.. GENERATED FROM PYTHON SOURCE LINES 81-82

Train a linear regression model without stratification on target

.. GENERATED FROM PYTHON SOURCE LINES 82-89

.. code-block:: default


    cv = KFold(n_splits=num_splits, shuffle=False, random_state=None)
    scores, model = run_cross_validation(
        X=X, y=y, data=data_df, preprocess='zscore', cv=cv,
        problem_type='regression', model='linreg', return_estimator='final',
        scoring='neg_mean_absolute_error')


.. GENERATED FROM PYTHON SOURCE LINES 90-92

Now we can compare the test score for model trained with and without
stratification. We can combine the two outputs as pandas dataframes

.. GENERATED FROM PYTHON SOURCE LINES 92-98

.. code-block:: default


    scores_strat['model'] = 'With stratification'
    scores['model'] = 'Without stratification'
    df_scores = scores_strat[['test_score', 'model']]
    df_scores  = pd.concat([df_scores, scores[['test_score', 'model']]])


.. GENERATED FROM PYTHON SOURCE LINES 99-102

Plot a boxplot with test scores from both the models. We see here that
the variance for the test score is much higher when CV splits were not
stratified

.. GENERATED FROM PYTHON SOURCE LINES 102-107

.. code-block:: default


    fig, ax = plt.subplots(1, 1, figsize=(10, 7))
    sns.set_style("darkgrid")
    ax = sns.boxplot(x='model', y='test_score', data=df_scores)
    ax = sns.swarmplot(x="model", y="test_score", data=df_scores, color=".25")


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.000 seconds)


.. _sphx_glr_download_auto_examples_basic_dis_plot_stratified_kfold_reg.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dis_plot_stratified_kfold_reg.py <dis_plot_stratified_kfold_reg.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dis_plot_stratified_kfold_reg.ipynb <dis_plot_stratified_kfold_reg.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
