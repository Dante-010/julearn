
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/basic/dis_plot_cm_acc_multiclass.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_basic_dis_plot_cm_acc_multiclass.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_basic_dis_plot_cm_acc_multiclass.py:


Multiclass Classification.
==========================

This example uses the 'iris' dataset and performs multiclass
classification using a Support Vector Machine classifier and plots
heatmaps for cross-validation accuracies and plots confusion matrix
for the test data.

.. GENERATED FROM PYTHON SOURCE LINES 11-27

.. code-block:: default

    # Authors: Shammi More <s.more@fz-juelich.de>
    #          Federico Raimondo <f.raimondo@fz-juelich.de>
    #
    # License: AGPL

    import pandas as pd
    import seaborn as sns
    import numpy as np
    import matplotlib.pyplot as plt
    from seaborn import load_dataset
    from sklearn.model_selection import train_test_split, RepeatedKFold
    from sklearn.metrics import confusion_matrix

    from julearn import run_cross_validation
    from julearn.utils import configure_logging


.. GENERATED FROM PYTHON SOURCE LINES 28-29

Set the logging level to info to see extra information

.. GENERATED FROM PYTHON SOURCE LINES 29-31

.. code-block:: default

    configure_logging(level='INFO')


.. GENERATED FROM PYTHON SOURCE LINES 32-33

load the iris data from seaborn

.. GENERATED FROM PYTHON SOURCE LINES 33-37

.. code-block:: default

    df_iris = load_dataset('iris')
    X = ['sepal_length', 'sepal_width', 'petal_length']
    y = 'species'


.. GENERATED FROM PYTHON SOURCE LINES 38-39

Split the dataset into train and test

.. GENERATED FROM PYTHON SOURCE LINES 39-42

.. code-block:: default

    train_iris, test_iris = train_test_split(df_iris, test_size=0.2,
                                             stratify=df_iris[y], random_state=200)


.. GENERATED FROM PYTHON SOURCE LINES 43-46

We want to perform multiclass classification as iris dataset contains 3 kinds
of species. We will first zscore all the features and then train a support
vector machine classifier.

.. GENERATED FROM PYTHON SOURCE LINES 46-52

.. code-block:: default


    cv = RepeatedKFold(n_splits=5, n_repeats=5, random_state=200)
    scores, model_iris = run_cross_validation(
        X=X, y=y, data=train_iris, model='svm', preprocess='zscore', cv=cv,
        scoring=['accuracy'], return_estimator='final')


.. GENERATED FROM PYTHON SOURCE LINES 53-54

The scores dataframe has all the values for each CV split.

.. GENERATED FROM PYTHON SOURCE LINES 54-57

.. code-block:: default


    print(scores.head())


.. GENERATED FROM PYTHON SOURCE LINES 58-59

Now we can get the accuracy per fold and repetition:

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    df_accuracy = scores.set_index(
        ['repeat', 'fold'])['test_accuracy'].unstack()
    df_accuracy.index.name = 'Repeats'
    df_accuracy.columns.name = 'K-fold splits'
    print(df_accuracy)


.. GENERATED FROM PYTHON SOURCE LINES 67-68

Plot heatmap of accuracy over all repeats and CV splits

.. GENERATED FROM PYTHON SOURCE LINES 68-73

.. code-block:: default

    sns.set(font_scale=1.2)
    fig, ax = plt.subplots(1, 1, figsize=(10, 7))
    sns.heatmap(df_accuracy, cmap="YlGnBu")
    plt.title('Cross-validation Accuracy')


.. GENERATED FROM PYTHON SOURCE LINES 74-76

We can also test our final model's accuracy and plot the confusion matrix
for the test data as an annotated heatmap

.. GENERATED FROM PYTHON SOURCE LINES 76-81

.. code-block:: default

    y_true = test_iris[y]
    y_pred = model_iris.predict(test_iris[X])
    cm = confusion_matrix(y_true, y_pred, labels=np.unique(y_true))

    print(cm)

.. GENERATED FROM PYTHON SOURCE LINES 82-84

Now that we have our confusion matrix, let's build another matrix with
annotations.

.. GENERATED FROM PYTHON SOURCE LINES 84-97

.. code-block:: default

    cm_sum = np.sum(cm, axis=1, keepdims=True)
    cm_perc = cm / cm_sum.astype(float) * 100
    annot = np.empty_like(cm).astype(str)
    nrows, ncols = cm.shape
    for i in range(nrows):
        for j in range(ncols):
            c = cm[i, j]
            p = cm_perc[i, j]
            if c == 0:
                annot[i, j] = ''
            else:
                s = cm_sum[i]
                annot[i, j] = '%.1f%%\n%d/%d' % (p, c, s)

.. GENERATED FROM PYTHON SOURCE LINES 98-100

Finally we create another dataframe with the confusion matrix and plot
the heatmap with annotations.

.. GENERATED FROM PYTHON SOURCE LINES 100-106

.. code-block:: default

    cm = pd.DataFrame(cm, index=np.unique(y_true), columns=np.unique(y_true))
    cm.index.name = 'Actual'
    cm.columns.name = 'Predicted'
    fig, ax = plt.subplots(1, 1, figsize=(10, 7))
    sns.heatmap(cm, cmap="YlGnBu", annot=annot, fmt='', ax=ax)
    plt.title('Confusion matrix')


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.000 seconds)


.. _sphx_glr_download_auto_examples_basic_dis_plot_cm_acc_multiclass.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dis_plot_cm_acc_multiclass.py <dis_plot_cm_acc_multiclass.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dis_plot_cm_acc_multiclass.ipynb <dis_plot_cm_acc_multiclass.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
