Search.setIndex({"docnames": ["api/base", "api/generated/julearn.PipelineCreator", "api/generated/julearn.TargetPipelineCreator", "api/generated/julearn.base.ColumnTypes", "api/generated/julearn.base.ColumnTypesLike", "api/generated/julearn.base.JuBaseEstimator", "api/generated/julearn.base.JuTransformer", "api/generated/julearn.base.WrapModel", "api/generated/julearn.base.change_column_type", "api/generated/julearn.base.ensure_column_types", "api/generated/julearn.base.get_column_type", "api/generated/julearn.base.make_type_selector", "api/generated/julearn.inspect.FoldsInspector", "api/generated/julearn.inspect.Inspector", "api/generated/julearn.inspect.preprocess", "api/generated/julearn.model_selection.ContinuousStratifiedGroupKFold", "api/generated/julearn.model_selection.ContinuousStratifiedKFold", "api/generated/julearn.model_selection.RepeatedContinuousStratifiedGroupKFold", "api/generated/julearn.model_selection.RepeatedContinuousStratifiedKFold", "api/generated/julearn.model_selection.StratifiedBootstrap", "api/generated/julearn.model_selection.get_searcher", "api/generated/julearn.model_selection.list_searchers", "api/generated/julearn.model_selection.register_searcher", "api/generated/julearn.model_selection.reset_searcher_register", "api/generated/julearn.models.dynamic.DynamicSelection", "api/generated/julearn.models.get_model", "api/generated/julearn.models.list_models", "api/generated/julearn.models.register_model", "api/generated/julearn.models.reset_model_register", "api/generated/julearn.pipeline.JuTargetPipeline", "api/generated/julearn.pipeline.pipeline_creator.Step", "api/generated/julearn.prepare.check_consistency", "api/generated/julearn.prepare.prepare_input_data", "api/generated/julearn.run_cross_validation", "api/generated/julearn.scoring.check_scoring", "api/generated/julearn.scoring.get_scorer", "api/generated/julearn.scoring.list_scorers", "api/generated/julearn.scoring.metrics.r2_corr", "api/generated/julearn.scoring.register_scorer", "api/generated/julearn.scoring.reset_scorer_register", "api/generated/julearn.stats.corrected_ttest", "api/generated/julearn.transformers.CBPM", "api/generated/julearn.transformers.ChangeColumnTypes", "api/generated/julearn.transformers.DropColumns", "api/generated/julearn.transformers.FilterColumns", "api/generated/julearn.transformers.JuColumnTransformer", "api/generated/julearn.transformers.SetColumnTypes", "api/generated/julearn.transformers.confound_remover.ConfoundRemover", "api/generated/julearn.transformers.get_transformer", "api/generated/julearn.transformers.list_transformers", "api/generated/julearn.transformers.register_transformer", "api/generated/julearn.transformers.reset_transformer_register", "api/generated/julearn.transformers.target.JuTargetTransformer", "api/generated/julearn.transformers.target.JuTransformedTargetModel", "api/generated/julearn.transformers.target.TargetConfoundRemover", "api/generated/julearn.transformers.target.TransformedTargetWarning", "api/generated/julearn.transformers.target.get_target_transformer", "api/generated/julearn.transformers.target.list_target_transformers", "api/generated/julearn.transformers.target.register_target_transformer", "api/generated/julearn.transformers.target.reset_target_transformer_register", "api/generated/julearn.utils.configure_logging", "api/generated/julearn.utils.logger", "api/generated/julearn.utils.raise_error", "api/generated/julearn.utils.typing.EstimatorLike", "api/generated/julearn.utils.typing.EstimatorLikeFit1", "api/generated/julearn.utils.typing.EstimatorLikeFit2", "api/generated/julearn.utils.typing.EstimatorLikeFity", "api/generated/julearn.utils.typing.JuEstimatorLike", "api/generated/julearn.utils.warn_with_log", "api/generated/julearn.viz.plot_scores", "api/index", "api/inspect", "api/main", "api/model_selection", "api/models", "api/pipeline", "api/prepare", "api/scoring", "api/stats", "api/transformers", "api/utils", "api/viz", "auto_examples/00_starting/index", "auto_examples/00_starting/plot_cm_acc_multiclass", "auto_examples/00_starting/plot_example_regression", "auto_examples/00_starting/plot_stratified_kfold_reg", "auto_examples/00_starting/run_combine_pandas", "auto_examples/00_starting/run_grouped_cv", "auto_examples/00_starting/run_simple_binary_classification", "auto_examples/00_starting/sg_execution_times", "auto_examples/01_model_comparison/index", "auto_examples/01_model_comparison/plot_simple_model_comparison", "auto_examples/01_model_comparison/sg_execution_times", "auto_examples/02_inspection/index", "auto_examples/02_inspection/plot_groupcv_inspect_svm", "auto_examples/02_inspection/plot_inspect_random_forest", "auto_examples/02_inspection/plot_preprocess", "auto_examples/02_inspection/run_binary_inspect_folds", "auto_examples/02_inspection/sg_execution_times", "auto_examples/03_complex_models/index", "auto_examples/03_complex_models/run_apply_to_target", "auto_examples/03_complex_models/run_example_pca_featsets", "auto_examples/03_complex_models/run_hyperparameter_multiple_grids", "auto_examples/03_complex_models/run_hyperparameter_tuning", "auto_examples/03_complex_models/run_stacked_models", "auto_examples/03_complex_models/sg_execution_times", "auto_examples/04_confounds/index", "auto_examples/04_confounds/plot_confound_removal_classification", "auto_examples/04_confounds/run_return_confounds", "auto_examples/04_confounds/sg_execution_times", "auto_examples/05_customization/index", "auto_examples/05_customization/run_custom_scorers_regression", "auto_examples/05_customization/sg_execution_times", "available_pipeline_steps", "contributing", "examples", "faq", "getting_started", "index", "maintaining", "selected_deeper_topics/CBPM", "selected_deeper_topics/confound_removal", "selected_deeper_topics/cross_validation_splitter", "selected_deeper_topics/hyperparameter_tuning", "selected_deeper_topics/index", "selected_deeper_topics/model_inspect", "selected_deeper_topics/stacked_models", "selected_deeper_topics/target_transformers", "what_really_need_know/cross_validation", "what_really_need_know/data", "what_really_need_know/index", "what_really_need_know/model_comparison", "what_really_need_know/model_evaluation", "what_really_need_know/pipeline", "whats_new"], "filenames": ["api/base.rst", "api/generated/julearn.PipelineCreator.rst", "api/generated/julearn.TargetPipelineCreator.rst", "api/generated/julearn.base.ColumnTypes.rst", "api/generated/julearn.base.ColumnTypesLike.rst", "api/generated/julearn.base.JuBaseEstimator.rst", "api/generated/julearn.base.JuTransformer.rst", "api/generated/julearn.base.WrapModel.rst", "api/generated/julearn.base.change_column_type.rst", "api/generated/julearn.base.ensure_column_types.rst", "api/generated/julearn.base.get_column_type.rst", "api/generated/julearn.base.make_type_selector.rst", "api/generated/julearn.inspect.FoldsInspector.rst", "api/generated/julearn.inspect.Inspector.rst", "api/generated/julearn.inspect.preprocess.rst", "api/generated/julearn.model_selection.ContinuousStratifiedGroupKFold.rst", "api/generated/julearn.model_selection.ContinuousStratifiedKFold.rst", "api/generated/julearn.model_selection.RepeatedContinuousStratifiedGroupKFold.rst", "api/generated/julearn.model_selection.RepeatedContinuousStratifiedKFold.rst", "api/generated/julearn.model_selection.StratifiedBootstrap.rst", "api/generated/julearn.model_selection.get_searcher.rst", "api/generated/julearn.model_selection.list_searchers.rst", "api/generated/julearn.model_selection.register_searcher.rst", "api/generated/julearn.model_selection.reset_searcher_register.rst", "api/generated/julearn.models.dynamic.DynamicSelection.rst", "api/generated/julearn.models.get_model.rst", "api/generated/julearn.models.list_models.rst", "api/generated/julearn.models.register_model.rst", "api/generated/julearn.models.reset_model_register.rst", "api/generated/julearn.pipeline.JuTargetPipeline.rst", "api/generated/julearn.pipeline.pipeline_creator.Step.rst", "api/generated/julearn.prepare.check_consistency.rst", "api/generated/julearn.prepare.prepare_input_data.rst", "api/generated/julearn.run_cross_validation.rst", "api/generated/julearn.scoring.check_scoring.rst", "api/generated/julearn.scoring.get_scorer.rst", "api/generated/julearn.scoring.list_scorers.rst", "api/generated/julearn.scoring.metrics.r2_corr.rst", "api/generated/julearn.scoring.register_scorer.rst", "api/generated/julearn.scoring.reset_scorer_register.rst", "api/generated/julearn.stats.corrected_ttest.rst", "api/generated/julearn.transformers.CBPM.rst", "api/generated/julearn.transformers.ChangeColumnTypes.rst", "api/generated/julearn.transformers.DropColumns.rst", "api/generated/julearn.transformers.FilterColumns.rst", "api/generated/julearn.transformers.JuColumnTransformer.rst", "api/generated/julearn.transformers.SetColumnTypes.rst", "api/generated/julearn.transformers.confound_remover.ConfoundRemover.rst", "api/generated/julearn.transformers.get_transformer.rst", "api/generated/julearn.transformers.list_transformers.rst", "api/generated/julearn.transformers.register_transformer.rst", "api/generated/julearn.transformers.reset_transformer_register.rst", "api/generated/julearn.transformers.target.JuTargetTransformer.rst", "api/generated/julearn.transformers.target.JuTransformedTargetModel.rst", "api/generated/julearn.transformers.target.TargetConfoundRemover.rst", "api/generated/julearn.transformers.target.TransformedTargetWarning.rst", "api/generated/julearn.transformers.target.get_target_transformer.rst", "api/generated/julearn.transformers.target.list_target_transformers.rst", "api/generated/julearn.transformers.target.register_target_transformer.rst", "api/generated/julearn.transformers.target.reset_target_transformer_register.rst", "api/generated/julearn.utils.configure_logging.rst", "api/generated/julearn.utils.logger.rst", "api/generated/julearn.utils.raise_error.rst", "api/generated/julearn.utils.typing.EstimatorLike.rst", "api/generated/julearn.utils.typing.EstimatorLikeFit1.rst", "api/generated/julearn.utils.typing.EstimatorLikeFit2.rst", "api/generated/julearn.utils.typing.EstimatorLikeFity.rst", "api/generated/julearn.utils.typing.JuEstimatorLike.rst", "api/generated/julearn.utils.warn_with_log.rst", "api/generated/julearn.viz.plot_scores.rst", "api/index.rst", "api/inspect.rst", "api/main.rst", "api/model_selection.rst", "api/models.rst", "api/pipeline.rst", "api/prepare.rst", "api/scoring.rst", "api/stats.rst", "api/transformers.rst", "api/utils.rst", "api/viz.rst", "auto_examples/00_starting/index.rst", "auto_examples/00_starting/plot_cm_acc_multiclass.rst", "auto_examples/00_starting/plot_example_regression.rst", "auto_examples/00_starting/plot_stratified_kfold_reg.rst", "auto_examples/00_starting/run_combine_pandas.rst", "auto_examples/00_starting/run_grouped_cv.rst", "auto_examples/00_starting/run_simple_binary_classification.rst", "auto_examples/00_starting/sg_execution_times.rst", "auto_examples/01_model_comparison/index.rst", "auto_examples/01_model_comparison/plot_simple_model_comparison.rst", "auto_examples/01_model_comparison/sg_execution_times.rst", "auto_examples/02_inspection/index.rst", "auto_examples/02_inspection/plot_groupcv_inspect_svm.rst", "auto_examples/02_inspection/plot_inspect_random_forest.rst", "auto_examples/02_inspection/plot_preprocess.rst", "auto_examples/02_inspection/run_binary_inspect_folds.rst", "auto_examples/02_inspection/sg_execution_times.rst", "auto_examples/03_complex_models/index.rst", "auto_examples/03_complex_models/run_apply_to_target.rst", "auto_examples/03_complex_models/run_example_pca_featsets.rst", "auto_examples/03_complex_models/run_hyperparameter_multiple_grids.rst", "auto_examples/03_complex_models/run_hyperparameter_tuning.rst", "auto_examples/03_complex_models/run_stacked_models.rst", "auto_examples/03_complex_models/sg_execution_times.rst", "auto_examples/04_confounds/index.rst", "auto_examples/04_confounds/plot_confound_removal_classification.rst", "auto_examples/04_confounds/run_return_confounds.rst", "auto_examples/04_confounds/sg_execution_times.rst", "auto_examples/05_customization/index.rst", "auto_examples/05_customization/run_custom_scorers_regression.rst", "auto_examples/05_customization/sg_execution_times.rst", "available_pipeline_steps.rst", "contributing.rst", "examples.rst", "faq.rst", "getting_started.rst", "index.rst", "maintaining.rst", "selected_deeper_topics/CBPM.rst", "selected_deeper_topics/confound_removal.rst", "selected_deeper_topics/cross_validation_splitter.rst", "selected_deeper_topics/hyperparameter_tuning.rst", "selected_deeper_topics/index.rst", "selected_deeper_topics/model_inspect.rst", "selected_deeper_topics/stacked_models.rst", "selected_deeper_topics/target_transformers.rst", "what_really_need_know/cross_validation.rst", "what_really_need_know/data.rst", "what_really_need_know/index.rst", "what_really_need_know/model_comparison.rst", "what_really_need_know/model_evaluation.rst", "what_really_need_know/pipeline.rst", "whats_new.rst"], "titles": ["<span class=\"section-number\">6.4. </span>Base", "julearn.PipelineCreator", "julearn.TargetPipelineCreator", "julearn.base.ColumnTypes", "julearn.base.ColumnTypesLike", "julearn.base.JuBaseEstimator", "julearn.base.JuTransformer", "julearn.base.WrapModel", "julearn.base.change_column_type", "julearn.base.ensure_column_types", "julearn.base.get_column_type", "julearn.base.make_type_selector", "julearn.inspect.FoldsInspector", "julearn.inspect.Inspector", "julearn.inspect.preprocess", "julearn.model_selection.ContinuousStratifiedGroupKFold", "julearn.model_selection.ContinuousStratifiedKFold", "julearn.model_selection.RepeatedContinuousStratifiedGroupKFold", "julearn.model_selection.RepeatedContinuousStratifiedKFold", "julearn.model_selection.StratifiedBootstrap", "julearn.model_selection.get_searcher", "julearn.model_selection.list_searchers", "julearn.model_selection.register_searcher", "julearn.model_selection.reset_searcher_register", "julearn.models.dynamic.DynamicSelection", "julearn.models.get_model", "julearn.models.list_models", "julearn.models.register_model", "julearn.models.reset_model_register", "julearn.pipeline.JuTargetPipeline", "julearn.pipeline.pipeline_creator.Step", "julearn.prepare.check_consistency", "julearn.prepare.prepare_input_data", "julearn.run_cross_validation", "julearn.scoring.check_scoring", "julearn.scoring.get_scorer", "julearn.scoring.list_scorers", "julearn.scoring.metrics.r2_corr", "julearn.scoring.register_scorer", "julearn.scoring.reset_scorer_register", "julearn.stats.corrected_ttest", "julearn.transformers.CBPM", "julearn.transformers.ChangeColumnTypes", "julearn.transformers.DropColumns", "julearn.transformers.FilterColumns", "julearn.transformers.JuColumnTransformer", "julearn.transformers.SetColumnTypes", "julearn.transformers.confound_remover.ConfoundRemover", "julearn.transformers.get_transformer", "julearn.transformers.list_transformers", "julearn.transformers.register_transformer", "julearn.transformers.reset_transformer_register", "julearn.transformers.target.JuTargetTransformer", "julearn.transformers.target.JuTransformedTargetModel", "julearn.transformers.target.TargetConfoundRemover", "julearn.transformers.target.TransformedTargetWarning", "julearn.transformers.target.get_target_transformer", "julearn.transformers.target.list_target_transformers", "julearn.transformers.target.register_target_transformer", "julearn.transformers.target.reset_target_transformer_register", "julearn.utils.configure_logging", "julearn.utils.logger", "julearn.utils.raise_error", "julearn.utils.typing.EstimatorLike", "julearn.utils.typing.EstimatorLikeFit1", "julearn.utils.typing.EstimatorLikeFit2", "julearn.utils.typing.EstimatorLikeFity", "julearn.utils.typing.JuEstimatorLike", "julearn.utils.warn_with_log", "julearn.viz.plot_scores", "<span class=\"section-number\">6. </span>Reference", "<span class=\"section-number\">6.5. </span>Inspect", "<span class=\"section-number\">6.1. </span>Main API", "<span class=\"section-number\">6.3. </span>Model Selection", "<span class=\"section-number\">6.6. </span>Models", "<span class=\"section-number\">6.2. </span>Pipeline", "<span class=\"section-number\">6.14. </span>Prepare", "<span class=\"section-number\">6.8. </span>Scoring", "<span class=\"section-number\">6.15. </span>Stats", "<span class=\"section-number\">6.10. </span>Transformers", "<span class=\"section-number\">6.12. </span>Utils", "<span class=\"section-number\">6.16. </span>Vizualization", "<span class=\"section-number\">5.1. </span>Starting with julearn", "Multiclass Classification.", "Regression Analysis", "Stratified K-fold CV for regression analysis", "Working with pandas", "Grouped CV.", "Simple Binary Classification", "Computation times", "<span class=\"section-number\">5.2. </span>Model Comparison", "Simple Model Comparison", "Computation times", "<span class=\"section-number\">5.3. </span>Inspection", "Inspecting SVM models.", "Inspecting Random Forest models", "Preprocessing with variance threshold, zscore and PCA", "Inspecting the fold-wise predictions", "Computation times", "<span class=\"section-number\">5.4. </span>Complex Models", "Transforming target variable with z-score.", "Regression Analysis", "Tuning Multiple Hyperparameters Grids", "Tuning Hyperparameters", "Stacking Classification", "Computation times", "<span class=\"section-number\">5.5. </span>Confounds", "Confound Removal (model comparison)", "Return Confounds in Confound Removal", "Computation times", "<span class=\"section-number\">5.6. </span>Customization", "Custom Scoring Function for Regression", "Computation times", "<span class=\"section-number\">4. </span>Overview of available Pipeline Steps", "<span class=\"section-number\">7. </span>Contributing to julearn", "<span class=\"section-number\">5. </span>Examples", "<span class=\"section-number\">9. </span>Frequenly Asked Questions", "<span class=\"section-number\">1. </span>Getting started", "Welcome to julearn\u2019s documentation!", "<span class=\"section-number\">8. </span>Maintaining", "<span class=\"section-number\">3.7. </span>Connectome-based Predictive Modeling (CBPM)", "<span class=\"section-number\">3.2. </span>Cross-validation consistent Confound Removal", "<span class=\"section-number\">3.5. </span>Cross-validation splitters", "<span class=\"section-number\">3.3. </span>Hyperparameter Tuning", "<span class=\"section-number\">3. </span>Selected deeper topics", "<span class=\"section-number\">3.4. </span>Inspecting Models", "<span class=\"section-number\">3.6. </span>Stacking Models", "<span class=\"section-number\">3.1. </span>Applying preprocessing to the target", "<span class=\"section-number\">2.1. </span>Why cross validation?", "<span class=\"section-number\">2.2. </span>Data", "<span class=\"section-number\">2. </span>What you really need to know", "<span class=\"section-number\">2.5. </span>Model comparison", "<span class=\"section-number\">2.4. </span>Model evaluation", "<span class=\"section-number\">2.3. </span>Model Building", "<span class=\"section-number\">10. </span>What\u2019s new"], "terms": {"provid": [0, 1, 3, 5, 15, 16, 19, 24, 33, 53, 74, 86, 108, 118, 121, 122, 123, 125, 126, 128, 129, 131, 132, 133, 134], "import": [0, 29, 52, 83, 84, 85, 86, 87, 88, 91, 94, 96, 97, 100, 101, 102, 103, 104, 107, 108, 111, 114, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133], "modul": [0, 33, 74, 81, 108, 116, 117, 118, 127, 128], "class": [0, 1, 2, 3, 4, 5, 6, 7, 12, 13, 15, 16, 17, 18, 19, 22, 24, 27, 29, 30, 33, 41, 42, 43, 44, 45, 46, 47, 50, 52, 53, 54, 55, 58, 61, 62, 63, 64, 65, 66, 67, 68, 71, 73, 74, 75, 79, 80, 83, 85, 87, 88, 91, 94, 95, 97, 102, 103, 104, 107, 113, 121, 122, 123, 125, 131, 132, 133], "function": [0, 1, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 48, 49, 50, 51, 53, 56, 57, 58, 59, 60, 62, 68, 69, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 88, 91, 94, 95, 96, 106, 108, 110, 112, 114, 116, 117, 118, 120, 121, 128, 129, 130, 131, 132, 133, 134], "thi": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 74, 81, 83, 84, 85, 86, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 108, 111, 113, 114, 116, 117, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133], "page": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 118, 121, 122, 132], "i": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 81, 83, 84, 85, 86, 87, 88, 91, 94, 95, 96, 100, 101, 102, 103, 107, 108, 111, 113, 114, 117, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133], "refer": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 96, 113, 114, 118, 123, 130], "document": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 81, 85, 91, 95, 113, 122, 123, 131, 132, 133], "It": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 94, 102, 103, 117, 118, 120, 122, 123, 125, 132, 133], "onli": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 85, 94, 96, 102, 107, 108, 120, 121, 122, 123, 125, 126, 127, 128, 129, 131, 132, 133, 134], "explain": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 122, 133], "signatur": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69], "how": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 82, 87, 88, 91, 93, 94, 95, 99, 101, 108, 113, 114, 117, 118, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133], "pleas": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 74, 81, 96, 114, 132, 133], "what": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 86, 87, 94, 101, 103, 108, 113, 121, 122, 123, 125, 126, 127, 129, 132, 133], "you": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 83, 86, 91, 96, 108, 114, 116, 117, 118, 119, 120, 121, 122, 125, 126, 128, 129, 131, 132, 133], "realli": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 107, 118], "need": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 86, 87, 88, 91, 94, 100, 107, 108, 111, 114, 116, 117, 118, 120, 121, 122, 123, 125, 127, 128, 131, 132, 133, 134], "know": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 101, 103, 118, 122, 125, 128, 131, 133], "section": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 122, 129, 131, 132, 133, 134], "big": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69], "pictur": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69], "problem_typ": [1, 25, 31, 33, 83, 84, 85, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 108, 111, 120, 121, 123, 125, 126, 127, 131, 132, 133], "apply_to": [1, 5, 6, 7, 30, 42, 43, 44, 45, 46, 47, 53, 96, 100, 101, 104, 107, 108, 121, 125, 126, 127, 133], "continu": [1, 7, 30, 42, 44, 46, 47, 83, 84, 85, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 107, 108, 111, 120, 122, 123, 125, 126, 127, 129, 131, 132, 133], "creat": [1, 2, 3, 41, 83, 85, 86, 88, 94, 96, 100, 101, 104, 113, 114, 116, 119, 120, 121, 122, 123, 125, 126, 127, 131, 132, 133], "pipelin": [1, 2, 5, 6, 7, 14, 15, 24, 31, 32, 33, 34, 41, 42, 43, 44, 45, 46, 47, 52, 53, 70, 76, 94, 96, 97, 100, 101, 102, 103, 104, 107, 108, 118, 120, 121, 123, 125, 126, 127, 128, 129, 130, 131, 132], "As": [1, 86, 88, 91, 97, 104, 107, 108, 111, 114, 116, 120, 121, 122, 123, 125, 126, 131, 132, 133], "creation": 1, "bit": [1, 102, 117, 126, 132], "more": [1, 3, 33, 40, 83, 84, 85, 87, 88, 91, 94, 96, 101, 107, 111, 114, 117, 121, 122, 124, 125, 126, 128, 130, 131, 132, 133, 134], "complic": [1, 128], "than": [1, 33, 40, 85, 86, 94, 118, 121, 122, 124, 133], "just": [1, 114, 118, 122, 125, 130, 132, 133], "ad": [1, 33, 83, 84, 85, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 108, 111, 118, 120, 121, 123, 125, 126, 127, 129, 131, 132, 133], "step": [1, 2, 14, 29, 33, 40, 83, 84, 85, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 108, 111, 114, 118, 120, 121, 123, 125, 126, 127, 128, 129, 131, 132, 133], "helper": 1, "so": [1, 5, 6, 7, 24, 38, 41, 42, 43, 44, 45, 46, 47, 53, 85, 86, 88, 91, 96, 103, 113, 116, 122, 123, 127, 129, 132, 133], "user": [1, 5, 6, 7, 15, 16, 17, 18, 19, 22, 24, 27, 38, 41, 42, 43, 44, 45, 46, 47, 50, 53, 55, 58, 60, 96, 111, 117, 118, 121, 123, 128, 133, 134], "can": [1, 3, 15, 16, 17, 18, 19, 22, 24, 27, 29, 31, 33, 38, 40, 41, 45, 47, 50, 53, 58, 83, 84, 85, 86, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 107, 108, 111, 113, 114, 116, 118, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133], "easili": [1, 120, 122], "complex": [1, 94, 104, 115, 118, 121, 122, 125, 133], "sklearn": [1, 3, 5, 7, 15, 24, 29, 45, 47, 54, 83, 84, 85, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 108, 111, 120, 121, 122, 125, 126, 127, 131, 132], "object": [1, 2, 5, 6, 7, 15, 16, 17, 18, 19, 24, 25, 31, 33, 35, 38, 41, 42, 43, 44, 45, 46, 47, 48, 50, 53, 56, 83, 85, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 108, 116, 121, 123, 125, 126, 127, 132, 133], "paramet": [1, 2, 3, 5, 6, 7, 8, 9, 10, 14, 15, 16, 17, 18, 19, 20, 22, 24, 25, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 52, 53, 54, 56, 58, 60, 62, 68, 69, 76, 83, 84, 85, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 108, 111, 113, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134], "classif": [1, 27, 31, 33, 60, 82, 87, 89, 91, 94, 95, 97, 99, 102, 103, 105, 107, 114, 122, 123, 125, 126, 131, 132, 133], "regress": [1, 14, 15, 16, 27, 31, 33, 38, 60, 82, 89, 96, 99, 100, 104, 105, 108, 110, 112, 113, 120, 123, 124, 126, 127, 131, 132, 133, 134], "The": [1, 2, 3, 5, 6, 7, 8, 9, 10, 14, 15, 16, 17, 18, 19, 20, 22, 24, 25, 27, 29, 30, 31, 32, 33, 37, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 52, 53, 54, 56, 58, 60, 62, 68, 69, 83, 84, 85, 86, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 108, 111, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 125, 126, 129, 130, 131, 133], "problem": [1, 15, 16, 17, 18, 19, 25, 27, 31, 33, 83, 84, 85, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 108, 111, 120, 121, 122, 123, 125, 126, 127, 128, 131, 132, 133, 134], "type": [1, 3, 5, 6, 7, 8, 10, 14, 25, 27, 29, 30, 31, 32, 33, 42, 43, 44, 45, 46, 47, 53, 54, 70, 83, 84, 85, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 108, 111, 113, 114, 118, 120, 121, 123, 124, 125, 127, 128, 130, 131, 132], "which": [1, 5, 6, 15, 16, 22, 27, 30, 33, 41, 42, 43, 44, 45, 46, 47, 50, 54, 58, 81, 84, 85, 87, 88, 94, 96, 100, 101, 102, 103, 107, 108, 111, 114, 120, 121, 122, 123, 125, 126, 127, 128, 130, 132, 133], "should": [1, 5, 6, 15, 19, 22, 24, 27, 30, 38, 41, 42, 43, 44, 45, 46, 47, 50, 58, 85, 96, 101, 107, 113, 114, 119, 120, 122, 123, 124, 127, 128, 132, 133], "columntypeslik": [1, 30, 42, 43, 44, 45, 47], "option": [1, 2, 6, 7, 14, 15, 22, 24, 27, 30, 33, 38, 40, 41, 42, 43, 44, 45, 46, 47, 50, 54, 58, 60, 62, 68, 69, 74, 81, 86, 108, 116, 118, 119, 129, 132], "To": [1, 45, 47, 94, 96, 102, 114, 116, 118, 120, 121, 122, 123, 126, 128, 129, 131, 132, 133], "transform": [1, 2, 6, 29, 33, 34, 60, 70, 86, 96, 99, 105, 108, 118, 120, 121, 125, 127, 128, 133, 134], "appli": [1, 2, 5, 6, 7, 30, 33, 41, 42, 43, 44, 45, 46, 47, 53, 54, 83, 84, 85, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 108, 111, 118, 120, 121, 123, 124, 125, 126, 131, 132, 133], "specifi": [1, 19, 20, 22, 32, 33, 44, 47, 54, 56, 86, 94, 95, 101, 102, 108, 113, 117, 118, 120, 121, 123, 126, 127, 128, 129, 130, 132, 133], "add": [1, 2, 3, 22, 27, 50, 96, 97, 100, 101, 102, 103, 104, 107, 108, 114, 120, 121, 122, 123, 125, 126, 127, 129, 131, 132, 133, 134], "method": [1, 5, 6, 7, 15, 16, 17, 18, 24, 40, 41, 42, 43, 44, 45, 46, 47, 53, 85, 86, 96, 102, 108, 117, 120, 122, 125, 133], "default": [1, 2, 5, 6, 7, 14, 15, 16, 17, 18, 19, 22, 24, 27, 28, 30, 33, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 53, 54, 58, 60, 62, 68, 69, 91, 94, 96, 102, 103, 104, 107, 108, 113, 116, 117, 120, 121, 123, 131, 132, 133, 134], "__init__": [1, 2, 3, 5, 6, 7, 12, 13, 15, 16, 17, 18, 19, 24, 29, 30, 41, 42, 43, 44, 45, 46, 47, 52, 53, 54, 55, 64, 65, 66, 67], "name": [1, 2, 5, 6, 7, 8, 14, 15, 20, 21, 22, 24, 25, 26, 27, 30, 33, 35, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 53, 54, 56, 57, 58, 60, 83, 84, 85, 86, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 108, 111, 113, 114, 121, 123, 125, 126, 127, 128, 129, 131, 132, 133], "none": [1, 2, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 22, 24, 27, 29, 30, 31, 32, 33, 38, 40, 41, 42, 43, 44, 45, 46, 47, 50, 54, 58, 60, 62, 84, 85, 86, 87, 88, 91, 94, 95, 96, 100, 101, 102, 103, 104, 107, 108, 111, 120, 121, 123, 125, 126, 127, 131, 132, 133], "row_select_col_typ": [1, 6, 30, 42, 43, 44, 45, 46, 47], "row_select_v": [1, 6, 30, 42, 43, 44, 45, 46, 47], "param": [1, 2, 5, 6, 7, 24, 41, 42, 43, 44, 45, 46, 47, 48, 53, 56, 64, 65, 66, 67, 91, 117, 120, 121, 123, 125, 127, 133], "estimatorlik": [1, 34, 45], "an": [1, 2, 6, 15, 16, 17, 18, 19, 24, 31, 33, 35, 41, 42, 43, 44, 45, 46, 47, 83, 86, 87, 88, 91, 94, 95, 96, 103, 107, 114, 118, 120, 121, 122, 123, 125, 126, 127, 128, 129, 131, 132, 133, 134], "available_transform": 1, "available_model": 1, "str": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 15, 16, 17, 18, 20, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 54, 56, 57, 58, 60, 62, 68, 83, 84, 101, 113, 132, 133], "compat": [1, 15, 16, 17, 18, 19, 20, 22, 24, 33, 42, 43, 44, 45, 46, 47, 48, 54, 120, 132, 133, 134], "model": [1, 7, 13, 14, 19, 33, 36, 40, 47, 53, 54, 60, 69, 70, 77, 83, 84, 85, 87, 88, 92, 93, 96, 97, 98, 100, 101, 102, 103, 104, 106, 108, 109, 111, 115, 118, 121, 122, 124, 127, 128, 130], "If": [1, 2, 5, 6, 7, 14, 19, 20, 22, 24, 27, 31, 32, 33, 41, 42, 43, 44, 45, 46, 47, 50, 53, 56, 58, 60, 86, 88, 94, 96, 107, 111, 114, 117, 121, 122, 123, 129, 130, 132, 133], "obtain": [1, 2, 7, 53, 95, 121, 128], "from": [1, 2, 3, 5, 24, 29, 32, 33, 42, 47, 50, 52, 54, 58, 83, 84, 85, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 108, 111, 113, 114, 117, 118, 119, 120, 122, 123, 125, 126, 127, 129, 131, 132, 133], "repres": [1, 3, 19, 30, 47, 54, 85, 122, 132], "column": [1, 3, 5, 6, 7, 8, 10, 14, 24, 30, 32, 33, 42, 43, 44, 45, 46, 47, 53, 54, 83, 84, 85, 86, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 107, 108, 111, 113, 120, 121, 123, 125, 126, 127, 129, 131, 132, 133, 134], "list": [1, 3, 4, 5, 6, 7, 14, 21, 26, 29, 30, 32, 33, 36, 42, 43, 44, 45, 46, 47, 49, 54, 57, 102, 108, 113, 123, 125, 129, 132, 133], "attribut": [1, 5, 7, 9, 24, 41, 53, 125], "set": [1, 3, 4, 5, 6, 7, 15, 16, 17, 18, 19, 22, 24, 29, 30, 33, 38, 41, 42, 43, 44, 45, 46, 47, 53, 54, 55, 83, 84, 85, 86, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 108, 111, 115, 118, 119, 120, 121, 122, 123, 125, 126, 128, 130, 131, 132, 134], "columntyp": [1, 4, 5, 6, 7, 9, 30, 42, 43, 44, 45, 46, 47, 53, 54, 83, 84, 85, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 108, 111, 120, 121, 123, 125, 126, 127, 131, 132, 133], "select": [1, 6, 7, 24, 30, 42, 43, 44, 45, 46, 47, 70, 91, 96, 118, 120, 122, 123, 125, 129, 130, 131], "row": [1, 6, 30, 42, 43, 44, 45, 46, 47, 83, 84, 85, 86, 87, 91, 94, 96, 97, 100, 101, 108, 111, 121, 125, 127, 132, 133], "int": [1, 6, 15, 16, 17, 18, 19, 24, 30, 31, 32, 33, 40, 41, 42, 43, 44, 45, 46, 47, 60, 69, 132], "bool": [1, 5, 6, 7, 14, 15, 16, 22, 24, 27, 29, 30, 33, 34, 38, 41, 42, 43, 44, 45, 46, 47, 50, 53, 58, 60], "valu": [1, 5, 6, 7, 19, 24, 30, 33, 37, 41, 42, 43, 44, 45, 46, 47, 53, 54, 83, 84, 85, 86, 87, 88, 94, 96, 100, 101, 102, 103, 107, 111, 113, 120, 123, 125, 129, 132, 133], "": [1, 5, 6, 7, 15, 16, 24, 30, 33, 41, 42, 43, 44, 45, 46, 47, 53, 54, 60, 83, 84, 85, 86, 87, 91, 94, 96, 100, 101, 103, 107, 108, 111, 113, 114, 119, 120, 121, 122, 123, 125, 126, 128, 129, 130, 131, 132, 133], "train": [1, 6, 15, 16, 17, 18, 19, 24, 30, 33, 41, 42, 43, 44, 45, 46, 47, 54, 83, 84, 85, 87, 94, 96, 100, 101, 107, 111, 121, 122, 123, 125, 127, 128, 131, 132, 133], "mostli": [1, 2, 122], "includ": [1, 2, 14, 19, 95, 96, 108, 114, 117, 128], "hyperparamet": [1, 2, 33, 60, 91, 96, 99, 101, 104, 105, 107, 108, 118, 120, 121, 124, 125, 126, 130, 131, 134], "ani": [1, 2, 7, 22, 24, 27, 29, 30, 31, 32, 33, 38, 50, 52, 53, 58, 85, 120, 122, 125, 133], "other": [1, 2, 15, 22, 24, 27, 50, 81, 86, 88, 101, 103, 108, 114, 116, 120, 121, 122, 130, 131, 133], "initi": [1, 2, 22, 23, 40, 50, 51, 58, 59, 107, 121, 133], "multipl": [1, 15, 16, 17, 18, 19, 33, 60, 96, 99, 105, 122, 123, 132, 133, 134], "lead": [1, 117, 121, 122, 128, 133], "search": [1, 21, 22, 33, 96, 102, 103, 118, 123, 125, 126], "return": [1, 2, 3, 5, 6, 7, 8, 9, 10, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, 29, 32, 33, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 85, 94, 95, 106, 109, 111, 133], "its": [1, 5, 23, 51, 59, 114, 123, 125, 126, 128, 130, 133], "last": [1, 96, 101, 108, 119, 121, 133], "rais": [1, 15, 20, 22, 24, 27, 31, 32, 38, 50, 56, 58, 60, 62, 129, 134], "valueerror": [1, 20, 22, 27, 31, 32, 38, 50, 56, 58, 62], "valid": [1, 2, 15, 16, 17, 18, 19, 31, 32, 33, 76, 83, 84, 95, 101, 107, 108, 113, 118, 120, 123, 124, 125, 129, 130, 131, 133], "targetpipelinecr": [1, 100, 113, 121, 127], "target": [1, 2, 6, 7, 15, 16, 17, 18, 19, 24, 29, 31, 32, 33, 34, 41, 42, 43, 44, 45, 46, 47, 60, 70, 83, 84, 85, 86, 87, 88, 91, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 107, 108, 111, 113, 118, 120, 122, 123, 124, 125, 126, 129, 131, 132, 133, 134], "properti": [1, 3, 7, 13, 29, 53, 54, 122], "get": [1, 3, 5, 6, 7, 10, 15, 16, 17, 18, 19, 20, 24, 25, 29, 35, 41, 42, 43, 44, 45, 46, 47, 48, 53, 54, 56, 83, 84, 87, 94, 95, 96, 101, 108, 118, 120, 125, 126, 131, 132], "have": [1, 5, 6, 7, 15, 16, 24, 32, 41, 42, 43, 44, 45, 46, 47, 53, 83, 86, 87, 88, 91, 94, 96, 102, 103, 107, 108, 113, 114, 116, 117, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133], "been": [1, 55, 120, 121, 122, 125], "has_model": 1, "whether": [1, 14, 15, 16, 22, 27, 33, 38, 41, 47, 50, 58, 87, 91, 94, 114, 121], "ha": [1, 15, 24, 33, 41, 55, 83, 84, 85, 86, 87, 88, 91, 94, 95, 97, 101, 104, 107, 111, 114, 120, 121, 122, 123, 125, 128, 132, 133], "copi": [1, 3, 85, 108, 114, 125], "classmethod": 1, "from_list": 1, "model_param": [1, 33, 91, 134], "union": [1, 4, 29, 30, 34, 54, 63], "dict": [1, 5, 6, 7, 24, 30, 32, 33, 41, 42, 43, 44, 45, 46, 47, 53], "kei": [1, 32, 33, 42, 46, 86, 96, 129], "being": [1, 114, 117, 132, 133], "pieplin": 1, "split": [1, 15, 16, 17, 18, 19, 24, 33, 83, 84, 85, 88, 91, 94, 100, 101, 111, 121, 122, 123, 125, 128, 132], "least": [1, 15, 16, 17, 18, 33, 85, 107, 113, 122], "two": [1, 40, 85, 86, 88, 91, 94, 95, 96, 97, 101, 102, 104, 107, 108, 111, 114, 117, 120, 121, 122, 123, 126, 128, 131, 133], "same": [1, 15, 16, 33, 46, 60, 88, 91, 94, 102, 103, 107, 111, 114, 118, 120, 121, 122, 123, 126, 128, 131, 132, 133], "consid": [1, 108, 114, 119, 121, 123, 129, 132], "point": [1, 107, 114, 121, 122, 128, 130, 131, 132, 133], "tune": [1, 30, 33, 60, 99, 105, 118, 120, 121, 124, 125, 126, 127, 133, 134], "one": [1, 29, 33, 40, 42, 43, 44, 46, 52, 84, 85, 86, 87, 94, 96, 100, 101, 102, 103, 104, 108, 111, 113, 114, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134], "each": [1, 5, 6, 7, 15, 16, 17, 18, 19, 24, 32, 33, 41, 42, 43, 44, 45, 46, 47, 53, 54, 83, 84, 85, 86, 87, 94, 95, 96, 97, 101, 107, 111, 113, 114, 120, 121, 122, 123, 124, 125, 128, 131, 132, 133], "recurs": 1, "thu": [1, 5, 94, 128], "mani": [1, 41, 87, 94, 121, 122, 132, 133], "all": [1, 3, 14, 21, 22, 26, 33, 36, 41, 42, 46, 47, 49, 54, 57, 83, 84, 87, 88, 94, 95, 96, 97, 101, 107, 108, 111, 113, 114, 119, 120, 121, 123, 124, 125, 127, 128, 129, 130, 132, 133], "configur": [1, 6, 41, 42, 43, 44, 45, 46, 47, 60, 121, 125, 126], "A": [1, 5, 6, 7, 15, 16, 17, 18, 19, 21, 24, 26, 32, 33, 41, 42, 43, 44, 45, 46, 47, 49, 53, 57, 85, 86, 87, 88, 94, 102, 103, 104, 120, 121, 122, 123, 128, 129, 133], "without": [1, 22, 27, 38, 50, 58, 85, 87, 103, 107, 108, 113, 128], "repeat": [1, 17, 18, 83, 84, 101, 122, 123, 125, 128, 132], "to_pipelin": [1, 2], "x_type": [1, 32, 33, 42, 43, 44, 46, 47, 83, 84, 85, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 108, 111, 120, 121, 123, 125, 126, 127, 129, 131, 132, 133], "search_param": [1, 33, 102, 103, 134], "data": [1, 5, 6, 7, 14, 15, 16, 17, 18, 19, 24, 29, 31, 32, 33, 41, 42, 43, 44, 45, 46, 47, 52, 53, 54, 76, 83, 84, 85, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 108, 111, 113, 118, 120, 121, 122, 123, 125, 126, 127, 128, 130, 131, 132, 133], "inspect": [1, 33, 60, 70, 96, 98, 101, 108, 115, 118, 124, 128, 129, 131, 132], "fold": [1, 13, 15, 16, 17, 18, 33, 60, 82, 83, 84, 89, 93, 94, 95, 98, 100, 101, 107, 108, 111, 121, 122, 125, 127, 128, 132, 133], "wise": [1, 13, 33, 60, 93, 98, 128], "predict": [1, 7, 12, 13, 24, 32, 33, 37, 47, 53, 54, 60, 83, 84, 85, 86, 87, 88, 91, 93, 94, 98, 100, 101, 104, 108, 111, 113, 118, 121, 122, 124, 125, 126, 127, 128, 131, 132, 133], "preprocess": [1, 2, 33, 60, 83, 84, 85, 87, 88, 91, 93, 94, 95, 98, 101, 107, 108, 111, 118, 120, 124, 129, 130, 132], "varianc": [1, 14, 33, 60, 93, 98, 113, 122, 125, 133], "threshold": [1, 14, 33, 41, 47, 54, 60, 93, 98, 113, 120], "zscore": [1, 14, 33, 60, 83, 84, 85, 87, 88, 91, 93, 94, 95, 97, 98, 100, 102, 103, 104, 107, 111, 113, 123, 125, 127, 131, 132, 133], "pca": [1, 14, 33, 60, 93, 98, 101, 108, 113, 123, 133], "variabl": [1, 2, 15, 16, 17, 18, 19, 31, 32, 33, 60, 84, 85, 87, 94, 99, 101, 105, 108, 111, 121, 122, 123, 125, 127, 132, 133, 134], "z": [1, 2, 33, 60, 94, 99, 105, 119, 125, 127, 132, 133], "score": [1, 2, 7, 12, 13, 24, 33, 40, 53, 60, 69, 70, 83, 84, 85, 87, 88, 91, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 107, 108, 110, 112, 118, 120, 121, 123, 125, 126, 127, 130, 133, 134], "grid": [1, 33, 60, 94, 99, 103, 105, 124, 125, 126, 134], "stack": [1, 33, 60, 99, 105, 107, 113, 118, 124], "analysi": [1, 14, 16, 33, 60, 82, 89, 94, 99, 100, 105, 111, 113, 122, 133], "confound": [1, 2, 14, 19, 33, 42, 47, 54, 60, 86, 109, 113, 115, 118, 124, 131, 134], "remov": [1, 2, 14, 19, 33, 42, 47, 54, 60, 96, 106, 109, 113, 114, 118, 124, 131, 134], "comparison": [1, 19, 33, 40, 60, 69, 92, 106, 109, 115, 118, 130], "connectom": [1, 33, 113, 118, 124], "base": [1, 15, 16, 19, 29, 33, 40, 52, 70, 113, 116, 118, 121, 124, 125, 128, 129, 130, 133], "cbpm": [1, 33, 113, 118, 124, 134], "evalu": [1, 7, 33, 36, 53, 77, 88, 94, 118, 122, 125, 128, 129, 130, 131, 133], "build": [1, 33, 83, 87, 94, 99, 118, 119, 120, 126, 127, 128, 130, 131], "cross": [1, 2, 15, 16, 17, 18, 19, 31, 33, 83, 84, 95, 101, 107, 108, 113, 118, 120, 123, 124, 125, 129, 130, 131, 133], "consist": [1, 2, 24, 31, 33, 118, 120, 122, 124, 128, 129, 131, 133, 134], "analog": 2, "pipelinecr": [2, 33, 96, 97, 100, 101, 102, 103, 104, 107, 108, 113, 120, 121, 123, 125, 126, 127, 130, 131, 132], "allow": [2, 15, 22, 24, 27, 38, 50, 58, 88, 107, 116, 120, 121, 123, 129, 130, 133, 134], "target_pipelin": [2, 121, 127], "jutargetpipelin": [2, 53, 100, 121, 127], "easi": [2, 86, 118, 121, 123, 125, 126, 130, 131], "wai": [2, 88, 91, 116, 118, 121, 122, 123, 125, 126, 128, 131, 132, 133], "out": [2, 21, 45, 47, 48, 57, 91, 108, 113, 118, 119, 121, 122, 123, 125, 126, 130, 131, 132, 133], "us": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 37, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 74, 81, 82, 83, 84, 85, 86, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 111, 113, 114, 115, 117, 118, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134], "column_typ": [3, 125], "hold": [3, 132], "regard": [3, 129, 132], "pd": [3, 5, 6, 7, 14, 24, 29, 33, 40, 42, 43, 44, 45, 46, 47, 52, 53, 54, 69, 83, 84, 85, 86, 94, 95, 96, 100, 101, 107, 111, 120, 121, 126, 127, 131], "datafram": [3, 5, 6, 7, 14, 24, 29, 32, 33, 40, 41, 42, 43, 44, 45, 46, 47, 52, 53, 54, 69, 83, 84, 85, 86, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 108, 111, 118, 120, 121, 123, 125, 126, 127, 128, 129, 131, 132, 133, 134], "One": [3, 24, 86, 121, 123, 126, 133], "instead": [3, 15, 16, 19, 22, 24, 27, 38, 41, 50, 58, 85, 121, 122, 123, 126, 134], "also": [3, 83, 85, 86, 88, 91, 96, 101, 102, 108, 114, 116, 120, 121, 123, 125, 126, 128, 129, 131, 132, 133], "itself": [3, 126], "self": [3, 5, 6, 15, 24, 29, 41, 42, 43, 44, 45, 46, 47, 52, 53, 55, 85, 107], "updat": [3, 5, 6, 7, 15, 24, 41, 42, 43, 44, 45, 46, 47, 53, 114, 117, 134], "pattern": [3, 11, 83, 84, 85, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 108, 111, 120, 121, 123, 125, 126, 127, 131, 132, 133], "regex": 3, "match": [3, 45, 86], "to_type_selector": 3, "selector": 3, "usabl": [3, 133], "compos": 3, "columntransform": [3, 125], "callabl": [3, 34, 35, 38, 41, 134], "alia": [4, 15, 24, 61, 63], "needed_typ": [5, 6, 7, 29, 30, 45, 54], "estim": [5, 6, 7, 15, 24, 30, 33, 34, 35, 38, 41, 42, 43, 44, 45, 46, 47, 53, 94, 95, 96, 102, 103, 104, 107, 108, 118, 120, 121, 122, 123, 124, 125, 127, 128, 130, 131, 133], "everi": [5, 27, 32, 33, 50, 119, 125, 129, 133], "awar": [5, 117], "thei": [5, 7, 24, 53, 83, 84, 85, 86, 87, 88, 91, 94, 95, 96, 97, 100, 102, 103, 107, 111, 116, 120, 123, 125, 126, 132, 133], "abl": [5, 128, 131], "main": [5, 70, 107, 114, 118, 119, 121, 122, 123, 128], "differ": [5, 15, 16, 17, 18, 19, 27, 85, 86, 88, 91, 96, 101, 102, 103, 104, 107, 108, 116, 117, 120, 121, 122, 123, 125, 126, 128, 129, 131, 132, 133], "between": [5, 19, 31, 84, 107, 114, 120, 121, 122, 126, 128, 131, 133], "baseestim": [5, 134], "purpos": [5, 85, 86, 132], "That": [5, 120, 121, 122, 123, 125, 133], "ar": [5, 6, 7, 15, 16, 17, 18, 22, 24, 27, 29, 33, 38, 40, 41, 42, 43, 44, 45, 46, 47, 50, 52, 53, 54, 58, 83, 84, 85, 86, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 107, 108, 111, 114, 115, 116, 117, 119, 120, 121, 122, 123, 125, 126, 128, 129, 130, 131, 132, 133, 134], "get_needed_typ": [5, 6, 7, 42, 43, 44, 45, 46, 47, 53, 67], "get_apply_to": [5, 6, 7, 42, 43, 44, 45, 46, 47, 53, 67], "filter_column": [5, 6, 7, 42, 43, 44, 45, 46, 47, 53, 104, 113, 126], "x": [5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 24, 29, 32, 33, 35, 38, 41, 42, 43, 44, 45, 46, 47, 52, 53, 54, 64, 65, 67, 83, 84, 85, 86, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 108, 111, 119, 120, 121, 122, 123, 125, 126, 127, 129, 131, 132, 133], "panda": [5, 6, 7, 31, 32, 33, 41, 42, 43, 44, 45, 46, 47, 53, 82, 83, 84, 85, 87, 88, 89, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 111, 117, 118, 120, 121, 125, 126, 127, 129, 131, 132], "filter": [5, 6, 7, 42, 43, 44, 45, 46, 47, 53, 113, 118, 133], "get_metadata_rout": [5, 6, 7, 15, 16, 17, 18, 19, 24, 41, 42, 43, 44, 45, 46, 47, 53], "metadata": [5, 6, 7, 15, 16, 17, 18, 19, 24, 41, 42, 43, 44, 45, 46, 47, 53, 86], "rout": [5, 6, 7, 15, 16, 17, 18, 19, 24, 41, 42, 43, 44, 45, 46, 47, 53], "check": [5, 6, 7, 9, 15, 16, 17, 18, 19, 24, 29, 31, 34, 41, 42, 43, 44, 45, 46, 47, 53, 80, 86, 87, 94, 96, 107, 114, 118, 119, 123, 132, 134], "guid": [5, 6, 7, 15, 16, 17, 18, 19, 24, 41, 42, 43, 44, 45, 46, 47, 53, 114], "mechan": [5, 6, 7, 15, 16, 17, 18, 19, 24, 41, 42, 43, 44, 45, 46, 47, 53, 128], "work": [5, 6, 7, 15, 16, 17, 18, 19, 24, 29, 41, 42, 43, 44, 45, 46, 47, 52, 53, 82, 83, 84, 85, 87, 88, 89, 91, 94, 95, 96, 97, 100, 102, 103, 107, 108, 111, 114, 120, 121, 122, 123, 125, 126, 131, 134], "metadatarequest": [5, 6, 7, 15, 16, 17, 18, 19, 24, 41, 42, 43, 44, 45, 46, 47, 53], "encapsul": [5, 6, 7, 15, 16, 17, 18, 19, 24, 41, 42, 43, 44, 45, 46, 47, 53], "inform": [5, 6, 7, 15, 16, 17, 18, 19, 24, 29, 33, 41, 42, 43, 44, 45, 46, 47, 52, 53, 83, 84, 85, 86, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 108, 111, 114, 120, 121, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134], "get_param": [5, 6, 7, 24, 41, 42, 43, 44, 45, 46, 47, 53, 64, 65, 66, 67, 125], "deep": [5, 6, 7, 24, 41, 42, 43, 44, 45, 46, 47, 53, 64, 65, 66, 67, 121], "true": [5, 6, 7, 15, 16, 22, 24, 27, 29, 33, 37, 38, 41, 42, 43, 44, 45, 46, 47, 50, 53, 58, 64, 65, 66, 67, 83, 84, 85, 88, 94, 97, 100, 101, 107, 108, 111, 121, 122, 125, 127, 128, 132, 133], "contain": [5, 6, 7, 24, 32, 33, 36, 40, 41, 42, 43, 44, 45, 46, 47, 53, 69, 83, 84, 85, 88, 100, 101, 111, 122, 125, 129, 132], "subobject": [5, 6, 7, 24, 41, 42, 43, 44, 46, 47, 53], "map": [5, 6, 7, 24, 41, 42, 43, 44, 45, 46, 47, 53, 84, 108], "set_param": [5, 6, 7, 24, 41, 42, 43, 44, 45, 46, 47, 53, 64, 65, 66, 67], "simpl": [5, 6, 7, 24, 33, 40, 41, 42, 43, 44, 45, 46, 47, 53, 60, 69, 82, 89, 90, 92, 94, 95, 96, 97, 102, 103, 107, 108, 113, 114, 118, 120, 122, 123, 125, 126, 128, 133], "well": [5, 6, 7, 24, 41, 42, 43, 44, 45, 46, 47, 53, 120, 121, 122, 123, 125, 126, 128, 129, 130, 131, 133], "nest": [5, 6, 7, 24, 41, 42, 43, 44, 45, 46, 47, 53, 120, 123, 125, 128], "latter": [5, 6, 7, 24, 41, 42, 43, 44, 45, 46, 47, 53], "form": [5, 6, 7, 24, 41, 42, 43, 44, 45, 46, 47, 53, 129, 133], "compon": [5, 6, 7, 24, 41, 42, 43, 44, 45, 46, 47, 53, 96, 101, 113, 133], "__": [5, 6, 7, 24, 41, 42, 43, 44, 45, 46, 47, 53, 83, 84, 85, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 108, 111, 120, 121, 123, 126, 127, 131, 132, 133], "possibl": [5, 6, 7, 22, 24, 27, 38, 41, 42, 43, 44, 45, 46, 47, 50, 53, 58, 86, 118, 122, 123, 128, 132, 133], "instanc": [5, 6, 7, 15, 16, 17, 18, 19, 24, 41, 42, 43, 44, 45, 46, 47, 53, 121, 125, 133], "fit": [6, 7, 24, 29, 33, 41, 42, 43, 44, 45, 46, 47, 52, 53, 54, 64, 65, 66, 67, 94, 95, 101, 108, 113, 120, 121, 124, 125, 128, 133], "y": [6, 7, 12, 13, 15, 16, 17, 18, 19, 24, 29, 31, 32, 33, 35, 38, 41, 42, 43, 44, 45, 46, 47, 52, 53, 54, 64, 65, 66, 67, 83, 84, 85, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 108, 111, 113, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 131, 132, 133], "fit_param": [6, 7, 41, 42, 43, 44, 45, 46, 47, 53], "fit_transform": [6, 29, 41, 42, 43, 44, 45, 46, 47, 52, 54], "version": [6, 15, 19, 24, 41, 42, 43, 44, 45, 46, 47, 83, 84, 85, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 111, 114, 117, 118, 122, 125, 126, 134], "arrai": [6, 7, 15, 16, 17, 18, 19, 33, 41, 42, 43, 44, 45, 46, 47, 53, 83, 125], "like": [6, 7, 15, 16, 17, 18, 19, 27, 41, 42, 43, 44, 45, 46, 47, 50, 53, 91, 101, 117, 122, 123, 125, 128, 129, 132, 133], "shape": [6, 7, 15, 16, 17, 18, 19, 41, 42, 43, 44, 45, 46, 47, 53, 83, 94], "n_sampl": [6, 7, 15, 16, 17, 18, 19, 41, 42, 43, 44, 45, 46, 47, 53, 96, 120, 126], "n_featur": [6, 15, 16, 17, 18, 19, 41, 42, 43, 44, 45, 46, 47, 96, 120, 121, 126], "input": [6, 29, 31, 32, 33, 41, 42, 43, 44, 45, 46, 47, 52, 53, 54, 76, 83, 84, 85, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 108, 111, 120, 121, 123, 125, 126, 127, 130, 131, 132, 133], "sampl": [6, 7, 15, 16, 17, 18, 19, 24, 32, 40, 41, 42, 43, 44, 45, 46, 47, 53, 83, 84, 85, 86, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 108, 111, 120, 121, 122, 123, 125, 126, 127, 131, 132, 133], "n_output": [6, 41, 42, 43, 44, 45, 46, 47], "unsupervis": [6, 41, 42, 43, 44, 45, 46, 47], "addit": [6, 7, 24, 33, 41, 42, 43, 44, 45, 46, 47, 53, 117, 118, 120, 125, 126, 128, 131, 132, 133], "x_new": [6, 41, 42, 43, 44, 45, 46, 47], "ndarrai": [6, 7, 15, 16, 17, 18, 19, 24, 41, 42, 43, 44, 45, 46, 47, 53], "n_features_new": [6, 41, 42, 43, 44, 45, 46, 47], "set_output": [6, 41, 42, 43, 44, 45, 46, 47], "output": [6, 14, 15, 16, 17, 18, 19, 33, 40, 41, 42, 43, 44, 45, 46, 47, 60, 69, 85, 107, 114, 121, 125, 128, 129, 130, 133], "see": [6, 15, 16, 17, 24, 25, 32, 33, 41, 42, 43, 44, 45, 46, 47, 60, 74, 81, 83, 84, 85, 86, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 108, 111, 113, 114, 116, 121, 122, 123, 125, 126, 128, 129, 130, 131, 132, 133], "introduc": [6, 41, 42, 43, 44, 45, 46, 47, 86, 121], "api": [6, 41, 42, 43, 44, 45, 46, 47, 70, 114, 118, 126, 133], "exampl": [6, 41, 42, 43, 44, 45, 46, 47, 82, 83, 84, 85, 86, 87, 88, 90, 91, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 106, 107, 108, 110, 111, 116, 117, 118, 120, 121, 122, 123, 125, 126, 127, 128, 129, 131, 132, 133, 134], "format": [6, 41, 42, 43, 44, 45, 46, 47, 60, 84, 101, 102, 103, 107, 114, 119, 121], "unchang": [6, 15, 24, 41, 42, 43, 44, 45, 46, 47], "wrap": [7, 34, 53, 134], "make": [7, 15, 16, 17, 18, 19, 24, 84, 86, 87, 94, 96, 101, 102, 103, 107, 114, 117, 119, 120, 121, 122, 123, 125, 126, 127, 129, 131, 132, 133, 134], "modellik": [7, 24, 25, 27, 47, 53, 54], "datalik": [7, 24, 29, 44, 52, 53, 54], "pass": [7, 15, 16, 17, 18, 19, 24, 53, 102, 113, 114, 127, 132, 133], "float": [7, 19, 24, 32, 33, 37, 41, 47, 54, 69, 83], "predict_proba": [7, 12, 24, 53], "comput": [7, 24, 37, 41, 53, 88, 101, 111, 128, 133], "probabl": [7, 24, 33, 53, 125], "outcom": [7, 24, 53, 133], "np": [7, 15, 16, 17, 18, 19, 24, 41, 53, 83, 84, 87, 94, 101, 102, 103, 120, 121, 122, 125, 126], "correspond": [7, 24, 33, 53, 125], "sort": [7, 24, 53, 87, 94, 113], "order": [7, 15, 16, 24, 53, 86, 87, 94, 107, 108, 114, 121, 123, 126, 128, 133], "appear": [7, 24, 53, 132], "classes_": [7, 24, 53], "decision_funct": [7, 12, 53, 94, 134], "decis": [7, 53, 86, 87, 94, 102, 103, 121, 125], "n_class": [7, 53], "1": [7, 15, 19, 24, 32, 33, 45, 53, 83, 84, 85, 86, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 108, 111, 117, 119, 120, 121, 122, 123, 125, 126, 127, 129, 131, 132, 133], "2": [7, 15, 16, 17, 18, 19, 24, 53, 83, 84, 85, 86, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 108, 111, 117, 118, 121, 122, 123, 125, 126, 127, 129, 131, 132, 133], "predict_log_proba": [7, 12], "kwarg": [7, 24, 25, 45, 52, 55, 64, 65, 66, 67, 85, 107], "new_typ": 8, "chang": [8, 15, 19, 24, 42, 81, 85, 103, 107, 113, 114, 117, 122, 132], "new": [8, 15, 24, 94, 100, 108, 114, 118, 128, 133], "attr": 9, "ensur": [9, 42, 44, 46, 47, 83, 122, 125], "cv": [12, 13, 15, 16, 17, 18, 19, 24, 31, 32, 33, 60, 82, 83, 84, 88, 89, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 108, 111, 113, 120, 121, 122, 123, 125, 126, 127, 131, 132, 133, 134], "func": [12, 133], "group": [12, 13, 15, 16, 17, 18, 19, 31, 32, 33, 60, 82, 85, 89, 94, 101, 118, 120, 124, 132], "until": [14, 94, 96, 101, 108, 117, 131], "with_column_typ": [14, 94], "fals": [14, 15, 16, 22, 24, 27, 33, 38, 43, 47, 50, 58, 60, 84, 85, 87, 88, 91, 94, 95, 96, 100, 101, 102, 103, 104, 108, 111, 120, 121, 123, 125, 126, 127, 132, 133], "certain": [14, 129, 132, 133], "inclus": [14, 108], "featur": [14, 15, 16, 17, 18, 19, 29, 32, 33, 41, 42, 43, 44, 45, 46, 47, 52, 54, 83, 84, 85, 86, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 108, 111, 114, 117, 118, 120, 123, 124, 125, 127, 128, 130, 131, 132], "svm": [14, 33, 60, 83, 88, 91, 93, 97, 98, 102, 103, 104, 113, 123, 125, 126, 127, 131, 132, 133], "n_bin": [15, 16, 17, 18, 85, 122], "bin": [15, 16, 17, 18, 85, 122], "n_split": [15, 16, 17, 18, 19, 24, 83, 84, 85, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 108, 111, 120, 121, 122, 123, 125, 126, 127, 131, 132, 133], "5": [15, 16, 17, 18, 19, 33, 83, 84, 85, 86, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 108, 111, 118, 120, 121, 122, 123, 125, 126, 127, 128, 129, 131, 132, 133], "shuffl": [15, 16, 19, 84, 85, 87, 88, 91, 94, 95, 96, 100, 101, 102, 103, 104, 108, 111, 120, 121, 122, 123, 125, 126, 127, 132, 133], "random_st": [15, 16, 17, 18, 19, 24, 83, 84, 85, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 108, 111, 120, 121, 122, 123, 125, 126, 127, 131, 132, 133], "stratifi": [15, 16, 17, 18, 19, 33, 60, 82, 83, 89, 122, 132, 134], "k": [15, 16, 17, 18, 33, 60, 82, 83, 84, 87, 89, 94, 100, 101, 107, 113, 122, 123, 128, 132], "where": [15, 16, 17, 18, 19, 86, 119, 122, 125, 133, 134], "stratif": [15, 16, 19, 85, 87, 124], "done": [15, 16, 19, 102, 114, 117, 119, 125, 126, 131, 132, 133], "discret": [15, 16, 122, 133], "fix": [15, 16, 114, 122, 134], "number": [15, 16, 17, 18, 19, 33, 83, 84, 85, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 108, 111, 119, 120, 121, 122, 123, 125, 126, 127, 128, 131, 132, 133], "quantil": [15, 16, 17, 18, 122], "either": [15, 16, 17, 18, 40, 94, 96, 113, 114, 121, 133], "In": [15, 16, 17, 18, 41, 85, 86, 87, 88, 94, 95, 107, 108, 111, 114, 118, 120, 121, 122, 125, 126, 128, 129, 131, 132, 133], "first": [15, 16, 17, 18, 40, 62, 68, 83, 87, 88, 91, 94, 96, 100, 101, 102, 103, 107, 108, 114, 120, 121, 123, 126, 127, 129, 130, 131, 132, 133], "case": [15, 16, 17, 18, 24, 32, 33, 41, 85, 86, 94, 100, 111, 114, 120, 121, 122, 129, 132, 133], "second": [15, 16, 17, 18, 40, 83, 84, 85, 86, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 108, 111, 120, 121, 122, 123, 125, 126, 127, 129, 131, 132, 133], "must": [15, 16, 17, 18, 40, 45, 69, 86, 87, 94, 101, 114, 122, 123, 129, 133], "befor": [15, 16, 33, 53, 83, 86, 107, 111, 114, 117, 119, 123, 132, 133, 134], "batch": [15, 16], "note": [15, 16, 17, 18, 19, 24, 33, 96, 107, 114, 121, 123, 126], "within": [15, 16, 114, 120, 121, 126, 128, 129, 132], "implement": [15, 16, 41, 118, 120, 121, 122, 126, 134], "approxim": [15, 16], "distribut": [15, 16, 19, 40, 83, 85, 87, 88, 91, 94, 95, 97, 102, 103, 104, 107, 113, 121, 122, 123, 125, 131, 132, 133], "global": [15, 16], "perform": [15, 16, 29, 33, 40, 83, 84, 85, 87, 88, 90, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 111, 114, 120, 121, 122, 123, 125, 128, 130, 131, 132, 133], "randomst": [15, 16, 17, 18, 19], "when": [15, 16, 24, 85, 107, 113, 114, 116, 120, 121, 122, 123, 127, 129, 132, 133, 134], "affect": [15, 16, 125], "indic": [15, 16, 17, 18, 19, 33, 43, 47, 94, 113, 122, 125, 132, 133], "control": [15, 16, 17, 18, 19, 86, 87, 94, 102, 103, 110, 121, 126, 128], "random": [15, 16, 17, 18, 19, 24, 33, 60, 87, 88, 91, 93, 96, 98, 102, 103, 107, 113, 121, 122, 123, 125, 126, 131, 133], "otherwis": [15, 16, 19, 24, 60], "leav": [15, 16, 122], "reproduc": [15, 16, 17, 18, 19, 24, 33, 132], "across": [15, 16, 17, 18, 19, 84, 95, 100, 101, 111, 122, 125, 132], "call": [15, 16, 17, 18, 19, 22, 35, 38, 116, 121, 122, 123, 125, 126, 129, 133], "splitter": [15, 16, 17, 18, 19, 24, 33, 118, 124, 130, 131], "mai": [15, 16, 17, 18, 19, 81, 120, 121, 125, 126], "result": [15, 16, 17, 18, 19, 29, 33, 52, 86, 94, 107, 108, 121, 122, 125, 128, 129, 131, 132], "ident": [15, 16, 17, 18, 19, 122], "integ": [15, 16, 17, 18, 19, 132], "gener": [15, 16, 17, 18, 19, 33, 45, 82, 83, 84, 85, 86, 87, 88, 90, 91, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 106, 107, 108, 110, 111, 114, 119, 122, 127, 128, 132, 133], "test": [15, 16, 17, 18, 19, 24, 33, 40, 54, 83, 84, 85, 91, 94, 100, 101, 103, 107, 118, 121, 122, 123, 125, 128, 131, 132, 134], "suffici": [15, 16, 19, 85], "henc": [15, 16, 19], "zero": [15, 16, 17, 18, 19, 96], "placehold": [15, 16, 17, 18, 19], "actual": [15, 16, 19, 41, 47, 83, 84, 101, 108, 111, 125], "supervis": [15, 16, 17, 18, 19, 133], "learn": [15, 16, 17, 18, 19, 20, 22, 33, 41, 42, 44, 45, 46, 47, 48, 52, 86, 88, 94, 95, 111, 113, 114, 117, 118, 120, 121, 122, 123, 125, 126, 128, 129, 130, 131, 132, 133, 134], "label": [15, 16, 17, 18, 19, 32, 33, 83, 88, 128, 129, 132, 133], "while": [15, 16, 17, 18, 19, 33, 95, 102, 107, 118, 121, 122, 126, 127, 128, 133], "dataset": [15, 16, 17, 18, 19, 83, 84, 85, 86, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 108, 111, 114, 120, 121, 122, 123, 125, 126, 127, 128, 129, 131, 132, 133], "yield": [15, 16, 17, 18, 19, 33, 125, 132], "get_n_split": [15, 16, 17, 18, 19], "iter": [15, 16, 17, 18, 19, 33, 96, 107, 120, 125, 132, 134], "alwai": [15, 16, 17, 18, 19, 88, 102, 103, 107, 114, 121, 123, 126, 131, 132, 133], "ignor": [15, 16, 17, 18, 19, 24, 108, 111], "exist": [15, 16, 17, 18, 19, 24, 38, 60], "set_split_request": 15, "request": [15, 24, 97, 118], "relev": [15, 24, 125], "enable_metadata_rout": [15, 24], "set_config": [15, 24], "meta": [15, 24], "error": [15, 22, 24, 27, 32, 33, 38, 50, 58, 60, 62, 83, 84, 86, 100, 101, 111, 114, 122, 128, 131, 134], "given": [15, 24, 47, 91, 94, 107, 113, 121, 129, 132, 133], "origin": [15, 24, 41, 62, 114, 119], "util": [15, 24, 70, 83, 84, 85, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 111, 114, 118, 120, 125, 126, 131], "metadata_rout": [15, 24], "retain": [15, 24], "some": [15, 24, 85, 86, 87, 94, 95, 114, 117, 120, 121, 122, 123, 125, 126, 128, 129], "3": [15, 24, 83, 84, 85, 86, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 108, 111, 114, 117, 118, 120, 121, 122, 123, 125, 126, 127, 129, 131, 132, 133], "sub": [15, 24, 130], "e": [15, 24, 27, 33, 41, 47, 54, 60, 113, 114, 117, 119, 120, 121, 122, 123, 125, 132, 133], "g": [15, 24, 27, 33, 60, 101, 113, 117, 122, 123, 132], "insid": [15, 24, 27, 133], "effect": [15, 24, 121, 125], "glossari": [16, 17], "n_repeat": [17, 18, 83, 91, 97, 125, 131, 132], "10": [17, 18, 41, 83, 84, 85, 86, 87, 88, 94, 97, 100, 101, 107, 108, 111, 121, 122, 123, 125, 126, 127, 131, 132], "continuousstratifiedgroupkfold": [17, 122], "n": [17, 18, 83, 84, 85, 96, 100, 101, 111, 113, 119, 122, 127, 133], "time": [17, 18, 83, 84, 85, 86, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 108, 111, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 131, 132, 133], "repetit": [17, 18, 83, 84, 101], "state": [17, 18, 23, 24, 28, 39, 51, 59, 121], "contion": 18, "continuousstratifiedkfold": [18, 85, 122, 134], "test_siz": [19, 83, 84, 94, 100, 101, 107], "0": [19, 24, 32, 33, 41, 47, 54, 69, 83, 84, 85, 86, 87, 88, 89, 91, 92, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 107, 108, 109, 111, 112, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 129, 131, 132, 133], "train_siz": [19, 94, 97, 107], "bootstrap": [19, 107, 122], "resampl": 19, "replac": [19, 41, 95, 107, 119, 125], "respect": [19, 41, 113, 114, 129, 131, 132, 133], "re": [19, 114, 133], "proport": 19, "round": [19, 131], "up": [19, 33, 40, 62, 96, 102, 103, 108, 118, 120, 125, 129, 130, 133], "absolut": [19, 84, 100, 101, 111, 113], "complement": [19, 113], "size": [19, 120, 121, 122, 131], "21": [19, 86, 91, 118, 120, 126, 131], "remain": [19, 122, 128], "unspecifi": 19, "automat": [19, 114, 117, 119, 133], "produc": [19, 123], "n_label": 19, "searcher": [20, 21, 22, 23, 33, 124, 134], "obj": [20, 22], "scikit": [20, 22, 33, 41, 42, 44, 45, 46, 47, 48, 52, 88, 94, 95, 111, 113, 117, 118, 120, 121, 122, 123, 126, 128, 131, 132, 133, 134], "avail": [20, 21, 22, 26, 33, 35, 36, 40, 49, 56, 57, 117, 118, 132, 133], "algorithm": [21, 22, 24, 33, 95, 128, 131, 133, 134], "searcher_nam": 22, "overwrit": [22, 27, 38, 50, 58, 60, 134], "regist": [22, 23, 27, 28, 38, 39, 50, 51, 58, 59, 111, 134], "after": [22, 29, 47, 52, 54, 84, 85, 94, 96, 100, 101, 107, 108, 111, 114, 125], "referenc": [22, 27, 50, 58], "decid": [22, 27, 38, 58], "warn": [22, 27, 31, 32, 38, 50, 55, 58, 60, 68, 83, 84, 85, 87, 88, 91, 94, 95, 96, 97, 100, 102, 103, 107, 111, 120, 121, 122, 125, 126, 129, 131, 134], "alreadi": [22, 27, 38, 50, 58, 94, 96, 114, 121, 122, 126, 130, 133], "reset": [23, 28, 39, 51, 59, 86], "ensembl": [24, 126], "ds_split": 24, "random_state_algorithm": 24, "deslib": [24, 70, 113, 117, 118], "randomforest": 24, "metad": 24, "singlebest": 24, "staticselect": 24, "stackedclassifi": 24, "knorau": 24, "knora": 24, "desp": 24, "ola": 24, "mcb": 24, "knop": 24, "sample_weight": 24, "weight": [24, 123, 133], "set_score_request": 24, "run_cross_valid": [25, 27, 40, 69, 83, 84, 85, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 108, 111, 114, 120, 121, 123, 125, 126, 127, 130, 131, 134], "model_nam": 27, "classification_cl": 27, "regression_cl": 27, "afterward": [27, 50, 126], "behav": [27, 50], "runtimewarn": [27, 31, 32, 50, 58, 68, 83, 84, 85, 87, 88, 91, 94, 95, 96, 97, 100, 102, 103, 107, 111, 120, 125, 126, 131], "unlik": [29, 52, 128], "both": [29, 41, 52, 85, 87, 94, 107, 108, 121, 122, 123, 126, 127, 132, 133], "requir": [29, 52, 74, 81, 114, 118, 123, 125, 127, 130, 133], "targetconfoundremov": [29, 52, 121], "encod": [29, 52], "present": [29, 52, 108, 114, 120, 122], "leakag": [29, 52, 118, 121, 133], "drop": [29, 41, 43, 52, 85, 88, 91, 96, 108, 113, 125], "tupl": [29, 41], "jutargettransform": [29, 56, 58], "transformerlik": [29, 33, 133], "inverse_transform": 29, "invers": [29, 121], "can_inverse_transform": 29, "factori": 30, "params_to_tun": 30, "juestimatorlik": 30, "estimatorlikefit1": [30, 63], "estimatorlikefit2": [30, 63], "estimatorlikef": [30, 63], "seri": [31, 32, 54], "inconsist": [31, 32], "might": [31, 32, 81, 86, 88, 91, 95, 102, 103, 116, 117, 121, 122, 125, 127, 130, 132, 133], "still": [31, 86, 108, 117, 121, 122, 132], "run": [31, 33, 41, 83, 84, 85, 86, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 108, 111, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 129, 131, 132, 133], "df": [32, 40, 96, 123, 126, 129, 131, 132, 133], "pos_label": [32, 33, 88], "http": [32, 33, 41, 60, 85, 91, 114, 122, 128, 131], "juaml": [32, 33, 114], "github": [32, 33, 118, 132], "io": [32, 33], "html": [32, 33, 60, 85, 91, 114, 128, 131, 132], "detail": [32, 33, 114, 128], "interpret": [32, 33, 60, 107, 125], "posit": [32, 33, 41, 84, 88, 120], "element": [32, 33, 60, 83, 86, 96, 133, 134], "convert": [32, 33, 86, 107, 111], "equal": [32, 33, 85, 113, 122], "dictionari": [32, 33, 42, 46, 96, 108, 121, 125, 129, 134], "df_x": 32, "df_y": 32, "df_group": 32, "return_estim": [33, 83, 84, 85, 87, 94, 95, 96, 97, 100, 101, 102, 103, 107, 108, 111, 120, 123, 125, 126, 132], "return_inspector": [33, 97, 125], "return_train_scor": [33, 125, 132], "seed": [33, 88, 91, 96, 102, 103, 107, 125, 126], "n_job": [33, 41, 125, 134], "verbos": [33, 41, 125, 134], "numpi": [33, 43, 47, 83, 84, 85, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 111, 120, 121, 122, 125, 126], "string": [33, 60, 113, 129, 131, 132, 133, 134], "kind": [33, 83, 84, 87, 88, 91, 94, 95, 97, 102, 103, 104, 107, 123, 129, 132], "categor": [33, 101, 108, 113, 127], "multiple_class": 33, "binari": [33, 60, 82, 87, 89, 91, 94, 95, 97, 102, 103, 104, 107, 113, 114, 119, 122, 123, 125, 131], "ordin": 33, "final": [33, 83, 84, 85, 86, 87, 94, 95, 96, 100, 101, 102, 103, 104, 107, 108, 111, 114, 122, 125, 126, 132, 133], "inspector": [33, 97, 125], "strategi": [33, 132], "kfold": [33, 84, 85, 87, 88, 91, 94, 95, 96, 100, 101, 102, 103, 104, 108, 111, 120, 121, 122, 123, 125, 126, 127, 132, 133], "scorerlik": [33, 34, 35, 38], "metric": [33, 70, 83, 84, 86, 88, 91, 101, 107, 111, 118, 128, 130, 131], "org": [33, 41, 60, 85, 91, 128, 131, 132], "stabl": [33, 85, 117, 128], "model_evalu": 33, "comprehens": 33, "scorer": [33, 35, 36, 38, 39, 111, 121, 131, 132, 134], "defin": [33, 40, 45, 83, 84, 85, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 111, 120, 121, 122, 123, 125, 126, 132, 133], "follow": [33, 40, 41, 45, 60, 62, 83, 84, 85, 86, 87, 88, 91, 94, 95, 96, 97, 100, 102, 103, 107, 108, 111, 113, 114, 115, 117, 119, 120, 123, 125, 126, 129, 130, 131, 132, 133], "step__paramet": 33, "sever": [33, 86, 87, 94, 114, 122, 123, 128, 132], "svm__probabl": 33, "go": [33, 83, 84, 85, 86, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 108, 111, 118, 125, 130, 133], "oper": [33, 83, 108], "level": [33, 60, 83, 84, 85, 86, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 111, 114, 120, 125, 126], "outer": [33, 83, 84, 85, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 108, 111, 120, 121, 123, 125, 126, 127, 131, 132, 133, 134], "joblib": [33, 41], "convernt": 33, "mean": [33, 40, 41, 47, 54, 81, 84, 85, 87, 88, 94, 96, 100, 101, 102, 103, 107, 108, 111, 113, 121, 122, 123, 125, 127, 128, 131, 132, 133], "print": [33, 60, 83, 84, 85, 86, 87, 88, 91, 94, 96, 97, 100, 101, 102, 103, 104, 107, 108, 111, 120, 121, 123, 125, 127, 131, 132, 133], "larger": 33, "50": [33, 84, 85, 88, 91, 95, 96, 97, 100, 101, 104, 107, 108, 111, 123, 126, 127, 131, 132, 133], "standard": [33, 41, 96, 121, 126, 133], "standrad": 33, "addition": [33, 60, 88, 91, 118, 119, 121, 133], "fit_tim": [33, 83, 84, 97, 100, 101, 108, 111, 121, 127, 132, 133], "And": [33, 87, 94, 107, 122, 123], "final_estim": 33, "multiclass": [33, 60, 82, 89, 113], "forest": [33, 60, 87, 91, 93, 96, 98, 107, 113, 126, 131, 133], "custom": [33, 38, 60, 112, 115, 118, 132, 133], "wrap_scor": 34, "doe": [34, 94, 128, 133], "handl": 34, "non_invers": 34, "scalar": [35, 38, 83], "greater": [35, 38, 40, 125], "better": [35, 38, 102, 103, 123, 125, 131], "Will": [35, 38, 131], "y_true": [37, 83, 84, 88, 101, 111], "y_pred": [37, 83, 84, 88, 101, 111], "squar": [37, 111, 113], "pearson": [37, 111, 120], "product": [37, 111], "moment": [37, 111], "correl": [37, 41, 84, 111, 120], "coeffici": [37, 84, 111, 132, 133], "arraylik": 37, "scorer_nam": [38, 111], "access": [38, 86], "want": [38, 47, 83, 86, 87, 88, 94, 96, 107, 108, 111, 114, 116, 117, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133], "userwarn": [38, 85, 88, 107, 122], "bonferroni": 40, "altern": [40, 107], "side": 40, "correct": [40, 91, 126, 131], "t": [40, 86, 91, 94, 122, 123, 131, 132, 133], "degre": [40, 125], "freedom": 40, "adjust": 40, "pvalu": 40, "full": [40, 83, 84, 85, 86, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 108, 111, 114, 125], "letter": 40, "sidak": 40, "holm": 40, "down": 40, "sime": 40, "hochberg": 40, "independ": [40, 47, 54, 94, 107, 113, 122], "hommel": 40, "close": [40, 119], "non": [40, 41], "neg": [40, 41, 120], "fdr_bh": 40, "benjamini": 40, "fdr_by": 40, "yekuti": 40, "fdr_tsbh": 40, "stage": 40, "fdr": [40, 113], "fdr_tsbky": 40, "less": [40, 85, 96, 118, 122, 128], "hypothesi": [40, 107], "underli": [40, 113, 121, 125], "unequ": 40, "significance_threshold": [41, 120], "05": [41, 101, 107, 120, 123, 125], "corr_method": [41, 120], "pearsonr": [41, 111, 132], "agg_method": [41, 120], "sum": [41, 83, 120, 134], "corr_sign": [41, 120], "posneg": [41, 120], "aggreg": [41, 120], "togeth": [41, 47, 84, 85, 100, 101, 108, 111, 113], "significantli": 41, "signific": [41, 91, 120, 125], "aggregate": 41, "separ": [41, 94, 96, 128, 132, 133], "ones": 41, "choos": [41, 88, 91, 122, 123, 131, 133], "procedur": [41, 122, 128], "describ": [41, 84, 85, 96, 100, 101, 108, 111, 114, 127, 132], "shen": [41, 120], "finn": [41, 120], "scheinost": 41, "d": [41, 83, 86, 87, 94, 102, 103, 113, 119, 120, 122], "et": [41, 113, 120, 121, 133], "al": [41, 120, 121], "2016": [41, 86, 87, 94, 102, 103, 120], "doi": [41, 121], "1038": 41, "nprot": 41, "178": 41, "p": [41, 83, 91, 107, 120, 131], "scipi": [41, 83, 84, 85, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 111, 120, 125, 126], "stat": [41, 70, 91, 111, 118, 120, 122, 131], "convent": [41, 114], "axi": [41, 83, 84, 85, 100, 101, 111, 122, 127], "po": [41, 120], "correlation_valu": 41, "found": [41, 102, 103, 132], "used_corr_sign_": 41, "job": 41, "parallel": [41, 114, 134], "log": [41, 60, 62, 68, 83, 84, 85, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 111, 114, 120, 125, 126, 131], "y_mean_": 41, "show": [41, 82, 91, 99, 106, 110, 116, 122, 123, 131, 132, 134], "wa": [41, 87, 91, 94, 95, 96, 108, 120, 122, 123, 125, 132], "x_y_correlations_": 41, "significant_mask_": 41, "had": [41, 103, 132, 133, 134], "pos_mask_": 41, "pos_significant_mask_": 41, "neg_significant_mask_": 41, "used_significant_mask_": 41, "threhsold": 41, "mask": [41, 43, 47], "per": [41, 83, 87, 94, 101, 114, 122], "get_feature_names_out": [41, 42, 44, 45, 46, 47], "input_featur": [41, 42, 44, 45, 46, 47], "x_types_renam": 42, "Not": [42, 43, 44, 45, 46, 107], "here": [42, 43, 44, 46, 85, 86, 87, 94, 96, 108, 114, 118, 126, 131, 132, 133], "kept": [42, 44, 45, 46, 47, 108], "get_support": [43, 47], "support": [43, 47, 53, 74, 83, 87, 88, 94, 97, 102, 103, 114, 122, 123, 125, 126, 132, 133, 134], "support_mask": [43, 47], "keep": [44, 86, 88, 91, 95, 97, 101, 104, 107, 108, 114, 117, 118, 123, 126, 133], "junif": 45, "wrapper": [45, 53, 134], "around": 45, "directli": [45, 86, 118, 127], "feature_names_in_": 45, "x0": 45, "x1": 45, "n_features_in_": 45, "model_confound": [47, 54, 121], "keep_confound": [47, 108], "specif": [47, 88, 94, 96, 121, 124, 125, 128, 129, 130], "subtract": [47, 54, 113], "regular": [47, 102, 103, 113, 123, 129], "express": [47, 129], "syntax": 47, "linearregress": [47, 54, 113, 120, 121], "By": [47, 54, 94, 95, 96, 108, 113, 120, 123, 125, 132], "residu": [47, 54, 121], "fall": [47, 54, 120, 132], "under": [47, 54, 111, 116, 117, 132, 133], "deconfound": [47, 108], "o": 49, "transformer_nam": [50, 58], "transformer_cl": [50, 58], "arg": [52, 55, 64, 65, 66, 67, 85, 107], "_model_": 53, "transform_target": 53, "confoundremov": [54, 108, 113, 121, 134], "notifi": [55, 60], "with_traceback": 55, "except": [55, 62, 114], "tb": 55, "__traceback__": 55, "fname": 60, "output_format": 60, "debug": [60, 128], "info": [60, 61, 83, 84, 85, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 108, 111, 114, 120, 121, 123, 125, 126, 127, 131, 132, 133], "messag": [60, 62, 68, 114, 120, 134], "pathlib": 60, "path": 60, "filenam": [60, 114], "stdout": 60, "file": [60, 86, 89, 92, 98, 105, 109, 112, 114], "statement": 60, "append": [60, 95, 107, 119, 122, 125], "entri": [60, 133], "doc": [60, 85, 114, 119, 134], "python": [60, 83, 84, 85, 86, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 108, 111, 114, 117, 119, 122, 134], "dev": [60, 114, 119], "howto": 60, "asctim": 60, "levelnam": 60, "msg": [62, 68, 83, 84, 85, 87, 88, 91, 94, 95, 96, 97, 100, 102, 103, 107, 111, 120, 125, 126, 131], "klass": 62, "subclass": [62, 68], "categori": [68, 83, 84, 85, 87, 88, 91, 94, 95, 96, 97, 100, 102, 103, 107, 111, 120, 125, 126, 131], "width": [69, 88, 91, 97, 104, 107], "800": 69, "height": 69, "600": [69, 85, 123], "ci": [69, 107, 119], "95": [69, 88, 91, 96, 97, 101, 104, 107, 122], "plot": [69, 83, 84, 85, 91, 94, 95, 96, 101, 107, 118, 122, 131], "panel": [69, 91, 116, 117, 131], "dashboard": 69, "confid": [69, 107, 125], "interv": [69, 107], "dynam": [70, 117, 118], "prepar": [70, 86, 118, 120, 121, 126], "vizual": [70, 118], "julearn": [72, 74, 76, 79, 80, 81, 83, 84, 85, 86, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 106, 107, 108, 110, 111, 113, 115, 117, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133], "depend": [74, 81, 86, 87, 94, 102, 103, 116, 118, 122, 125, 131], "instal": [74, 81, 114, 116, 118, 119, 131, 134], "extra": [74, 81, 83, 84, 85, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 111, 113, 114, 126, 127, 133], "currentmodul": [76, 79, 80], "protocol": 80, "experiment": 81, "futur": [81, 83, 122], "complet": [81, 114], "particularli": [81, 122, 132], "reli": 81, "beta": 81, "releas": [81, 117, 118, 134], "packag": [81, 85, 88, 107, 114, 116, 117, 122, 126], "viz": [81, 91, 117, 118, 131], "basic": [82, 114, 123, 129, 130, 132, 133], "galleri": [82, 83, 84, 85, 86, 87, 88, 90, 91, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 106, 107, 108, 110, 111, 114], "sphinx": [82, 83, 84, 85, 86, 87, 88, 90, 91, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 106, 107, 108, 110, 111, 114], "end": [83, 84, 85, 86, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 108, 111, 117], "download": [83, 84, 85, 86, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 108, 111], "code": [83, 84, 85, 86, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 108, 111, 113, 114, 118, 121, 133], "iri": [83, 88, 91, 95, 97, 104, 107, 114, 123, 129, 132, 133], "vector": [83, 87, 88, 94, 97, 102, 103, 114, 123, 125, 126, 132, 133], "machin": [83, 86, 87, 88, 94, 97, 102, 103, 114, 118, 120, 121, 123, 125, 128, 129, 130, 131, 133], "classifi": [83, 87, 88, 94, 95, 97, 102, 103, 104, 107, 114, 125, 132, 133], "heatmap": [83, 84, 101], "accuraci": [83, 88, 103, 107, 121, 122, 131, 132], "confus": [83, 96, 132, 133], "matrix": 83, "author": [83, 84, 85, 86, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 108, 111, 114], "shammi": [83, 84, 85, 87, 94, 96, 101, 107, 111, 121, 134], "fz": [83, 84, 85, 86, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 108, 111], "juelich": [83, 84, 85, 86, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 108, 111], "de": [83, 84, 85, 86, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 108, 111, 121], "federico": [83, 84, 85, 86, 87, 88, 91, 94, 95, 97, 101, 102, 103, 104, 107, 111], "raimondo": [83, 84, 85, 86, 87, 88, 91, 94, 95, 97, 101, 102, 103, 104, 107, 111, 134], "f": [83, 84, 85, 86, 87, 88, 91, 94, 95, 96, 97, 101, 102, 103, 104, 107, 111, 120, 121, 123, 126], "licens": [83, 84, 85, 86, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 108, 111, 114], "agpl": [83, 84, 85, 86, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 108, 111], "seaborn": [83, 84, 85, 86, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 114, 117, 118, 122, 123, 125, 129, 132, 133], "sn": [83, 84, 85, 94, 95, 96, 100, 101, 107, 122, 125], "matplotlib": [83, 84, 85, 94, 95, 96, 100, 101, 107, 118, 122], "pyplot": [83, 84, 85, 94, 95, 96, 100, 101, 107, 122], "plt": [83, 84, 85, 94, 95, 96, 100, 101, 107, 122], "load_dataset": [83, 86, 87, 88, 91, 94, 95, 97, 102, 103, 104, 107, 114, 123, 125, 129, 132, 133], "model_select": [83, 84, 85, 87, 91, 94, 97, 100, 101, 107, 122, 125, 131, 132, 134], "train_test_split": [83, 84, 100, 101], "repeatedkfold": [83, 125], "confusion_matrix": 83, "configure_log": [83, 84, 85, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 111, 114, 125, 126], "2023": [83, 84, 85, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 108, 111, 118, 120, 121, 123, 125, 126, 127, 131, 132, 133], "07": [83, 84, 85, 87, 88, 89, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 107, 108, 111, 118, 120, 121, 123, 125, 126, 127, 131, 132, 133], "06": [83, 84, 85, 87, 88, 91, 92, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 107, 108, 111, 118, 120, 121, 123, 125, 126, 127, 131, 132, 133], "11": [83, 84, 85, 86, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 108, 109, 111, 117, 120, 121, 123, 125, 126, 127, 131, 132, 133], "43": [83, 84, 85, 86, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 108, 111, 121, 126], "996": 83, "lib": [83, 84, 85, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 111, 122, 125, 126], "25": [83, 84, 85, 86, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 108, 111, 125, 126, 127, 131], "dev220": [83, 84, 85, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 111, 118, 125, 126], "load": [83, 84, 85, 100, 101, 102, 103, 107, 108, 111, 114, 123, 127, 129, 132], "df_iri": [83, 88, 91, 95, 97, 104, 107, 114], "sepal_length": [83, 88, 91, 95, 97, 104, 107, 123, 129, 132, 133], "sepal_width": [83, 88, 91, 95, 97, 104, 107, 123, 129, 132, 133], "petal_length": [83, 88, 91, 95, 97, 104, 107, 123, 129, 132, 133], "speci": [83, 88, 91, 95, 97, 104, 107, 114, 123, 125, 129, 132, 133], "train_iri": 83, "test_iri": 83, "200": [83, 96, 97, 107, 120, 122, 125, 126], "we": [83, 84, 85, 86, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 108, 111, 114, 116, 117, 118, 121, 122, 123, 125, 126, 127, 128, 129, 131, 132, 133], "model_iri": [83, 95], "002": 83, "expand": [83, 84, 85, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 108, 111, 120, 121, 123, 125, 126, 127, 131, 132, 133], "003": 83, "treat": [83, 84, 85, 87, 88, 91, 94, 95, 96, 97, 100, 102, 103, 107, 111, 120, 125, 126], "home": [83, 84, 85, 87, 88, 91, 94, 95, 96, 97, 100, 102, 103, 107, 111, 120, 125, 126, 131], "runner": [83, 84, 85, 87, 88, 91, 94, 95, 96, 97, 100, 102, 103, 107, 111, 120, 125, 126, 131], "py": [83, 84, 85, 86, 87, 88, 89, 91, 92, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 107, 108, 109, 111, 112, 114, 120, 122, 125, 126, 131], "238": [83, 84, 85, 87, 88, 91, 94, 95, 96, 97, 100, 102, 103, 107, 111, 120, 125, 126, 131], "004": 83, "__continu": [83, 84, 85, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 107, 108, 111, 120, 123, 125, 127, 131, 132, 133], "005": 83, "006": 83, "120": 83, "007": 83, "versicolor": [83, 88, 91, 95, 97, 104, 107, 114, 123, 132, 133], "40": [83, 84, 85, 103, 123, 131], "virginica": [83, 88, 91, 95, 97, 104, 107, 114, 123, 132, 133], "setosa": [83, 129, 132, 133], "count": [83, 84, 85, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 108, 111, 122, 123, 125, 127, 131, 132, 133], "dtype": [83, 84, 85, 87, 88, 91, 94, 95, 97, 100, 101, 102, 103, 104, 107, 108, 111, 123, 125, 127, 131, 132, 133], "int64": [83, 87, 88, 91, 94, 95, 97, 102, 103, 104, 107, 123, 125, 131, 132, 133], "008": [83, 129], "scheme": [83, 84, 85, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 108, 111, 120, 121, 123, 125, 126, 127, 128, 131, 132, 133, 134], "multi": [83, 86, 131, 132, 133], "detect": [83, 87, 88, 91, 94, 95, 97, 102, 103, 104, 107, 123, 125, 128, 131, 132, 133], "head": [83, 84, 85, 86, 87, 94, 100, 101, 102, 103, 107, 108, 111, 127, 129, 131, 133], "score_tim": [83, 84, 97, 100, 101, 108, 111, 121, 127, 132, 133], "cv_mdsum": [83, 84, 97, 100, 101, 108, 111, 121, 127, 132, 133], "010047": 83, "004841": 83, "fa5ab7a2b930761687a8e82d9971ebca": 83, "008666": 83, "004871": 83, "008826": 83, "004830": 83, "009006": 83, "004967": 83, "4": [83, 84, 85, 86, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 108, 111, 117, 120, 121, 122, 123, 125, 126, 127, 129, 131, 132, 133], "008370": 83, "005401": 83, "8": [83, 84, 86, 87, 94, 97, 100, 101, 108, 111, 117, 121, 122, 127, 128, 131, 132, 133], "now": [83, 84, 85, 86, 88, 91, 94, 95, 97, 100, 101, 102, 103, 107, 108, 111, 114, 119, 121, 122, 123, 125, 126, 129, 131, 132, 133], "df_accuraci": 83, "set_index": [83, 84, 86, 101, 107], "test_accuraci": [83, 88, 107, 131], "unstack": [83, 84, 101], "index": [83, 84, 85, 86, 87, 94, 96, 100, 101, 102, 103, 107, 111, 114, 118, 125], "916667": 83, "833333": 83, "958333": 83, "875000": 83, "750000": 83, "000000": [83, 84, 85, 91, 96, 100, 101, 108, 111, 127, 131], "791667": 83, "over": [83, 84, 88, 91, 96, 101, 120, 121, 125, 126, 131], "font_scal": [83, 84], "fig": [83, 84, 85, 94, 95, 96, 101, 122], "ax": [83, 84, 85, 94, 95, 96, 101, 122], "subplot": [83, 84, 85, 94, 95, 96, 101, 122], "figsiz": [83, 84, 85, 94, 95, 96, 101, 122], "7": [83, 84, 85, 86, 87, 94, 97, 101, 104, 114, 118, 122, 126, 128, 129, 131, 132, 134], "cmap": [83, 84, 101], "ylgnbu": [83, 84, 101], "titl": [83, 84, 101, 114], "text": [83, 84, 94, 96, 101, 114, 122], "our": [83, 86, 87, 88, 94, 96, 104, 108, 114, 118, 121, 122, 123, 125, 126, 128, 129, 131, 132, 133], "annot": [83, 84], "cm": 83, "uniqu": [83, 87, 94, 123, 125], "9": [83, 84, 86, 87, 94, 96, 97, 101, 108, 121, 129, 132, 133], "let": [83, 84, 85, 86, 87, 94, 96, 100, 101, 102, 103, 107, 108, 111, 121, 122, 123, 125, 126, 127, 129, 133], "anoth": [83, 86, 96, 111, 122, 123, 126, 131, 133], "cm_sum": 83, "keepdim": 83, "cm_perc": 83, "astyp": 83, "100": [83, 87, 88, 91, 95, 96, 97, 104, 107, 108, 121, 123, 125, 131], "empty_lik": 83, "nrow": 83, "ncol": 83, "rang": [83, 86, 96, 113, 120, 126], "j": [83, 121], "c": [83, 86, 87, 94, 102, 103, 116, 123, 125, 126, 133], "els": 83, "1f": [83, 84], "00_start": [83, 85], "plot_cm_acc_multiclass": [83, 89], "104": [83, 108, 123, 125], "deprecationwarn": 83, "convers": 83, "ndim": 83, "deprec": [83, 114, 134], "extract": [83, 86, 87, 94, 125], "singl": [83, 125, 131], "your": [83, 86, 114, 117, 118, 120, 121, 122, 125, 130, 133], "fmt": [83, 84], "total": [83, 84, 85, 86, 87, 88, 89, 91, 92, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 107, 108, 109, 111, 112, 120, 121, 122, 123, 125, 126, 127, 129, 131, 132, 133], "script": [83, 84, 85, 86, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 108, 111, 114, 119, 120, 121, 122, 123, 125, 126, 127, 129, 131, 132, 133], "minut": [83, 84, 85, 86, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 108, 111, 120, 121, 122, 123, 125, 126, 127, 129, 131, 132, 133], "991": [83, 89], "sourc": [83, 84, 85, 86, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 108, 111, 119], "jupyt": [83, 84, 85, 86, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 108, 111, 116, 132], "notebook": [83, 84, 85, 86, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 108, 111, 116, 132], "ipynb": [83, 84, 85, 86, 87, 88, 91, 94, 95, 96, 97, 100, 101, 102, 103, 104, 107, 108, 111], "diabet": [84, 85, 100, 101, 111, 127], "ridg": [84, 100, 101, 111, 113], "load_diabet": [84, 85, 100, 101, 108, 111, 127], "mean_absolute_error": [84, 101], "13": [84, 85, 86, 87, 94, 97, 109, 121], "853": [84, 96, 133], "return_x_i": [84, 85, 100, 101, 108, 111, 127], "as_fram": [84, 85, 100, 101, 108, 111, 127], "ten": [84, 85, 100, 101, 111], "ag": [84, 85, 86, 100, 101, 108, 111, 127], "sex": [84, 85, 100, 101, 108, 111, 121, 125, 127], "bodi": [84, 85, 100, 101, 111], "mass": [84, 85, 100, 101, 111], "averag": [84, 85, 100, 101, 108, 111, 120, 122, 131], "blood": [84, 85, 100, 101, 108, 111], "pressur": [84, 85, 100, 101, 108, 111], "six": [84, 85, 100, 101, 111], "serum": [84, 85, 100, 101, 111], "measur": [84, 85, 100, 101, 108, 111, 121, 122, 123, 125], "s1": [84, 85, 86, 87, 94, 100, 101, 108, 111, 127], "s6": [84, 85, 86, 87, 94, 100, 101, 108, 111, 127], "patient": [84, 85, 100, 101, 111], "quantit": [84, 85, 100, 101, 111], "diseas": [84, 85, 100, 101, 111], "progress": [84, 85, 100, 101, 111], "year": [84, 85, 100, 101, 111], "baselin": [84, 85, 100, 101, 111], "interest": [84, 85, 88, 100, 101, 107, 111, 130, 132, 133], "bmi": [84, 85, 100, 101, 108, 111, 127], "s4": [84, 85, 86, 87, 94, 100, 101, 108, 111, 127], "s5": [84, 85, 86, 87, 94, 100, 101, 102, 103, 108, 111, 127], "038076": [84, 85, 100, 101, 108, 111, 127], "050680": [84, 85, 100, 101, 108, 111, 127], "061696": [84, 85, 100, 101, 108, 111, 127], "002592": [84, 85, 100, 101, 108, 111, 127], "019907": [84, 85, 100, 101, 108, 111, 127], "017646": [84, 85, 100, 101, 108, 111, 127], "001882": [84, 85, 100, 101, 108, 111, 127], "044642": [84, 85, 100, 101, 108, 111, 127], "051474": [84, 85, 100, 101, 108, 111, 127], "039493": [84, 85, 100, 101, 108, 111, 127], "068332": [84, 85, 100, 101, 108, 111, 127], "092204": [84, 85, 100, 101, 108, 111, 127], "085299": [84, 85, 100, 101, 108, 111, 127], "044451": [84, 85, 100, 101, 108, 111, 127], "002861": [84, 85, 100, 101, 108, 111, 127], "025930": [84, 85, 100, 101, 108, 111, 127], "089063": [84, 85, 100, 101, 108, 111, 127], "011595": [84, 85, 100, 101, 108, 111, 127], "034309": [84, 85, 100, 101, 108, 111, 127], "022688": [84, 85, 100, 101, 108, 111, 127], "009362": [84, 85, 100, 101, 108, 111, 127], "005383": [84, 85, 100, 101, 108, 111, 127], "036385": [84, 85, 100, 101, 108, 111, 127], "031988": [84, 85, 100, 101, 108, 111, 127], "046641": [84, 85, 100, 101, 108, 111, 127], "442": [84, 85, 100, 101, 108, 111, 127], "152": [84, 85, 100, 101, 108, 111, 127, 131, 133, 134], "133484": [84, 85, 100, 101, 108, 111, 127], "std": [84, 85, 96, 100, 101, 108, 111, 121, 127], "77": [84, 85, 100, 101, 108, 111, 127, 131, 134], "093005": [84, 85, 100, 101, 108, 111, 127], "min": [84, 85, 96, 100, 101, 108, 111, 127], "87": [84, 85, 100, 101, 108, 111, 127, 131], "140": [84, 85, 100, 101, 105, 108, 111, 123, 127], "500000": [84, 85, 100, 101, 108, 111, 127], "75": [84, 85, 88, 91, 96, 100, 101, 108, 111, 127], "211": [84, 85, 100, 101, 108, 111, 127], "max": [84, 85, 96, 100, 101, 108, 111, 113, 127], "346": [84, 85, 100, 101, 108, 111, 127], "float64": [84, 85, 88, 91, 96, 100, 101, 104, 108, 111, 120, 121, 126, 127], "combin": [84, 85, 86, 100, 101, 107, 111, 123, 133], "data_diabet": [84, 100, 101, 111, 127], "concat": [84, 85, 95, 100, 101, 107, 111, 127], "bp": [84, 85, 100, 101, 108, 111, 127], "s2": [84, 85, 86, 87, 94, 100, 101, 108, 111, 127], "s3": [84, 85, 86, 87, 94, 100, 101, 108, 111, 127], "calcul": 84, "heat": 84, "corr": [84, 101], "xticklabel": 84, "yticklabel": 84, "train_diabet": [84, 100, 101], "test_diabet": [84, 100, 101], "neg_mean_absolute_error": [84, 85, 96, 100, 111, 132], "14": [84, 86, 87, 94, 96, 97, 102, 103, 121, 131], "303": [84, 91, 108, 109], "304": [84, 91], "305": [84, 91], "306": [84, 91], "307": [84, 91], "309": [84, 91, 100, 101], "308": [84, 91], "009604": 84, "004772": 84, "b10eef89b4192178d482d7a1587a248a": [84, 100, 101, 108, 111, 121, 127, 132, 133], "010998": 84, "005249": 84, "010540": 84, "005067": 84, "010842": 84, "005319": 84, "009180": 84, "004580": 84, "test_scor": [84, 85, 87, 88, 91, 94, 100, 101, 102, 103, 104, 111, 123, 132], "45": [84, 101], "444084441470615": 84, "mae": [84, 101], "df_mae": [84, 101], "48": [84, 86, 123, 126], "783874": 84, "47": [84, 107, 108, 134], "573568": 84, "37": [84, 123, 132, 133], "617474": 84, "686852": 84, "558655": 84, "coef_": [84, 108], "sort_valu": 84, "ascend": 84, "inplac": 84, "barh": 84, "color": [84, 85, 94, 107, 122], "blue": 84, "red": 84, "xlabel": [84, 101], "249999999999986": 84, "scatterplot": [84, 94, 96, 101], "v": [84, 101, 119, 122, 124, 133], "2f": [84, 101], "corrcoef": [84, 101], "set_styl": [84, 85, 101], "darkgrid": [84, 85, 101], "scatter": [84, 96, 101], "xmin": [84, 101], "xmax": [84, 101], "get_xlim": [84, 94, 101], "ymin": [84, 101], "ymax": [84, 101], "get_ylim": [84, 94, 101], "ylabel": [84, 101, 122], "01": [84, 89, 96, 101, 102, 103, 109, 120, 123, 125, 126], "verticalalign": [84, 101], "top": [84, 101, 118, 132], "horizontalalign": [84, 101], "right": [84, 101, 102, 103, 122, 123], "fontsiz": [84, 101], "12": [84, 85, 86, 87, 88, 94, 96, 97, 101, 107, 117, 120, 121, 122], "scale": [84, 101, 102, 103, 113, 123, 125, 133], "649999999999999": 84, "347": 84, "35": [84, 86, 125], "194": [84, 89], "plot_example_regress": [84, 89], "leonard": [85, 96, 107], "sass": [85, 96, 107], "l": [85, 86, 87, 94, 96, 100, 102, 103, 107], "math": 85, "245": [85, 101, 126], "outlier": 85, "data_df": 85, "new_df": 85, "145": [85, 101], "150": [85, 121, 132, 133], "590": [85, 123], "580": 85, "597": [85, 123], "595": [85, 100, 123], "reset_index": [85, 86, 87, 94, 102, 103, 107], "plot_stratified_kfold_reg": [85, 89], "53": [85, 131], "settingwithcopywarn": 85, "try": [85, 87, 88, 91, 94, 97, 103, 104, 122, 123, 132], "slice": 85, "loc": 85, "row_index": 85, "col_index": 85, "caveat": 85, "pydata": 85, "user_guid": 85, "view": [85, 114], "versu": 85, "idea": [85, 128], "chosen": 85, "coupl": 85, "histrogram": 85, "displot": 85, "60": [85, 131], "20": [85, 88, 91, 97, 107, 120, 121, 122, 126, 131, 133], "opt": [85, 88, 107, 122], "hostedtoolcach": [85, 88, 107, 122], "x64": [85, 88, 107, 122], "python3": [85, 88, 107, 122], "site": [85, 88, 107, 122], "axisgrid": [85, 107], "118": [85, 107], "figur": [85, 94, 107, 114], "layout": [85, 107], "tight": [85, 107], "_figur": [85, 107], "tight_layout": [85, 95, 107], "facetgrid": 85, "0x7efda1265c30": 85, "histogram": 85, "abov": [85, 107, 121, 123, 125, 132], "uniformli": [85, 122], "skew": 85, "toward": 85, "lower": [85, 122], "even": [85, 108, 123, 132, 133], "low": [85, 96, 113, 120], "give": [85, 113, 121, 123, 130, 131, 132], "good": [85, 88, 103, 117, 122, 130, 131], "granular": 85, "cv_stratifi": [85, 87], "linear": [85, 91, 102, 103, 108, 120, 121, 123, 125, 126, 133], "scores_strat": 85, "linreg": [85, 108, 113, 120, 121], "284": 85, "285": [85, 95], "287": [85, 95], "288": [85, 95], "289": [85, 95], "449": 85, "290": [85, 103], "_split": [85, 122], "725": [85, 122], "popul": [85, 107, 122], "member": [85, 122], "384": 85, "385": 85, "386": [85, 131], "387": 85, "388": 85, "389": 85, "compar": [85, 91, 107, 118, 121, 123, 128, 131, 132], "With": [85, 122, 125, 132], "df_score": 85, "boxplot": [85, 107], "higher": [85, 107, 122], "were": [85, 86, 87, 94, 95, 107, 125, 132], "swarmplot": [85, 95], "483": [85, 89], "fmri": [86, 87, 94, 102, 103], "bse": 86, "waskom": [86, 87, 94, 102, 103], "m": [86, 87, 94, 102, 103, 114, 119, 133], "frank": [86, 87, 94, 102, 103], "wagner": [86, 87, 94, 102, 103], "adapt": [86, 87, 94, 102, 103], "engag": [86, 87, 94, 102, 103], "cognit": [86, 87, 94, 102, 103], "context": [86, 87, 94, 102, 103, 125], "cerebr": [86, 87, 94, 102, 103], "cortex": [86, 87, 94, 102, 103], "known": [86, 129, 133], "excel": [86, 122], "spreadsheet": 86, "csv": 86, "ideal": 86, "everyth": [86, 130], "tabul": 86, "organis": [86, 121], "demograph": [86, 121], "diagnost": 86, "behaviour": [86, 118, 132], "manual": [86, 116, 131, 133], "edit": 86, "sure": [86, 94, 114, 119, 121, 122, 123], "readi": [86, 131, 133], "do": [86, 94, 96, 101, 102, 103, 107, 108, 111, 113, 114, 118, 119, 121, 122, 123, 126, 128, 129, 130, 131, 132, 133], "howev": [86, 91, 94, 95, 96, 108, 116, 117, 121, 122, 123, 126, 127, 128, 131, 132, 133], "prune": 86, "fortun": [86, 122], "tool": [86, 117, 125, 131], "deal": [86, 120, 129], "task": [86, 94, 108, 123, 127], "collect": [86, 107, 125], "start": [86, 114, 115, 118, 122, 123, 125, 126, 127, 130, 131, 133], "df_fmri": [86, 87, 94, 102, 103], "subject": [86, 87, 94, 102, 103, 122], "timepoint": [86, 87, 94, 102, 103], "event": [86, 87, 94, 102, 103], "region": [86, 87, 94, 102, 103], "signal": [86, 87, 94, 102, 103], "s13": [86, 87, 94, 102, 103], "18": [86, 87, 94, 97, 102, 103, 120, 121], "stim": [86, 87, 94, 102, 103], "pariet": [86, 87, 94, 102, 103], "017552": [86, 87, 94, 102, 103], "080883": [86, 87, 94, 102, 103], "s12": [86, 87, 94, 102, 103], "081033": [86, 87, 94, 102, 103], "s11": [86, 87, 94, 102, 103], "046134": [86, 87, 94, 102, 103], "s10": [86, 87, 94, 102, 103], "037970": [86, 87, 94, 102, 103], "seen": [86, 133], "pivot": [86, 87, 94, 102, 103], "tabl": [86, 87, 94], "becom": [86, 128, 133], "identifi": [86, 88, 120, 121, 125, 131], "rule": [86, 113, 122, 133], "duplic": 86, "frontal": [86, 87, 94, 102, 103], "s0": [86, 87, 94, 102, 103], "cue": [86, 87, 94, 102, 103], "007766": [86, 102, 103], "006899": [86, 102, 103], "021452": [86, 102, 103], "039327": [86, 102, 103], "016440": [86, 102, 103], "000300": [86, 102, 103], "021054": [86, 102, 103], "035735": [86, 102, 103], "024296": [86, 102, 103], "033220": [86, 102, 103], "sutil": 86, "For": [86, 88, 91, 96, 101, 108, 113, 114, 116, 117, 120, 122, 123, 125, 126, 127, 129, 132, 133], "place": 86, "scan": 86, "23": [86, 121, 131], "31": [86, 123], "29": [86, 100, 102, 131], "28": [86, 123], "34": [86, 131], "scanner": 86, "6": [86, 87, 91, 94, 95, 96, 97, 108, 117, 120, 122, 125, 126, 128, 129, 132], "b": [86, 114, 133], "df_meta": 86, "s7": [86, 87, 94], "s8": [86, 87, 94], "s9": [86, 87, 94], "16": [86, 87, 94, 96, 97, 123, 125, 131], "036739": 86, "131641": 86, "17": [86, 87, 94, 96, 97, 131], "004900": [86, 97], "036362": 86, "030099": 86, "121574": 86, "000643": 86, "051040": 86, "009959": 86, "103513": 86, "532": [86, 87, 94, 102, 103], "suppos": [86, 88, 121], "dure": [86, 87, 94, 117, 120, 121, 123, 125], "There": [86, 122, 128, 130, 133], "009038": [86, 97], "009642": 86, "047859": 86, "026727": 86, "085040": 86, "086399": 86, "069775": 86, "070558": 86, "115321": 86, "154058": 86, "010535": 86, "061817": 86, "034386": 86, "130267": 86, "15": [86, 87, 91, 94, 96, 97, 105, 121, 125], "002170": 86, "048007": 86, "038257": 86, "134828": 86, "004290": 86, "035395": 86, "266": [86, 87, 94, 102, 103], "sinc": [86, 91, 96, 100, 102, 123, 133], "previou": [86, 91, 95, 96, 114, 126, 131, 132, 133], "multiindex": 86, "trick": 86, "underscor": 86, "_": [86, 95, 107, 114, 133], "frontal_cu": 86, "parietal_stim": 86, "851": [86, 89, 96, 133], "run_combine_panda": [86, 89], "groupkfold": 87, "kimia": 87, "nazarzadeh": 87, "necessari": [87, 116, 121, 126], "librari": [87, 116, 118], "stratifiedgroupkfold": 87, "987": 87, "988": 87, "infer": [87, 94], "studi": [87, 94, 121, 122], "brain": [87, 94, 118, 120, 121], "condit": [87, 94], "groupbi": [87, 94], "1064": [87, 94], "exactli": [87, 94, 125, 133], "rf": [87, 91, 95, 96, 104, 107, 113, 123, 126, 131], "08": [87, 131], "024": [87, 126], "025": [87, 126], "026": 87, "027": 87, "028": 87, "029": 87, "030": 87, "6841826838300122": 87, "09": 87, "357": [87, 131], "358": [87, 131], "359": [87, 131], "360": [87, 131, 132], "361": [87, 131, 132], "362": [87, 101, 132], "363": [87, 132], "6898496240601504": 87, "101": [87, 108, 114, 123, 125, 131], "102": [87, 123, 125], "103": [87, 108, 123], "105": [87, 108, 123, 125, 134], "106": [87, 123, 125], "108": [87, 123, 134], "109": [87, 123], "6879699248120301": 87, "845": [87, 89], "run_grouped_cv": [87, 89], "229": [88, 97, 123], "230": [88, 97, 108, 123], "three": [88, 91, 95, 97, 104, 107, 114, 118, 123, 131, 132], "isin": [88, 91, 95, 97, 104, 107, 114, 123], "sepal": [88, 91, 97, 104, 107, 129, 133], "length": [88, 91, 97, 104, 107], "petal": [88, 91, 97, 104, 107, 129, 133], "546": 88, "547": [88, 126], "548": [88, 126], "549": 88, "550": 88, "551": 88, "552": 88, "553": 88, "554": 88, "90": [88, 91, 131], "70": [88, 91], "assess": [88, 91, 121, 125], "unbalanc": [88, 91], "df_unbalanc": [88, 91], "value_count": [88, 91], "30": [88, 91, 94, 96, 102, 121, 123, 131], "account": [88, 121], "imbal": 88, "suitabl": [88, 117, 121], "balanced_accuraci": [88, 91, 132], "balanced_accuracy_scor": 88, "42": [88, 91, 94, 102, 103, 107, 122, 125, 131, 132], "test_balanced_accuraci": [88, 91], "635": 88, "636": 88, "637": 88, "638": 88, "639": 88, "80": [88, 91, 131], "640": 88, "641": 88, "_classif": 88, "2394": 88, "8625": 88, "8678571428571429": 88, "u": [88, 95, 107, 108, 117, 121, 125, 131, 132], "correctli": 88, "precis": [88, 132], "ratio": 88, "tp": 88, "precision_scor": 88, "732": 88, "733": 88, "734": 88, "735": 88, "736": 88, "737": 88, "738": 88, "739": 88, "605": [88, 89], "run_simple_binary_classif": [88, 89], "00": [89, 92, 96, 98, 104, 105, 109, 111, 112, 120, 125, 126, 127, 131], "969": 89, "execut": [89, 92, 98, 105, 109, 112, 114], "auto_examples_00_start": 89, "02": [89, 96, 98, 105, 125, 126], "mb": [89, 92, 98, 105, 109, 112], "At": [91, 118, 128, 133], "statist": [91, 96, 107, 118, 130, 132], "repeatedstratifiedkfold": [91, 97, 131, 132], "corrected_ttest": [91, 131], "298": 91, "299": [91, 103, 104, 105], "310": 91, "roc_auc": [91, 107, 131, 132], "scores1": [91, 116, 123, 131], "393": 91, "395": 91, "396": 91, "397": 91, "398": [91, 131], "399": 91, "scores2": [91, 116, 123, 131], "961": 91, "962": 91, "963": 91, "964": 91, "965": 91, "966": 91, "third": [91, 132], "kernel": [91, 102, 103, 121, 123, 125, 126, 133], "scores3": [91, 116, 123, 131], "svm__kernel": [91, 103, 123], "svm_linear": 91, "256": 91, "257": [91, 133], "258": [91, 133], "259": 91, "260": [91, 133], "261": [91, 133], "262": [91, 133], "stats_df": [91, 131], "model_2": [91, 126, 131], "val": [91, 131], "175075": 91, "062567": 91, "895662": 91, "151390": 91, "782741": 91, "test_roc_auc": [91, 107, 131], "108944": 91, "835331": 91, "236153": 91, "685092": 91, "669010": 91, "324331": 91, "viewer": 91, "plot_scor": [91, 116, 131], "uncom": [91, 131], "line": [91, 114, 122, 131], "read": [91, 95, 114, 118, 119, 122, 128, 130, 131, 133], "holoviz": [91, 131], "getting_start": [91, 131], "build_app": [91, 131], "deploi": [91, 125, 131], "pane": 91, "unknown": 91, "keyword": [91, 96, 120], "argument": [91, 96, 108, 122], "widget": 91, "could": [91, 94, 96, 108, 118, 120, 125, 129, 131, 132, 133], "button_typ": 91, "look": [91, 94, 96, 101, 108, 113, 120, 122, 123, 125, 126, 128, 129, 130, 132, 133], "interact": [91, 94, 118, 125, 131], "zoom": [91, 131], "hover": [91, 131], "button": [91, 131], "729": [91, 92], "plot_simple_model_comparison": [91, 92], "auto_examples_01_model_comparison": 92, "demonstr": [93, 114, 126, 132], "analys": [94, 95, 103, 121], "groupshufflesplit": 94, "785": 94, "821": [94, 96], "822": [94, 98], "823": 94, "824": 94, "825": 94, "826": 94, "827": 94, "828": 94, "7218303650149884": 94, "decod": [94, 121], "claim": [94, 107, 122], "acquir": 94, "randomli": 94, "characterist": 94, "unseen": [94, 128], "whom": 94, "later": [94, 97, 114, 122, 131], "938": 94, "939": 94, "940": 94, "941": 94, "942": 94, "943": 94, "944": 94, "7210526315789474": 94, "visual": [94, 117, 118, 122, 128, 130], "part": [94, 116, 118, 120, 122, 128, 131, 133], "raw": [94, 96, 133], "hue": [94, 107], "set_titl": [94, 95, 96, 122], "pre_x": 94, "pre_df": 94, "join": 94, "parietal__": 94, "frontal__": 94, "noth": [94, 123, 132], "standardscal": [94, 113, 123, 125, 127, 132, 133], "seem": [94, 102, 103, 107, 123, 130, 131, 132], "quit": [94, 117, 120, 125], "linearli": 94, "clf": 94, "xlim": 94, "ylim": 94, "xx": 94, "linspac": [94, 122], "yy": 94, "meshgrid": 94, "xy": 94, "vstack": 94, "ravel": 94, "xy_df": 94, "reshap": 94, "contour": 94, "alpha": [94, 120, 122], "linestyl": [94, 122], "boundari": [94, 123], "plot_groupcv_inspect_svm": [94, 98], "22": [95, 97, 121, 123, 131], "899": [95, 104], "904": 95, "905": 95, "906": 95, "907": 95, "908": 95, "909": 95, "910": 95, "911": 95, "intern": [95, 125, 126, 132, 133], "_important_": 95, "caution": [95, 122], "proper": [95, 107, 119, 130], "randomforestclassifi": [95, 113, 123], "understandhow": 95, "to_plot": 95, "feature_importances_": [95, 107], "barplot": 95, "review": [95, 114], "myself": 95, "wander": 95, "about": [95, 114, 121, 122, 125, 126, 128, 130, 131, 132, 133], "entir": [95, 132, 133], "24": [95, 131, 134], "282": [95, 101], "283": 95, "286": 95, "i_fold": [95, 107], "enumer": [95, 107], "this_import": [95, 107], "706": [95, 98, 104], "plot_inspect_random_forest": [95, 98], "make_regress": [96, 120, 121, 126], "pre": [96, 117, 119, 133, 134], "process": [96, 101, 123, 129, 132, 133], "normal": [96, 108, 113, 114, 121, 122, 133, 134], "reduct": 96, "26": [96, 131], "820": 96, "n_inform": 96, "nois": [96, 121], "first_two": 96, "determin": [96, 123, 133], "belong": [96, 108], "x_to_zscor": 96, "summari": [96, 114], "111790": 96, "141618": 96, "023682": 96, "167718": 96, "686170": 96, "977322": 96, "972988": 96, "087946": 96, "895011": 96, "79": [96, 114], "741431": 96, "069985": 96, "772593": 96, "552990": 96, "659172": 96, "204": 96, "293317": 96, "751257": 96, "484100": 96, "759419": 96, "688891": 96, "64": 96, "724008": 96, "206729": 96, "194442": 96, "028152": 96, "174160": 96, "789944": 96, "421885": 96, "724302": 96, "772156": 96, "408321": 96, "392804": 96, "943621": 96, "256723": 96, "383145": 96, "259309": 96, "216": 96, "221085": 96, "explicitli": [96, 102, 121, 123], "declar": 96, "init": 96, "special": 96, "cannot": [96, 121, 133], "tree": [96, 113], "pipeline_cr": [96, 101, 104, 108, 121, 125, 126], "select_vari": [96, 113], "n_compon": [96, 101, 133], "n_estim": [96, 126], "becaus": [96, 108, 121, 122, 123, 125, 128, 130, 131, 132, 133], "creator": [96, 97, 100, 101, 102, 103, 107, 108, 120, 123, 127, 132, 133], "simpli": [96, 120, 121, 122, 125, 126, 133], "did": [96, 103], "hand": [96, 114, 120, 121, 126, 129], "r2": [96, 101, 121, 132], "x_after_pca": 96, "earlier": 96, "x_after_zscor": 96, "high": [96, 120], "pca__pca0": [96, 108], "pca__pca1": [96, 108], "848": 96, "849": 96, "__x_to_zscor": 96, "850": [96, 133], "855": [96, 103, 132, 133], "856": [96, 103, 132, 133], "857": [96, 103, 132], "725696": 96, "582295": 96, "314458": 96, "942935": 96, "977336": 96, "463217": 96, "525139": 96, "219493": 96, "618559": 96, "908592": 96, "395105": 96, "743192": 96, "96": [96, 97, 134], "328111": 96, "670912": 96, "97": [96, 97, 107], "573900": 96, "401304": 96, "98": [96, 97, 122, 131], "918034": 96, "137435": 96, "99": [96, 97, 131], "894566": 96, "357729": 96, "1__": 96, "4__": 96, "013728": 96, "426259": 96, "364686": 96, "944446": 96, "118838": 96, "931848": 96, "004437": 96, "030684": 96, "309092": 96, "523891": 96, "206189": 96, "157667": 96, "099154": 96, "028182": 96, "335538": 96, "252795": 96, "049139": 96, "133702": 96, "240085": 96, "443863": 96, "deviat": [96, 121], "000000e": 96, "689893e": 96, "387779e": 96, "005038e": 96, "013728e": 96, "010202e": 96, "576015e": 96, "463286e": 96, "763131e": 96, "456486e": 96, "488094e": 96, "018781e": 96, "113700e": 96, "184776e": 96, "555": [96, 98], "plot_preprocess": [96, 98], "shufflesplit": 97, "220": [97, 123], "221": [97, 123], "226": [97, 108, 123], "227": [97, 123], "228": [97, 108, 123], "231": [97, 108, 123], "008984": 97, "005041": 97, "42489ff0163b2f12752440a6b7ef74c7": 97, "009117": 97, "005031": 97, "009217": 97, "004859": 97, "009039": 97, "004814": 97, "004783": 97, "009097": 97, "004848": 97, "008589": 97, "004753": 97, "008878": 97, "005057": 97, "008459": 97, "005656": 97, "008691": 97, "005177": 97, "009933": 97, "005242": 97, "008971": 97, "005279": 97, "008991": 97, "005135": 97, "008579": 97, "005362": 97, "008895": 97, "004819": 97, "009059": 97, "005381": 97, "009240": 97, "005769": 97, "008873": 97, "005651": 97, "009011": 97, "19": [97, 120, 123, 131], "009275": [97, 132], "005215": 97, "cv_predict": 97, "repeat0_p0": [97, 125], "repeat1_p0": [97, 125], "repeat2_p0": [97, 125], "repeat3_p0": 97, "_pipelin": 97, "pipelineinspector": 97, "0x7efda0d493c0": 97, "491": [97, 98], "run_binary_inspect_fold": [97, 98], "574": 98, "auto_examples_02_inspect": 98, "Then": [100, 108, 119, 126, 128, 133], "lya": 100, "paa": 100, "olivero": 100, "sami": [100, 108, 121, 134], "hamdan": [100, 108, 121, 134], "crucial": [100, 121], "594": [100, 123], "target_cr": [100, 127], "target_pipeline_cr": [100, 121], "0x7efda0ee2740": 100, "623": 100, "624": 100, "625": 100, "627": 100, "628": 100, "629": 100, "009413": 100, "006118": 100, "007291": 100, "006413": 100, "007362": 100, "006126": 100, "007138": 100, "006085": 100, "007659": [100, 108], "006645": 100, "154": [100, 123], "0615805903489": 100, "run_apply_to_target": [100, 105], "reduc": [101, 108, 133], "dimension": [101, 108, 120, 123, 133], "subset": [101, 123, 128], "georgio": 101, "antonopoulo": 101, "kaustubh": [101, 134], "r": [101, 111], "patil": [101, 134], "assign": [101, 114], "pca1": 101, "pca2": 101, "pca_feats1": 101, "pca_feats2": 101, "273": [101, 125], "__pca1": 101, "__pca2": 101, "274": [101, 125, 133], "__categor": [101, 127], "0x7efda163e7d0": 101, "276": 101, "277": 101, "278": 101, "281": 101, "025040": 101, "012100": [101, 121], "030288": 101, "012162": 101, "025562": 101, "014418": 101, "035403": 101, "012670": 101, "026484": 101, "012106": 101, "3107976743678922": 101, "untouch": 101, "data_processed1": 101, "data_processed2": 101, "pca_feats1__pca0": 101, "161": [101, 123], "063175": 101, "133274": 101, "108111": 101, "075741": 101, "085907": 101, "054779": 101, "030464": 101, "033246": 101, "015491": 101, "098172": 101, "033216": 101, "015999": 101, "050783": 101, "032289": 101, "012577": 101, "067737": 101, "013504": 101, "315": 101, "045025": 101, "031454": 101, "010903": 101, "001078": 101, "pca_feats2__pca0": 101, "234716": 101, "012141": 101, "078784": 101, "006290": 101, "026190": 101, "341472": 101, "348168": 101, "269257": 101, "286067": 101, "309025": 101, "726": [101, 105], "run_example_pca_featset": [101, 105], "901": 102, "902": 102, "attempt": [102, 103], "926": [102, 120], "927": [102, 120], "929": 102, "930": 102, "931": 102, "932": 102, "933": [102, 132], "5939164168576971": [102, 103], "gamma": [102, 103, 123, 125], "But": [102, 107, 108, 122, 123, 125, 130, 132, 133], "rbf": [102, 103, 123], "auto": [102, 123], "1e": [102, 103, 123, 125, 126], "speed": [102, 103], "042": [102, 107], "043": 102, "001": [102, 103, 120, 123, 125], "044": 102, "045": 102, "046": 102, "svm__c": [102, 103, 123, 125, 126], "inner": [102, 103, 123, 125, 126, 134], "047": 102, "048": 102, "svm__gamma": [102, 103, 123], "049": 102, "set_column_typ": [102, 123, 125, 132], "setcolumntyp": [102, 123, 125, 132], "050": 102, "svc": [102, 113, 123, 125, 132, 133], "051": 102, "052": [102, 123], "053": [102, 123], "054": 102, "7087109857168048": [102, 103], "best_params_": [102, 103, 123], "best_estimator_": [102, 103], "_gamma": [102, 103], "617": [102, 105], "run_hyperparameter_multiple_grid": [102, 105], "144": [103, 133], "171": 103, "172": [103, 120], "173": 103, "174": 103, "175": 103, "176": 103, "177": 103, "optim": [103, 123, 125, 133], "find": [103, 123, 130], "best": [103, 123, 133], "291": 103, "292": 103, "293": 103, "294": 103, "295": 103, "296": 103, "297": 103, "588308940222183": 103, "much": [103, 122, 123, 125, 128], "explor": [103, 108, 125, 126], "too": [103, 123], "poli": 103, "854": [103, 132, 133], "858": [103, 132], "859": [103, 132], "860": [103, 132], "lest": 103, "371": 103, "372": 103, "373": 103, "374": 103, "375": 103, "376": 103, "377": 103, "378": 103, "5188855581026275": 103, "happen": [103, 125, 126], "461": 103, "462": 103, "464": 103, "465": 103, "466": 103, "467": 103, "468": 103, "469": 103, "917": [103, 105, 111], "run_hyperparameter_tun": [103, 105], "logist": [104, 113, 131, 133], "32": 104, "692": 104, "693": 104, "petal_width": [104, 107, 123, 129, 132, 133], "model_sep": 104, "model_pet": 104, "698": [104, 105, 107], "__sepal": [104, 133], "699": [104, 107, 131], "__petal": [104, 133], "700": [104, 107], "0x7efda0ee3820": 104, "0x7efda0ee09a0": 104, "701": [104, 107], "702": [104, 107], "704": [104, 131], "896": 104, "897": 104, "898": 104, "85": 104, "run_stacked_model": [104, 105], "auto_examples_03_complex_model": 105, "04": 105, "relat": [106, 121, 129], "stratifiedbootstrap": 107, "689": 107, "690": 107, "ml": [107, 118], "classic": 107, "frequentist": 107, "contrast": 107, "gap": 107, "approach": [107, 120, 122, 123, 128, 133], "below": [107, 117, 120], "2000": 107, "n_bootstrap": 107, "n_element": 107, "len": [107, 108, 121], "scores_ncr": 107, "696": 107, "697": 107, "next": [107, 117, 119, 127, 129, 133], "again": [107, 121, 122, 123, 125, 128, 133], "tell": [107, 121, 132], "confound_remov": [107, 108, 113, 121], "scores_cr": 107, "52": [107, 123], "033": 107, "__confound": [107, 121], "__featur": [107, 121], "034": 107, "035": 107, "037": 107, "040": 107, "041": [107, 120], "easier": [107, 114, 133], "long": 107, "df_ncr_metric": 107, "df_cr_metric": 107, "df_metric": 107, "catplot": 107, "col": 107, "swarm": 107, "04_confound": 107, "plot_confound_removal_classif": [107, 109], "155": [107, 123], "them": [107, 114, 116, 117, 120, 122, 123, 131, 132, 133], "pair": 107, "systemat": 107, "differec": 107, "df_diff_metr": 107, "whisker": 107, "box": [107, 118], "whi": 107, "axhlin": 107, "roc": 107, "auc": 107, "term": [107, 122, 129, 133], "mayb": [107, 131], "percentil": [107, 113], "amount": [107, 118, 125], "ncr_fi": 107, "cr_fi": 107, "feature_import": 107, "dodg": [107, 122], "235": [107, 123, 126], "diff_fi": 107, "axvlin": [107, 122], "816": [107, 109], "most": [108, 117, 120, 121, 122, 125, 128, 133], "remove_confound": 108, "sometim": [108, 121, 125, 126, 127], "discuss": 108, "df_featur": 108, "furthermor": 108, "put": [108, 121], "46": 108, "223": [108, 123], "224": [108, 123], "0x7efda140e2f0": 108, "feature_nam": [108, 131], "df_deconfound": 108, "assum": [108, 122], "closer": [108, 113, 132], "understand": [108, 118, 121, 125, 130, 131, 133], "achiev": [108, 121, 127, 132, 133], "autoclass": 108, "029271": 108, "057228": 108, "009658": 108, "019424": 108, "012310": 108, "028194": 108, "005874": 108, "047538": 108, "015568": 108, "024667": 108, "061639": 108, "082913": 108, "076494": 108, "039983": 108, "017885": 108, "004736": 108, "036479": 108, "081307": 108, "025897": 108, "049135": 108, "029380": 108, "000071": 108, "013139": 108, "032449": 108, "032631": 108, "012234": 108, "025295": 108, "037349": 108, "654": [108, 123], "655": 108, "656": 108, "0x7efda140c820": 108, "657": 108, "658": 108, "661": 108, "662": 108, "df_transform": 108, "pca__pca2": 108, "pca__pca7": 108, "pca__pca8": 108, "014051": 108, "075715": 108, "017395": 108, "008604": 108, "002330": 108, "099883": 108, "062829": 108, "014516": 108, "024022": 108, "002075": 108, "029015": 108, "053253": 108, "032477": 108, "001197": 108, "002579": 108, "035162": 108, "001324": 108, "106807": 108, "006566": 108, "003545": 108, "003951": 108, "025445": 108, "000421": 108, "002095": 108, "000517": 108, "lastli": [108, 121], "098": [108, 123, 125, 131], "099": [108, 123, 131], "044596": 108, "016837": 108, "043627": 108, "017717": 108, "048107": 108, "017223": 108, "046617": 108, "018195": 108, "046344": 108, "018405": 108, "run_return_confound": [108, 109], "119": 109, "auto_examples_04_confound": 109, "extend": [110, 132], "variou": 110, "aspect": [110, 122, 133], "make_scor": 111, "register_scor": 111, "59": 111, "779": [111, 131], "807": 111, "808": 111, "809": 111, "810": 111, "811": 111, "812": 111, "010411": 111, "006509": 111, "010235": 111, "005758": 111, "009450": 111, "004801": 111, "009205": 111, "004907": 111, "008923": 111, "004837": 111, "44": [111, 120, 121, 125, 126, 127, 131, 132, 133], "264653948271885": 111, "thing": [111, 128, 133], "r2_corr": [111, 132], "918": [111, 120, 133], "919": [111, 120, 133], "920": [111, 120, 133], "921": [111, 133], "922": [111, 133], "test_neg_mean_absolute_error": 111, "test_r2_corr": 111, "264654": 111, "486498": 111, "take": [111, 122, 125, 133], "def": 111, "pearson_scor": 111, "squeez": 111, "016": [111, 133], "017": [111, 133], "018": [111, 133], "019": [111, 133], "020": [111, 133], "021": [111, 133], "354": [111, 112, 131], "run_custom_scorers_regress": [111, 112], "auto_examples_05_custom": 112, "descript": [113, 114, 133], "short": [113, 114, 121], "link": [113, 114, 130, 133], "unit": [113, 118], "scaler_robust": 113, "median": 113, "iqr": 113, "robustscal": [113, 123], "scaler_minmax": 113, "minmaxscal": 113, "scaler_maxab": 113, "maxabsscal": 113, "scaler_norm": 113, "norm": 113, "scaler_quantil": 113, "uniform": [113, 122, 134], "robust": [113, 116], "quantiletransform": 113, "scaler_pow": 113, "gaussianis": 113, "powertransform": 113, "select_univari": 113, "genericunivariateselect": 113, "select_percentil": 113, "rank": 113, "selectpercentil": 113, "select_k": [113, 123], "selectkbest": [113, 123], "select_fdr": 113, "selectfdr": 113, "select_fpr": 113, "fpr": 113, "selectfpr": 113, "select_fw": 113, "fwe": 113, "selectfw": 113, "variancethreshold": 113, "drop_column": 113, "dropcolumn": 113, "change_column_typ": 113, "changecolumntyp": 113, "filtercolumn": 113, "princip": [113, 133], "svr": [113, 126, 127], "randomforestregressor": 113, "extratreesclassifi": 113, "extratreesregressor": 113, "adaboost": 113, "adaboostclassifi": 113, "adaboostregressor": 113, "bag": 113, "baggingclassifi": 113, "baggingregressor": 113, "gradientboost": 113, "gradient": 113, "boost": 113, "gradientboostingclassifi": 113, "gradientboostingregressor": 113, "stackingclassifi": [113, 126], "stackingregressor": [113, 126], "gauss": 113, "gaussianprocessclassifi": 113, "gaussianprocessregressor": 113, "logit": [113, 123, 131], "aka": 113, "maxent": 113, "logisticregress": [113, 123], "logitcv": 113, "logisticregressioncv": 113, "l2": [113, 123], "ridgeclassifi": 113, "ridgecv": 113, "built": [113, 118, 126, 131, 132, 133], "ridgeclassifiercv": 113, "sgd": 113, "minim": 113, "empir": [113, 122], "loss": [113, 121], "sgdclassifi": 113, "sgdregressor": 113, "nb_bernoulli": 113, "multivari": 113, "bernoulli": 113, "bernoullinb": 113, "nb_categor": 113, "categoricalnb": 113, "nb_complement": 113, "complementnb": 113, "nb_gaussian": 113, "gaussiannb": 113, "nb_multinomi": 113, "multinomi": 113, "multinomialnb": 113, "dynamicselect": [113, 134], "dummyclassifi": 113, "dummyregressor": 113, "fork": 114, "com": [114, 122, 128], "repositori": 114, "never": [114, 133], "offici": [114, 117], "clone": 114, "virtual": [114, 117], "pip": [114, 116, 117], "branch": [114, 119], "refactor": [114, 134], "feat": 114, "prefix": 114, "git": [114, 119], "checkout": [114, 119], "help": [114, 117, 118, 121, 125, 131, 133], "commit": [114, 119], "regularli": 114, "On": [114, 121, 132], "save": [114, 133], "smaller": 114, "semant": 114, "suit": [114, 125], "tox": 114, "push": [114, 119], "open": 114, "displai": [114, 125, 131], "submit": 114, "templat": 114, "web": 114, "interfac": [114, 126], "meet": 114, "directori": 114, "rare": 114, "circumst": 114, "coverag": 114, "decreas": 114, "report": 114, "codecov": 114, "usag": [114, 117, 128, 133], "draft": [114, 119], "id": 114, "liner": [114, 131], "newsfrag": 114, "bug": [114, 134], "bugfix": 114, "enhanc": 114, "enh": 114, "improv": [114, 117], "miscellan": 114, "misc": 114, "record": 114, "content": 114, "typo": 114, "intro": 114, "biggest": 114, "fan": 114, "yourself": 114, "contributor": 114, "inc": 114, "against": 114, "someon": [114, 122], "core": [114, 128, 131], "team": 114, "success": [114, 123, 128], "pytest": 114, "come": [114, 122, 125, 129, 133], "intend": 114, "cd": 114, "_build": 114, "situat": 114, "clean": [114, 117], "rest": 114, "rst": [114, 119], "plot_": 114, "run_": 114, "dependend": 114, "block": 114, "comment": 114, "render": [114, 132], "emb": 114, "shall": [114, 122], "preced": 114, "issu": [116, 119, 122, 125, 134], "bokeh": [116, 117], "These": [116, 117, 120, 132], "develop": [116, 117, 118, 119, 134], "usual": [116, 123, 133], "through": [116, 133], "manag": 116, "conda": [116, 117], "forg": 116, "standalon": 116, "applic": [116, 120, 121, 125], "browser": 116, "jupyter_bokeh": 116, "servabl": 116, "0rc1": 117, "0b1": 117, "nevertheless": [117, 133], "although": 117, "strongli": 117, "recommend": [117, 129], "environ": [117, 118, 132], "promin": 117, "venv": 117, "env": 117, "latest": [117, 119, 134], "therefor": [117, 120, 121, 132, 133], "oftentim": 117, "newest": 117, "sens": [117, 123], "aim": [117, 118, 133], "pypi": [117, 119], "relas": 117, "yet": [117, 129], "insal": 117, "mod": 117, "orient": 118, "aml": 118, "institut": 118, "neurosci": [118, 120], "medicin": 118, "inm": 118, "thought": [118, 133], "research": [118, 120, 121, 122], "simpler": 118, "abstract": 118, "power": [118, 125, 126], "minor": [118, 119], "flexibilii": 118, "video": 118, "tutori": 118, "offer": [118, 129], "essenti": [118, 125], "benefit": 118, "therebi": 118, "avoid": [118, 121, 122, 123], "nice": [118, 129, 132, 133], "system": [118, 119], "accord": [118, 120, 122, 126, 134], "setup": [118, 130], "suggest": [118, 122], "deeper": [118, 125, 130, 131], "topic": [118, 122, 130, 131], "overview": [118, 125, 131, 133], "contribut": 118, "local": 118, "pull": [118, 119], "guidelin": 118, "write": [118, 133], "maintain": 118, "frequenli": 118, "ask": 118, "question": [118, 121, 122], "2022": [118, 121], "major": 119, "micro": 119, "devn": 119, "distanc": 119, "setuptools_scm": 119, "plugin": 119, "tag": 119, "increment": [119, 133], "segment": 119, "publish": 119, "testpypi": 119, "onc": [119, 125, 128, 130, 133], "mileston": 119, "reach": 119, "towncrier": 119, "proceed": [119, 133], "sync": 119, "rebas": 119, "changelog": 119, "properli": 119, "reflect": 119, "whats_new": 119, "chage": 119, "pr": 119, "merg": 119, "via": [119, 130], "vx": 119, "setuptools_scm_debug": 119, "dir": 119, "dist": 119, "bump": [119, 134], "vd": 119, "neuroimag": [120, 121], "typic": 120, "problemat": 120, "due": [120, 122], "curs": 120, "especi": 120, "recent": 120, "propos": 120, "fluid": 120, "intellig": 120, "sustain": 120, "attent": 120, "connect": [120, 121], "nutshel": 120, "summar": 120, "subsequ": 120, "commonli": [120, 133], "principl": 120, "leverag": [120, 125], "workflow": [120, 125, 130, 133], "x_name": [120, 126], "feature_": [120, 121, 126], "cbpm_pipeline_cr": 120, "final_model": [120, 125], "feature_1": [120, 121, 126], "feature_2": [120, 121, 126], "feature_3": [120, 121, 126], "feature_4": [120, 121, 126], "feature_5": [120, 121, 126], "feature_6": [120, 121, 126], "feature_7": [120, 121, 126], "feature_8": [120, 121, 126], "feature_9": [120, 121, 126], "feature_10": [120, 121, 126], "feature_11": [120, 121, 126], "feature_12": [120, 121, 126], "feature_13": [120, 121, 126], "feature_14": [120, 121, 126], "feature_15": [120, 121, 126], "feature_16": [120, 121, 126], "feature_17": [120, 121, 126], "feature_18": [120, 121, 126], "feature_19": [120, 121, 126], "feature_20": [120, 126], "923": [120, 133], "925": [120, 133], "960": 120, "No": [120, 122], "rid": 120, "088": 120, "129": [120, 132], "customis": [120, 126], "increas": 120, "179": 120, "181": 120, "182": 120, "cbpm__significance_threshold": 120, "noteworthi": 120, "sign": 120, "spearmanr": 120, "183": 120, "0x7efda62d3c70": 120, "0x7efdb737b7f0": 120, "184": [120, 121, 131], "0x7efdb7387d70": 120, "guess": 120, "spearman": 120, "xilin": 120, "individu": [120, 125, 132], "behavior": [120, 121, 125, 134], "nat": 120, "protoc": 120, "2017": [120, 121], "mar": [120, 121], "506": 120, "518": 120, "emili": 120, "fingerprint": 120, "2015": 120, "nov": 120, "1664": 120, "71": 120, "rosenberg": 120, "monica": 120, "neuromark": 120, "whole": 120, "jan": [120, 121], "165": 120, "270": [120, 125], "ultim": 121, "real": [121, 125], "world": [121, 125], "scenario": [121, 132, 133], "relationship": 121, "un": 121, "observ": 121, "potenti": [121, 125], "often": [121, 128, 133], "similarli": [121, 125], "rather": 121, "jointli": 121, "prevent": [121, 123], "laid": 121, "rel": [121, 126], "littl": 121, "involv": 121, "simul": 121, "artifici": [121, 126, 133], "normal_dist_conf_on": 121, "normal_dist_conf_two": 121, "noise_conf_on": 121, "rand": [121, 122], "noise_conf_two": 121, "multipli": 121, "factor": 121, "confound_on": 121, "confound_two": 121, "prefer": 121, "human": 121, "readabl": 121, "confound_1": 121, "confound_2": 121, "my_target": 121, "distinguish": [121, 126, 133], "predictor": 121, "accordingli": [121, 128], "think": 121, "parametris": 121, "initialis": [121, 126], "063": 121, "064": 121, "065": 121, "071": 121, "feature_0": 121, "073": 121, "076": 121, "078": 121, "079": 121, "052286": 121, "014301": 121, "052656": 121, "015772": 121, "055184": 121, "015756": 121, "060348": 121, "014791": 121, "046721": 121, "013768": 121, "slightli": 121, "target_confound_remov": 121, "0x7efda11c9db0": 121, "insert": 121, "importantli": [121, 122, 125, 128, 129, 133], "445": [121, 131], "0x7efda0d89b40": 121, "446": 121, "447": 121, "448": 121, "450": 121, "451": 121, "452": 121, "453": 121, "475": 121, "space": 121, "496": 121, "517": 121, "537": 121, "557": 121, "012609": 121, "007887": 121, "011511": 121, "007994": 121, "011499": 121, "007860": 121, "011451": 121, "007898": 121, "fashion": 121, "reason": [121, 122], "further": [121, 128], "consider": 121, "why": [121, 122, 123, 130], "mitig": 121, "bia": [121, 122], "accur": 121, "argu": 121, "appropri": 121, "valuabl": [121, 125, 128], "difficult": [121, 123], "challeng": 121, "ineffect": 121, "particular": [121, 125, 133], "fact": [121, 125], "collid": 121, "spuriou": 121, "evid": [121, 122], "leak": [121, 128], "bias": [121, 122], "care": [121, 133], "thorough": 121, "strength": 121, "limit": 121, "techniqu": [121, 122, 123, 125], "rao": 121, "anil": 121, "presenc": 121, "volum": [121, 122], "april": 121, "49": 121, "snoek": 121, "luka": 121, "januari": 121, "2019": [121, 131], "741": 121, "760": [121, 132], "he": 121, "tong": 121, "neural": [121, 133], "network": [121, 133], "206": 121, "februari": 121, "2020": 121, "116276": 121, "practic": [121, 122], "knowledg": [121, 125], "discoveri": 121, "databas": 121, "scienc": [121, 128], "demo": 121, "track": 121, "2021": 121, "12461": 121, "chyzhyk": 121, "darya": 121, "biomark": 121, "gigasci": 121, "holmberg": 121, "mathia": 121, "jama": 121, "327": 121, "1282": 121, "1283": 121, "1001": [121, 131], "1820": 121, "arxiv": 121, "2210": 121, "09232": 121, "revis": 121, "27": [121, 131], "oct": 121, "513": 121, "mention": 122, "don": [122, 123], "_almost_": 122, "infinit": 122, "unbias": 122, "overestim": 122, "rememb": [122, 125, 132], "_unseen_": 122, "surpris": 122, "would": [122, 123, 129, 131, 133], "answer": 122, "imposs": 122, "bengio": 122, "grandvalet": 122, "colleagu": 122, "few": [122, 125, 128], "word": [122, 123], "thumb": [122, 133], "compromis": 122, "loocv": 122, "holdout": 122, "taken": 122, "intens": 122, "unconclus": 122, "intuit": [122, 125, 131], "direct": 122, "thread": 122, "emir": 122, "extrem": 122, "choic": 122, "fun": 122, "begin": 122, "variant": 122, "solv": [122, 128], "shed": 122, "light": 122, "poorli": 122, "stratifiedkfold": [122, 132], "rescu": 122, "matter": [122, 128, 131], "quantiz": 122, "divid": 122, "histplot": 122, "train_set": 122, "test_set": 122, "shrink": [122, 125], "suptitl": 122, "gaussian": 122, "almost": 122, "discrete_i": 122, "digit": 122, "kdeplot": 122, "layer": 122, "dash": 122, "repeatedcontinuousstratifiedkfold": [122, 134], "repeatedcontinuousstratifiedgroupkfold": 122, "jmlr": 122, "decemb": 122, "2004": 122, "1089": 122, "1105": 122, "stackexchang": 122, "61783": 122, "kohavi": 122, "ijcai": 122, "1137": 122, "1145": 122, "754": 122, "flower": 123, "pprint": [123, 125, 132], "pretti": 123, "tolist": [123, 131], "51": 123, "who": 123, "common": [123, 128], "creator2": [123, 131], "055": 123, "056": 123, "057": 123, "058": 123, "059": 123, "060": 123, "8099999999999999": 123, "136": [123, 133], "137": [123, 133], "138": [123, 133], "139": [123, 133], "141": 123, "etc": 123, "optimist": 123, "loop": 123, "219": 123, "scores_tun": 123, "model_tun": 123, "222": 123, "225": 123, "9100000000000001": 123, "tri": 123, "conclud": 123, "110": 123, "111": 123, "112": 123, "113": 123, "114": 123, "115": 123, "116": 123, "117": 123, "mixtur": 123, "326": 123, "0001": 123, "328": 123, "329": 123, "330": 123, "331": 123, "332": 123, "333": 123, "334": 123, "select_k__k": 123, "156": 123, "157": 123, "158": [123, 131], "159": 123, "160": 123, "162": 123, "concept": [123, 128], "receiv": 123, "gridsearchcv": 123, "veri": [123, 125, 126, 128, 129], "construct": 123, "diment": 123, "randomizedsearchcv": 123, "similar": [123, 126, 132, 133], "lot": [123, 125], "consum": 123, "those": [123, 128], "unnecessari": 123, "model1": 123, "232": 123, "233": 123, "234": [123, 126], "236": [123, 126], "93": 123, "forc": 123, "repat": 123, "creator1": [123, 131], "model2": 123, "591": 123, "592": 123, "593": 123, "596": 123, "598": 123, "599": 123, "601": 123, "602": 123, "603": 123, "inde": [123, 132], "equival": 123, "param_grid": [123, 125], "stop": 123, "creator3": [123, 131], "max_depth": [123, 126], "creator4": 123, "penalti": 123, "l1": 123, "dual": 123, "solver": 123, "liblinear": 123, "model3": 123, "41": [123, 126, 131], "089": 123, "090": 123, "091": 123, "092": 123, "093": [123, 131], "094": [123, 131], "model__c": 123, "model__gamma": 123, "095": 123, "096": [123, 125, 131], "097": [123, 125], "model__max_depth": 123, "model__penalti": 123, "107": [123, 125], "9200000000000002": 123, "beat": 123, "gain": 125, "insight": 125, "impact": 125, "analyz": 125, "abil": 125, "critic": 125, "influenc": 125, "deploy": 125, "focu": [125, 129], "anomali": 125, "logger": [125, 126], "toi": [125, 126], "plai": 125, "penguin": 125, "penguins_df": 125, "island": 125, "queri": 125, "chinstrap": 125, "dropna": 125, "adeli": 125, "gentoo": 125, "390": 125, "391": 125, "fairli": 125, "geomspac": [125, 126], "1e2": [125, 126], "notic": [125, 133], "nformat": 125, "bill_length_mm": 125, "bill_depth_mm": 125, "flipper_length_mm": 125, "body_mass_g": 125, "151": [125, 134], "123": [125, 131], "quick": 125, "error_scor": 125, "nan": 125, "jucolumntransform": 125, "with_mean": [125, 133], "with_std": 125, "wrapmodel": 125, "break_ti": 125, "cache_s": 125, "class_weight": 125, "coef0": 125, "decision_function_shap": 125, "ovr": 125, "max_it": 125, "tol": 125, "estimator__memori": 125, "estimator__set_column_typ": 125, "estimator__set_column_types__x_typ": 125, "estimator__set_column_types__row_select_col_typ": 125, "estimator__set_column_types__row_select_v": 125, "estimator__step": 125, "estimator__svm": 125, "estimator__svm__c": 125, "estimator__svm__apply_to": 125, "estimator__svm__break_ti": 125, "estimator__svm__cache_s": 125, "estimator__svm__class_weight": 125, "estimator__svm__coef0": 125, "estimator__svm__decision_function_shap": 125, "estimator__svm__degre": 125, "estimator__svm__gamma": 125, "estimator__svm__kernel": 125, "estimator__svm__max_it": 125, "estimator__svm__model": 125, "estimator__svm__needed_typ": 125, "estimator__svm__prob": 125, "estimator__svm__random_st": 125, "estimator__svm__shrink": 125, "estimator__svm__tol": 125, "estimator__svm__verbos": 125, "estimator__verbos": 125, "estimator__zscor": 125, "estimator__zscore__apply_to": 125, "estimator__zscore__copi": 125, "estimator__zscore__nam": 125, "estimator__zscore__needed_typ": 125, "estimator__zscore__row_select_col_typ": 125, "estimator__zscore__row_select_v": 125, "estimator__zscore__transform": 125, "estimator__zscore__with_mean": 125, "estimator__zscore__with_std": 125, "pre_dispatch": 125, "refit": 125, "get_fitted_param": 125, "set_column_types__column_mapper_": 125, "bill_depth_mm__": 125, "bill_length_mm__": 125, "body_mass_g__": 125, "flipper_length_mm__": 125, "set_column_types__feature_names_in_": 125, "svm__model_": 125, "zscore__column_transformer_": 125, "remaind": 125, "passthrough": 125, "make_type_selector": 125, "0x7efda12644f0": 125, "verbose_feature_names_out": 125, "zscore__feature_names_in_": 125, "zscore__mean_": 125, "70291971": 125, "83613139": 125, "202": 125, "17883212": 125, "4318": 125, "06569343": 125, "zscore__n_features_in_": 125, "zscore__n_samples_seen_": 125, "zscore__scale_": 125, "18607683": 125, "00973207": 125, "02045287": 125, "834": 125, "40628575": 125, "zscore__var_": 125, "68953929e": 125, "03902299e": 125, "25614004e": 125, "96233850e": 125, "somewhat": [125, 126], "structur": [125, 129], "made": [125, 130, 131], "handi": [125, 129, 133], "fold_predict": 125, "repeat7_p0": 125, "repeat8_p0": 125, "repeat9_p0": 125, "269": [125, 133], "271": [125, 133], "272": [125, 133], "foldsinspector": 125, "_c_": 125, "c_valu": 125, "fold_inspector": 125, "fold_model": 125, "realis": 125, "ever": 125, "address": 125, "aris": 125, "serv": 125, "asset": 125, "transpar": [125, 128], "reliabl": 125, "capabl": [125, 126, 134], "navig": 125, "har": 125, "164": 125, "flexibl": 126, "cours": 126, "761": [126, 132], "762": [126, 132], "mind": 126, "arbitrari": [126, 132], "model_1": [126, 131], "765": 126, "00000000e": 126, "78255940e": 126, "74263683e": 126, "15443469e": 126, "99484250e": 126, "66810054e": 126, "64158883e": 126, "29154967e": 126, "59381366e": 126, "0x7efdb136a3e0": 126, "min_samples_leaf": 126, "min_samples_split": 126, "766": 126, "767": 126, "0x7efda0bc3490": 126, "768": 126, "0x7efdb136a6e0": 126, "769": [126, 131], "770": [126, 131], "772": 126, "773": 126, "774": 126, "775": [126, 131], "776": 126, "777": [126, 131], "rf__max_depth": 126, "rf__min_samples_leaf": 126, "rf__min_samples_split": 126, "778": [126, 131], "023": 126, "desir": [126, 133], "type1": 126, "type2": 126, "type1_": 126, "type2_": 126, "__type1": 126, "0x7efda13add20": 126, "237": 126, "__type2": 126, "0x7efda1d93580": 126, "239": 126, "type1_1": 126, "type1_2": 126, "type1_3": 126, "type1_4": 126, "type1_5": 126, "type1_6": 126, "type1_7": 126, "type1_8": 126, "type1_9": 126, "type1_10": 126, "type2_1": 126, "type2_2": 126, "type2_3": 126, "type2_4": 126, "type2_5": 126, "type2_6": 126, "type2_7": 126, "type2_8": 126, "type2_9": 126, "type2_10": 126, "240": 126, "242": 126, "244": 126, "246": 126, "247": 126, "248": 126, "249": 126, "250": 126, "flexibli": 126, "Of": 126, "130": [126, 131, 132], "cover": [127, 129, 133], "far": [127, 129, 132, 133], "conist": 127, "manner": [127, 128, 129, 131, 133], "clear": 127, "563": 127, "564": 127, "target_jutargetpipelin": 127, "0x7efda0bd3910": 127, "565": 127, "566": 127, "567": [127, 131], "569": [127, 131], "570": 127, "021051": 127, "006609": 127, "018552": 127, "006459": [127, 133], "017595": 127, "008535": 127, "017108": 127, "006764": 127, "019587": 127, "006552": 127, "overal": 127, "190": 127, "goal": 128, "beyond": 128, "exact": 128, "domingo": 128, "2012": 128, "ressourc": 128, "efficeint": 128, "disadvantag": 128, "small": 128, "unstabl": 128, "overcom": 128, "resourc": 128, "accident": 128, "quickli": 128, "obviou": 128, "straightforward": [128, 133], "prone": [128, 131], "mistak": 128, "www": 128, "sciencedirect": 128, "articl": 128, "pii": 128, "s105381191630595x": 128, "natur": 128, "s41746": 128, "022": [128, 133], "00592": 128, "s1053811917305311": 128, "cross_valid": [128, 130], "commun": 129, "capac": 129, "colum": 129, "manipul": 129, "anyth": [129, 132], "meaning": 129, "_sepal_": 129, "_petal_": 129, "hundr": 129, "thousand": 129, "saw": [129, 131, 132, 133], "parametr": [129, 133], "advanc": 129, "backbon": 130, "magic": 130, "goe": 130, "utmost": 130, "glanc": [130, 132], "chapter": 130, "ist": 130, "familiar": 130, "along": 130, "fundament": 130, "essenc": 130, "click": 130, "fanci": 130, "stuff": 130, "decent": 131, "benchmark": 131, "enough": 131, "tediou": 131, "sound": 131, "switch": 131, "breast": 131, "cancer": 131, "malign": 131, "benign": 131, "load_breast_canc": 131, "radiu": 131, "textur": 131, "perimet": 131, "area": 131, "smooth": 131, "compact": 131, "concav": 131, "symmetri": 131, "fractal": 131, "dimens": 131, "worst": 131, "38": [131, 133], "122": [131, 134], "11840": 131, "27760": 131, "3001": 131, "14710": 131, "2419": 131, "07871": 131, "0950": 131, "9053": 131, "589": 131, "153": 131, "006399": 131, "04904": 131, "05373": 131, "01587": 131, "03003": 131, "006193": 131, "33": 131, "1622": 131, "6656": 131, "7119": 131, "2654": 131, "4601": 131, "11890": 131, "57": 131, "132": [131, 133], "1326": 131, "08474": 131, "07864": 131, "0869": 131, "07017": 131, "1812": 131, "05667": 131, "5435": 131, "7339": 131, "74": 131, "005225": 131, "01308": 131, "01860": 131, "01340": 131, "01389": 131, "003532": 131, "1956": 131, "1238": 131, "1866": 131, "2416": 131, "1860": 131, "2750": 131, "08902": 131, "69": 131, "1203": 131, "10960": 131, "15990": 131, "1974": 131, "12790": 131, "2069": 131, "05999": 131, "7456": 131, "7869": 131, "585": 131, "94": [131, 134], "03": 131, "006150": 131, "04006": 131, "03832": 131, "02058": 131, "02250": 131, "004571": 131, "1709": 131, "1444": 131, "4245": 131, "4504": 131, "2430": 131, "3613": 131, "08758": 131, "58": 131, "14250": 131, "28390": 131, "2414": 131, "10520": 131, "2597": 131, "09744": 131, "4956": 131, "1560": 131, "009110": 131, "07458": 131, "05661": 131, "01867": 131, "05963": 131, "009208": 131, "91": 131, "2098": 131, "8663": 131, "6869": 131, "2575": 131, "6638": 131, "17300": 131, "135": [131, 133, 134], "1297": 131, "10030": 131, "13280": 131, "1980": 131, "10430": 131, "1809": 131, "05883": 131, "7572": 131, "7813": 131, "438": 131, "011490": 131, "02461": 131, "05688": 131, "01885": 131, "01756": 131, "005115": 131, "54": 131, "67": 131, "1575": 131, "1374": 131, "2050": 131, "4000": 131, "1625": 131, "2364": 131, "07678": 131, "cv_splitter": [131, 132], "780": 131, "212": 131, "39": 131, "353": 131, "356": 131, "705": 131, "710": 131, "pairwis": 131, "neither": 131, "nor": 131, "946304": 131, "083461": 131, "250382": 131, "140882": 131, "891066": 131, "285373": 131, "048138": 131, "144413": 131, "361847": 131, "206356": 131, "619069": 131, "014156": 131, "989015": 131, "093249": 131, "302681": 131, "908044": 131, "dive": 131, "curiou": 131, "_iris_": 132, "36": 132, "755": 132, "756": 132, "757": 132, "758": 132, "759": 132, "009314": 132, "005411": 132, "008917": 132, "006103": 132, "009131": 132, "005891": 132, "009546": 132, "004883": 132, "008640": 132, "005302": 132, "overfit": 132, "009783": 132, "004942": 132, "009182": 132, "005042": 132, "009817": 132, "005429": 132, "009360": 132, "004877": 132, "009593": 132, "004890": 132, "train_scor": 132, "cryptic": 132, "verifi": 132, "worri": 132, "doesn": 132, "978": 132, "979": 132, "980": 132, "981": 132, "982": 132, "983": 132, "008935": 132, "005151": 132, "010208": 132, "004944": 132, "008973": 132, "004869": 132, "009372": 132, "005785": 132, "010059": 132, "005468": 132, "x27": 132, "rerun": 132, "cell": 132, "represent": 132, "trust": 132, "unabl": 132, "nbviewer": 132, "pipelinepipelin": 132, "setcolumntypessetcolumntyp": 132, "standardscalerstandardscal": 132, "svcsvc": 132, "weather": 132, "didn": 132, "got": 132, "five": 132, "back": 132, "ourselv": 132, "fourth": 132, "125": 132, "126": 132, "127": 132, "128": 132, "131": 132, "009675": 132, "005130": 132, "7449876d309382acfef94df9d102aa76": 132, "009233": 132, "005116": [132, 133], "009132": 132, "004917": 132, "009398": 132, "005361": 132, "009741": 132, "005261": 132, "009237": 132, "005283": 132, "009082": 132, "005196": 132, "009501": 132, "004816": 132, "005119": 132, "009388": 132, "005089": 132, "assumpt": 132, "list_scor": 132, "adjusted_mutual_info_scor": 132, "adjusted_rand_scor": 132, "average_precis": 132, "completeness_scor": 132, "explained_vari": 132, "f1": 132, "f1_macro": 132, "f1_micro": 132, "f1_sampl": 132, "f1_weight": 132, "fowlkes_mallows_scor": 132, "homogeneity_scor": 132, "jaccard": 132, "jaccard_macro": 132, "jaccard_micro": 132, "jaccard_sampl": 132, "jaccard_weight": 132, "matthews_corrcoef": 132, "max_error": 132, "mutual_info_scor": 132, "neg_brier_scor": 132, "neg_log_loss": 132, "neg_mean_absolute_percentage_error": 132, "neg_mean_gamma_devi": 132, "neg_mean_poisson_devi": 132, "neg_mean_squared_error": 132, "neg_mean_squared_log_error": 132, "neg_median_absolute_error": 132, "neg_negative_likelihood_ratio": 132, "neg_root_mean_squared_error": 132, "normalized_mutual_info_scor": 132, "positive_likelihood_ratio": 132, "precision_macro": 132, "precision_micro": 132, "precision_sampl": 132, "precision_weight": 132, "rand_scor": 132, "recal": 132, "recall_macro": 132, "recall_micro": 132, "recall_sampl": 132, "recall_weight": 132, "roc_auc_ovo": 132, "roc_auc_ovo_weight": 132, "roc_auc_ovr": 132, "roc_auc_ovr_weight": 132, "top_k_accuraci": 132, "v_measure_scor": 132, "364": 132, "365": 132, "009565": 132, "008252": 132, "010749": 132, "010689": 132, "009091": 132, "008163": 132, "011643": 132, "008272": 132, "009472": 132, "007630": 132, "008972": 132, "007112": 132, "008561": 132, "007579": 132, "009554": 132, "007687": 132, "010302": 132, "008763": 132, "009194": 132, "008032": 132, "913": 132, "autom": 133, "pipe": 133, "fed": 133, "modifi": 133, "friendli": 133, "safe": 133, "852": 133, "005335": 133, "003120": 133, "005597": 133, "003142": 133, "005434": 133, "003329": 133, "005627": 133, "003322": 133, "005192": 133, "003395": 133, "voil\u00e0": 133, "resembl": 133, "scaler": 133, "wish": 133, "924": 133, "009523": 133, "009634": 133, "005160": 133, "009130": 133, "004741": 133, "008952": 133, "005350": 133, "009252": 133, "005305": 133, "decomposit": 133, "previous": 133, "011529": 133, "006649": 133, "011461": 133, "010996": 133, "007049": 133, "010994": 133, "006893": 133, "010924": 133, "006837": 133, "intranspar": 133, "simplifi": 133, "neat": 133, "functiona": 133, "133": 133, "134": 133, "011246": 133, "006525": 133, "012022": 133, "009162": 133, "012008": 133, "006756": 133, "012343": 133, "007484": 133, "012161": 133, "007530": 133, "awesom": 133, "jump": 133, "aren": 133, "shouldn": 133, "ye": 133, "turn": 133, "_configur": 133, "learnt": 133, "experi": 133, "heurist": 133, "_tuned_": 133, "rate": 133, "sigma": 133, "sai": 133, "basi": 133, "comma": 133, "wonder": 133, "besid": 133, "definit": 133, "ref": 133, "data_usag": 133, "featuer": 133, "264": 133, "265": 133, "pca_1": 133, "_pca_": 133, "267": 133, "268": 133, "034626": 133, "013786": 133, "036310": 133, "014684": 133, "033972": 133, "014230": 133, "033509": 133, "015300": 133, "034182": 133, "016020": 133, "boser": 133, "guyon": 133, "vapnik": 133, "margin": 133, "colt": 133, "92": 133, "fifth": 133, "annual": 133, "workshop": 133, "theori": 133, "1992": 133, "jul": 133, "709": 133, "170": 134, "fede": 134, "surround": 134, "146": 134, "instruct": 134, "multiprocess": 134, "nos": 134, "extendeddataframepipelin": 134, "miss": 134, "tranform_until": 134, "63": 134, "minimum": 134, "face": 134, "create_pipelin": 134, "contin": 134, "register_model": 134}, "objects": {"julearn": [[1, 0, 1, "", "PipelineCreator"], [2, 0, 1, "", "TargetPipelineCreator"], [72, 3, 0, "-", "api"], [0, 3, 0, "-", "base"], [71, 3, 0, "-", "inspect"], [73, 3, 0, "-", "model_selection"], [74, 3, 0, "-", "models"], [75, 3, 0, "-", "pipeline"], [76, 3, 0, "-", "prepare"], [33, 5, 1, "", "run_cross_validation"], [77, 3, 0, "-", "scoring"], [78, 3, 0, "-", "stats"], [79, 3, 0, "-", "transformers"], [80, 3, 0, "-", "utils"], [81, 3, 0, "-", "viz"]], "julearn.PipelineCreator": [[1, 1, 1, "", "__init__"], [1, 1, 1, "", "add"], [1, 1, 1, "", "copy"], [1, 1, 1, "", "from_list"], [1, 1, 1, "", "has_model"], [1, 1, 1, "", "split"], [1, 2, 1, "", "steps"], [1, 1, 1, "", "to_pipeline"]], "julearn.TargetPipelineCreator": [[2, 1, 1, "", "__init__"], [2, 1, 1, "", "add"], [2, 1, 1, "", "to_pipeline"]], "julearn.base": [[3, 0, 1, "", "ColumnTypes"], [4, 4, 1, "", "ColumnTypesLike"], [5, 0, 1, "", "JuBaseEstimator"], [6, 0, 1, "", "JuTransformer"], [7, 0, 1, "", "WrapModel"], [8, 5, 1, "", "change_column_type"], [9, 5, 1, "", "ensure_column_types"], [10, 5, 1, "", "get_column_type"], [11, 5, 1, "", "make_type_selector"]], "julearn.base.ColumnTypes": [[3, 1, 1, "", "__init__"], [3, 1, 1, "", "add"], [3, 1, 1, "", "copy"], [3, 2, 1, "", "pattern"], [3, 1, 1, "", "to_type_selector"]], "julearn.base.JuBaseEstimator": [[5, 1, 1, "", "__init__"], [5, 1, 1, "", "filter_columns"], [5, 1, 1, "", "get_apply_to"], [5, 1, 1, "", "get_metadata_routing"], [5, 1, 1, "", "get_needed_types"], [5, 1, 1, "", "get_params"], [5, 1, 1, "", "set_params"]], "julearn.base.JuTransformer": [[6, 1, 1, "", "__init__"], [6, 1, 1, "", "filter_columns"], [6, 1, 1, "", "fit"], [6, 1, 1, "", "fit_transform"], [6, 1, 1, "", "get_apply_to"], [6, 1, 1, "", "get_metadata_routing"], [6, 1, 1, "", "get_needed_types"], [6, 1, 1, "", "get_params"], [6, 1, 1, "", "set_output"], [6, 1, 1, "", "set_params"]], "julearn.base.WrapModel": [[7, 1, 1, "", "__init__"], [7, 2, 1, "", "classes_"], [7, 1, 1, "", "decision_function"], [7, 1, 1, "", "filter_columns"], [7, 1, 1, "", "fit"], [7, 1, 1, "", "get_apply_to"], [7, 1, 1, "", "get_metadata_routing"], [7, 1, 1, "", "get_needed_types"], [7, 1, 1, "", "get_params"], [7, 1, 1, "", "predict"], [7, 1, 1, "", "predict_log_proba"], [7, 1, 1, "", "predict_proba"], [7, 1, 1, "", "score"], [7, 1, 1, "", "set_params"]], "julearn.inspect": [[12, 0, 1, "", "FoldsInspector"], [13, 0, 1, "", "Inspector"], [14, 5, 1, "", "preprocess"]], "julearn.inspect.FoldsInspector": [[12, 1, 1, "", "__init__"], [12, 1, 1, "", "decision_function"], [12, 1, 1, "", "predict"], [12, 1, 1, "", "predict_log_proba"], [12, 1, 1, "", "predict_proba"]], "julearn.inspect.Inspector": [[13, 1, 1, "", "__init__"], [13, 2, 1, "", "folds"], [13, 2, 1, "", "model"]], "julearn.model_selection": [[15, 0, 1, "", "ContinuousStratifiedGroupKFold"], [16, 0, 1, "", "ContinuousStratifiedKFold"], [17, 0, 1, "", "RepeatedContinuousStratifiedGroupKFold"], [18, 0, 1, "", "RepeatedContinuousStratifiedKFold"], [19, 0, 1, "", "StratifiedBootstrap"], [20, 5, 1, "", "get_searcher"], [21, 5, 1, "", "list_searchers"], [22, 5, 1, "", "register_searcher"], [23, 5, 1, "", "reset_searcher_register"]], "julearn.model_selection.ContinuousStratifiedGroupKFold": [[15, 1, 1, "", "__init__"], [15, 1, 1, "", "get_metadata_routing"], [15, 1, 1, "", "get_n_splits"], [15, 1, 1, "", "set_split_request"], [15, 1, 1, "", "split"]], "julearn.model_selection.ContinuousStratifiedKFold": [[16, 1, 1, "", "__init__"], [16, 1, 1, "", "get_metadata_routing"], [16, 1, 1, "", "get_n_splits"], [16, 1, 1, "", "split"]], "julearn.model_selection.RepeatedContinuousStratifiedGroupKFold": [[17, 1, 1, "", "__init__"], [17, 1, 1, "", "get_metadata_routing"], [17, 1, 1, "", "get_n_splits"], [17, 1, 1, "", "split"]], "julearn.model_selection.RepeatedContinuousStratifiedKFold": [[18, 1, 1, "", "__init__"], [18, 1, 1, "", "get_metadata_routing"], [18, 1, 1, "", "get_n_splits"], [18, 1, 1, "", "split"]], "julearn.model_selection.StratifiedBootstrap": [[19, 1, 1, "", "__init__"], [19, 1, 1, "", "get_metadata_routing"], [19, 1, 1, "", "get_n_splits"], [19, 1, 1, "", "split"]], "julearn.models": [[74, 3, 0, "-", "dynamic"], [25, 5, 1, "", "get_model"], [26, 5, 1, "", "list_models"], [27, 5, 1, "", "register_model"], [28, 5, 1, "", "reset_model_register"]], "julearn.models.dynamic": [[24, 0, 1, "", "DynamicSelection"]], "julearn.models.dynamic.DynamicSelection": [[24, 1, 1, "", "__init__"], [24, 1, 1, "", "fit"], [24, 1, 1, "", "get_metadata_routing"], [24, 1, 1, "", "get_params"], [24, 1, 1, "", "predict"], [24, 1, 1, "", "predict_proba"], [24, 1, 1, "", "score"], [24, 1, 1, "", "set_params"], [24, 1, 1, "", "set_score_request"]], "julearn.pipeline": [[29, 0, 1, "", "JuTargetPipeline"]], "julearn.pipeline.JuTargetPipeline": [[29, 1, 1, "", "__init__"], [29, 1, 1, "", "can_inverse_transform"], [29, 1, 1, "", "fit"], [29, 1, 1, "", "fit_transform"], [29, 1, 1, "", "inverse_transform"], [29, 2, 1, "", "needed_types"], [29, 1, 1, "", "transform"]], "julearn.pipeline.pipeline_creator": [[30, 0, 1, "", "Step"]], "julearn.pipeline.pipeline_creator.Step": [[30, 1, 1, "", "__init__"], [30, 4, 1, "", "apply_to"], [30, 4, 1, "", "estimator"], [30, 4, 1, "", "name"], [30, 4, 1, "", "needed_types"], [30, 4, 1, "", "params_to_tune"], [30, 4, 1, "", "row_select_col_type"], [30, 4, 1, "", "row_select_vals"]], "julearn.prepare": [[31, 5, 1, "", "check_consistency"], [32, 5, 1, "", "prepare_input_data"]], "julearn.scoring": [[34, 5, 1, "", "check_scoring"], [35, 5, 1, "", "get_scorer"], [36, 5, 1, "", "list_scorers"], [77, 3, 0, "-", "metrics"], [38, 5, 1, "", "register_scorer"], [39, 5, 1, "", "reset_scorer_register"]], "julearn.scoring.metrics": [[37, 5, 1, "", "r2_corr"]], "julearn.stats": [[40, 5, 1, "", "corrected_ttest"]], "julearn.transformers": [[41, 0, 1, "", "CBPM"], [42, 0, 1, "", "ChangeColumnTypes"], [43, 0, 1, "", "DropColumns"], [44, 0, 1, "", "FilterColumns"], [45, 0, 1, "", "JuColumnTransformer"], [46, 0, 1, "", "SetColumnTypes"], [48, 5, 1, "", "get_transformer"], [49, 5, 1, "", "list_transformers"], [50, 5, 1, "", "register_transformer"], [51, 5, 1, "", "reset_transformer_register"], [79, 3, 0, "-", "target"]], "julearn.transformers.CBPM": [[41, 1, 1, "", "__init__"], [41, 1, 1, "", "aggregate"], [41, 1, 1, "", "fit"], [41, 1, 1, "", "fit_transform"], [41, 1, 1, "", "get_feature_names_out"], [41, 1, 1, "", "get_metadata_routing"], [41, 1, 1, "", "get_params"], [41, 1, 1, "", "set_output"], [41, 1, 1, "", "set_params"], [41, 1, 1, "", "transform"]], "julearn.transformers.ChangeColumnTypes": [[42, 1, 1, "", "__init__"], [42, 1, 1, "", "filter_columns"], [42, 1, 1, "", "fit"], [42, 1, 1, "", "fit_transform"], [42, 1, 1, "", "get_apply_to"], [42, 1, 1, "", "get_feature_names_out"], [42, 1, 1, "", "get_metadata_routing"], [42, 1, 1, "", "get_needed_types"], [42, 1, 1, "", "get_params"], [42, 1, 1, "", "set_output"], [42, 1, 1, "", "set_params"], [42, 1, 1, "", "transform"]], "julearn.transformers.DropColumns": [[43, 1, 1, "", "__init__"], [43, 1, 1, "", "filter_columns"], [43, 1, 1, "", "fit"], [43, 1, 1, "", "fit_transform"], [43, 1, 1, "", "get_apply_to"], [43, 1, 1, "", "get_metadata_routing"], [43, 1, 1, "", "get_needed_types"], [43, 1, 1, "", "get_params"], [43, 1, 1, "", "get_support"], [43, 1, 1, "", "set_output"], [43, 1, 1, "", "set_params"], [43, 1, 1, "", "transform"]], "julearn.transformers.FilterColumns": [[44, 1, 1, "", "__init__"], [44, 1, 1, "", "filter_columns"], [44, 1, 1, "", "fit"], [44, 1, 1, "", "fit_transform"], [44, 1, 1, "", "get_apply_to"], [44, 1, 1, "", "get_feature_names_out"], [44, 1, 1, "", "get_metadata_routing"], [44, 1, 1, "", "get_needed_types"], [44, 1, 1, "", "get_params"], [44, 1, 1, "", "set_output"], [44, 1, 1, "", "set_params"], [44, 1, 1, "", "transform"]], "julearn.transformers.JuColumnTransformer": [[45, 1, 1, "", "__init__"], [45, 1, 1, "", "filter_columns"], [45, 1, 1, "", "fit"], [45, 1, 1, "", "fit_transform"], [45, 1, 1, "", "get_apply_to"], [45, 1, 1, "", "get_feature_names_out"], [45, 1, 1, "", "get_metadata_routing"], [45, 1, 1, "", "get_needed_types"], [45, 1, 1, "", "get_params"], [45, 1, 1, "", "set_output"], [45, 1, 1, "", "set_params"], [45, 1, 1, "", "transform"]], "julearn.transformers.SetColumnTypes": [[46, 1, 1, "", "__init__"], [46, 1, 1, "", "filter_columns"], [46, 1, 1, "", "fit"], [46, 1, 1, "", "fit_transform"], [46, 1, 1, "", "get_apply_to"], [46, 1, 1, "", "get_feature_names_out"], [46, 1, 1, "", "get_metadata_routing"], [46, 1, 1, "", "get_needed_types"], [46, 1, 1, "", "get_params"], [46, 1, 1, "", "set_output"], [46, 1, 1, "", "set_params"], [46, 1, 1, "", "transform"]], "julearn.transformers.confound_remover": [[47, 0, 1, "", "ConfoundRemover"]], "julearn.transformers.confound_remover.ConfoundRemover": [[47, 1, 1, "", "__init__"], [47, 1, 1, "", "filter_columns"], [47, 1, 1, "", "fit"], [47, 1, 1, "", "fit_transform"], [47, 1, 1, "", "get_apply_to"], [47, 1, 1, "", "get_feature_names_out"], [47, 1, 1, "", "get_metadata_routing"], [47, 1, 1, "", "get_needed_types"], [47, 1, 1, "", "get_params"], [47, 1, 1, "", "get_support"], [47, 1, 1, "", "set_output"], [47, 1, 1, "", "set_params"], [47, 1, 1, "", "transform"]], "julearn.transformers.target": [[52, 0, 1, "", "JuTargetTransformer"], [53, 0, 1, "", "JuTransformedTargetModel"], [54, 0, 1, "", "TargetConfoundRemover"], [55, 0, 1, "", "TransformedTargetWarning"], [56, 5, 1, "", "get_target_transformer"], [57, 5, 1, "", "list_target_transformers"], [58, 5, 1, "", "register_target_transformer"], [59, 5, 1, "", "reset_target_transformer_register"]], "julearn.transformers.target.JuTargetTransformer": [[52, 1, 1, "", "__init__"], [52, 1, 1, "", "fit"], [52, 1, 1, "", "fit_transform"], [52, 1, 1, "", "transform"]], "julearn.transformers.target.JuTransformedTargetModel": [[53, 1, 1, "", "__init__"], [53, 2, 1, "", "classes_"], [53, 1, 1, "", "decision_function"], [53, 1, 1, "", "filter_columns"], [53, 1, 1, "", "fit"], [53, 1, 1, "", "get_apply_to"], [53, 1, 1, "", "get_metadata_routing"], [53, 1, 1, "", "get_needed_types"], [53, 1, 1, "", "get_params"], [53, 1, 1, "", "predict"], [53, 1, 1, "", "predict_proba"], [53, 1, 1, "", "score"], [53, 1, 1, "", "set_params"], [53, 1, 1, "", "transform_target"]], "julearn.transformers.target.TargetConfoundRemover": [[54, 1, 1, "", "__init__"], [54, 1, 1, "", "fit"], [54, 1, 1, "", "fit_transform"], [54, 2, 1, "", "needed_types"], [54, 1, 1, "", "transform"]], "julearn.transformers.target.TransformedTargetWarning": [[55, 1, 1, "", "__init__"], [55, 4, 1, "", "args"], [55, 1, 1, "", "with_traceback"]], "julearn.utils": [[60, 5, 1, "", "configure_logging"], [61, 4, 1, "", "logger"], [62, 5, 1, "", "raise_error"], [80, 3, 0, "-", "typing"], [68, 5, 1, "", "warn_with_log"]], "julearn.utils.typing": [[63, 4, 1, "", "EstimatorLike"], [64, 0, 1, "", "EstimatorLikeFit1"], [65, 0, 1, "", "EstimatorLikeFit2"], [66, 0, 1, "", "EstimatorLikeFity"], [67, 0, 1, "", "JuEstimatorLike"]], "julearn.utils.typing.EstimatorLikeFit1": [[64, 1, 1, "", "__init__"], [64, 1, 1, "", "fit"], [64, 1, 1, "", "get_params"], [64, 1, 1, "", "set_params"]], "julearn.utils.typing.EstimatorLikeFit2": [[65, 1, 1, "", "__init__"], [65, 1, 1, "", "fit"], [65, 1, 1, "", "get_params"], [65, 1, 1, "", "set_params"]], "julearn.utils.typing.EstimatorLikeFity": [[66, 1, 1, "", "__init__"], [66, 1, 1, "", "fit"], [66, 1, 1, "", "get_params"], [66, 1, 1, "", "set_params"]], "julearn.utils.typing.JuEstimatorLike": [[67, 1, 1, "", "__init__"], [67, 1, 1, "", "fit"], [67, 1, 1, "", "get_apply_to"], [67, 1, 1, "", "get_needed_types"], [67, 1, 1, "", "get_params"], [67, 1, 1, "", "set_params"]], "julearn.viz": [[69, 5, 1, "", "plot_scores"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:module", "4": "py:attribute", "5": "py:function"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "module", "Python module"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "function", "Python function"]}, "titleterms": {"base": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 120], "julearn": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 82, 114, 116, 118, 120, 121, 134], "pipelinecr": [1, 133], "exampl": [1, 2, 13, 14, 16, 19, 33, 36, 38, 40, 60, 69, 114, 115], "us": [1, 2, 13, 14, 16, 19, 33, 36, 38, 40, 60, 69, 108, 116, 121, 133], "targetpipelinecr": 2, "columntyp": 3, "columntypeslik": 4, "jubaseestim": 5, "jutransform": 6, "wrapmodel": 7, "change_column_typ": 8, "ensure_column_typ": 9, "get_column_typ": 10, "make_type_selector": 11, "inspect": [12, 13, 14, 71, 93, 94, 95, 97, 125], "foldsinspector": 12, "inspector": 13, "preprocess": [14, 96, 127, 133], "model_select": [15, 16, 17, 18, 19, 20, 21, 22, 23], "continuousstratifiedgroupkfold": 15, "continuousstratifiedkfold": 16, "repeatedcontinuousstratifiedgroupkfold": 17, "repeatedcontinuousstratifiedkfold": 18, "stratifiedbootstrap": 19, "get_search": 20, "list_search": 21, "register_search": 22, "reset_searcher_regist": 23, "model": [24, 25, 26, 27, 28, 73, 74, 90, 91, 94, 95, 99, 107, 113, 120, 123, 125, 126, 131, 132, 133], "dynam": [24, 74, 113], "dynamicselect": 24, "get_model": 25, "list_model": 26, "register_model": 27, "reset_model_regist": 28, "pipelin": [29, 30, 75, 113, 133], "jutargetpipelin": 29, "pipeline_cr": 30, "step": [30, 113], "prepar": [31, 32, 76], "check_consist": 31, "prepare_input_data": 32, "run_cross_valid": [33, 128, 129, 132, 133], "score": [34, 35, 36, 37, 38, 39, 77, 100, 111, 131, 132], "check_scor": 34, "get_scor": 35, "list_scor": 36, "metric": [37, 77, 132], "r2_corr": 37, "register_scor": 38, "reset_scorer_regist": 39, "stat": [40, 78], "corrected_ttest": 40, "transform": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 79, 100, 113], "cbpm": [41, 120], "changecolumntyp": 42, "dropcolumn": 43, "filtercolumn": 44, "jucolumntransform": 45, "setcolumntyp": 46, "confound_remov": 47, "confoundremov": 47, "get_transform": 48, "list_transform": 49, "register_transform": 50, "reset_transformer_regist": 51, "target": [52, 53, 54, 55, 56, 57, 58, 59, 79, 100, 121, 127], "jutargettransform": 52, "jutransformedtargetmodel": 53, "targetconfoundremov": 54, "transformedtargetwarn": 55, "get_target_transform": 56, "list_target_transform": 57, "register_target_transform": 58, "reset_target_transformer_regist": 59, "util": [60, 61, 62, 63, 64, 65, 66, 67, 68, 80], "configure_log": 60, "logger": 61, "raise_error": 62, "type": [63, 64, 65, 66, 67, 80, 126, 129, 133], "estimatorlik": 63, "estimatorlikefit1": 64, "estimatorlikefit2": 65, "estimatorlikef": 66, "juestimatorlik": 67, "warn_with_log": 68, "viz": [69, 116], "plot_scor": 69, "refer": [70, 86, 87, 94, 102, 103, 120, 121, 122, 128, 133], "main": 72, "api": [72, 134], "select": [73, 74, 113, 124, 133], "deslib": 74, "vizual": 81, "start": [82, 117], "multiclass": 83, "classif": [83, 88, 104], "regress": [84, 85, 101, 111, 121], "analysi": [84, 85, 101], "stratifi": 85, "k": 85, "fold": [85, 97], "cv": [85, 87], "work": 86, "panda": 86, "from": [86, 121], "long": 86, "wide": 86, "format": 86, "merg": 86, "join": 86, "data": [86, 129], "frame": 86, "reshap": 86, "more": [86, 123], "complex": [86, 99], "group": [87, 122], "deal": [87, 94], "cross": [87, 94, 121, 122, 128, 132], "valid": [87, 94, 121, 122, 128, 132], "techniqu": [87, 94], "simpl": [88, 91], "binari": 88, "comput": [89, 92, 98, 105, 109, 112], "time": [89, 92, 98, 105, 109, 112], "comparison": [90, 91, 107, 131], "svm": 94, "random": 95, "forest": 95, "variabl": [95, 100], "import": 95, "varianc": 96, "threshold": 96, "zscore": 96, "pca": 96, "wise": 97, "predict": [97, 120], "z": 100, "tune": [102, 103, 123], "multipl": 102, "hyperparamet": [102, 103, 123, 133], "grid": [102, 123], "stack": [104, 126], "confound": [106, 107, 108, 121], "remov": [107, 108, 121], "return": [108, 132], "typic": 108, "case": 108, "custom": [110, 111, 113], "function": 111, "overview": 113, "avail": 113, "scaler": 113, "featur": [113, 121, 126, 129, 133, 134], "datafram": 113, "oper": 113, "decomposit": 113, "estim": [113, 126, 132], "support": 113, "vector": 113, "machin": 113, "ensembl": 113, "gaussian": 113, "process": 113, "linear": 113, "naiv": 113, "bay": 113, "dummi": 113, "contribut": 114, "set": [114, 133], "up": 114, "local": 114, "develop": 114, "environ": 114, "github": 114, "pull": 114, "request": 114, "guidelin": 114, "run": 114, "unit": 114, "test": 114, "ad": 114, "build": [114, 133], "document": [114, 118, 134], "write": 114, "content": [115, 118, 124], "frequenli": 116, "ask": 116, "question": 116, "2": [116, 134], "how": 116, "do": 116, "i": [116, 118, 121], "interact": 116, "plot": 116, "get": 117, "requir": 117, "setup": 117, "suggest": 117, "instal": 117, "option": 117, "depend": 117, "welcom": 118, "": [118, 134], "what": [118, 130, 134], "why": [118, 128], "tabl": [118, 124], "indic": 118, "maintain": 119, "version": 119, "releas": 119, "new": [119, 134], "connectom": 120, "consist": 121, "should": 121, "splitter": [122, 132], "stratif": 122, "paramet": 123, "v": 123, "searcher": 123, "than": 123, "one": 123, "deeper": 124, "topic": 124, "fit": 126, "each": 126, "all": 126, "specif": [126, 133], "appli": 127, "The": [128, 132], "fundament": 128, "essenc": 128, "input": 129, "give": 129, "you": 130, "realli": 130, "need": 130, "know": 130, "statist": 131, "visual": 131, "evalu": 132, "output": 132, "made": 133, "easi": 133, "0": 134, "3": 134, "dev220": 134, "2023": 134, "07": 134, "06": 134, "bugfix": 134, "enhanc": 134, "5": 134, "2022": 134, "21": 134, "chang": 134, "improv": 134}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"Base": [[0, "module-julearn.base"]], "julearn.PipelineCreator": [[1, "julearn-pipelinecreator"]], "Examples using julearn.PipelineCreator": [[1, "examples-using-julearn-pipelinecreator"]], "julearn.TargetPipelineCreator": [[2, "julearn-targetpipelinecreator"]], "Examples using julearn.TargetPipelineCreator": [[2, "examples-using-julearn-targetpipelinecreator"]], "julearn.base.ColumnTypes": [[3, "julearn-base-columntypes"]], "julearn.base.ColumnTypesLike": [[4, "julearn-base-columntypeslike"]], "julearn.base.JuBaseEstimator": [[5, "julearn-base-jubaseestimator"]], "julearn.base.JuTransformer": [[6, "julearn-base-jutransformer"]], "julearn.base.WrapModel": [[7, "julearn-base-wrapmodel"]], "julearn.base.change_column_type": [[8, "julearn-base-change-column-type"]], "julearn.base.ensure_column_types": [[9, "julearn-base-ensure-column-types"]], "julearn.base.get_column_type": [[10, "julearn-base-get-column-type"]], "julearn.base.make_type_selector": [[11, "julearn-base-make-type-selector"]], "julearn.inspect.FoldsInspector": [[12, "julearn-inspect-foldsinspector"]], "julearn.inspect.Inspector": [[13, "julearn-inspect-inspector"]], "Examples using julearn.inspect.Inspector": [[13, "examples-using-julearn-inspect-inspector"]], "julearn.inspect.preprocess": [[14, "julearn-inspect-preprocess"]], "Examples using julearn.inspect.preprocess": [[14, "examples-using-julearn-inspect-preprocess"]], "julearn.model_selection.ContinuousStratifiedGroupKFold": [[15, "julearn-model-selection-continuousstratifiedgroupkfold"]], "julearn.model_selection.ContinuousStratifiedKFold": [[16, "julearn-model-selection-continuousstratifiedkfold"]], "Examples using julearn.model_selection.ContinuousStratifiedKFold": [[16, "examples-using-julearn-model-selection-continuousstratifiedkfold"]], "julearn.model_selection.RepeatedContinuousStratifiedGroupKFold": [[17, "julearn-model-selection-repeatedcontinuousstratifiedgroupkfold"]], "julearn.model_selection.RepeatedContinuousStratifiedKFold": [[18, "julearn-model-selection-repeatedcontinuousstratifiedkfold"]], "julearn.model_selection.StratifiedBootstrap": [[19, "julearn-model-selection-stratifiedbootstrap"]], "Examples using julearn.model_selection.StratifiedBootstrap": [[19, "examples-using-julearn-model-selection-stratifiedbootstrap"]], "julearn.model_selection.get_searcher": [[20, "julearn-model-selection-get-searcher"]], "julearn.model_selection.list_searchers": [[21, "julearn-model-selection-list-searchers"]], "julearn.model_selection.register_searcher": [[22, "julearn-model-selection-register-searcher"]], "julearn.model_selection.reset_searcher_register": [[23, "julearn-model-selection-reset-searcher-register"]], "julearn.models.dynamic.DynamicSelection": [[24, "julearn-models-dynamic-dynamicselection"]], "julearn.models.get_model": [[25, "julearn-models-get-model"]], "julearn.models.list_models": [[26, "julearn-models-list-models"]], "julearn.models.register_model": [[27, "julearn-models-register-model"]], "julearn.models.reset_model_register": [[28, "julearn-models-reset-model-register"]], "julearn.pipeline.JuTargetPipeline": [[29, "julearn-pipeline-jutargetpipeline"]], "julearn.pipeline.pipeline_creator.Step": [[30, "julearn-pipeline-pipeline-creator-step"]], "julearn.prepare.check_consistency": [[31, "julearn-prepare-check-consistency"]], "julearn.prepare.prepare_input_data": [[32, "julearn-prepare-prepare-input-data"]], "julearn.run_cross_validation": [[33, "julearn-run-cross-validation"]], "Examples using julearn.run_cross_validation": [[33, "examples-using-julearn-run-cross-validation"]], "julearn.scoring.check_scoring": [[34, "julearn-scoring-check-scoring"]], "julearn.scoring.get_scorer": [[35, "julearn-scoring-get-scorer"]], "julearn.scoring.list_scorers": [[36, "julearn-scoring-list-scorers"]], "Examples using julearn.scoring.list_scorers": [[36, "examples-using-julearn-scoring-list-scorers"]], "julearn.scoring.metrics.r2_corr": [[37, "julearn-scoring-metrics-r2-corr"]], "julearn.scoring.register_scorer": [[38, "julearn-scoring-register-scorer"]], "Examples using julearn.scoring.register_scorer": [[38, "examples-using-julearn-scoring-register-scorer"]], "julearn.scoring.reset_scorer_register": [[39, "julearn-scoring-reset-scorer-register"]], "julearn.stats.corrected_ttest": [[40, "julearn-stats-corrected-ttest"]], "Examples using julearn.stats.corrected_ttest": [[40, "examples-using-julearn-stats-corrected-ttest"]], "julearn.transformers.CBPM": [[41, "julearn-transformers-cbpm"]], "julearn.transformers.ChangeColumnTypes": [[42, "julearn-transformers-changecolumntypes"]], "julearn.transformers.DropColumns": [[43, "julearn-transformers-dropcolumns"]], "julearn.transformers.FilterColumns": [[44, "julearn-transformers-filtercolumns"]], "julearn.transformers.JuColumnTransformer": [[45, "julearn-transformers-jucolumntransformer"]], "julearn.transformers.SetColumnTypes": [[46, "julearn-transformers-setcolumntypes"]], "julearn.transformers.confound_remover.ConfoundRemover": [[47, "julearn-transformers-confound-remover-confoundremover"]], "julearn.transformers.get_transformer": [[48, "julearn-transformers-get-transformer"]], "julearn.transformers.list_transformers": [[49, "julearn-transformers-list-transformers"]], "julearn.transformers.register_transformer": [[50, "julearn-transformers-register-transformer"]], "julearn.transformers.reset_transformer_register": [[51, "julearn-transformers-reset-transformer-register"]], "julearn.transformers.target.JuTargetTransformer": [[52, "julearn-transformers-target-jutargettransformer"]], "julearn.transformers.target.JuTransformedTargetModel": [[53, "julearn-transformers-target-jutransformedtargetmodel"]], "julearn.transformers.target.TargetConfoundRemover": [[54, "julearn-transformers-target-targetconfoundremover"]], "julearn.transformers.target.TransformedTargetWarning": [[55, "julearn-transformers-target-transformedtargetwarning"]], "julearn.transformers.target.get_target_transformer": [[56, "julearn-transformers-target-get-target-transformer"]], "julearn.transformers.target.list_target_transformers": [[57, "julearn-transformers-target-list-target-transformers"]], "julearn.transformers.target.register_target_transformer": [[58, "julearn-transformers-target-register-target-transformer"]], "julearn.transformers.target.reset_target_transformer_register": [[59, "julearn-transformers-target-reset-target-transformer-register"]], "julearn.utils.configure_logging": [[60, "julearn-utils-configure-logging"]], "Examples using julearn.utils.configure_logging": [[60, "examples-using-julearn-utils-configure-logging"]], "julearn.utils.logger": [[61, "julearn-utils-logger"]], "julearn.utils.raise_error": [[62, "julearn-utils-raise-error"]], "julearn.utils.typing.EstimatorLike": [[63, "julearn-utils-typing-estimatorlike"]], "julearn.utils.typing.EstimatorLikeFit1": [[64, "julearn-utils-typing-estimatorlikefit1"]], "julearn.utils.typing.EstimatorLikeFit2": [[65, "julearn-utils-typing-estimatorlikefit2"]], "julearn.utils.typing.EstimatorLikeFity": [[66, "julearn-utils-typing-estimatorlikefity"]], "julearn.utils.typing.JuEstimatorLike": [[67, "julearn-utils-typing-juestimatorlike"]], "julearn.utils.warn_with_log": [[68, "julearn-utils-warn-with-log"]], "julearn.viz.plot_scores": [[69, "julearn-viz-plot-scores"]], "Examples using julearn.viz.plot_scores": [[69, "examples-using-julearn-viz-plot-scores"]], "Reference": [[70, "reference"]], "Inspect": [[71, "module-julearn.inspect"]], "Main API": [[72, "module-julearn.api"]], "Model Selection": [[73, "module-julearn.model_selection"]], "Models": [[74, "module-julearn.models"]], "Dynamic Selection (DESLib)": [[74, "dynamic-selection-deslib"]], "Pipeline": [[75, "module-julearn.pipeline"]], "Prepare": [[76, "module-julearn.prepare"]], "Scoring": [[77, "module-julearn.scoring"]], "Scoring Metrics": [[77, "module-julearn.scoring.metrics"]], "Stats": [[78, "module-julearn.stats"]], "Transformers": [[79, "module-julearn.transformers"], [113, "transformers"]], "Target Transformers": [[79, "module-julearn.transformers.target"]], "Utils": [[80, "module-julearn.utils"]], "Typing": [[80, "module-julearn.utils.typing"]], "Vizualization": [[81, "vizualization"]], "Starting with julearn": [[82, "starting-with-julearn"]], "Multiclass Classification.": [[83, "multiclass-classification"]], "Regression Analysis": [[84, "regression-analysis"], [101, "regression-analysis"]], "Stratified K-fold CV for regression analysis": [[85, "stratified-k-fold-cv-for-regression-analysis"]], "Working with pandas": [[86, "working-with-pandas"]], "References": [[86, "references"], [87, "references"], [94, "references"], [102, "references"], [103, "references"]], "From long to wide format": [[86, "from-long-to-wide-format"]], "Merging or joining data frames": [[86, "merging-or-joining-data-frames"]], "Reshaping data frames (more complex)": [[86, "reshaping-data-frames-more-complex"]], "Grouped CV.": [[87, "grouped-cv"]], "Dealing with Cross-Validation techniques": [[87, "dealing-with-cross-validation-techniques"], [94, "dealing-with-cross-validation-techniques"]], "Simple Binary Classification": [[88, "simple-binary-classification"]], "Computation times": [[89, "computation-times"], [92, "computation-times"], [98, "computation-times"], [105, "computation-times"], [109, "computation-times"], [112, "computation-times"]], "Model Comparison": [[90, "model-comparison"]], "Simple Model Comparison": [[91, "simple-model-comparison"]], "Inspection": [[93, "inspection"]], "Inspecting SVM models.": [[94, "inspecting-svm-models"]], "Inspecting Random Forest models": [[95, "inspecting-random-forest-models"]], "Random Forest variable importance": [[95, "random-forest-variable-importance"]], "Preprocessing with variance threshold, zscore and PCA": [[96, "preprocessing-with-variance-threshold-zscore-and-pca"]], "Inspecting the fold-wise predictions": [[97, "inspecting-the-fold-wise-predictions"]], "Complex Models": [[99, "complex-models"]], "Transforming target variable with z-score.": [[100, "transforming-target-variable-with-z-score"]], "Tuning Multiple Hyperparameters Grids": [[102, "tuning-multiple-hyperparameters-grids"]], "Tuning Hyperparameters": [[103, "tuning-hyperparameters"]], "Stacking Classification": [[104, "stacking-classification"]], "Confounds": [[106, "confounds"]], "Confound Removal (model comparison)": [[107, "confound-removal-model-comparison"]], "Return Confounds in Confound Removal": [[108, "return-confounds-in-confound-removal"]], "Confound Removal Typical Use Case": [[108, "confound-removal-typical-use-case"]], "Customization": [[110, "customization"]], "Custom Scoring Function for Regression": [[111, "custom-scoring-function-for-regression"]], "Overview of available Pipeline Steps": [[113, "overview-of-available-pipeline-steps"]], "Scalers": [[113, "scalers"]], "Feature Selection": [[113, "feature-selection"]], "DataFrame operations": [[113, "dataframe-operations"]], "Decomposition": [[113, "decomposition"]], "Custom": [[113, "custom"]], "Models (Estimators)": [[113, "models-estimators"]], "Support Vector Machines": [[113, "support-vector-machines"]], "Ensemble": [[113, "ensemble"]], "Gaussian Processes": [[113, "gaussian-processes"]], "Linear Models": [[113, "linear-models"]], "Naive Bayes": [[113, "naive-bayes"]], "Dynamic Selection": [[113, "dynamic-selection"]], "Dummy": [[113, "dummy"]], "Contributing to julearn": [[114, "contributing-to-julearn"]], "Setting up the local development environment": [[114, "setting-up-the-local-development-environment"]], "GitHub Pull Request guidelines": [[114, "github-pull-request-guidelines"]], "Running unit tests": [[114, "running-unit-tests"]], "Adding and building documentation": [[114, "adding-and-building-documentation"]], "Writing Examples": [[114, "writing-examples"]], "Examples": [[115, "examples"]], "Contents:": [[115, null]], "Frequenly Asked Questions": [[116, "frequenly-asked-questions"]], "2. How do I use the julearn viz interactive plots?": [[116, "how-do-i-use-the-julearn-viz-interactive-plots"]], "Getting started": [[117, "getting-started"]], "Requirements": [[117, "requirements"]], "Setup suggestion": [[117, "setup-suggestion"]], "Installing": [[117, "installing"]], "Optional Dependencies": [[117, "optional-dependencies"]], "Welcome to julearn\u2019s documentation!": [[118, "welcome-to-julearn-s-documentation"]], "What is Julearn?": [[118, "what-is-julearn"]], "Why Julearn?": [[118, "why-julearn"]], "Table of Contents": [[118, "table-of-contents"], [124, null]], "Indices and tables": [[118, "indices-and-tables"]], "Maintaining": [[119, "maintaining"]], "Versioning": [[119, "versioning"]], "Releasing a new version": [[119, "releasing-a-new-version"]], "Connectome-based Predictive Modeling (CBPM)": [[120, "connectome-based-predictive-modeling-cbpm"]], "CBPM in Julearn": [[120, "cbpm-in-julearn"]], "References:": [[120, null], [121, null], [122, null], [128, null], [133, null]], "Cross-validation consistent Confound Removal": [[121, "cross-validation-consistent-confound-removal"]], "Confound Removal in Julearn": [[121, "confound-removal-in-julearn"]], "Removing Confounds from the Features": [[121, "removing-confounds-from-the-features"]], "Removing Confounds from the Target": [[121, "removing-confounds-from-the-target"]], "Should I use Confound Regression?": [[121, "should-i-use-confound-regression"]], "Cross-validation splitters": [[122, "cross-validation-splitters"], [132, "cross-validation-splitters"]], "Stratification": [[122, "stratification"]], "Grouping": [[122, "grouping"]], "Hyperparameter Tuning": [[123, "hyperparameter-tuning"], [123, "id1"]], "Parameters vs Hyperparameters": [[123, "parameters-vs-hyperparameters"]], "Searchers": [[123, "searchers"]], "Tuning more than one grid": [[123, "tuning-more-than-one-grid"]], "Models as hyperparameters": [[123, "models-as-hyperparameters"]], "Selected deeper topics": [[124, "selected-deeper-topics"]], "Inspecting Models": [[125, "inspecting-models"]], "Stacking Models": [[126, "stacking-models"]], "Fitting each estimator on all of the features": [[126, "fitting-each-estimator-on-all-of-the-features"]], "Fitting each estimator on a specific feature type": [[126, "fitting-each-estimator-on-a-specific-feature-type"]], "Applying preprocessing to the target": [[127, "applying-preprocessing-to-the-target"]], "Why cross validation?": [[128, "why-cross-validation"]], "Cross-validation - The fundamentals": [[128, "cross-validation-the-fundamentals"]], "The essence of run_cross_validation()": [[128, "the-essence-of-run-cross-validation"]], "Data": [[129, "data"]], "Data input to run_cross_validation()": [[129, "data-input-to-run-cross-validation"]], "Giving types to features": [[129, "giving-types-to-features"]], "What you really need to know": [[130, "what-you-really-need-to-know"]], "Model comparison": [[131, "model-comparison"]], "Statistical comparisons": [[131, "statistical-comparisons"]], "Score visualizations": [[131, "score-visualizations"]], "Model evaluation": [[132, "model-evaluation"]], "The output of run_cross_validation()": [[132, "the-output-of-run-cross-validation"]], "Cross-validation scores": [[132, "cross-validation-scores"]], "Returning a model (estimator)": [[132, "returning-a-model-estimator"]], "Scoring metrics": [[132, "scoring-metrics"]], "Model Building": [[133, "model-building"]], "Pipeline specification in run_cross_validation()": [[133, "pipeline-specification-in-run-cross-validation"]], "Feature preprocessing": [[133, "feature-preprocessing"]], "Pipeline specification made easy with the PipelineCreator": [[133, "pipeline-specification-made-easy-with-the-pipelinecreator"]], "Setting hyperparameters": [[133, "setting-hyperparameters"]], "Selective preprocessing using feature types": [[133, "selective-preprocessing-using-feature-types"]], "What\u2019s new": [[134, "what-s-new"]], "Julearn 0.3.0.dev220 (2023-07-06)": [[134, "julearn-0-3-0-dev220-2023-07-06"]], "Bugfixes": [[134, "bugfixes"], [134, "id1"]], "Enhancements": [[134, "enhancements"], [134, "id2"]], "Features": [[134, "features"], [134, "id3"]], "Julearn 0.2.5 (2022-07-21)": [[134, "julearn-0-2-5-2022-07-21"]], "API Changes": [[134, "api-changes"]], "Improved Documentation": [[134, "improved-documentation"]]}, "indexentries": {"julearn.base": [[0, "module-julearn.base"]], "module": [[0, "module-julearn.base"], [71, "module-julearn.inspect"], [72, "module-julearn.api"], [73, "module-julearn.model_selection"], [74, "module-julearn.models"], [74, "module-julearn.models.dynamic"], [75, "module-julearn.pipeline"], [76, "module-julearn.prepare"], [77, "module-julearn.scoring"], [77, "module-julearn.scoring.metrics"], [78, "module-julearn.stats"], [79, "module-julearn.transformers"], [79, "module-julearn.transformers.target"], [80, "module-julearn.utils"], [80, "module-julearn.utils.typing"], [81, "module-julearn.viz"]], "pipelinecreator (class in julearn)": [[1, "julearn.PipelineCreator"]], "__init__() (julearn.pipelinecreator method)": [[1, "julearn.PipelineCreator.__init__"]], "add() (julearn.pipelinecreator method)": [[1, "julearn.PipelineCreator.add"]], "copy() (julearn.pipelinecreator method)": [[1, "julearn.PipelineCreator.copy"]], "from_list() (julearn.pipelinecreator class method)": [[1, "julearn.PipelineCreator.from_list"]], "has_model() (julearn.pipelinecreator method)": [[1, "julearn.PipelineCreator.has_model"]], "split() (julearn.pipelinecreator method)": [[1, "julearn.PipelineCreator.split"]], "steps (julearn.pipelinecreator property)": [[1, "julearn.PipelineCreator.steps"]], "to_pipeline() (julearn.pipelinecreator method)": [[1, "julearn.PipelineCreator.to_pipeline"]], "targetpipelinecreator (class in julearn)": [[2, "julearn.TargetPipelineCreator"]], "__init__() (julearn.targetpipelinecreator method)": [[2, "julearn.TargetPipelineCreator.__init__"]], "add() (julearn.targetpipelinecreator method)": [[2, "julearn.TargetPipelineCreator.add"]], "to_pipeline() (julearn.targetpipelinecreator method)": [[2, "julearn.TargetPipelineCreator.to_pipeline"]], "columntypes (class in julearn.base)": [[3, "julearn.base.ColumnTypes"]], "__init__() (julearn.base.columntypes method)": [[3, "julearn.base.ColumnTypes.__init__"]], "add() (julearn.base.columntypes method)": [[3, "julearn.base.ColumnTypes.add"]], "copy() (julearn.base.columntypes method)": [[3, "julearn.base.ColumnTypes.copy"]], "pattern (julearn.base.columntypes property)": [[3, "julearn.base.ColumnTypes.pattern"]], "to_type_selector() (julearn.base.columntypes method)": [[3, "julearn.base.ColumnTypes.to_type_selector"]], "columntypeslike (in module julearn.base)": [[4, "julearn.base.ColumnTypesLike"]], "jubaseestimator (class in julearn.base)": [[5, "julearn.base.JuBaseEstimator"]], "__init__() (julearn.base.jubaseestimator method)": [[5, "julearn.base.JuBaseEstimator.__init__"]], "filter_columns() (julearn.base.jubaseestimator method)": [[5, "julearn.base.JuBaseEstimator.filter_columns"]], "get_apply_to() (julearn.base.jubaseestimator method)": [[5, "julearn.base.JuBaseEstimator.get_apply_to"]], "get_metadata_routing() (julearn.base.jubaseestimator method)": [[5, "julearn.base.JuBaseEstimator.get_metadata_routing"]], "get_needed_types() (julearn.base.jubaseestimator method)": [[5, "julearn.base.JuBaseEstimator.get_needed_types"]], "get_params() (julearn.base.jubaseestimator method)": [[5, "julearn.base.JuBaseEstimator.get_params"]], "set_params() (julearn.base.jubaseestimator method)": [[5, "julearn.base.JuBaseEstimator.set_params"]], "jutransformer (class in julearn.base)": [[6, "julearn.base.JuTransformer"]], "__init__() (julearn.base.jutransformer method)": [[6, "julearn.base.JuTransformer.__init__"]], "filter_columns() (julearn.base.jutransformer method)": [[6, "julearn.base.JuTransformer.filter_columns"]], "fit() (julearn.base.jutransformer method)": [[6, "julearn.base.JuTransformer.fit"]], "fit_transform() (julearn.base.jutransformer method)": [[6, "julearn.base.JuTransformer.fit_transform"]], "get_apply_to() (julearn.base.jutransformer method)": [[6, "julearn.base.JuTransformer.get_apply_to"]], "get_metadata_routing() (julearn.base.jutransformer method)": [[6, "julearn.base.JuTransformer.get_metadata_routing"]], "get_needed_types() (julearn.base.jutransformer method)": [[6, "julearn.base.JuTransformer.get_needed_types"]], "get_params() (julearn.base.jutransformer method)": [[6, "julearn.base.JuTransformer.get_params"]], "set_output() (julearn.base.jutransformer method)": [[6, "julearn.base.JuTransformer.set_output"]], "set_params() (julearn.base.jutransformer method)": [[6, "julearn.base.JuTransformer.set_params"]], "wrapmodel (class in julearn.base)": [[7, "julearn.base.WrapModel"]], "__init__() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.__init__"]], "classes_ (julearn.base.wrapmodel property)": [[7, "julearn.base.WrapModel.classes_"]], "decision_function() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.decision_function"]], "filter_columns() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.filter_columns"]], "fit() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.fit"]], "get_apply_to() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.get_apply_to"]], "get_metadata_routing() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.get_metadata_routing"]], "get_needed_types() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.get_needed_types"]], "get_params() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.get_params"]], "predict() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.predict"]], "predict_log_proba() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.predict_log_proba"]], "predict_proba() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.predict_proba"]], "score() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.score"]], "set_params() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.set_params"]], "change_column_type() (in module julearn.base)": [[8, "julearn.base.change_column_type"]], "ensure_column_types() (in module julearn.base)": [[9, "julearn.base.ensure_column_types"]], "get_column_type() (in module julearn.base)": [[10, "julearn.base.get_column_type"]], "make_type_selector() (in module julearn.base)": [[11, "julearn.base.make_type_selector"]], "foldsinspector (class in julearn.inspect)": [[12, "julearn.inspect.FoldsInspector"]], "__init__() (julearn.inspect.foldsinspector method)": [[12, "julearn.inspect.FoldsInspector.__init__"]], "decision_function() (julearn.inspect.foldsinspector method)": [[12, "julearn.inspect.FoldsInspector.decision_function"]], "predict() (julearn.inspect.foldsinspector method)": [[12, "julearn.inspect.FoldsInspector.predict"]], "predict_log_proba() (julearn.inspect.foldsinspector method)": [[12, "julearn.inspect.FoldsInspector.predict_log_proba"]], "predict_proba() (julearn.inspect.foldsinspector method)": [[12, "julearn.inspect.FoldsInspector.predict_proba"]], "inspector (class in julearn.inspect)": [[13, "julearn.inspect.Inspector"]], "__init__() (julearn.inspect.inspector method)": [[13, "julearn.inspect.Inspector.__init__"]], "folds (julearn.inspect.inspector property)": [[13, "julearn.inspect.Inspector.folds"]], "model (julearn.inspect.inspector property)": [[13, "julearn.inspect.Inspector.model"]], "preprocess() (in module julearn.inspect)": [[14, "julearn.inspect.preprocess"]], "continuousstratifiedgroupkfold (class in julearn.model_selection)": [[15, "julearn.model_selection.ContinuousStratifiedGroupKFold"]], "__init__() (julearn.model_selection.continuousstratifiedgroupkfold method)": [[15, "julearn.model_selection.ContinuousStratifiedGroupKFold.__init__"]], "get_metadata_routing() (julearn.model_selection.continuousstratifiedgroupkfold method)": [[15, "julearn.model_selection.ContinuousStratifiedGroupKFold.get_metadata_routing"]], "get_n_splits() (julearn.model_selection.continuousstratifiedgroupkfold method)": [[15, "julearn.model_selection.ContinuousStratifiedGroupKFold.get_n_splits"]], "set_split_request() (julearn.model_selection.continuousstratifiedgroupkfold method)": [[15, "julearn.model_selection.ContinuousStratifiedGroupKFold.set_split_request"]], "split() (julearn.model_selection.continuousstratifiedgroupkfold method)": [[15, "julearn.model_selection.ContinuousStratifiedGroupKFold.split"]], "continuousstratifiedkfold (class in julearn.model_selection)": [[16, "julearn.model_selection.ContinuousStratifiedKFold"]], "__init__() (julearn.model_selection.continuousstratifiedkfold method)": [[16, "julearn.model_selection.ContinuousStratifiedKFold.__init__"]], "get_metadata_routing() (julearn.model_selection.continuousstratifiedkfold method)": [[16, "julearn.model_selection.ContinuousStratifiedKFold.get_metadata_routing"]], "get_n_splits() (julearn.model_selection.continuousstratifiedkfold method)": [[16, "julearn.model_selection.ContinuousStratifiedKFold.get_n_splits"]], "split() (julearn.model_selection.continuousstratifiedkfold method)": [[16, "julearn.model_selection.ContinuousStratifiedKFold.split"]], "repeatedcontinuousstratifiedgroupkfold (class in julearn.model_selection)": [[17, "julearn.model_selection.RepeatedContinuousStratifiedGroupKFold"]], "__init__() (julearn.model_selection.repeatedcontinuousstratifiedgroupkfold method)": [[17, "julearn.model_selection.RepeatedContinuousStratifiedGroupKFold.__init__"]], "get_metadata_routing() (julearn.model_selection.repeatedcontinuousstratifiedgroupkfold method)": [[17, "julearn.model_selection.RepeatedContinuousStratifiedGroupKFold.get_metadata_routing"]], "get_n_splits() (julearn.model_selection.repeatedcontinuousstratifiedgroupkfold method)": [[17, "julearn.model_selection.RepeatedContinuousStratifiedGroupKFold.get_n_splits"]], "split() (julearn.model_selection.repeatedcontinuousstratifiedgroupkfold method)": [[17, "julearn.model_selection.RepeatedContinuousStratifiedGroupKFold.split"]], "repeatedcontinuousstratifiedkfold (class in julearn.model_selection)": [[18, "julearn.model_selection.RepeatedContinuousStratifiedKFold"]], "__init__() (julearn.model_selection.repeatedcontinuousstratifiedkfold method)": [[18, "julearn.model_selection.RepeatedContinuousStratifiedKFold.__init__"]], "get_metadata_routing() (julearn.model_selection.repeatedcontinuousstratifiedkfold method)": [[18, "julearn.model_selection.RepeatedContinuousStratifiedKFold.get_metadata_routing"]], "get_n_splits() (julearn.model_selection.repeatedcontinuousstratifiedkfold method)": [[18, "julearn.model_selection.RepeatedContinuousStratifiedKFold.get_n_splits"]], "split() (julearn.model_selection.repeatedcontinuousstratifiedkfold method)": [[18, "julearn.model_selection.RepeatedContinuousStratifiedKFold.split"]], "stratifiedbootstrap (class in julearn.model_selection)": [[19, "julearn.model_selection.StratifiedBootstrap"]], "__init__() (julearn.model_selection.stratifiedbootstrap method)": [[19, "julearn.model_selection.StratifiedBootstrap.__init__"]], "get_metadata_routing() (julearn.model_selection.stratifiedbootstrap method)": [[19, "julearn.model_selection.StratifiedBootstrap.get_metadata_routing"]], "get_n_splits() (julearn.model_selection.stratifiedbootstrap method)": [[19, "julearn.model_selection.StratifiedBootstrap.get_n_splits"]], "split() (julearn.model_selection.stratifiedbootstrap method)": [[19, "julearn.model_selection.StratifiedBootstrap.split"]], "get_searcher() (in module julearn.model_selection)": [[20, "julearn.model_selection.get_searcher"]], "list_searchers() (in module julearn.model_selection)": [[21, "julearn.model_selection.list_searchers"]], "register_searcher() (in module julearn.model_selection)": [[22, "julearn.model_selection.register_searcher"]], "reset_searcher_register() (in module julearn.model_selection)": [[23, "julearn.model_selection.reset_searcher_register"]], "dynamicselection (class in julearn.models.dynamic)": [[24, "julearn.models.dynamic.DynamicSelection"]], "__init__() (julearn.models.dynamic.dynamicselection method)": [[24, "julearn.models.dynamic.DynamicSelection.__init__"]], "fit() (julearn.models.dynamic.dynamicselection method)": [[24, "julearn.models.dynamic.DynamicSelection.fit"]], "get_metadata_routing() (julearn.models.dynamic.dynamicselection method)": [[24, "julearn.models.dynamic.DynamicSelection.get_metadata_routing"]], "get_params() (julearn.models.dynamic.dynamicselection method)": [[24, "julearn.models.dynamic.DynamicSelection.get_params"]], "predict() (julearn.models.dynamic.dynamicselection method)": [[24, "julearn.models.dynamic.DynamicSelection.predict"]], "predict_proba() (julearn.models.dynamic.dynamicselection method)": [[24, "julearn.models.dynamic.DynamicSelection.predict_proba"]], "score() (julearn.models.dynamic.dynamicselection method)": [[24, "julearn.models.dynamic.DynamicSelection.score"]], "set_params() (julearn.models.dynamic.dynamicselection method)": [[24, "julearn.models.dynamic.DynamicSelection.set_params"]], "set_score_request() (julearn.models.dynamic.dynamicselection method)": [[24, "julearn.models.dynamic.DynamicSelection.set_score_request"]], "get_model() (in module julearn.models)": [[25, "julearn.models.get_model"]], "list_models() (in module julearn.models)": [[26, "julearn.models.list_models"]], "register_model() (in module julearn.models)": [[27, "julearn.models.register_model"]], "reset_model_register() (in module julearn.models)": [[28, "julearn.models.reset_model_register"]], "jutargetpipeline (class in julearn.pipeline)": [[29, "julearn.pipeline.JuTargetPipeline"]], "__init__() (julearn.pipeline.jutargetpipeline method)": [[29, "julearn.pipeline.JuTargetPipeline.__init__"]], "can_inverse_transform() (julearn.pipeline.jutargetpipeline method)": [[29, "julearn.pipeline.JuTargetPipeline.can_inverse_transform"]], "fit() (julearn.pipeline.jutargetpipeline method)": [[29, "julearn.pipeline.JuTargetPipeline.fit"]], "fit_transform() (julearn.pipeline.jutargetpipeline method)": [[29, "julearn.pipeline.JuTargetPipeline.fit_transform"]], "inverse_transform() (julearn.pipeline.jutargetpipeline method)": [[29, "julearn.pipeline.JuTargetPipeline.inverse_transform"]], "needed_types (julearn.pipeline.jutargetpipeline property)": [[29, "julearn.pipeline.JuTargetPipeline.needed_types"]], "transform() (julearn.pipeline.jutargetpipeline method)": [[29, "julearn.pipeline.JuTargetPipeline.transform"]], "step (class in julearn.pipeline.pipeline_creator)": [[30, "julearn.pipeline.pipeline_creator.Step"]], "__init__() (julearn.pipeline.pipeline_creator.step method)": [[30, "julearn.pipeline.pipeline_creator.Step.__init__"]], "apply_to (julearn.pipeline.pipeline_creator.step attribute)": [[30, "julearn.pipeline.pipeline_creator.Step.apply_to"]], "estimator (julearn.pipeline.pipeline_creator.step attribute)": [[30, "julearn.pipeline.pipeline_creator.Step.estimator"]], "name (julearn.pipeline.pipeline_creator.step attribute)": [[30, "julearn.pipeline.pipeline_creator.Step.name"]], "needed_types (julearn.pipeline.pipeline_creator.step attribute)": [[30, "julearn.pipeline.pipeline_creator.Step.needed_types"]], "params_to_tune (julearn.pipeline.pipeline_creator.step attribute)": [[30, "julearn.pipeline.pipeline_creator.Step.params_to_tune"]], "row_select_col_type (julearn.pipeline.pipeline_creator.step attribute)": [[30, "julearn.pipeline.pipeline_creator.Step.row_select_col_type"]], "row_select_vals (julearn.pipeline.pipeline_creator.step attribute)": [[30, "julearn.pipeline.pipeline_creator.Step.row_select_vals"]], "check_consistency() (in module julearn.prepare)": [[31, "julearn.prepare.check_consistency"]], "prepare_input_data() (in module julearn.prepare)": [[32, "julearn.prepare.prepare_input_data"]], "run_cross_validation() (in module julearn)": [[33, "julearn.run_cross_validation"]], "check_scoring() (in module julearn.scoring)": [[34, "julearn.scoring.check_scoring"]], "get_scorer() (in module julearn.scoring)": [[35, "julearn.scoring.get_scorer"]], "list_scorers() (in module julearn.scoring)": [[36, "julearn.scoring.list_scorers"]], "r2_corr() (in module julearn.scoring.metrics)": [[37, "julearn.scoring.metrics.r2_corr"]], "register_scorer() (in module julearn.scoring)": [[38, "julearn.scoring.register_scorer"]], "reset_scorer_register() (in module julearn.scoring)": [[39, "julearn.scoring.reset_scorer_register"]], "corrected_ttest() (in module julearn.stats)": [[40, "julearn.stats.corrected_ttest"]], "cbpm (class in julearn.transformers)": [[41, "julearn.transformers.CBPM"]], "__init__() (julearn.transformers.cbpm method)": [[41, "julearn.transformers.CBPM.__init__"]], "aggregate() (julearn.transformers.cbpm method)": [[41, "julearn.transformers.CBPM.aggregate"]], "fit() (julearn.transformers.cbpm method)": [[41, "julearn.transformers.CBPM.fit"]], "fit_transform() (julearn.transformers.cbpm method)": [[41, "julearn.transformers.CBPM.fit_transform"]], "get_feature_names_out() (julearn.transformers.cbpm method)": [[41, "julearn.transformers.CBPM.get_feature_names_out"]], "get_metadata_routing() (julearn.transformers.cbpm method)": [[41, "julearn.transformers.CBPM.get_metadata_routing"]], "get_params() (julearn.transformers.cbpm method)": [[41, "julearn.transformers.CBPM.get_params"]], "set_output() (julearn.transformers.cbpm method)": [[41, "julearn.transformers.CBPM.set_output"]], "set_params() (julearn.transformers.cbpm method)": [[41, "julearn.transformers.CBPM.set_params"]], "transform() (julearn.transformers.cbpm method)": [[41, "julearn.transformers.CBPM.transform"]], "changecolumntypes (class in julearn.transformers)": [[42, "julearn.transformers.ChangeColumnTypes"]], "__init__() (julearn.transformers.changecolumntypes method)": [[42, "julearn.transformers.ChangeColumnTypes.__init__"]], "filter_columns() (julearn.transformers.changecolumntypes method)": [[42, "julearn.transformers.ChangeColumnTypes.filter_columns"]], "fit() (julearn.transformers.changecolumntypes method)": [[42, "julearn.transformers.ChangeColumnTypes.fit"]], "fit_transform() (julearn.transformers.changecolumntypes method)": [[42, "julearn.transformers.ChangeColumnTypes.fit_transform"]], "get_apply_to() (julearn.transformers.changecolumntypes method)": [[42, "julearn.transformers.ChangeColumnTypes.get_apply_to"]], "get_feature_names_out() (julearn.transformers.changecolumntypes method)": [[42, "julearn.transformers.ChangeColumnTypes.get_feature_names_out"]], "get_metadata_routing() (julearn.transformers.changecolumntypes method)": [[42, "julearn.transformers.ChangeColumnTypes.get_metadata_routing"]], "get_needed_types() (julearn.transformers.changecolumntypes method)": [[42, "julearn.transformers.ChangeColumnTypes.get_needed_types"]], "get_params() (julearn.transformers.changecolumntypes method)": [[42, "julearn.transformers.ChangeColumnTypes.get_params"]], "set_output() (julearn.transformers.changecolumntypes method)": [[42, "julearn.transformers.ChangeColumnTypes.set_output"]], "set_params() (julearn.transformers.changecolumntypes method)": [[42, "julearn.transformers.ChangeColumnTypes.set_params"]], "transform() (julearn.transformers.changecolumntypes method)": [[42, "julearn.transformers.ChangeColumnTypes.transform"]], "dropcolumns (class in julearn.transformers)": [[43, "julearn.transformers.DropColumns"]], "__init__() (julearn.transformers.dropcolumns method)": [[43, "julearn.transformers.DropColumns.__init__"]], "filter_columns() (julearn.transformers.dropcolumns method)": [[43, "julearn.transformers.DropColumns.filter_columns"]], "fit() (julearn.transformers.dropcolumns method)": [[43, "julearn.transformers.DropColumns.fit"]], "fit_transform() (julearn.transformers.dropcolumns method)": [[43, "julearn.transformers.DropColumns.fit_transform"]], "get_apply_to() (julearn.transformers.dropcolumns method)": [[43, "julearn.transformers.DropColumns.get_apply_to"]], "get_metadata_routing() (julearn.transformers.dropcolumns method)": [[43, "julearn.transformers.DropColumns.get_metadata_routing"]], "get_needed_types() (julearn.transformers.dropcolumns method)": [[43, "julearn.transformers.DropColumns.get_needed_types"]], "get_params() (julearn.transformers.dropcolumns method)": [[43, "julearn.transformers.DropColumns.get_params"]], "get_support() (julearn.transformers.dropcolumns method)": [[43, "julearn.transformers.DropColumns.get_support"]], "set_output() (julearn.transformers.dropcolumns method)": [[43, "julearn.transformers.DropColumns.set_output"]], "set_params() (julearn.transformers.dropcolumns method)": [[43, "julearn.transformers.DropColumns.set_params"]], "transform() (julearn.transformers.dropcolumns method)": [[43, "julearn.transformers.DropColumns.transform"]], "filtercolumns (class in julearn.transformers)": [[44, "julearn.transformers.FilterColumns"]], "__init__() (julearn.transformers.filtercolumns method)": [[44, "julearn.transformers.FilterColumns.__init__"]], "filter_columns() (julearn.transformers.filtercolumns method)": [[44, "julearn.transformers.FilterColumns.filter_columns"]], "fit() (julearn.transformers.filtercolumns method)": [[44, "julearn.transformers.FilterColumns.fit"]], "fit_transform() (julearn.transformers.filtercolumns method)": [[44, "julearn.transformers.FilterColumns.fit_transform"]], "get_apply_to() (julearn.transformers.filtercolumns method)": [[44, "julearn.transformers.FilterColumns.get_apply_to"]], "get_feature_names_out() (julearn.transformers.filtercolumns method)": [[44, "julearn.transformers.FilterColumns.get_feature_names_out"]], "get_metadata_routing() (julearn.transformers.filtercolumns method)": [[44, "julearn.transformers.FilterColumns.get_metadata_routing"]], "get_needed_types() (julearn.transformers.filtercolumns method)": [[44, "julearn.transformers.FilterColumns.get_needed_types"]], "get_params() (julearn.transformers.filtercolumns method)": [[44, "julearn.transformers.FilterColumns.get_params"]], "set_output() (julearn.transformers.filtercolumns method)": [[44, "julearn.transformers.FilterColumns.set_output"]], "set_params() (julearn.transformers.filtercolumns method)": [[44, "julearn.transformers.FilterColumns.set_params"]], "transform() (julearn.transformers.filtercolumns method)": [[44, "julearn.transformers.FilterColumns.transform"]], "jucolumntransformer (class in julearn.transformers)": [[45, "julearn.transformers.JuColumnTransformer"]], "__init__() (julearn.transformers.jucolumntransformer method)": [[45, "julearn.transformers.JuColumnTransformer.__init__"]], "filter_columns() (julearn.transformers.jucolumntransformer method)": [[45, "julearn.transformers.JuColumnTransformer.filter_columns"]], "fit() (julearn.transformers.jucolumntransformer method)": [[45, "julearn.transformers.JuColumnTransformer.fit"]], "fit_transform() (julearn.transformers.jucolumntransformer method)": [[45, "julearn.transformers.JuColumnTransformer.fit_transform"]], "get_apply_to() (julearn.transformers.jucolumntransformer method)": [[45, "julearn.transformers.JuColumnTransformer.get_apply_to"]], "get_feature_names_out() (julearn.transformers.jucolumntransformer method)": [[45, "julearn.transformers.JuColumnTransformer.get_feature_names_out"]], "get_metadata_routing() (julearn.transformers.jucolumntransformer method)": [[45, "julearn.transformers.JuColumnTransformer.get_metadata_routing"]], "get_needed_types() (julearn.transformers.jucolumntransformer method)": [[45, "julearn.transformers.JuColumnTransformer.get_needed_types"]], "get_params() (julearn.transformers.jucolumntransformer method)": [[45, "julearn.transformers.JuColumnTransformer.get_params"]], "set_output() (julearn.transformers.jucolumntransformer method)": [[45, "julearn.transformers.JuColumnTransformer.set_output"]], "set_params() (julearn.transformers.jucolumntransformer method)": [[45, "julearn.transformers.JuColumnTransformer.set_params"]], "transform() (julearn.transformers.jucolumntransformer method)": [[45, "julearn.transformers.JuColumnTransformer.transform"]], "setcolumntypes (class in julearn.transformers)": [[46, "julearn.transformers.SetColumnTypes"]], "__init__() (julearn.transformers.setcolumntypes method)": [[46, "julearn.transformers.SetColumnTypes.__init__"]], "filter_columns() (julearn.transformers.setcolumntypes method)": [[46, "julearn.transformers.SetColumnTypes.filter_columns"]], "fit() (julearn.transformers.setcolumntypes method)": [[46, "julearn.transformers.SetColumnTypes.fit"]], "fit_transform() (julearn.transformers.setcolumntypes method)": [[46, "julearn.transformers.SetColumnTypes.fit_transform"]], "get_apply_to() (julearn.transformers.setcolumntypes method)": [[46, "julearn.transformers.SetColumnTypes.get_apply_to"]], "get_feature_names_out() (julearn.transformers.setcolumntypes method)": [[46, "julearn.transformers.SetColumnTypes.get_feature_names_out"]], "get_metadata_routing() (julearn.transformers.setcolumntypes method)": [[46, "julearn.transformers.SetColumnTypes.get_metadata_routing"]], "get_needed_types() (julearn.transformers.setcolumntypes method)": [[46, "julearn.transformers.SetColumnTypes.get_needed_types"]], "get_params() (julearn.transformers.setcolumntypes method)": [[46, "julearn.transformers.SetColumnTypes.get_params"]], "set_output() (julearn.transformers.setcolumntypes method)": [[46, "julearn.transformers.SetColumnTypes.set_output"]], "set_params() (julearn.transformers.setcolumntypes method)": [[46, "julearn.transformers.SetColumnTypes.set_params"]], "transform() (julearn.transformers.setcolumntypes method)": [[46, "julearn.transformers.SetColumnTypes.transform"]], "confoundremover (class in julearn.transformers.confound_remover)": [[47, "julearn.transformers.confound_remover.ConfoundRemover"]], "__init__() (julearn.transformers.confound_remover.confoundremover method)": [[47, "julearn.transformers.confound_remover.ConfoundRemover.__init__"]], "filter_columns() (julearn.transformers.confound_remover.confoundremover method)": [[47, "julearn.transformers.confound_remover.ConfoundRemover.filter_columns"]], "fit() (julearn.transformers.confound_remover.confoundremover method)": [[47, "julearn.transformers.confound_remover.ConfoundRemover.fit"]], "fit_transform() (julearn.transformers.confound_remover.confoundremover method)": [[47, "julearn.transformers.confound_remover.ConfoundRemover.fit_transform"]], "get_apply_to() (julearn.transformers.confound_remover.confoundremover method)": [[47, "julearn.transformers.confound_remover.ConfoundRemover.get_apply_to"]], "get_feature_names_out() (julearn.transformers.confound_remover.confoundremover method)": [[47, "julearn.transformers.confound_remover.ConfoundRemover.get_feature_names_out"]], "get_metadata_routing() (julearn.transformers.confound_remover.confoundremover method)": [[47, "julearn.transformers.confound_remover.ConfoundRemover.get_metadata_routing"]], "get_needed_types() (julearn.transformers.confound_remover.confoundremover method)": [[47, "julearn.transformers.confound_remover.ConfoundRemover.get_needed_types"]], "get_params() (julearn.transformers.confound_remover.confoundremover method)": [[47, "julearn.transformers.confound_remover.ConfoundRemover.get_params"]], "get_support() (julearn.transformers.confound_remover.confoundremover method)": [[47, "julearn.transformers.confound_remover.ConfoundRemover.get_support"]], "set_output() (julearn.transformers.confound_remover.confoundremover method)": [[47, "julearn.transformers.confound_remover.ConfoundRemover.set_output"]], "set_params() (julearn.transformers.confound_remover.confoundremover method)": [[47, "julearn.transformers.confound_remover.ConfoundRemover.set_params"]], "transform() (julearn.transformers.confound_remover.confoundremover method)": [[47, "julearn.transformers.confound_remover.ConfoundRemover.transform"]], "get_transformer() (in module julearn.transformers)": [[48, "julearn.transformers.get_transformer"]], "list_transformers() (in module julearn.transformers)": [[49, "julearn.transformers.list_transformers"]], "register_transformer() (in module julearn.transformers)": [[50, "julearn.transformers.register_transformer"]], "reset_transformer_register() (in module julearn.transformers)": [[51, "julearn.transformers.reset_transformer_register"]], "jutargettransformer (class in julearn.transformers.target)": [[52, "julearn.transformers.target.JuTargetTransformer"]], "__init__() (julearn.transformers.target.jutargettransformer method)": [[52, "julearn.transformers.target.JuTargetTransformer.__init__"]], "fit() (julearn.transformers.target.jutargettransformer method)": [[52, "julearn.transformers.target.JuTargetTransformer.fit"]], "fit_transform() (julearn.transformers.target.jutargettransformer method)": [[52, "julearn.transformers.target.JuTargetTransformer.fit_transform"]], "transform() (julearn.transformers.target.jutargettransformer method)": [[52, "julearn.transformers.target.JuTargetTransformer.transform"]], "jutransformedtargetmodel (class in julearn.transformers.target)": [[53, "julearn.transformers.target.JuTransformedTargetModel"]], "__init__() (julearn.transformers.target.jutransformedtargetmodel method)": [[53, "julearn.transformers.target.JuTransformedTargetModel.__init__"]], "classes_ (julearn.transformers.target.jutransformedtargetmodel property)": [[53, "julearn.transformers.target.JuTransformedTargetModel.classes_"]], "decision_function() (julearn.transformers.target.jutransformedtargetmodel method)": [[53, "julearn.transformers.target.JuTransformedTargetModel.decision_function"]], "filter_columns() (julearn.transformers.target.jutransformedtargetmodel method)": [[53, "julearn.transformers.target.JuTransformedTargetModel.filter_columns"]], "fit() (julearn.transformers.target.jutransformedtargetmodel method)": [[53, "julearn.transformers.target.JuTransformedTargetModel.fit"]], "get_apply_to() (julearn.transformers.target.jutransformedtargetmodel method)": [[53, "julearn.transformers.target.JuTransformedTargetModel.get_apply_to"]], "get_metadata_routing() (julearn.transformers.target.jutransformedtargetmodel method)": [[53, "julearn.transformers.target.JuTransformedTargetModel.get_metadata_routing"]], "get_needed_types() (julearn.transformers.target.jutransformedtargetmodel method)": [[53, "julearn.transformers.target.JuTransformedTargetModel.get_needed_types"]], "get_params() (julearn.transformers.target.jutransformedtargetmodel method)": [[53, "julearn.transformers.target.JuTransformedTargetModel.get_params"]], "predict() (julearn.transformers.target.jutransformedtargetmodel method)": [[53, "julearn.transformers.target.JuTransformedTargetModel.predict"]], "predict_proba() (julearn.transformers.target.jutransformedtargetmodel method)": [[53, "julearn.transformers.target.JuTransformedTargetModel.predict_proba"]], "score() (julearn.transformers.target.jutransformedtargetmodel method)": [[53, "julearn.transformers.target.JuTransformedTargetModel.score"]], "set_params() (julearn.transformers.target.jutransformedtargetmodel method)": [[53, "julearn.transformers.target.JuTransformedTargetModel.set_params"]], "transform_target() (julearn.transformers.target.jutransformedtargetmodel method)": [[53, "julearn.transformers.target.JuTransformedTargetModel.transform_target"]], "targetconfoundremover (class in julearn.transformers.target)": [[54, "julearn.transformers.target.TargetConfoundRemover"]], "__init__() (julearn.transformers.target.targetconfoundremover method)": [[54, "julearn.transformers.target.TargetConfoundRemover.__init__"]], "fit() (julearn.transformers.target.targetconfoundremover method)": [[54, "julearn.transformers.target.TargetConfoundRemover.fit"]], "fit_transform() (julearn.transformers.target.targetconfoundremover method)": [[54, "julearn.transformers.target.TargetConfoundRemover.fit_transform"]], "needed_types (julearn.transformers.target.targetconfoundremover property)": [[54, "julearn.transformers.target.TargetConfoundRemover.needed_types"]], "transform() (julearn.transformers.target.targetconfoundremover method)": [[54, "julearn.transformers.target.TargetConfoundRemover.transform"]], "transformedtargetwarning (class in julearn.transformers.target)": [[55, "julearn.transformers.target.TransformedTargetWarning"]], "__init__() (julearn.transformers.target.transformedtargetwarning method)": [[55, "julearn.transformers.target.TransformedTargetWarning.__init__"]], "args (julearn.transformers.target.transformedtargetwarning attribute)": [[55, "julearn.transformers.target.TransformedTargetWarning.args"]], "with_traceback() (julearn.transformers.target.transformedtargetwarning method)": [[55, "julearn.transformers.target.TransformedTargetWarning.with_traceback"]], "get_target_transformer() (in module julearn.transformers.target)": [[56, "julearn.transformers.target.get_target_transformer"]], "list_target_transformers() (in module julearn.transformers.target)": [[57, "julearn.transformers.target.list_target_transformers"]], "register_target_transformer() (in module julearn.transformers.target)": [[58, "julearn.transformers.target.register_target_transformer"]], "reset_target_transformer_register() (in module julearn.transformers.target)": [[59, "julearn.transformers.target.reset_target_transformer_register"]], "configure_logging() (in module julearn.utils)": [[60, "julearn.utils.configure_logging"]], "logger (in module julearn.utils)": [[61, "julearn.utils.logger"]], "raise_error() (in module julearn.utils)": [[62, "julearn.utils.raise_error"]], "estimatorlike (in module julearn.utils.typing)": [[63, "julearn.utils.typing.EstimatorLike"]], "estimatorlikefit1 (class in julearn.utils.typing)": [[64, "julearn.utils.typing.EstimatorLikeFit1"]], "__init__() (julearn.utils.typing.estimatorlikefit1 method)": [[64, "julearn.utils.typing.EstimatorLikeFit1.__init__"]], "fit() (julearn.utils.typing.estimatorlikefit1 method)": [[64, "julearn.utils.typing.EstimatorLikeFit1.fit"]], "get_params() (julearn.utils.typing.estimatorlikefit1 method)": [[64, "julearn.utils.typing.EstimatorLikeFit1.get_params"]], "set_params() (julearn.utils.typing.estimatorlikefit1 method)": [[64, "julearn.utils.typing.EstimatorLikeFit1.set_params"]], "estimatorlikefit2 (class in julearn.utils.typing)": [[65, "julearn.utils.typing.EstimatorLikeFit2"]], "__init__() (julearn.utils.typing.estimatorlikefit2 method)": [[65, "julearn.utils.typing.EstimatorLikeFit2.__init__"]], "fit() (julearn.utils.typing.estimatorlikefit2 method)": [[65, "julearn.utils.typing.EstimatorLikeFit2.fit"]], "get_params() (julearn.utils.typing.estimatorlikefit2 method)": [[65, "julearn.utils.typing.EstimatorLikeFit2.get_params"]], "set_params() (julearn.utils.typing.estimatorlikefit2 method)": [[65, "julearn.utils.typing.EstimatorLikeFit2.set_params"]], "estimatorlikefity (class in julearn.utils.typing)": [[66, "julearn.utils.typing.EstimatorLikeFity"]], "__init__() (julearn.utils.typing.estimatorlikefity method)": [[66, "julearn.utils.typing.EstimatorLikeFity.__init__"]], "fit() (julearn.utils.typing.estimatorlikefity method)": [[66, "julearn.utils.typing.EstimatorLikeFity.fit"]], "get_params() (julearn.utils.typing.estimatorlikefity method)": [[66, "julearn.utils.typing.EstimatorLikeFity.get_params"]], "set_params() (julearn.utils.typing.estimatorlikefity method)": [[66, "julearn.utils.typing.EstimatorLikeFity.set_params"]], "juestimatorlike (class in julearn.utils.typing)": [[67, "julearn.utils.typing.JuEstimatorLike"]], "__init__() (julearn.utils.typing.juestimatorlike method)": [[67, "julearn.utils.typing.JuEstimatorLike.__init__"]], "fit() (julearn.utils.typing.juestimatorlike method)": [[67, "julearn.utils.typing.JuEstimatorLike.fit"]], "get_apply_to() (julearn.utils.typing.juestimatorlike method)": [[67, "julearn.utils.typing.JuEstimatorLike.get_apply_to"]], "get_needed_types() (julearn.utils.typing.juestimatorlike method)": [[67, "julearn.utils.typing.JuEstimatorLike.get_needed_types"]], "get_params() (julearn.utils.typing.juestimatorlike method)": [[67, "julearn.utils.typing.JuEstimatorLike.get_params"]], "set_params() (julearn.utils.typing.juestimatorlike method)": [[67, "julearn.utils.typing.JuEstimatorLike.set_params"]], "warn_with_log() (in module julearn.utils)": [[68, "julearn.utils.warn_with_log"]], "plot_scores() (in module julearn.viz)": [[69, "julearn.viz.plot_scores"]], "julearn.inspect": [[71, "module-julearn.inspect"]], "julearn.api": [[72, "module-julearn.api"]], "julearn.model_selection": [[73, "module-julearn.model_selection"]], "julearn.models": [[74, "module-julearn.models"]], "julearn.models.dynamic": [[74, "module-julearn.models.dynamic"]], "julearn.pipeline": [[75, "module-julearn.pipeline"]], "julearn.prepare": [[76, "module-julearn.prepare"]], "julearn.scoring": [[77, "module-julearn.scoring"]], "julearn.scoring.metrics": [[77, "module-julearn.scoring.metrics"]], "julearn.stats": [[78, "module-julearn.stats"]], "julearn.transformers": [[79, "module-julearn.transformers"]], "julearn.transformers.target": [[79, "module-julearn.transformers.target"]], "julearn.utils": [[80, "module-julearn.utils"]], "julearn.utils.typing": [[80, "module-julearn.utils.typing"]], "julearn.viz": [[81, "module-julearn.viz"]]}})