Search.setIndex({"docnames": ["api/base", "api/generated/julearn.PipelineCreator", "api/generated/julearn.TargetPipelineCreator", "api/generated/julearn.base.ColumnTypes", "api/generated/julearn.base.ColumnTypesLike", "api/generated/julearn.base.JuBaseEstimator", "api/generated/julearn.base.JuTransformer", "api/generated/julearn.base.WrapModel", "api/generated/julearn.base.change_column_type", "api/generated/julearn.base.ensure_column_types", "api/generated/julearn.base.get_column_type", "api/generated/julearn.base.make_type_selector", "api/generated/julearn.inspect.FoldsInspector", "api/generated/julearn.inspect.Inspector", "api/generated/julearn.inspect.preprocess", "api/generated/julearn.model_selection.ContinuousStratifiedGroupKFold", "api/generated/julearn.model_selection.ContinuousStratifiedKFold", "api/generated/julearn.model_selection.RepeatedContinuousStratifiedGroupKFold", "api/generated/julearn.model_selection.RepeatedContinuousStratifiedKFold", "api/generated/julearn.model_selection.StratifiedBootstrap", "api/generated/julearn.model_selection.get_searcher", "api/generated/julearn.model_selection.list_searchers", "api/generated/julearn.model_selection.register_searcher", "api/generated/julearn.model_selection.reset_searcher_register", "api/generated/julearn.models.dynamic.DynamicSelection", "api/generated/julearn.models.get_model", "api/generated/julearn.models.list_models", "api/generated/julearn.models.register_model", "api/generated/julearn.models.reset_model_register", "api/generated/julearn.pipeline.JuTargetPipeline", "api/generated/julearn.pipeline.pipeline_creator.Step", "api/generated/julearn.prepare.check_consistency", "api/generated/julearn.prepare.prepare_input_data", "api/generated/julearn.run_cross_validation", "api/generated/julearn.scoring.check_scoring", "api/generated/julearn.scoring.get_scorer", "api/generated/julearn.scoring.list_scorers", "api/generated/julearn.scoring.metrics.r2_corr", "api/generated/julearn.scoring.metrics.r_corr", "api/generated/julearn.scoring.register_scorer", "api/generated/julearn.scoring.reset_scorer_register", "api/generated/julearn.stats.corrected_ttest", "api/generated/julearn.transformers.CBPM", "api/generated/julearn.transformers.ChangeColumnTypes", "api/generated/julearn.transformers.DropColumns", "api/generated/julearn.transformers.FilterColumns", "api/generated/julearn.transformers.JuColumnTransformer", "api/generated/julearn.transformers.SetColumnTypes", "api/generated/julearn.transformers.confound_remover.ConfoundRemover", "api/generated/julearn.transformers.get_transformer", "api/generated/julearn.transformers.list_transformers", "api/generated/julearn.transformers.register_transformer", "api/generated/julearn.transformers.reset_transformer_register", "api/generated/julearn.transformers.target.JuTargetTransformer", "api/generated/julearn.transformers.target.JuTransformedTargetModel", "api/generated/julearn.transformers.target.TargetConfoundRemover", "api/generated/julearn.transformers.target.TransformedTargetWarning", "api/generated/julearn.transformers.target.get_target_transformer", "api/generated/julearn.transformers.target.list_target_transformers", "api/generated/julearn.transformers.target.register_target_transformer", "api/generated/julearn.transformers.target.reset_target_transformer_register", "api/generated/julearn.utils.configure_logging", "api/generated/julearn.utils.logger", "api/generated/julearn.utils.raise_error", "api/generated/julearn.utils.typing.EstimatorLike", "api/generated/julearn.utils.typing.EstimatorLikeFit1", "api/generated/julearn.utils.typing.EstimatorLikeFit2", "api/generated/julearn.utils.typing.EstimatorLikeFity", "api/generated/julearn.utils.typing.JuEstimatorLike", "api/generated/julearn.utils.warn_with_log", "api/generated/julearn.viz.plot_scores", "api/index", "api/inspect", "api/main", "api/model_selection", "api/models", "api/pipeline", "api/prepare", "api/scoring", "api/stats", "api/transformers", "api/utils", "api/viz", "auto_examples/00_starting/index", "auto_examples/00_starting/plot_cm_acc_multiclass", "auto_examples/00_starting/plot_example_regression", "auto_examples/00_starting/plot_stratified_kfold_reg", "auto_examples/00_starting/run_combine_pandas", "auto_examples/00_starting/run_grouped_cv", "auto_examples/00_starting/run_simple_binary_classification", "auto_examples/00_starting/sg_execution_times", "auto_examples/01_model_comparison/index", "auto_examples/01_model_comparison/plot_simple_model_comparison", "auto_examples/01_model_comparison/sg_execution_times", "auto_examples/02_inspection/index", "auto_examples/02_inspection/plot_groupcv_inspect_svm", "auto_examples/02_inspection/plot_inspect_random_forest", "auto_examples/02_inspection/plot_preprocess", "auto_examples/02_inspection/run_binary_inspect_folds", "auto_examples/02_inspection/sg_execution_times", "auto_examples/03_complex_models/index", "auto_examples/03_complex_models/run_apply_to_target", "auto_examples/03_complex_models/run_example_pca_featsets", "auto_examples/03_complex_models/run_hyperparameter_multiple_grids", "auto_examples/03_complex_models/run_hyperparameter_tuning", "auto_examples/03_complex_models/run_stacked_models", "auto_examples/03_complex_models/sg_execution_times", "auto_examples/04_confounds/index", "auto_examples/04_confounds/plot_confound_removal_classification", "auto_examples/04_confounds/run_return_confounds", "auto_examples/04_confounds/sg_execution_times", "auto_examples/05_customization/index", "auto_examples/05_customization/run_custom_scorers_regression", "auto_examples/05_customization/sg_execution_times", "available_pipeline_steps", "contributing", "examples", "faq", "getting_started", "index", "maintaining", "selected_deeper_topics/CBPM", "selected_deeper_topics/confound_removal", "selected_deeper_topics/cross_validation_splitter", "selected_deeper_topics/hyperparameter_tuning", "selected_deeper_topics/index", "selected_deeper_topics/model_inspect", "selected_deeper_topics/stacked_models", "selected_deeper_topics/target_transformers", "what_really_need_know/cross_validation", "what_really_need_know/data", "what_really_need_know/index", "what_really_need_know/model_comparison", "what_really_need_know/model_evaluation", "what_really_need_know/pipeline", "whats_new"], "filenames": ["api/base.rst", "api/generated/julearn.PipelineCreator.rst", "api/generated/julearn.TargetPipelineCreator.rst", "api/generated/julearn.base.ColumnTypes.rst", "api/generated/julearn.base.ColumnTypesLike.rst", "api/generated/julearn.base.JuBaseEstimator.rst", "api/generated/julearn.base.JuTransformer.rst", "api/generated/julearn.base.WrapModel.rst", "api/generated/julearn.base.change_column_type.rst", "api/generated/julearn.base.ensure_column_types.rst", "api/generated/julearn.base.get_column_type.rst", "api/generated/julearn.base.make_type_selector.rst", "api/generated/julearn.inspect.FoldsInspector.rst", "api/generated/julearn.inspect.Inspector.rst", "api/generated/julearn.inspect.preprocess.rst", "api/generated/julearn.model_selection.ContinuousStratifiedGroupKFold.rst", "api/generated/julearn.model_selection.ContinuousStratifiedKFold.rst", "api/generated/julearn.model_selection.RepeatedContinuousStratifiedGroupKFold.rst", "api/generated/julearn.model_selection.RepeatedContinuousStratifiedKFold.rst", "api/generated/julearn.model_selection.StratifiedBootstrap.rst", "api/generated/julearn.model_selection.get_searcher.rst", "api/generated/julearn.model_selection.list_searchers.rst", "api/generated/julearn.model_selection.register_searcher.rst", "api/generated/julearn.model_selection.reset_searcher_register.rst", "api/generated/julearn.models.dynamic.DynamicSelection.rst", "api/generated/julearn.models.get_model.rst", "api/generated/julearn.models.list_models.rst", "api/generated/julearn.models.register_model.rst", "api/generated/julearn.models.reset_model_register.rst", "api/generated/julearn.pipeline.JuTargetPipeline.rst", "api/generated/julearn.pipeline.pipeline_creator.Step.rst", "api/generated/julearn.prepare.check_consistency.rst", "api/generated/julearn.prepare.prepare_input_data.rst", "api/generated/julearn.run_cross_validation.rst", "api/generated/julearn.scoring.check_scoring.rst", "api/generated/julearn.scoring.get_scorer.rst", "api/generated/julearn.scoring.list_scorers.rst", "api/generated/julearn.scoring.metrics.r2_corr.rst", "api/generated/julearn.scoring.metrics.r_corr.rst", "api/generated/julearn.scoring.register_scorer.rst", "api/generated/julearn.scoring.reset_scorer_register.rst", "api/generated/julearn.stats.corrected_ttest.rst", "api/generated/julearn.transformers.CBPM.rst", "api/generated/julearn.transformers.ChangeColumnTypes.rst", "api/generated/julearn.transformers.DropColumns.rst", "api/generated/julearn.transformers.FilterColumns.rst", "api/generated/julearn.transformers.JuColumnTransformer.rst", "api/generated/julearn.transformers.SetColumnTypes.rst", "api/generated/julearn.transformers.confound_remover.ConfoundRemover.rst", "api/generated/julearn.transformers.get_transformer.rst", "api/generated/julearn.transformers.list_transformers.rst", "api/generated/julearn.transformers.register_transformer.rst", "api/generated/julearn.transformers.reset_transformer_register.rst", "api/generated/julearn.transformers.target.JuTargetTransformer.rst", "api/generated/julearn.transformers.target.JuTransformedTargetModel.rst", "api/generated/julearn.transformers.target.TargetConfoundRemover.rst", "api/generated/julearn.transformers.target.TransformedTargetWarning.rst", "api/generated/julearn.transformers.target.get_target_transformer.rst", "api/generated/julearn.transformers.target.list_target_transformers.rst", "api/generated/julearn.transformers.target.register_target_transformer.rst", "api/generated/julearn.transformers.target.reset_target_transformer_register.rst", "api/generated/julearn.utils.configure_logging.rst", "api/generated/julearn.utils.logger.rst", "api/generated/julearn.utils.raise_error.rst", "api/generated/julearn.utils.typing.EstimatorLike.rst", "api/generated/julearn.utils.typing.EstimatorLikeFit1.rst", "api/generated/julearn.utils.typing.EstimatorLikeFit2.rst", "api/generated/julearn.utils.typing.EstimatorLikeFity.rst", "api/generated/julearn.utils.typing.JuEstimatorLike.rst", "api/generated/julearn.utils.warn_with_log.rst", "api/generated/julearn.viz.plot_scores.rst", "api/index.rst", "api/inspect.rst", "api/main.rst", "api/model_selection.rst", "api/models.rst", "api/pipeline.rst", "api/prepare.rst", "api/scoring.rst", "api/stats.rst", "api/transformers.rst", "api/utils.rst", "api/viz.rst", "auto_examples/00_starting/index.rst", "auto_examples/00_starting/plot_cm_acc_multiclass.rst", "auto_examples/00_starting/plot_example_regression.rst", "auto_examples/00_starting/plot_stratified_kfold_reg.rst", "auto_examples/00_starting/run_combine_pandas.rst", "auto_examples/00_starting/run_grouped_cv.rst", "auto_examples/00_starting/run_simple_binary_classification.rst", "auto_examples/00_starting/sg_execution_times.rst", "auto_examples/01_model_comparison/index.rst", "auto_examples/01_model_comparison/plot_simple_model_comparison.rst", "auto_examples/01_model_comparison/sg_execution_times.rst", "auto_examples/02_inspection/index.rst", "auto_examples/02_inspection/plot_groupcv_inspect_svm.rst", "auto_examples/02_inspection/plot_inspect_random_forest.rst", "auto_examples/02_inspection/plot_preprocess.rst", "auto_examples/02_inspection/run_binary_inspect_folds.rst", "auto_examples/02_inspection/sg_execution_times.rst", "auto_examples/03_complex_models/index.rst", "auto_examples/03_complex_models/run_apply_to_target.rst", "auto_examples/03_complex_models/run_example_pca_featsets.rst", "auto_examples/03_complex_models/run_hyperparameter_multiple_grids.rst", "auto_examples/03_complex_models/run_hyperparameter_tuning.rst", "auto_examples/03_complex_models/run_stacked_models.rst", "auto_examples/03_complex_models/sg_execution_times.rst", "auto_examples/04_confounds/index.rst", "auto_examples/04_confounds/plot_confound_removal_classification.rst", "auto_examples/04_confounds/run_return_confounds.rst", "auto_examples/04_confounds/sg_execution_times.rst", "auto_examples/05_customization/index.rst", "auto_examples/05_customization/run_custom_scorers_regression.rst", "auto_examples/05_customization/sg_execution_times.rst", "available_pipeline_steps.rst", "contributing.rst", "examples.rst", "faq.rst", "getting_started.rst", "index.rst", "maintaining.rst", "selected_deeper_topics/CBPM.rst", "selected_deeper_topics/confound_removal.rst", "selected_deeper_topics/cross_validation_splitter.rst", "selected_deeper_topics/hyperparameter_tuning.rst", "selected_deeper_topics/index.rst", "selected_deeper_topics/model_inspect.rst", "selected_deeper_topics/stacked_models.rst", "selected_deeper_topics/target_transformers.rst", "what_really_need_know/cross_validation.rst", "what_really_need_know/data.rst", "what_really_need_know/index.rst", "what_really_need_know/model_comparison.rst", "what_really_need_know/model_evaluation.rst", "what_really_need_know/pipeline.rst", "whats_new.rst"], "titles": ["<span class=\"section-number\">6.4. </span>Base", "julearn.PipelineCreator", "julearn.TargetPipelineCreator", "julearn.base.ColumnTypes", "julearn.base.ColumnTypesLike", "julearn.base.JuBaseEstimator", "julearn.base.JuTransformer", "julearn.base.WrapModel", "julearn.base.change_column_type", "julearn.base.ensure_column_types", "julearn.base.get_column_type", "julearn.base.make_type_selector", "julearn.inspect.FoldsInspector", "julearn.inspect.Inspector", "julearn.inspect.preprocess", "julearn.model_selection.ContinuousStratifiedGroupKFold", "julearn.model_selection.ContinuousStratifiedKFold", "julearn.model_selection.RepeatedContinuousStratifiedGroupKFold", "julearn.model_selection.RepeatedContinuousStratifiedKFold", "julearn.model_selection.StratifiedBootstrap", "julearn.model_selection.get_searcher", "julearn.model_selection.list_searchers", "julearn.model_selection.register_searcher", "julearn.model_selection.reset_searcher_register", "julearn.models.dynamic.DynamicSelection", "julearn.models.get_model", "julearn.models.list_models", "julearn.models.register_model", "julearn.models.reset_model_register", "julearn.pipeline.JuTargetPipeline", "julearn.pipeline.pipeline_creator.Step", "julearn.prepare.check_consistency", "julearn.prepare.prepare_input_data", "julearn.run_cross_validation", "julearn.scoring.check_scoring", "julearn.scoring.get_scorer", "julearn.scoring.list_scorers", "julearn.scoring.metrics.r2_corr", "julearn.scoring.metrics.r_corr", "julearn.scoring.register_scorer", "julearn.scoring.reset_scorer_register", "julearn.stats.corrected_ttest", "julearn.transformers.CBPM", "julearn.transformers.ChangeColumnTypes", "julearn.transformers.DropColumns", "julearn.transformers.FilterColumns", "julearn.transformers.JuColumnTransformer", "julearn.transformers.SetColumnTypes", "julearn.transformers.confound_remover.ConfoundRemover", "julearn.transformers.get_transformer", "julearn.transformers.list_transformers", "julearn.transformers.register_transformer", "julearn.transformers.reset_transformer_register", "julearn.transformers.target.JuTargetTransformer", "julearn.transformers.target.JuTransformedTargetModel", "julearn.transformers.target.TargetConfoundRemover", "julearn.transformers.target.TransformedTargetWarning", "julearn.transformers.target.get_target_transformer", "julearn.transformers.target.list_target_transformers", "julearn.transformers.target.register_target_transformer", "julearn.transformers.target.reset_target_transformer_register", "julearn.utils.configure_logging", "julearn.utils.logger", "julearn.utils.raise_error", "julearn.utils.typing.EstimatorLike", "julearn.utils.typing.EstimatorLikeFit1", "julearn.utils.typing.EstimatorLikeFit2", "julearn.utils.typing.EstimatorLikeFity", "julearn.utils.typing.JuEstimatorLike", "julearn.utils.warn_with_log", "julearn.viz.plot_scores", "<span class=\"section-number\">6. </span>Reference", "<span class=\"section-number\">6.5. </span>Inspect", "<span class=\"section-number\">6.1. </span>Main API", "<span class=\"section-number\">6.3. </span>Model Selection", "<span class=\"section-number\">6.6. </span>Models", "<span class=\"section-number\">6.2. </span>Pipeline", "<span class=\"section-number\">6.14. </span>Prepare", "<span class=\"section-number\">6.8. </span>Scoring", "<span class=\"section-number\">6.15. </span>Stats", "<span class=\"section-number\">6.10. </span>Transformers", "<span class=\"section-number\">6.12. </span>Utils", "<span class=\"section-number\">6.16. </span>Vizualization", "<span class=\"section-number\">5.1. </span>Starting with julearn", "Multiclass Classification.", "Regression Analysis", "Stratified K-fold CV for regression analysis", "Working with pandas", "Grouped CV.", "Simple Binary Classification", "Computation times", "<span class=\"section-number\">5.2. </span>Model Comparison", "Simple Model Comparison", "Computation times", "<span class=\"section-number\">5.3. </span>Inspection", "Inspecting SVM models.", "Inspecting Random Forest models", "Preprocessing with variance threshold, zscore and PCA", "Inspecting the fold-wise predictions", "Computation times", "<span class=\"section-number\">5.4. </span>Complex Models", "Transforming target variable with z-score.", "Regression Analysis", "Tuning Multiple Hyperparameters Grids", "Tuning Hyperparameters", "Stacking Classification", "Computation times", "<span class=\"section-number\">5.5. </span>Confounds", "Confound Removal (model comparison)", "Return Confounds in Confound Removal", "Computation times", "<span class=\"section-number\">5.6. </span>Customization", "Custom Scoring Function for Regression", "Computation times", "<span class=\"section-number\">4. </span>Overview of available Pipeline Steps", "<span class=\"section-number\">7. </span>Contributing to julearn", "<span class=\"section-number\">5. </span>Examples", "<span class=\"section-number\">9. </span>Frequenly Asked Questions", "<span class=\"section-number\">1. </span>Getting started", "Welcome to julearn\u2019s documentation!", "<span class=\"section-number\">8. </span>Maintaining", "<span class=\"section-number\">3.7. </span>Connectome-based Predictive Modeling (CBPM)", "<span class=\"section-number\">3.2. </span>Cross-validation consistent Confound Removal", "<span class=\"section-number\">3.5. </span>Cross-validation splitters", "<span class=\"section-number\">3.3. </span>Hyperparameter Tuning", "<span class=\"section-number\">3. </span>Selected deeper topics", "<span class=\"section-number\">3.4. </span>Inspecting Models", "<span class=\"section-number\">3.6. </span>Stacking Models", "<span class=\"section-number\">3.1. </span>Applying preprocessing to the target", "<span class=\"section-number\">2.1. </span>Why cross validation?", "<span class=\"section-number\">2.2. </span>Data", "<span class=\"section-number\">2. </span>What you really need to know", "<span class=\"section-number\">2.5. </span>Model comparison", "<span class=\"section-number\">2.4. </span>Model evaluation", "<span class=\"section-number\">2.3. </span>Model Building", "<span class=\"section-number\">10. </span>What\u2019s new"], "terms": {"provid": [0, 1, 3, 5, 15, 16, 19, 24, 33, 54, 75, 87, 109, 119, 122, 123, 124, 126, 127, 129, 130, 132, 133, 134, 135], "import": [0, 29, 53, 84, 85, 86, 87, 88, 89, 92, 95, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 115, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134], "modul": [0, 33, 75, 82, 109, 117, 118, 119, 128, 129], "class": [0, 1, 2, 3, 4, 5, 6, 7, 12, 13, 15, 16, 17, 18, 19, 22, 24, 27, 29, 30, 33, 42, 43, 44, 45, 46, 47, 48, 51, 53, 54, 55, 56, 59, 62, 63, 64, 65, 66, 67, 68, 69, 72, 74, 75, 76, 80, 81, 84, 86, 88, 89, 92, 95, 96, 98, 103, 104, 105, 108, 114, 122, 123, 124, 126, 132, 133, 134], "function": [0, 1, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 49, 50, 51, 52, 54, 57, 58, 59, 60, 61, 63, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 89, 92, 95, 96, 97, 107, 109, 111, 113, 115, 117, 118, 119, 121, 122, 129, 130, 131, 132, 133, 134, 135], "thi": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 75, 82, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 114, 115, 117, 118, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134], "page": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 119, 122, 123, 133], "i": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 82, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 101, 102, 103, 104, 108, 109, 112, 114, 115, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134], "refer": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 97, 114, 115, 119, 124, 131], "document": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 82, 86, 92, 96, 114, 123, 124, 132, 133, 134], "It": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 95, 103, 104, 118, 119, 121, 123, 124, 126, 133, 134], "onli": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 86, 95, 97, 103, 108, 109, 121, 122, 123, 124, 126, 127, 128, 129, 130, 132, 133, 134, 135], "explain": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 123, 134], "signatur": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70], "how": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 83, 88, 89, 92, 94, 95, 96, 100, 102, 109, 114, 115, 118, 119, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134], "pleas": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 75, 82, 97, 115, 133, 134], "what": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 87, 88, 95, 102, 104, 109, 114, 122, 123, 124, 126, 127, 128, 130, 133, 134], "you": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 84, 87, 92, 97, 109, 115, 117, 118, 119, 120, 121, 122, 123, 126, 127, 129, 130, 132, 133, 134], "realli": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 108, 119], "need": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 87, 88, 89, 92, 95, 101, 108, 109, 112, 115, 117, 118, 119, 121, 122, 123, 124, 126, 128, 129, 132, 133, 134, 135], "know": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 102, 104, 119, 123, 126, 129, 132, 134], "section": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 123, 130, 132, 133, 134, 135], "big": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70], "pictur": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70], "problem_typ": [1, 25, 31, 33, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 121, 122, 124, 126, 127, 128, 132, 133, 134], "apply_to": [1, 5, 6, 7, 30, 43, 44, 45, 46, 47, 48, 54, 97, 101, 102, 105, 108, 109, 122, 126, 127, 128, 134], "continu": [1, 7, 30, 43, 45, 47, 48, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 108, 109, 112, 121, 123, 124, 126, 127, 128, 130, 132, 133, 134], "creat": [1, 2, 3, 42, 84, 86, 87, 89, 95, 97, 101, 102, 105, 114, 115, 117, 120, 121, 122, 123, 124, 126, 127, 128, 132, 133, 134], "pipelin": [1, 2, 5, 6, 7, 14, 15, 24, 31, 32, 33, 34, 42, 43, 44, 45, 46, 47, 48, 53, 54, 71, 77, 95, 97, 98, 101, 102, 103, 104, 105, 108, 109, 119, 121, 122, 124, 126, 127, 128, 129, 130, 131, 132, 133], "As": [1, 87, 89, 92, 98, 105, 108, 109, 112, 115, 117, 121, 122, 123, 124, 126, 127, 132, 133, 134], "creation": 1, "bit": [1, 103, 118, 127, 133], "more": [1, 3, 33, 41, 84, 85, 86, 88, 89, 92, 95, 97, 102, 108, 112, 115, 118, 122, 123, 125, 126, 127, 129, 131, 132, 133, 134, 135], "complic": [1, 129], "than": [1, 33, 41, 86, 87, 95, 119, 122, 123, 125, 134], "just": [1, 115, 119, 123, 126, 131, 133, 134], "ad": [1, 33, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 119, 121, 122, 124, 126, 127, 128, 130, 132, 133, 134], "step": [1, 2, 14, 29, 33, 41, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 115, 119, 121, 122, 124, 126, 127, 128, 129, 130, 132, 133, 134], "helper": 1, "so": [1, 5, 6, 7, 24, 39, 42, 43, 44, 45, 46, 47, 48, 54, 86, 87, 89, 92, 97, 104, 114, 117, 123, 124, 128, 130, 133, 134], "user": [1, 5, 6, 7, 15, 16, 17, 18, 19, 22, 24, 27, 39, 42, 43, 44, 45, 46, 47, 48, 51, 54, 56, 59, 61, 97, 112, 118, 119, 122, 124, 129, 134, 135], "can": [1, 3, 15, 16, 17, 18, 19, 22, 24, 27, 29, 31, 33, 39, 41, 42, 46, 48, 51, 54, 59, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 108, 109, 112, 114, 115, 117, 119, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134], "easili": [1, 121, 123], "complex": [1, 95, 105, 116, 119, 122, 123, 126, 134], "sklearn": [1, 3, 5, 7, 15, 24, 29, 46, 48, 55, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 121, 122, 123, 126, 127, 128, 132, 133], "object": [1, 2, 5, 6, 7, 15, 16, 17, 18, 19, 24, 25, 31, 33, 35, 39, 42, 43, 44, 45, 46, 47, 48, 49, 51, 54, 57, 84, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 117, 122, 124, 126, 127, 128, 133, 134], "paramet": [1, 2, 3, 5, 6, 7, 8, 9, 10, 14, 15, 16, 17, 18, 19, 20, 22, 24, 25, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 53, 54, 55, 57, 59, 61, 63, 69, 70, 77, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 114, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135], "classif": [1, 27, 31, 33, 61, 83, 88, 90, 92, 95, 96, 98, 100, 103, 104, 106, 108, 115, 123, 124, 126, 127, 132, 133, 134], "regress": [1, 14, 15, 16, 27, 31, 33, 39, 61, 83, 90, 97, 100, 101, 105, 106, 109, 111, 113, 114, 121, 124, 125, 127, 128, 132, 133, 134, 135], "The": [1, 2, 3, 5, 6, 7, 8, 9, 10, 14, 15, 16, 17, 18, 19, 20, 22, 24, 25, 27, 29, 30, 31, 32, 33, 37, 38, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 53, 54, 55, 57, 59, 61, 63, 69, 70, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 126, 127, 130, 131, 132, 134], "problem": [1, 15, 16, 17, 18, 19, 25, 27, 31, 33, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 121, 122, 123, 124, 126, 127, 128, 129, 132, 133, 134, 135], "type": [1, 3, 5, 6, 7, 8, 10, 14, 25, 27, 29, 30, 31, 32, 33, 43, 44, 45, 46, 47, 48, 54, 55, 71, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 114, 115, 119, 121, 122, 124, 125, 126, 128, 129, 131, 132, 133], "which": [1, 5, 6, 15, 16, 22, 27, 30, 33, 42, 43, 44, 45, 46, 47, 48, 51, 55, 59, 82, 85, 86, 88, 89, 95, 97, 101, 102, 103, 104, 108, 109, 112, 115, 121, 122, 123, 124, 126, 127, 128, 129, 131, 133, 134], "should": [1, 5, 6, 15, 19, 22, 24, 27, 30, 39, 42, 43, 44, 45, 46, 47, 48, 51, 59, 86, 97, 102, 108, 114, 115, 120, 121, 123, 124, 125, 128, 129, 133, 134], "columntypeslik": [1, 30, 43, 44, 45, 46, 48], "option": [1, 2, 6, 7, 14, 15, 22, 24, 27, 30, 33, 39, 41, 42, 43, 44, 45, 46, 47, 48, 51, 55, 59, 61, 63, 69, 70, 75, 82, 87, 109, 117, 119, 120, 130, 133], "To": [1, 46, 48, 95, 97, 103, 115, 117, 119, 121, 122, 123, 124, 127, 129, 130, 132, 133, 134], "transform": [1, 2, 6, 29, 33, 34, 61, 71, 87, 97, 100, 106, 109, 119, 121, 122, 126, 128, 129, 134, 135], "appli": [1, 2, 5, 6, 7, 30, 33, 42, 43, 44, 45, 46, 47, 48, 54, 55, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 119, 121, 122, 124, 125, 126, 127, 132, 133, 134], "specifi": [1, 19, 20, 22, 32, 33, 45, 48, 55, 57, 87, 95, 96, 102, 103, 109, 114, 118, 119, 121, 122, 124, 127, 128, 129, 130, 131, 133, 134], "add": [1, 2, 3, 22, 27, 51, 97, 98, 101, 102, 103, 104, 105, 108, 109, 115, 121, 122, 123, 124, 126, 127, 128, 130, 132, 133, 134, 135], "method": [1, 5, 6, 7, 15, 16, 17, 18, 24, 41, 42, 43, 44, 45, 46, 47, 48, 54, 86, 87, 97, 103, 109, 118, 121, 123, 126, 134], "default": [1, 2, 5, 6, 7, 14, 15, 16, 17, 18, 19, 22, 24, 27, 28, 30, 33, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 51, 54, 55, 59, 61, 63, 69, 70, 92, 95, 97, 103, 104, 105, 108, 109, 114, 117, 118, 121, 122, 124, 132, 133, 134, 135], "__init__": [1, 2, 3, 5, 6, 7, 12, 13, 15, 16, 17, 18, 19, 24, 29, 30, 42, 43, 44, 45, 46, 47, 48, 53, 54, 55, 56, 65, 66, 67, 68], "name": [1, 2, 5, 6, 7, 8, 14, 15, 20, 21, 22, 24, 25, 26, 27, 30, 33, 35, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 54, 55, 57, 58, 59, 61, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 114, 115, 122, 124, 126, 127, 128, 129, 130, 132, 133, 134], "none": [1, 2, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 22, 24, 27, 29, 30, 31, 32, 33, 39, 41, 42, 43, 44, 45, 46, 47, 48, 51, 55, 59, 61, 63, 85, 86, 87, 88, 89, 92, 95, 96, 97, 101, 102, 103, 104, 105, 108, 109, 112, 121, 122, 124, 126, 127, 128, 132, 133, 134], "row_select_col_typ": [1, 6, 30, 43, 44, 45, 46, 47, 48], "row_select_v": [1, 6, 30, 43, 44, 45, 46, 47, 48], "param": [1, 2, 5, 6, 7, 24, 42, 43, 44, 45, 46, 47, 48, 49, 54, 57, 65, 66, 67, 68, 92, 118, 121, 122, 124, 126, 128, 134], "estimatorlik": [1, 34, 46], "an": [1, 2, 6, 15, 16, 17, 18, 19, 24, 31, 33, 35, 42, 43, 44, 45, 46, 47, 48, 84, 87, 88, 89, 92, 95, 96, 97, 104, 108, 115, 119, 121, 122, 123, 124, 126, 127, 128, 129, 130, 132, 133, 134, 135], "available_transform": 1, "available_model": 1, "str": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 15, 16, 17, 18, 20, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 55, 57, 58, 59, 61, 63, 69, 84, 85, 102, 114, 133, 134], "compat": [1, 15, 16, 17, 18, 19, 20, 22, 24, 33, 43, 44, 45, 46, 47, 48, 49, 55, 121, 133, 134, 135], "model": [1, 7, 13, 14, 19, 33, 36, 41, 48, 54, 55, 61, 70, 71, 78, 84, 85, 86, 88, 89, 93, 94, 97, 98, 99, 101, 102, 103, 104, 105, 107, 109, 110, 112, 116, 119, 122, 123, 125, 128, 129, 131], "If": [1, 2, 5, 6, 7, 14, 19, 20, 22, 24, 27, 31, 32, 33, 42, 43, 44, 45, 46, 47, 48, 51, 54, 57, 59, 61, 87, 89, 95, 97, 108, 112, 115, 118, 122, 123, 124, 130, 131, 133, 134], "obtain": [1, 2, 7, 54, 96, 122, 129], "from": [1, 2, 3, 5, 24, 29, 32, 33, 43, 48, 51, 53, 55, 59, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 114, 115, 118, 119, 120, 121, 123, 124, 126, 127, 128, 130, 132, 133, 134], "repres": [1, 3, 19, 30, 48, 55, 86, 123, 133], "column": [1, 3, 5, 6, 7, 8, 10, 14, 24, 30, 32, 33, 43, 44, 45, 46, 47, 48, 54, 55, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 108, 109, 112, 114, 121, 122, 124, 126, 127, 128, 130, 132, 133, 134, 135], "list": [1, 3, 4, 5, 6, 7, 14, 21, 26, 29, 30, 32, 33, 36, 43, 44, 45, 46, 47, 48, 50, 55, 58, 103, 109, 114, 124, 126, 130, 133, 134], "attribut": [1, 5, 7, 9, 24, 42, 54, 126], "set": [1, 3, 4, 5, 6, 7, 15, 16, 17, 18, 19, 22, 24, 29, 30, 33, 39, 42, 43, 44, 45, 46, 47, 48, 54, 55, 56, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 116, 119, 120, 121, 122, 123, 124, 126, 127, 129, 131, 132, 133, 135], "columntyp": [1, 4, 5, 6, 7, 9, 30, 43, 44, 45, 46, 47, 48, 54, 55, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 121, 122, 124, 126, 127, 128, 132, 133, 134], "select": [1, 6, 7, 24, 30, 43, 44, 45, 46, 47, 48, 71, 92, 97, 119, 121, 123, 124, 126, 130, 131, 132], "row": [1, 6, 30, 43, 44, 45, 46, 47, 48, 84, 85, 86, 87, 88, 92, 95, 97, 98, 101, 102, 109, 112, 122, 126, 128, 133, 134], "int": [1, 6, 15, 16, 17, 18, 19, 24, 30, 31, 32, 33, 41, 42, 43, 44, 45, 46, 47, 48, 61, 70, 133], "bool": [1, 5, 6, 7, 14, 15, 16, 22, 24, 27, 29, 30, 33, 34, 39, 42, 43, 44, 45, 46, 47, 48, 51, 54, 59, 61], "valu": [1, 5, 6, 7, 19, 24, 30, 33, 37, 38, 42, 43, 44, 45, 46, 47, 48, 54, 55, 84, 85, 86, 87, 88, 89, 95, 97, 101, 102, 103, 104, 108, 112, 114, 121, 124, 126, 130, 133, 134], "": [1, 5, 6, 7, 15, 16, 24, 30, 33, 42, 43, 44, 45, 46, 47, 48, 54, 55, 61, 84, 85, 86, 87, 88, 92, 95, 97, 101, 102, 104, 108, 109, 112, 114, 115, 120, 121, 122, 123, 124, 126, 127, 129, 130, 131, 132, 133, 134], "train": [1, 6, 15, 16, 17, 18, 19, 24, 30, 33, 42, 43, 44, 45, 46, 47, 48, 55, 84, 85, 86, 88, 95, 97, 101, 102, 108, 112, 122, 123, 124, 126, 128, 129, 132, 133, 134], "mostli": [1, 2, 123], "includ": [1, 2, 14, 19, 96, 97, 109, 115, 118, 129], "hyperparamet": [1, 2, 33, 61, 92, 97, 100, 102, 105, 106, 108, 109, 119, 121, 122, 125, 126, 127, 131, 132, 135], "ani": [1, 2, 7, 22, 24, 27, 29, 30, 31, 32, 33, 39, 51, 53, 54, 59, 86, 121, 123, 126, 134], "other": [1, 2, 15, 22, 24, 27, 51, 82, 87, 89, 102, 104, 109, 115, 117, 121, 122, 123, 131, 132, 134], "initi": [1, 2, 22, 23, 41, 51, 52, 59, 60, 108, 122, 134], "multipl": [1, 15, 16, 17, 18, 19, 33, 61, 97, 100, 106, 123, 124, 133, 134, 135], "lead": [1, 118, 122, 123, 129, 134], "search": [1, 21, 22, 33, 97, 103, 104, 119, 124, 126, 127], "return": [1, 2, 3, 5, 6, 7, 8, 9, 10, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, 29, 32, 33, 35, 36, 37, 38, 39, 42, 43, 44, 45, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 86, 95, 96, 107, 110, 112, 134], "its": [1, 5, 23, 52, 60, 115, 124, 126, 127, 129, 131, 134], "last": [1, 97, 102, 109, 120, 122, 134], "rais": [1, 15, 20, 22, 24, 27, 31, 32, 39, 51, 57, 59, 61, 63, 130, 135], "valueerror": [1, 20, 22, 27, 31, 32, 39, 51, 57, 59, 63], "valid": [1, 2, 15, 16, 17, 18, 19, 31, 32, 33, 77, 84, 85, 96, 102, 108, 109, 114, 119, 121, 124, 125, 126, 130, 131, 132, 134], "targetpipelinecr": [1, 101, 114, 122, 128], "target": [1, 2, 6, 7, 15, 16, 17, 18, 19, 24, 29, 31, 32, 33, 34, 42, 43, 44, 45, 46, 47, 48, 61, 71, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 100, 102, 103, 104, 105, 106, 108, 109, 112, 114, 119, 121, 123, 124, 125, 126, 127, 130, 132, 133, 134, 135], "properti": [1, 3, 7, 13, 29, 54, 55, 123], "get": [1, 3, 5, 6, 7, 10, 15, 16, 17, 18, 19, 20, 24, 25, 29, 35, 42, 43, 44, 45, 46, 47, 48, 49, 54, 55, 57, 84, 85, 88, 95, 96, 97, 102, 109, 119, 121, 126, 127, 132, 133], "have": [1, 5, 6, 7, 15, 16, 24, 32, 42, 43, 44, 45, 46, 47, 48, 54, 84, 87, 88, 89, 92, 95, 97, 103, 104, 108, 109, 114, 115, 117, 118, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134], "been": [1, 56, 121, 122, 123, 126], "has_model": 1, "whether": [1, 14, 15, 16, 22, 27, 33, 39, 42, 48, 51, 59, 88, 92, 95, 115, 122], "ha": [1, 15, 24, 33, 42, 56, 84, 85, 86, 87, 88, 89, 92, 95, 96, 98, 102, 105, 108, 112, 115, 121, 122, 123, 124, 126, 129, 133, 134], "copi": [1, 3, 86, 109, 115, 126], "classmethod": 1, "from_list": 1, "model_param": [1, 33, 92, 135], "union": [1, 4, 29, 30, 34, 55, 64], "dict": [1, 5, 6, 7, 24, 30, 32, 33, 42, 43, 44, 45, 46, 47, 48, 54], "kei": [1, 32, 33, 43, 47, 87, 97, 130], "being": [1, 115, 118, 133, 134], "pieplin": 1, "split": [1, 15, 16, 17, 18, 19, 24, 33, 84, 85, 86, 89, 92, 95, 101, 102, 112, 122, 123, 124, 126, 129, 133], "least": [1, 15, 16, 17, 18, 33, 86, 108, 114, 123], "two": [1, 41, 86, 87, 89, 92, 95, 96, 97, 98, 102, 103, 105, 108, 109, 112, 115, 118, 121, 122, 123, 124, 127, 129, 132, 134], "same": [1, 15, 16, 33, 47, 61, 89, 92, 95, 103, 104, 108, 112, 115, 119, 121, 122, 123, 124, 127, 129, 132, 133, 134], "consid": [1, 109, 115, 120, 122, 124, 130, 133], "point": [1, 108, 115, 122, 123, 129, 131, 132, 133, 134], "tune": [1, 30, 33, 61, 100, 106, 119, 121, 122, 125, 126, 127, 128, 134, 135], "one": [1, 29, 33, 41, 43, 44, 45, 47, 53, 85, 86, 87, 88, 95, 97, 101, 102, 103, 104, 105, 109, 112, 114, 115, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135], "each": [1, 5, 6, 7, 15, 16, 17, 18, 19, 24, 32, 33, 42, 43, 44, 45, 46, 47, 48, 54, 55, 84, 85, 86, 87, 88, 95, 96, 97, 98, 102, 108, 112, 114, 115, 121, 122, 123, 124, 125, 126, 129, 132, 133, 134], "recurs": 1, "thu": [1, 5, 95, 129], "mani": [1, 42, 88, 95, 122, 123, 133, 134], "all": [1, 3, 14, 21, 22, 26, 33, 36, 42, 43, 47, 48, 50, 55, 58, 84, 85, 88, 89, 95, 96, 97, 98, 102, 108, 109, 112, 114, 115, 120, 121, 122, 124, 125, 126, 128, 129, 130, 131, 133, 134], "configur": [1, 6, 42, 43, 44, 45, 46, 47, 48, 61, 122, 126, 127], "A": [1, 5, 6, 7, 15, 16, 17, 18, 19, 21, 24, 26, 32, 33, 42, 43, 44, 45, 46, 47, 48, 50, 54, 58, 86, 87, 88, 89, 95, 103, 104, 105, 121, 122, 123, 124, 129, 130, 134], "without": [1, 22, 27, 39, 51, 59, 86, 88, 104, 108, 109, 114, 129], "repeat": [1, 17, 18, 84, 85, 102, 123, 124, 126, 129, 133], "to_pipelin": [1, 2], "x_type": [1, 32, 33, 43, 44, 45, 47, 48, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 121, 122, 124, 126, 127, 128, 130, 132, 133, 134], "search_param": [1, 33, 103, 104, 135], "data": [1, 5, 6, 7, 14, 15, 16, 17, 18, 19, 24, 29, 31, 32, 33, 42, 43, 44, 45, 46, 47, 48, 53, 54, 55, 77, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 114, 119, 121, 122, 123, 124, 126, 127, 128, 129, 131, 132, 133, 134], "inspect": [1, 33, 61, 71, 97, 99, 102, 109, 116, 119, 125, 129, 130, 132, 133], "fold": [1, 13, 15, 16, 17, 18, 33, 61, 83, 84, 85, 90, 94, 95, 96, 99, 101, 102, 108, 109, 112, 122, 123, 126, 128, 129, 133, 134], "wise": [1, 13, 33, 61, 94, 99, 129], "predict": [1, 7, 12, 13, 24, 32, 33, 37, 38, 48, 54, 55, 61, 84, 85, 86, 87, 88, 89, 92, 94, 95, 99, 101, 102, 105, 109, 112, 114, 119, 122, 123, 125, 126, 127, 128, 129, 132, 133, 134], "preprocess": [1, 2, 33, 61, 84, 85, 86, 88, 89, 92, 94, 95, 96, 99, 102, 108, 109, 112, 119, 121, 125, 130, 131, 133], "varianc": [1, 14, 33, 61, 94, 99, 114, 123, 126, 134], "threshold": [1, 14, 33, 42, 48, 55, 61, 94, 99, 114, 121], "zscore": [1, 14, 33, 61, 84, 85, 86, 88, 89, 92, 94, 95, 96, 98, 99, 101, 103, 104, 105, 108, 112, 114, 124, 126, 128, 132, 133, 134], "pca": [1, 14, 33, 61, 94, 99, 102, 109, 114, 124, 134], "variabl": [1, 2, 15, 16, 17, 18, 19, 31, 32, 33, 61, 85, 86, 88, 95, 100, 102, 106, 109, 112, 122, 123, 124, 126, 128, 133, 134, 135], "z": [1, 2, 33, 61, 95, 100, 106, 120, 126, 128, 133, 134], "score": [1, 2, 7, 12, 13, 24, 33, 41, 54, 61, 70, 71, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 100, 102, 103, 104, 105, 106, 108, 109, 111, 113, 119, 121, 122, 124, 126, 127, 128, 131, 134, 135], "grid": [1, 33, 61, 95, 100, 104, 106, 125, 126, 127, 135], "stack": [1, 33, 61, 100, 106, 108, 114, 119, 125], "analysi": [1, 14, 16, 33, 61, 83, 90, 95, 100, 101, 106, 112, 114, 123, 134], "confound": [1, 2, 14, 19, 33, 43, 48, 55, 61, 87, 110, 114, 116, 119, 125, 132, 135], "remov": [1, 2, 14, 19, 33, 43, 48, 55, 61, 97, 107, 110, 114, 115, 119, 125, 132, 135], "comparison": [1, 19, 33, 41, 61, 70, 93, 107, 110, 116, 119, 131], "connectom": [1, 33, 114, 119, 125], "base": [1, 15, 16, 19, 29, 33, 41, 53, 71, 114, 117, 119, 122, 125, 126, 129, 130, 131, 134], "cbpm": [1, 33, 114, 119, 125, 135], "evalu": [1, 7, 33, 36, 54, 78, 89, 95, 119, 123, 126, 129, 130, 131, 132, 134], "build": [1, 33, 84, 88, 95, 100, 119, 120, 121, 127, 128, 129, 131, 132], "cross": [1, 2, 15, 16, 17, 18, 19, 31, 33, 84, 85, 96, 102, 108, 109, 114, 119, 121, 124, 125, 126, 130, 131, 132, 134], "consist": [1, 2, 24, 31, 33, 119, 121, 123, 125, 129, 130, 132, 134, 135], "analog": 2, "pipelinecr": [2, 33, 97, 98, 101, 102, 103, 104, 105, 108, 109, 114, 121, 122, 124, 126, 127, 128, 131, 132, 133], "allow": [2, 15, 22, 24, 27, 39, 51, 59, 89, 108, 117, 121, 122, 124, 130, 131, 134, 135], "target_pipelin": [2, 122, 128], "jutargetpipelin": [2, 54, 101, 122, 128], "easi": [2, 87, 119, 122, 124, 126, 127, 131, 132], "wai": [2, 89, 92, 117, 119, 122, 123, 124, 126, 127, 129, 132, 133, 134], "out": [2, 21, 46, 48, 49, 58, 92, 109, 114, 119, 120, 122, 123, 124, 126, 127, 131, 132, 133, 134], "us": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 37, 38, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 75, 82, 83, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 112, 114, 115, 116, 118, 119, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135], "column_typ": [3, 126], "hold": [3, 133], "regard": [3, 130, 133], "pd": [3, 5, 6, 7, 14, 24, 29, 33, 41, 43, 44, 45, 46, 47, 48, 53, 54, 55, 70, 84, 85, 86, 87, 95, 96, 97, 101, 102, 108, 112, 121, 122, 127, 128, 132], "datafram": [3, 5, 6, 7, 14, 24, 29, 32, 33, 41, 42, 43, 44, 45, 46, 47, 48, 53, 54, 55, 70, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 119, 121, 122, 124, 126, 127, 128, 129, 130, 132, 133, 134, 135], "One": [3, 24, 87, 122, 124, 127, 134], "instead": [3, 15, 16, 19, 22, 24, 27, 39, 42, 51, 59, 86, 122, 123, 124, 127, 135], "also": [3, 84, 86, 87, 89, 92, 97, 102, 103, 109, 115, 117, 121, 122, 124, 126, 127, 129, 130, 132, 133, 134], "itself": [3, 127], "self": [3, 5, 6, 15, 24, 29, 42, 43, 44, 45, 46, 47, 48, 53, 54, 56, 86, 108], "updat": [3, 5, 6, 7, 15, 24, 42, 43, 44, 45, 46, 47, 48, 54, 115, 118, 135], "pattern": [3, 11, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 121, 122, 124, 126, 127, 128, 132, 133, 134], "regex": 3, "match": [3, 46, 87], "to_type_selector": 3, "selector": 3, "usabl": [3, 134], "compos": 3, "columntransform": [3, 126], "callabl": [3, 34, 35, 39, 42, 135], "alia": [4, 15, 24, 62, 64], "needed_typ": [5, 6, 7, 29, 30, 46, 55], "estim": [5, 6, 7, 15, 24, 30, 33, 34, 35, 39, 42, 43, 44, 45, 46, 47, 48, 54, 95, 96, 97, 103, 104, 105, 108, 109, 119, 121, 122, 123, 124, 125, 126, 128, 129, 131, 132, 134], "everi": [5, 27, 32, 33, 51, 120, 126, 130, 134], "awar": [5, 118], "thei": [5, 7, 24, 54, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 103, 104, 108, 112, 117, 121, 124, 126, 127, 133, 134], "abl": [5, 129, 132], "main": [5, 71, 108, 115, 119, 120, 122, 123, 124, 129], "differ": [5, 15, 16, 17, 18, 19, 27, 86, 87, 89, 92, 97, 102, 103, 104, 105, 108, 109, 117, 118, 121, 122, 123, 124, 126, 127, 129, 130, 132, 133, 134], "between": [5, 19, 31, 85, 108, 115, 121, 122, 123, 127, 129, 132, 134], "baseestim": [5, 135], "purpos": [5, 86, 87, 133], "That": [5, 121, 122, 123, 124, 126, 134], "ar": [5, 6, 7, 15, 16, 17, 18, 22, 24, 27, 29, 33, 39, 41, 42, 43, 44, 45, 46, 47, 48, 51, 53, 54, 55, 59, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 108, 109, 112, 115, 116, 117, 118, 120, 121, 122, 123, 124, 126, 127, 129, 130, 131, 132, 133, 134, 135], "get_needed_typ": [5, 6, 7, 43, 44, 45, 46, 47, 48, 54, 68], "get_apply_to": [5, 6, 7, 43, 44, 45, 46, 47, 48, 54, 68], "filter_column": [5, 6, 7, 43, 44, 45, 46, 47, 48, 54, 105, 114, 127], "x": [5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 24, 29, 32, 33, 35, 39, 42, 43, 44, 45, 46, 47, 48, 53, 54, 55, 65, 66, 68, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 120, 121, 122, 123, 124, 126, 127, 128, 130, 132, 133, 134], "panda": [5, 6, 7, 31, 32, 33, 42, 43, 44, 45, 46, 47, 48, 54, 83, 84, 85, 86, 88, 89, 90, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 112, 118, 119, 121, 122, 126, 127, 128, 130, 132, 133], "filter": [5, 6, 7, 43, 44, 45, 46, 47, 48, 54, 114, 119, 134], "get_metadata_rout": [5, 6, 7, 15, 16, 17, 18, 19, 24, 42, 43, 44, 45, 46, 47, 48, 54], "metadata": [5, 6, 7, 15, 16, 17, 18, 19, 24, 42, 43, 44, 45, 46, 47, 48, 54, 87], "rout": [5, 6, 7, 15, 16, 17, 18, 19, 24, 42, 43, 44, 45, 46, 47, 48, 54], "check": [5, 6, 7, 9, 15, 16, 17, 18, 19, 24, 29, 31, 34, 42, 43, 44, 45, 46, 47, 48, 54, 81, 87, 88, 95, 97, 108, 115, 119, 120, 124, 133, 135], "guid": [5, 6, 7, 15, 16, 17, 18, 19, 24, 42, 43, 44, 45, 46, 47, 48, 54, 115], "mechan": [5, 6, 7, 15, 16, 17, 18, 19, 24, 42, 43, 44, 45, 46, 47, 48, 54, 129], "work": [5, 6, 7, 15, 16, 17, 18, 19, 24, 29, 42, 43, 44, 45, 46, 47, 48, 53, 54, 83, 84, 85, 86, 88, 89, 90, 92, 95, 96, 97, 98, 101, 103, 104, 108, 109, 112, 115, 121, 122, 123, 124, 126, 127, 132, 135], "metadatarequest": [5, 6, 7, 15, 16, 17, 18, 19, 24, 42, 43, 44, 45, 46, 47, 48, 54], "encapsul": [5, 6, 7, 15, 16, 17, 18, 19, 24, 42, 43, 44, 45, 46, 47, 48, 54], "inform": [5, 6, 7, 15, 16, 17, 18, 19, 24, 29, 33, 42, 43, 44, 45, 46, 47, 48, 53, 54, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 115, 121, 122, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135], "get_param": [5, 6, 7, 24, 42, 43, 44, 45, 46, 47, 48, 54, 65, 66, 67, 68, 126], "deep": [5, 6, 7, 24, 42, 43, 44, 45, 46, 47, 48, 54, 65, 66, 67, 68, 122], "true": [5, 6, 7, 15, 16, 22, 24, 27, 29, 33, 37, 38, 39, 42, 43, 44, 45, 46, 47, 48, 51, 54, 59, 65, 66, 67, 68, 84, 85, 86, 89, 95, 98, 101, 102, 108, 109, 112, 122, 123, 126, 128, 129, 133, 134], "contain": [5, 6, 7, 24, 32, 33, 36, 41, 42, 43, 44, 45, 46, 47, 48, 54, 70, 84, 85, 86, 89, 101, 102, 112, 123, 126, 130, 133], "subobject": [5, 6, 7, 24, 42, 43, 44, 45, 47, 48, 54], "map": [5, 6, 7, 24, 42, 43, 44, 45, 46, 47, 48, 54, 85, 109], "set_param": [5, 6, 7, 24, 42, 43, 44, 45, 46, 47, 48, 54, 65, 66, 67, 68], "simpl": [5, 6, 7, 24, 33, 41, 42, 43, 44, 45, 46, 47, 48, 54, 61, 70, 83, 90, 91, 93, 95, 96, 97, 98, 103, 104, 108, 109, 114, 115, 119, 121, 123, 124, 126, 127, 129, 134], "well": [5, 6, 7, 24, 42, 43, 44, 45, 46, 47, 48, 54, 121, 122, 123, 124, 126, 127, 129, 130, 131, 132, 134], "nest": [5, 6, 7, 24, 42, 43, 44, 45, 46, 47, 48, 54, 121, 124, 126, 129], "latter": [5, 6, 7, 24, 42, 43, 44, 45, 46, 47, 48, 54], "form": [5, 6, 7, 24, 42, 43, 44, 45, 46, 47, 48, 54, 130, 134], "compon": [5, 6, 7, 24, 42, 43, 44, 45, 46, 47, 48, 54, 97, 102, 114, 134], "__": [5, 6, 7, 24, 42, 43, 44, 45, 46, 47, 48, 54, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 121, 122, 124, 127, 128, 132, 133, 134], "possibl": [5, 6, 7, 22, 24, 27, 39, 42, 43, 44, 45, 46, 47, 48, 51, 54, 59, 87, 119, 123, 124, 129, 133, 134], "instanc": [5, 6, 7, 15, 16, 17, 18, 19, 24, 42, 43, 44, 45, 46, 47, 48, 54, 122, 126, 134], "fit": [6, 7, 24, 29, 33, 42, 43, 44, 45, 46, 47, 48, 53, 54, 55, 65, 66, 67, 68, 95, 96, 102, 109, 114, 121, 122, 125, 126, 129, 134], "y": [6, 7, 12, 13, 15, 16, 17, 18, 19, 24, 29, 31, 32, 33, 35, 39, 42, 43, 44, 45, 46, 47, 48, 53, 54, 55, 65, 66, 67, 68, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 114, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 132, 133, 134], "fit_param": [6, 7, 42, 43, 44, 45, 46, 47, 48, 54], "fit_transform": [6, 29, 42, 43, 44, 45, 46, 47, 48, 53, 55], "version": [6, 15, 19, 24, 42, 43, 44, 45, 46, 47, 48, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 112, 115, 118, 119, 123, 126, 127, 135], "arrai": [6, 7, 15, 16, 17, 18, 19, 33, 42, 43, 44, 45, 46, 47, 48, 54, 84, 126], "like": [6, 7, 15, 16, 17, 18, 19, 27, 42, 43, 44, 45, 46, 47, 48, 51, 54, 92, 102, 118, 123, 124, 126, 129, 130, 133, 134], "shape": [6, 7, 15, 16, 17, 18, 19, 42, 43, 44, 45, 46, 47, 48, 54, 84, 95], "n_sampl": [6, 7, 15, 16, 17, 18, 19, 42, 43, 44, 45, 46, 47, 48, 54, 97, 121, 127], "n_featur": [6, 15, 16, 17, 18, 19, 42, 43, 44, 45, 46, 47, 48, 97, 121, 122, 127], "input": [6, 29, 31, 32, 33, 42, 43, 44, 45, 46, 47, 48, 53, 54, 55, 77, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 121, 122, 124, 126, 127, 128, 131, 132, 133, 134], "sampl": [6, 7, 15, 16, 17, 18, 19, 24, 32, 41, 42, 43, 44, 45, 46, 47, 48, 54, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 121, 122, 123, 124, 126, 127, 128, 132, 133, 134], "n_output": [6, 42, 43, 44, 45, 46, 47, 48], "unsupervis": [6, 42, 43, 44, 45, 46, 47, 48], "addit": [6, 7, 24, 33, 42, 43, 44, 45, 46, 47, 48, 54, 118, 119, 121, 126, 127, 129, 132, 133, 134], "x_new": [6, 42, 43, 44, 45, 46, 47, 48], "ndarrai": [6, 7, 15, 16, 17, 18, 19, 24, 42, 43, 44, 45, 46, 47, 48, 54], "n_features_new": [6, 42, 43, 44, 45, 46, 47, 48], "set_output": [6, 42, 43, 44, 45, 46, 47, 48], "output": [6, 14, 15, 16, 17, 18, 19, 33, 41, 42, 43, 44, 45, 46, 47, 48, 61, 70, 86, 108, 115, 122, 126, 129, 130, 131, 134], "see": [6, 15, 16, 17, 24, 25, 32, 33, 42, 43, 44, 45, 46, 47, 48, 61, 75, 82, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 114, 115, 117, 122, 123, 124, 126, 127, 129, 130, 131, 132, 133, 134], "introduc": [6, 42, 43, 44, 45, 46, 47, 48, 87, 122], "api": [6, 42, 43, 44, 45, 46, 47, 48, 71, 115, 119, 127, 134], "exampl": [6, 42, 43, 44, 45, 46, 47, 48, 83, 84, 85, 86, 87, 88, 89, 91, 92, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 107, 108, 109, 111, 112, 117, 118, 119, 121, 122, 123, 124, 126, 127, 128, 129, 130, 132, 133, 134, 135], "format": [6, 42, 43, 44, 45, 46, 47, 48, 61, 85, 102, 103, 104, 108, 115, 120, 122], "unchang": [6, 15, 24, 42, 43, 44, 45, 46, 47, 48], "wrap": [7, 34, 54, 135], "make": [7, 15, 16, 17, 18, 19, 24, 85, 87, 88, 95, 97, 102, 103, 104, 108, 115, 118, 120, 121, 122, 123, 124, 126, 127, 128, 130, 132, 133, 134, 135], "modellik": [7, 24, 25, 27, 48, 54, 55], "datalik": [7, 24, 29, 45, 53, 54, 55], "pass": [7, 15, 16, 17, 18, 19, 24, 54, 103, 114, 115, 128, 133, 134], "float": [7, 19, 24, 32, 33, 37, 38, 42, 48, 55, 70, 84], "predict_proba": [7, 12, 24, 54], "comput": [7, 24, 37, 38, 42, 54, 89, 102, 112, 129, 134], "probabl": [7, 24, 33, 54, 126], "outcom": [7, 24, 54, 134], "np": [7, 15, 16, 17, 18, 19, 24, 42, 54, 84, 85, 88, 95, 102, 103, 104, 121, 122, 123, 126, 127], "correspond": [7, 24, 33, 54, 126], "sort": [7, 24, 54, 88, 95, 114], "order": [7, 15, 16, 24, 54, 87, 88, 95, 108, 109, 115, 122, 124, 127, 129, 134], "appear": [7, 24, 54, 133], "classes_": [7, 24, 54], "decision_funct": [7, 12, 54, 95, 135], "decis": [7, 54, 87, 88, 95, 103, 104, 122, 126], "n_class": [7, 54], "1": [7, 15, 19, 24, 32, 33, 46, 54, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 118, 120, 121, 122, 123, 124, 126, 127, 128, 130, 132, 133, 134], "2": [7, 15, 16, 17, 18, 19, 24, 54, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 118, 119, 122, 123, 124, 126, 127, 128, 130, 132, 133, 134], "predict_log_proba": [7, 12], "kwarg": [7, 24, 25, 46, 53, 56, 65, 66, 67, 68, 86, 108], "new_typ": 8, "chang": [8, 15, 19, 24, 43, 82, 86, 104, 108, 114, 115, 118, 123, 133], "new": [8, 15, 24, 95, 101, 109, 115, 119, 129, 134], "attr": 9, "ensur": [9, 43, 45, 47, 48, 84, 123, 126], "cv": [12, 13, 15, 16, 17, 18, 19, 24, 31, 32, 33, 61, 83, 84, 85, 89, 90, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 114, 121, 122, 123, 124, 126, 127, 128, 132, 133, 134, 135], "func": [12, 134], "group": [12, 13, 15, 16, 17, 18, 19, 31, 32, 33, 61, 83, 86, 90, 95, 102, 119, 121, 125, 133], "until": [14, 95, 97, 102, 109, 118, 132], "with_column_typ": [14, 95], "fals": [14, 15, 16, 22, 24, 27, 33, 39, 44, 48, 51, 59, 61, 85, 86, 88, 89, 92, 95, 96, 97, 101, 102, 103, 104, 105, 109, 112, 121, 122, 124, 126, 127, 128, 133, 134], "certain": [14, 130, 133, 134], "inclus": [14, 109], "featur": [14, 15, 16, 17, 18, 19, 29, 32, 33, 42, 43, 44, 45, 46, 47, 48, 53, 55, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 115, 118, 119, 121, 124, 125, 126, 128, 129, 131, 132, 133], "svm": [14, 33, 61, 84, 89, 92, 94, 98, 99, 103, 104, 105, 114, 124, 126, 127, 128, 132, 133, 134], "n_bin": [15, 16, 17, 18, 86, 123], "bin": [15, 16, 17, 18, 86, 123], "n_split": [15, 16, 17, 18, 19, 24, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 121, 122, 123, 124, 126, 127, 128, 132, 133, 134], "5": [15, 16, 17, 18, 19, 33, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 119, 121, 122, 123, 124, 126, 127, 128, 129, 130, 132, 133, 134], "shuffl": [15, 16, 19, 85, 86, 88, 89, 92, 95, 96, 97, 101, 102, 103, 104, 105, 109, 112, 121, 122, 123, 124, 126, 127, 128, 133, 134], "random_st": [15, 16, 17, 18, 19, 24, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 121, 122, 123, 124, 126, 127, 128, 132, 133, 134], "stratifi": [15, 16, 17, 18, 19, 33, 61, 83, 84, 90, 123, 133, 135], "k": [15, 16, 17, 18, 33, 61, 83, 84, 85, 88, 90, 95, 101, 102, 108, 114, 123, 124, 129, 133], "where": [15, 16, 17, 18, 19, 87, 120, 123, 126, 134, 135], "stratif": [15, 16, 19, 86, 88, 125], "done": [15, 16, 19, 103, 115, 118, 120, 126, 127, 132, 133, 134], "discret": [15, 16, 123, 134], "fix": [15, 16, 115, 123, 135], "number": [15, 16, 17, 18, 19, 33, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 120, 121, 122, 123, 124, 126, 127, 128, 129, 132, 133, 134], "quantil": [15, 16, 17, 18, 123], "either": [15, 16, 17, 18, 41, 95, 97, 114, 115, 122, 134], "In": [15, 16, 17, 18, 42, 86, 87, 88, 89, 95, 96, 108, 109, 112, 115, 119, 121, 122, 123, 126, 127, 129, 130, 132, 133, 134], "first": [15, 16, 17, 18, 41, 63, 69, 84, 88, 89, 92, 95, 97, 101, 102, 103, 104, 108, 109, 115, 121, 122, 124, 127, 128, 130, 131, 132, 133, 134], "case": [15, 16, 17, 18, 24, 32, 33, 42, 86, 87, 95, 101, 112, 115, 121, 122, 123, 130, 133, 134], "second": [15, 16, 17, 18, 41, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 121, 122, 123, 124, 126, 127, 128, 130, 132, 133, 134], "must": [15, 16, 17, 18, 41, 46, 70, 87, 88, 95, 102, 115, 123, 124, 130, 134], "befor": [15, 16, 33, 54, 84, 87, 108, 112, 115, 118, 120, 124, 133, 134, 135], "batch": [15, 16], "note": [15, 16, 17, 18, 19, 24, 33, 97, 108, 115, 122, 124, 127], "within": [15, 16, 115, 121, 122, 127, 129, 130, 133], "implement": [15, 16, 42, 119, 121, 122, 123, 127, 135], "approxim": [15, 16], "distribut": [15, 16, 19, 41, 84, 86, 88, 89, 92, 95, 96, 98, 103, 104, 105, 108, 114, 122, 123, 124, 126, 132, 133, 134], "global": [15, 16], "perform": [15, 16, 29, 33, 41, 84, 85, 86, 88, 89, 91, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 112, 115, 121, 122, 123, 124, 126, 129, 131, 132, 133, 134], "randomst": [15, 16, 17, 18, 19], "when": [15, 16, 24, 86, 108, 114, 115, 117, 121, 122, 123, 124, 128, 130, 133, 134, 135], "affect": [15, 16, 126], "indic": [15, 16, 17, 18, 19, 33, 44, 48, 95, 114, 123, 126, 133, 134], "control": [15, 16, 17, 18, 19, 87, 88, 95, 103, 104, 111, 122, 127, 129], "random": [15, 16, 17, 18, 19, 24, 33, 61, 88, 89, 92, 94, 97, 99, 103, 104, 108, 114, 122, 123, 124, 126, 127, 132, 134], "otherwis": [15, 16, 19, 24, 61], "leav": [15, 16, 123], "reproduc": [15, 16, 17, 18, 19, 24, 33, 133], "across": [15, 16, 17, 18, 19, 85, 96, 101, 102, 112, 123, 126, 133], "call": [15, 16, 17, 18, 19, 22, 35, 39, 117, 122, 123, 124, 126, 127, 130, 134], "splitter": [15, 16, 17, 18, 19, 24, 33, 119, 125, 131, 132], "mai": [15, 16, 17, 18, 19, 82, 121, 122, 126, 127], "result": [15, 16, 17, 18, 19, 29, 33, 53, 87, 95, 108, 109, 122, 123, 126, 129, 130, 132, 133], "ident": [15, 16, 17, 18, 19, 123], "integ": [15, 16, 17, 18, 19, 133], "gener": [15, 16, 17, 18, 19, 33, 46, 83, 84, 85, 86, 87, 88, 89, 91, 92, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 107, 108, 109, 111, 112, 115, 120, 123, 128, 129, 133, 134], "test": [15, 16, 17, 18, 19, 24, 33, 41, 55, 84, 85, 86, 92, 95, 101, 102, 104, 108, 119, 122, 123, 124, 126, 129, 132, 133, 135], "suffici": [15, 16, 19, 86], "henc": [15, 16, 19], "zero": [15, 16, 17, 18, 19, 97], "placehold": [15, 16, 17, 18, 19], "actual": [15, 16, 19, 42, 48, 84, 85, 102, 109, 112, 126], "supervis": [15, 16, 17, 18, 19, 134], "learn": [15, 16, 17, 18, 19, 20, 22, 33, 42, 43, 45, 46, 47, 48, 49, 53, 87, 89, 95, 96, 112, 114, 115, 118, 119, 121, 122, 123, 124, 126, 127, 129, 130, 131, 132, 133, 134, 135], "label": [15, 16, 17, 18, 19, 32, 33, 84, 89, 129, 130, 133, 134], "while": [15, 16, 17, 18, 19, 33, 96, 103, 108, 119, 122, 123, 127, 128, 129, 134], "dataset": [15, 16, 17, 18, 19, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 115, 121, 122, 123, 124, 126, 127, 128, 129, 130, 132, 133, 134], "yield": [15, 16, 17, 18, 19, 33, 126, 133], "get_n_split": [15, 16, 17, 18, 19], "iter": [15, 16, 17, 18, 19, 33, 97, 108, 121, 126, 133, 135], "alwai": [15, 16, 17, 18, 19, 89, 103, 104, 108, 115, 122, 124, 127, 132, 133, 134], "ignor": [15, 16, 17, 18, 19, 24, 109, 112], "exist": [15, 16, 17, 18, 19, 24, 39, 61], "set_split_request": 15, "request": [15, 24, 98, 119], "relev": [15, 24, 126], "enable_metadata_rout": [15, 24], "set_config": [15, 24], "meta": [15, 24], "error": [15, 22, 24, 27, 32, 33, 39, 51, 59, 61, 63, 84, 85, 87, 101, 102, 112, 115, 123, 129, 132, 135], "given": [15, 24, 48, 92, 95, 108, 114, 122, 130, 133, 134], "origin": [15, 24, 42, 63, 115, 120], "util": [15, 24, 71, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 112, 115, 119, 121, 126, 127, 132], "metadata_rout": [15, 24], "retain": [15, 24], "some": [15, 24, 86, 87, 88, 95, 96, 115, 118, 121, 122, 123, 124, 126, 127, 129, 130], "3": [15, 24, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 115, 118, 119, 121, 122, 123, 124, 126, 127, 128, 130, 132, 133, 134], "sub": [15, 24, 131], "e": [15, 24, 27, 33, 42, 48, 55, 61, 114, 115, 118, 120, 121, 122, 123, 124, 126, 133, 134], "g": [15, 24, 27, 33, 61, 102, 114, 118, 123, 124, 133], "insid": [15, 24, 27, 134], "effect": [15, 24, 122, 126], "glossari": [16, 17], "n_repeat": [17, 18, 84, 92, 98, 126, 132, 133], "10": [17, 18, 42, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 108, 109, 112, 119, 121, 122, 123, 124, 126, 127, 128, 132, 133, 134], "continuousstratifiedgroupkfold": [17, 123], "n": [17, 18, 84, 85, 86, 97, 101, 102, 112, 114, 120, 123, 128, 134], "time": [17, 18, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 132, 133, 134], "repetit": [17, 18, 84, 85, 102], "state": [17, 18, 23, 24, 28, 40, 52, 60, 122], "contion": 18, "continuousstratifiedkfold": [18, 86, 123, 135], "test_siz": [19, 84, 85, 95, 101, 102, 108], "0": [19, 24, 32, 33, 42, 48, 55, 70, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 109, 110, 112, 113, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 130, 132, 133, 134], "train_siz": [19, 95, 98, 108], "bootstrap": [19, 108, 123], "resampl": 19, "replac": [19, 42, 96, 108, 120, 126], "respect": [19, 42, 114, 115, 130, 132, 133, 134], "re": [19, 115, 134], "proport": 19, "round": [19, 132], "up": [19, 33, 41, 63, 97, 103, 104, 109, 119, 121, 126, 130, 131, 134], "absolut": [19, 85, 101, 102, 112, 114], "complement": [19, 114], "size": [19, 121, 122, 123, 132], "21": [19, 87, 119, 121, 127, 132], "remain": [19, 123, 129], "unspecifi": 19, "automat": [19, 115, 118, 120, 134], "produc": [19, 124], "n_label": 19, "searcher": [20, 21, 22, 23, 33, 125, 135], "obj": [20, 22], "scikit": [20, 22, 33, 42, 43, 45, 46, 47, 48, 49, 53, 89, 95, 96, 112, 114, 118, 119, 121, 122, 123, 124, 127, 129, 132, 133, 134, 135], "avail": [20, 21, 22, 26, 33, 35, 36, 41, 50, 57, 58, 118, 119, 133, 134], "algorithm": [21, 22, 24, 33, 96, 129, 132, 134, 135], "searcher_nam": 22, "overwrit": [22, 27, 39, 51, 59, 61, 135], "regist": [22, 23, 27, 28, 39, 40, 51, 52, 59, 60, 112, 135], "after": [22, 29, 48, 53, 55, 85, 86, 95, 97, 101, 102, 108, 109, 112, 115, 126], "referenc": [22, 27, 51, 59], "decid": [22, 27, 39, 59], "warn": [22, 27, 31, 32, 39, 51, 56, 59, 61, 69, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 103, 104, 108, 112, 121, 122, 123, 126, 127, 130, 132, 135], "alreadi": [22, 27, 39, 51, 59, 95, 97, 115, 122, 123, 127, 131, 134], "reset": [23, 28, 40, 52, 60, 87], "ensembl": [24, 127], "ds_split": 24, "random_state_algorithm": 24, "deslib": [24, 71, 114, 118, 119], "randomforest": 24, "metad": 24, "singlebest": 24, "staticselect": 24, "stackedclassifi": 24, "knorau": 24, "knora": 24, "desp": 24, "ola": 24, "mcb": 24, "knop": 24, "sample_weight": 24, "weight": [24, 124, 134], "set_score_request": 24, "run_cross_valid": [25, 27, 41, 70, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 115, 121, 122, 124, 126, 127, 128, 131, 132, 135], "model_nam": 27, "classification_cl": 27, "regression_cl": 27, "afterward": [27, 51, 127], "behav": [27, 51], "runtimewarn": [27, 31, 32, 51, 59, 69, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 103, 104, 108, 112, 121, 126, 127, 132], "unlik": [29, 53, 129], "both": [29, 42, 53, 86, 88, 95, 108, 109, 122, 123, 124, 127, 128, 133, 134], "requir": [29, 53, 75, 82, 115, 119, 124, 126, 128, 131, 134], "targetconfoundremov": [29, 53, 122], "encod": [29, 53], "present": [29, 53, 109, 115, 121, 123], "leakag": [29, 53, 119, 122, 134], "drop": [29, 42, 44, 53, 86, 89, 92, 97, 109, 114, 126], "tupl": [29, 42], "jutargettransform": [29, 57, 59], "transformerlik": [29, 33, 134], "inverse_transform": 29, "invers": [29, 122], "can_inverse_transform": 29, "factori": 30, "params_to_tun": 30, "juestimatorlik": 30, "estimatorlikefit1": [30, 64], "estimatorlikefit2": [30, 64], "estimatorlikef": [30, 64], "seri": [31, 32, 55], "inconsist": [31, 32], "might": [31, 32, 82, 87, 89, 92, 96, 103, 104, 117, 118, 122, 123, 126, 128, 131, 133, 134], "still": [31, 87, 109, 118, 122, 123, 133], "run": [31, 33, 42, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 130, 132, 133, 134], "df": [32, 41, 97, 124, 127, 130, 132, 133, 134], "pos_label": [32, 33, 89], "http": [32, 33, 42, 61, 86, 92, 115, 123, 129, 132], "juaml": [32, 33, 115], "github": [32, 33, 119, 133], "io": [32, 33], "html": [32, 33, 61, 86, 92, 115, 129, 132, 133], "detail": [32, 33, 115, 129], "interpret": [32, 33, 61, 108, 126], "posit": [32, 33, 42, 85, 89, 121], "element": [32, 33, 61, 84, 87, 97, 134, 135], "convert": [32, 33, 87, 108, 112], "equal": [32, 33, 86, 114, 123], "dictionari": [32, 33, 43, 47, 97, 109, 122, 126, 130, 135], "df_x": 32, "df_y": 32, "df_group": 32, "return_estim": [33, 84, 85, 86, 88, 95, 96, 97, 98, 101, 102, 103, 104, 108, 109, 112, 121, 124, 126, 127, 133], "return_inspector": [33, 98, 126], "return_train_scor": [33, 126, 133], "seed": [33, 89, 92, 97, 103, 104, 108, 126, 127], "n_job": [33, 42, 126, 135], "verbos": [33, 42, 126, 135], "numpi": [33, 44, 48, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 112, 121, 122, 123, 126, 127], "string": [33, 61, 114, 130, 132, 133, 134, 135], "kind": [33, 84, 85, 88, 89, 92, 95, 96, 98, 103, 104, 105, 108, 124, 130, 133], "categor": [33, 102, 109, 114, 128], "multiple_class": 33, "binari": [33, 61, 83, 88, 90, 92, 95, 96, 98, 103, 104, 105, 108, 114, 115, 120, 123, 124, 126, 132], "ordin": 33, "final": [33, 84, 85, 86, 87, 88, 95, 96, 97, 101, 102, 103, 104, 105, 108, 109, 112, 115, 123, 126, 127, 133, 134], "inspector": [33, 98, 126], "strategi": [33, 133], "kfold": [33, 85, 86, 88, 89, 92, 95, 96, 97, 101, 102, 103, 104, 105, 109, 112, 121, 122, 123, 124, 126, 127, 128, 133, 134], "scorerlik": [33, 34, 35, 39], "metric": [33, 71, 84, 85, 87, 89, 92, 102, 108, 112, 119, 129, 131, 132], "org": [33, 42, 61, 86, 92, 129, 132, 133], "stabl": [33, 86, 118, 129], "model_evalu": 33, "comprehens": 33, "scorer": [33, 35, 36, 39, 40, 112, 122, 132, 133, 135], "defin": [33, 41, 46, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 112, 121, 122, 123, 124, 126, 127, 133, 134], "follow": [33, 41, 42, 46, 61, 63, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 103, 104, 108, 109, 112, 114, 115, 116, 118, 120, 121, 124, 126, 127, 130, 131, 132, 133, 134], "step__paramet": 33, "sever": [33, 87, 88, 95, 115, 123, 124, 129, 133], "svm__probabl": 33, "go": [33, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 119, 126, 131, 134], "oper": [33, 84, 109], "level": [33, 61, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 112, 115, 121, 126, 127], "outer": [33, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 121, 122, 124, 126, 127, 128, 132, 133, 134, 135], "joblib": [33, 42], "convernt": 33, "mean": [33, 41, 42, 48, 55, 82, 85, 86, 88, 89, 95, 97, 101, 102, 103, 104, 108, 109, 112, 114, 122, 123, 124, 126, 128, 129, 132, 133, 134], "print": [33, 61, 84, 85, 86, 87, 88, 89, 92, 95, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 121, 122, 124, 126, 128, 132, 133, 134], "larger": 33, "50": [33, 85, 86, 89, 92, 96, 97, 98, 101, 102, 105, 108, 109, 112, 124, 127, 128, 132, 133, 134], "standard": [33, 42, 97, 122, 127, 134], "standrad": 33, "addition": [33, 61, 89, 92, 119, 120, 122, 134], "fit_tim": [33, 84, 85, 98, 101, 102, 109, 112, 122, 128, 133, 134], "And": [33, 88, 95, 108, 123, 124], "final_estim": 33, "multiclass": [33, 61, 83, 90, 114], "forest": [33, 61, 88, 92, 94, 97, 99, 108, 114, 127, 132, 134], "custom": [33, 39, 61, 113, 116, 119, 133, 134], "wrap_scor": 34, "doe": [34, 95, 129, 134], "handl": 34, "non_invers": 34, "scalar": [35, 39, 84], "greater": [35, 39, 41, 126], "better": [35, 39, 103, 104, 124, 126, 132], "Will": [35, 39, 132], "y_true": [37, 38, 84, 85, 89, 102, 112], "y_pred": [37, 38, 84, 85, 89, 102, 112], "squar": [37, 112, 114], "pearson": [37, 38, 112, 121], "product": [37, 38, 112], "moment": [37, 38, 112], "correl": [37, 38, 42, 85, 112, 121], "coeffici": [37, 38, 85, 112, 133, 134], "arraylik": [37, 38], "scorer_nam": [39, 112], "access": [39, 87], "want": [39, 48, 84, 87, 88, 89, 95, 97, 108, 109, 112, 115, 117, 118, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134], "userwarn": [39, 86, 89, 108, 123], "bonferroni": 41, "altern": [41, 108], "side": 41, "correct": [41, 92, 127, 132], "t": [41, 87, 92, 95, 123, 124, 132, 133, 134], "degre": [41, 126], "freedom": 41, "adjust": 41, "pvalu": 41, "full": [41, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 115, 126], "letter": 41, "sidak": 41, "holm": 41, "down": 41, "sime": 41, "hochberg": 41, "independ": [41, 48, 55, 95, 108, 114, 123], "hommel": 41, "close": [41, 120], "non": [41, 42], "neg": [41, 42, 121], "fdr_bh": 41, "benjamini": 41, "fdr_by": 41, "yekuti": 41, "fdr_tsbh": 41, "stage": 41, "fdr": [41, 114], "fdr_tsbky": 41, "less": [41, 86, 97, 119, 123, 129], "hypothesi": [41, 108], "underli": [41, 114, 122, 126], "unequ": 41, "significance_threshold": [42, 121], "05": [42, 102, 108, 109, 121, 124, 126], "corr_method": [42, 121], "pearsonr": [42, 112, 133], "agg_method": [42, 121], "sum": [42, 84, 121, 135], "corr_sign": [42, 121], "posneg": [42, 121], "aggreg": [42, 121], "togeth": [42, 48, 85, 86, 101, 102, 109, 112, 114], "significantli": 42, "signific": [42, 92, 121, 126], "aggregate": 42, "separ": [42, 95, 97, 129, 133, 134], "ones": 42, "choos": [42, 89, 92, 123, 124, 132, 134], "procedur": [42, 123, 129], "describ": [42, 85, 86, 97, 101, 102, 109, 112, 115, 128, 133], "shen": [42, 121], "finn": [42, 121], "scheinost": 42, "d": [42, 84, 87, 88, 95, 103, 104, 114, 120, 121, 123], "et": [42, 114, 121, 122, 134], "al": [42, 121, 122], "2016": [42, 87, 88, 95, 103, 104, 121], "doi": [42, 122], "1038": 42, "nprot": 42, "178": [42, 121], "p": [42, 84, 92, 108, 121, 132], "scipi": [42, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 112, 121, 126, 127], "stat": [42, 71, 92, 112, 119, 121, 123, 132], "convent": [42, 115], "axi": [42, 84, 85, 86, 101, 102, 112, 123, 128], "po": [42, 121], "correlation_valu": 42, "found": [42, 103, 104, 133], "used_corr_sign_": 42, "job": 42, "parallel": [42, 115, 135], "log": [42, 61, 63, 69, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 112, 115, 121, 126, 127, 132], "y_mean_": 42, "show": [42, 83, 92, 100, 107, 111, 117, 123, 124, 132, 133, 135], "wa": [42, 88, 92, 95, 96, 97, 109, 121, 123, 124, 126, 133], "x_y_correlations_": 42, "significant_mask_": 42, "had": [42, 104, 133, 134, 135], "pos_mask_": 42, "pos_significant_mask_": 42, "neg_significant_mask_": 42, "used_significant_mask_": 42, "threhsold": 42, "mask": [42, 44, 48], "per": [42, 84, 88, 95, 102, 115, 123], "get_feature_names_out": [42, 43, 45, 46, 47, 48], "input_featur": [42, 43, 45, 46, 47, 48], "x_types_renam": 43, "Not": [43, 44, 45, 46, 47, 108], "here": [43, 44, 45, 47, 86, 87, 88, 95, 97, 109, 115, 119, 127, 132, 133, 134], "kept": [43, 45, 46, 47, 48, 109], "get_support": [44, 48], "support": [44, 48, 54, 75, 84, 88, 89, 95, 98, 103, 104, 115, 123, 124, 126, 127, 133, 134, 135], "support_mask": [44, 48], "keep": [45, 87, 89, 92, 96, 98, 102, 105, 108, 109, 115, 118, 119, 124, 127, 134], "junif": 46, "wrapper": [46, 54, 135], "around": 46, "directli": [46, 87, 119, 128], "feature_names_in_": 46, "x0": 46, "x1": 46, "n_features_in_": 46, "model_confound": [48, 55, 122], "keep_confound": [48, 109], "specif": [48, 89, 95, 97, 122, 125, 126, 129, 130, 131], "subtract": [48, 55, 114], "regular": [48, 103, 104, 114, 124, 130], "express": [48, 130], "syntax": 48, "linearregress": [48, 55, 114, 121, 122], "By": [48, 55, 95, 96, 97, 109, 114, 121, 124, 126, 133], "residu": [48, 55, 122], "fall": [48, 55, 121, 133], "under": [48, 55, 112, 117, 118, 133, 134], "deconfound": [48, 109], "o": 50, "transformer_nam": [51, 59], "transformer_cl": [51, 59], "arg": [53, 56, 65, 66, 67, 68, 86, 108], "_model_": 54, "transform_target": 54, "confoundremov": [55, 109, 114, 122, 135], "notifi": [56, 61], "with_traceback": 56, "except": [56, 63, 115], "tb": 56, "__traceback__": 56, "fname": 61, "output_format": 61, "debug": [61, 129], "info": [61, 62, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 115, 121, 122, 124, 126, 127, 128, 132, 133, 134], "messag": [61, 63, 69, 115, 121, 135], "pathlib": 61, "path": 61, "filenam": [61, 115], "stdout": 61, "file": [61, 87, 90, 93, 99, 106, 110, 113, 115], "statement": 61, "append": [61, 96, 108, 120, 123, 126], "entri": [61, 134], "doc": [61, 86, 115, 120, 135], "python": [61, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 115, 118, 120, 123, 135], "dev": [61, 115, 120], "howto": 61, "asctim": 61, "levelnam": 61, "msg": [63, 69, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 103, 104, 108, 112, 121, 126, 127, 132], "klass": 63, "subclass": [63, 69], "categori": [69, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 103, 104, 108, 112, 121, 126, 127, 132], "width": [70, 89, 92, 98, 105, 108], "800": 70, "height": 70, "600": [70, 86], "ci": [70, 108, 120], "95": [70, 89, 92, 97, 98, 102, 105, 108, 123], "plot": [70, 84, 85, 86, 92, 95, 96, 97, 102, 108, 119, 123, 132], "panel": [70, 92, 117, 118, 132], "dashboard": 70, "confid": [70, 108, 126], "interv": [70, 108], "dynam": [71, 118, 119], "prepar": [71, 87, 119, 121, 122, 127], "vizual": [71, 119], "julearn": [73, 75, 77, 80, 81, 82, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 107, 108, 109, 111, 112, 114, 116, 118, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134], "depend": [75, 82, 87, 88, 95, 103, 104, 117, 119, 123, 126, 132], "instal": [75, 82, 115, 117, 119, 120, 132, 135], "extra": [75, 82, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 112, 114, 115, 127, 128, 134], "currentmodul": [77, 80, 81], "protocol": 81, "experiment": 82, "futur": [82, 84, 123], "complet": [82, 115], "particularli": [82, 123, 133], "reli": 82, "beta": 82, "releas": [82, 118, 119, 135], "packag": [82, 86, 89, 108, 115, 117, 118, 123, 127], "viz": [82, 92, 118, 119, 132], "basic": [83, 115, 124, 130, 131, 133, 134], "galleri": [83, 84, 85, 86, 87, 88, 89, 91, 92, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 107, 108, 109, 111, 112, 115], "sphinx": [83, 84, 85, 86, 87, 88, 89, 91, 92, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 107, 108, 109, 111, 112, 115], "end": [84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 118], "download": [84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112], "code": [84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 114, 115, 119, 122, 134], "iri": [84, 89, 92, 96, 98, 105, 108, 115, 124, 130, 133, 134], "vector": [84, 88, 89, 95, 98, 103, 104, 115, 124, 126, 127, 133, 134], "machin": [84, 87, 88, 89, 95, 98, 103, 104, 115, 119, 121, 122, 124, 126, 129, 130, 131, 132, 134], "classifi": [84, 88, 89, 95, 96, 98, 103, 104, 105, 108, 115, 126, 133, 134], "heatmap": [84, 85, 102], "accuraci": [84, 89, 104, 108, 122, 123, 132, 133], "confus": [84, 97, 133, 134], "matrix": 84, "author": [84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 115], "shammi": [84, 85, 86, 88, 95, 97, 102, 108, 112, 122, 135], "fz": [84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112], "juelich": [84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112], "de": [84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 122], "federico": [84, 85, 86, 87, 88, 89, 92, 95, 96, 98, 102, 103, 104, 105, 108, 112], "raimondo": [84, 85, 86, 87, 88, 89, 92, 95, 96, 98, 102, 103, 104, 105, 108, 112, 135], "f": [84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 102, 103, 104, 105, 108, 112, 121, 122, 124, 127], "licens": [84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 115], "agpl": [84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112], "seaborn": [84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 115, 118, 119, 123, 124, 126, 130, 133, 134], "sn": [84, 85, 86, 95, 96, 97, 101, 102, 108, 123, 126], "matplotlib": [84, 85, 86, 95, 96, 97, 101, 102, 108, 119, 123], "pyplot": [84, 85, 86, 95, 96, 97, 101, 102, 108, 123], "plt": [84, 85, 86, 95, 96, 97, 101, 102, 108, 123], "load_dataset": [84, 87, 88, 89, 92, 95, 96, 98, 103, 104, 105, 108, 115, 124, 126, 130, 133, 134], "model_select": [84, 85, 86, 88, 92, 95, 98, 101, 102, 108, 123, 126, 132, 133, 135], "train_test_split": [84, 85, 101, 102], "repeatedkfold": [84, 126], "confusion_matrix": 84, "configure_log": [84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 112, 115, 126, 127], "2023": [84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 119, 121, 122, 124, 126, 127, 128, 132, 133, 134], "07": [84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 110, 112, 119, 121, 122, 124, 126, 127, 128, 132, 133, 134], "20": [84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 121, 122, 123, 124, 126, 127, 128, 132, 133, 134], "12": [84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 105, 108, 118, 121, 122, 123], "41": [84, 88, 124, 132], "720": 84, "lib": [84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 112, 123, 126, 127], "25": [84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 126, 127, 128, 132], "11": [84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 112, 118, 121, 122, 124, 126, 127, 132, 133], "dev222": [84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 112, 119, 126, 127], "721": 84, "load": [84, 85, 86, 101, 102, 103, 104, 108, 109, 112, 115, 124, 128, 130, 133], "df_iri": [84, 89, 92, 96, 98, 105, 108, 115], "sepal_length": [84, 89, 92, 96, 98, 105, 108, 124, 130, 133, 134], "sepal_width": [84, 89, 92, 96, 98, 105, 108, 124, 130, 133, 134], "petal_length": [84, 89, 92, 96, 98, 105, 108, 124, 130, 133, 134], "speci": [84, 89, 92, 96, 98, 105, 108, 115, 124, 126, 130, 133, 134], "train_iri": 84, "test_iri": 84, "200": [84, 97, 98, 108, 121, 123, 126, 127], "we": [84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 115, 117, 118, 119, 122, 123, 124, 126, 127, 128, 129, 130, 132, 133, 134], "model_iri": [84, 96], "725": [84, 86, 123], "expand": [84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 121, 122, 124, 126, 127, 128, 132, 133, 134], "726": [84, 106], "treat": [84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 103, 104, 108, 112, 121, 126, 127], "home": [84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 103, 104, 108, 112, 121, 126, 127, 132], "runner": [84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 103, 104, 108, 112, 121, 126, 127, 132], "py": [84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 109, 110, 112, 113, 115, 121, 123, 126, 127, 132], "238": [84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 103, 104, 108, 112, 121, 126, 127, 132], "727": 84, "__continu": [84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 108, 109, 112, 121, 124, 126, 128, 132, 133, 134], "728": 84, "120": [84, 132], "729": 84, "versicolor": [84, 89, 92, 96, 98, 105, 108, 115, 124, 133, 134], "40": [84, 85, 86, 88, 132], "virginica": [84, 89, 92, 96, 98, 105, 108, 115, 124, 133, 134], "setosa": [84, 130, 133, 134], "count": [84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 123, 124, 126, 128, 132, 133, 134], "dtype": [84, 85, 86, 88, 89, 92, 95, 96, 98, 101, 102, 103, 104, 105, 108, 109, 112, 124, 126, 128, 132, 133, 134], "int64": [84, 88, 89, 92, 95, 96, 98, 103, 104, 105, 108, 124, 126, 132, 133, 134], "scheme": [84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 121, 122, 124, 126, 127, 128, 129, 132, 133, 134, 135], "multi": [84, 87, 132, 133, 134], "detect": [84, 88, 89, 92, 95, 96, 98, 103, 104, 105, 108, 124, 126, 129, 132, 133, 134], "head": [84, 85, 86, 87, 88, 95, 101, 102, 103, 104, 108, 109, 112, 128, 130, 132, 134], "score_tim": [84, 85, 98, 101, 102, 109, 112, 122, 128, 133, 134], "cv_mdsum": [84, 85, 98, 101, 102, 109, 112, 122, 128, 133, 134], "006525": 84, "003418": 84, "fa5ab7a2b930761687a8e82d9971ebca": 84, "006014": 84, "003341": 84, "005966": 84, "003340": [84, 133], "005957": 84, "003339": 84, "4": [84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 118, 121, 122, 123, 124, 126, 127, 128, 130, 132, 133, 134], "005965": 84, "003311": 84, "8": [84, 85, 87, 88, 95, 98, 101, 102, 109, 112, 118, 122, 123, 128, 129, 132, 133, 134], "now": [84, 85, 86, 87, 89, 92, 95, 96, 98, 101, 102, 103, 104, 108, 109, 112, 115, 120, 122, 123, 124, 126, 127, 130, 132, 133, 134], "df_accuraci": 84, "set_index": [84, 85, 87, 102, 108], "test_accuraci": [84, 89, 108, 132], "unstack": [84, 85, 102], "index": [84, 85, 86, 87, 88, 95, 97, 101, 102, 103, 104, 108, 112, 115, 119, 126], "916667": 84, "833333": 84, "958333": 84, "875000": 84, "750000": 84, "000000": [84, 85, 86, 92, 97, 101, 102, 109, 112, 128, 132], "791667": 84, "over": [84, 85, 89, 92, 97, 102, 121, 122, 126, 127, 132], "font_scal": [84, 85], "fig": [84, 85, 86, 95, 96, 97, 102, 123], "ax": [84, 85, 86, 95, 96, 97, 102, 123], "subplot": [84, 85, 86, 95, 96, 97, 102, 123], "figsiz": [84, 85, 86, 95, 96, 97, 102, 123], "7": [84, 85, 86, 87, 88, 95, 98, 102, 108, 115, 119, 123, 124, 127, 129, 130, 132, 133, 135], "cmap": [84, 85, 102], "ylgnbu": [84, 85, 102], "titl": [84, 85, 102, 115], "text": [84, 85, 95, 97, 102, 115, 123], "our": [84, 87, 88, 89, 95, 97, 105, 109, 115, 119, 122, 123, 124, 126, 127, 129, 130, 132, 133, 134], "annot": [84, 85], "cm": 84, "uniqu": [84, 88, 95, 124, 126], "9": [84, 85, 87, 88, 95, 97, 98, 102, 109, 122, 130, 133, 134], "let": [84, 85, 86, 87, 88, 95, 97, 101, 102, 103, 104, 108, 109, 112, 122, 123, 124, 126, 127, 128, 130, 134], "anoth": [84, 87, 97, 112, 123, 124, 127, 132, 134], "cm_sum": 84, "keepdim": 84, "cm_perc": 84, "astyp": 84, "100": [84, 88, 89, 92, 96, 97, 98, 105, 108, 122, 124], "empty_lik": 84, "nrow": 84, "ncol": 84, "rang": [84, 87, 97, 114, 121, 127], "j": [84, 122], "c": [84, 87, 88, 95, 103, 104, 117, 124, 126, 127, 134], "els": 84, "1f": [84, 85], "00_start": [84, 86], "plot_cm_acc_multiclass": [84, 90], "104": [84, 128], "deprecationwarn": 84, "convers": 84, "ndim": 84, "deprec": [84, 115, 135], "extract": [84, 87, 88, 95, 126], "singl": [84, 126, 132], "your": [84, 87, 115, 118, 119, 121, 122, 123, 126, 131, 134], "fmt": [84, 85], "total": [84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 109, 110, 112, 113, 121, 122, 123, 124, 126, 127, 128, 130, 132, 133, 134], "script": [84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 115, 120, 121, 122, 123, 124, 126, 127, 128, 130, 132, 133, 134], "minut": [84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 121, 122, 123, 124, 126, 127, 128, 130, 132, 133, 134], "650": [84, 90, 103, 104], "sourc": [84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 120], "jupyt": [84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 117, 133], "notebook": [84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 117, 133], "ipynb": [84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112], "diabet": [85, 86, 101, 102, 112, 128], "ridg": [85, 101, 102, 112, 114], "load_diabet": [85, 86, 101, 102, 109, 112, 128], "mean_absolute_error": [85, 102], "43": [85, 86, 87, 122, 127], "648": [85, 103, 104], "return_x_i": [85, 86, 101, 102, 109, 112, 128], "as_fram": [85, 86, 101, 102, 109, 112, 128], "ten": [85, 86, 101, 102, 112], "ag": [85, 86, 87, 101, 102, 109, 112, 128], "sex": [85, 86, 101, 102, 109, 112, 122, 126, 128], "bodi": [85, 86, 101, 102, 112], "mass": [85, 86, 101, 102, 112], "averag": [85, 86, 101, 102, 109, 112, 121, 123, 132], "blood": [85, 86, 101, 102, 109, 112], "pressur": [85, 86, 101, 102, 109, 112], "six": [85, 86, 101, 102, 112], "serum": [85, 86, 101, 102, 112], "measur": [85, 86, 101, 102, 109, 112, 122, 123, 124, 126], "s1": [85, 86, 87, 88, 95, 101, 102, 109, 112, 128], "s6": [85, 86, 87, 88, 95, 101, 102, 109, 112, 128], "patient": [85, 86, 101, 102, 112], "quantit": [85, 86, 101, 102, 112], "diseas": [85, 86, 101, 102, 112], "progress": [85, 86, 101, 102, 112], "year": [85, 86, 101, 102, 112], "baselin": [85, 86, 101, 102, 112], "interest": [85, 86, 89, 101, 102, 108, 112, 131, 133, 134], "bmi": [85, 86, 101, 102, 109, 112, 128], "s4": [85, 86, 87, 88, 95, 101, 102, 109, 112, 128], "s5": [85, 86, 87, 88, 95, 101, 102, 103, 104, 109, 112, 128], "038076": [85, 86, 101, 102, 109, 112, 128], "050680": [85, 86, 101, 102, 109, 112, 128], "061696": [85, 86, 101, 102, 109, 112, 128], "002592": [85, 86, 101, 102, 109, 112, 128], "019907": [85, 86, 101, 102, 109, 112, 128], "017646": [85, 86, 101, 102, 109, 112, 128], "001882": [85, 86, 101, 102, 109, 112, 128], "044642": [85, 86, 101, 102, 109, 112, 128], "051474": [85, 86, 101, 102, 109, 112, 128], "039493": [85, 86, 101, 102, 109, 112, 128], "068332": [85, 86, 101, 102, 109, 112, 128], "092204": [85, 86, 101, 102, 109, 112, 128], "085299": [85, 86, 101, 102, 109, 112, 128], "044451": [85, 86, 101, 102, 109, 112, 128], "002861": [85, 86, 101, 102, 109, 112, 128], "025930": [85, 86, 101, 102, 109, 112, 128], "089063": [85, 86, 101, 102, 109, 112, 128], "011595": [85, 86, 101, 102, 109, 112, 128], "034309": [85, 86, 101, 102, 109, 112, 128], "022688": [85, 86, 101, 102, 109, 112, 128], "009362": [85, 86, 101, 102, 109, 112, 128], "005383": [85, 86, 101, 102, 109, 112, 128], "036385": [85, 86, 101, 102, 109, 112, 128], "031988": [85, 86, 101, 102, 109, 112, 128], "046641": [85, 86, 101, 102, 109, 112, 128], "442": [85, 86, 101, 102, 109, 112, 128], "152": [85, 86, 101, 102, 109, 112, 128, 132, 134, 135], "133484": [85, 86, 101, 102, 109, 112, 128], "std": [85, 86, 97, 101, 102, 109, 112, 122, 128], "77": [85, 86, 101, 102, 109, 112, 128, 132, 135], "093005": [85, 86, 101, 102, 109, 112, 128], "min": [85, 86, 97, 101, 102, 109, 112, 128], "87": [85, 86, 101, 102, 109, 112, 128, 132], "140": [85, 86, 101, 102, 109, 112, 128], "500000": [85, 86, 101, 102, 109, 112, 128], "75": [85, 86, 89, 92, 97, 101, 102, 109, 112, 128], "211": [85, 86, 101, 102, 109, 112, 128], "max": [85, 86, 97, 101, 102, 109, 112, 114, 128], "346": [85, 86, 101, 102, 109, 112, 128], "float64": [85, 86, 89, 92, 97, 101, 102, 105, 109, 112, 121, 122, 127, 128], "combin": [85, 86, 87, 101, 102, 108, 112, 124, 134], "data_diabet": [85, 101, 102, 112, 128], "concat": [85, 86, 96, 101, 102, 108, 112, 128], "bp": [85, 86, 101, 102, 109, 112, 128], "s2": [85, 86, 87, 88, 95, 101, 102, 109, 112, 128], "s3": [85, 86, 87, 88, 95, 101, 102, 109, 112, 128], "calcul": 85, "heat": 85, "corr": [85, 102], "xticklabel": 85, "yticklabel": 85, "train_diabet": [85, 101, 102], "test_diabet": [85, 101, 102], "neg_mean_absolute_error": [85, 86, 97, 101, 112, 133], "954": [85, 123], "955": 85, "956": 85, "957": 85, "309": [85, 101, 102], "958": 85, "006607": 85, "003240": 85, "b10eef89b4192178d482d7a1587a248a": [85, 101, 102, 109, 112, 122, 128, 133, 134], "006010": 85, "003227": 85, "005990": 85, "003188": 85, "005911": 85, "003216": [85, 112], "005895": 85, "003196": 85, "test_scor": [85, 86, 88, 89, 92, 95, 101, 102, 103, 104, 105, 112, 124, 133], "45": [85, 92], "44408444147061": 85, "mae": [85, 102], "df_mae": [85, 102], "48": [85, 87, 92, 124], "783874": 85, "47": [85, 135], "573568": 85, "37": 85, "617474": 85, "686852": 85, "558655": 85, "coef_": [85, 109], "sort_valu": 85, "ascend": 85, "inplac": 85, "barh": 85, "color": [85, 86, 95, 108, 123], "blue": 85, "red": 85, "xlabel": [85, 102], "249999999999986": 85, "scatterplot": [85, 95, 97, 102], "v": [85, 102, 120, 123, 125, 134], "2f": [85, 102], "corrcoef": [85, 102], "set_styl": [85, 86, 102], "darkgrid": [85, 86, 102], "scatter": [85, 97, 102], "xmin": [85, 102], "xmax": [85, 102], "get_xlim": [85, 95, 102], "ymin": [85, 102], "ymax": [85, 102], "get_ylim": [85, 95, 102], "ylabel": [85, 102, 123], "01": [85, 90, 97, 99, 102, 103, 104, 106, 121, 124, 126, 127], "verticalalign": [85, 102], "top": [85, 102, 119, 133], "horizontalalign": [85, 102], "right": [85, 102, 103, 104, 123, 124], "fontsiz": [85, 102], "scale": [85, 102, 103, 104, 114, 124, 126, 134], "649999999999999": 85, "347": 85, "35": [85, 87], "815": [85, 90], "plot_example_regress": [85, 90], "leonard": [86, 97, 108], "sass": [86, 97, 108], "l": [86, 87, 88, 95, 97, 101, 103, 104, 108], "math": 86, "42": [86, 89, 92, 95, 103, 104, 108, 122, 123, 126, 132, 133], "573": 86, "outlier": 86, "data_df": 86, "new_df": 86, "145": [86, 102], "150": [86, 122, 133, 134], "590": [86, 133], "580": 86, "597": 86, "595": 86, "reset_index": [86, 87, 88, 95, 103, 104, 108], "plot_stratified_kfold_reg": [86, 90], "53": [86, 132], "settingwithcopywarn": 86, "try": [86, 88, 89, 92, 95, 98, 104, 105, 123, 124, 133], "slice": 86, "loc": 86, "row_index": 86, "col_index": 86, "caveat": 86, "pydata": 86, "user_guid": 86, "view": [86, 115], "versu": 86, "idea": [86, 129], "chosen": 86, "coupl": 86, "histrogram": 86, "displot": 86, "60": [86, 132], "opt": [86, 89, 108, 123], "hostedtoolcach": [86, 89, 108, 123], "x64": [86, 89, 108, 123], "python3": [86, 89, 108, 123], "site": [86, 89, 108, 123], "axisgrid": [86, 108], "118": [86, 92, 102, 108], "figur": [86, 95, 108, 115], "layout": [86, 108], "tight": [86, 108], "_figur": [86, 108], "tight_layout": [86, 96, 108], "facetgrid": 86, "0x7f01ed91a1d0": 86, "histogram": 86, "abov": [86, 108, 122, 124, 126, 133], "uniformli": [86, 123], "skew": 86, "toward": 86, "lower": [86, 123], "even": [86, 109, 124, 133, 134], "low": [86, 97, 114, 121], "give": [86, 114, 122, 124, 131, 132, 133], "good": [86, 89, 104, 118, 123, 131, 132], "granular": 86, "cv_stratifi": [86, 88], "linear": [86, 92, 103, 104, 109, 121, 122, 124, 126, 127, 134], "scores_strat": 86, "linreg": [86, 109, 114, 121, 122], "227": 86, "228": 86, "229": 86, "230": 86, "449": 86, "231": 86, "_split": [86, 123], "popul": [86, 108, 123], "member": [86, 123], "289": 86, "290": 86, "291": 86, "292": [86, 98], "compar": [86, 92, 108, 119, 122, 124, 129, 132, 133], "With": [86, 123, 126, 133], "df_score": 86, "boxplot": [86, 108], "higher": [86, 108, 123], "were": [86, 87, 88, 95, 96, 108, 126, 133], "swarmplot": [86, 96], "951": [86, 90], "fmri": [87, 88, 95, 103, 104], "bse": 87, "waskom": [87, 88, 95, 103, 104], "m": [87, 88, 95, 103, 104, 115, 120, 134], "frank": [87, 88, 95, 103, 104], "wagner": [87, 88, 95, 103, 104], "adapt": [87, 88, 95, 103, 104], "engag": [87, 88, 95, 103, 104], "cognit": [87, 88, 95, 103, 104], "context": [87, 88, 95, 103, 104, 126], "cerebr": [87, 88, 95, 103, 104], "cortex": [87, 88, 95, 103, 104], "known": [87, 130, 134], "excel": [87, 123], "spreadsheet": 87, "csv": 87, "ideal": 87, "everyth": [87, 131], "tabul": 87, "organis": [87, 122], "demograph": [87, 122], "diagnost": 87, "behaviour": [87, 119, 133], "manual": [87, 117, 132, 134], "edit": 87, "sure": [87, 95, 115, 120, 122, 123, 124], "readi": [87, 132, 134], "do": [87, 95, 97, 102, 103, 104, 108, 109, 112, 114, 115, 119, 120, 122, 123, 124, 127, 129, 130, 131, 132, 133, 134], "howev": [87, 92, 95, 96, 97, 109, 117, 118, 122, 123, 124, 127, 128, 129, 132, 133, 134], "prune": 87, "fortun": [87, 123], "tool": [87, 118, 126, 132], "deal": [87, 121, 130], "task": [87, 95, 109, 124, 128], "collect": [87, 108, 126], "start": [87, 115, 116, 119, 123, 124, 126, 127, 128, 131, 132, 134], "df_fmri": [87, 88, 95, 103, 104], "subject": [87, 88, 95, 103, 104, 123], "timepoint": [87, 88, 95, 103, 104], "event": [87, 88, 95, 103, 104], "region": [87, 88, 95, 103, 104], "signal": [87, 88, 95, 103, 104], "s13": [87, 88, 95, 103, 104], "18": [87, 88, 95, 98, 103, 104, 121, 122, 124], "stim": [87, 88, 95, 103, 104], "pariet": [87, 88, 95, 103, 104], "017552": [87, 88, 95, 103, 104], "14": [87, 88, 95, 97, 98, 103, 104, 112, 122, 132], "080883": [87, 88, 95, 103, 104], "s12": [87, 88, 95, 103, 104], "081033": [87, 88, 95, 103, 104], "s11": [87, 88, 95, 103, 104], "046134": [87, 88, 95, 103, 104], "s10": [87, 88, 95, 103, 104], "037970": [87, 88, 95, 103, 104], "seen": [87, 134], "pivot": [87, 88, 95, 103, 104], "tabl": [87, 88, 95], "becom": [87, 129, 134], "identifi": [87, 89, 121, 122, 126, 132], "rule": [87, 114, 123, 134], "duplic": 87, "frontal": [87, 88, 95, 103, 104], "s0": [87, 88, 95, 103, 104], "cue": [87, 88, 95, 103, 104], "007766": [87, 103, 104], "006899": [87, 103, 104], "021452": [87, 103, 104], "039327": [87, 103, 104], "016440": [87, 103, 104], "000300": [87, 103, 104], "021054": [87, 103, 104], "035735": [87, 103, 104], "024296": [87, 103, 104], "033220": [87, 103, 104], "sutil": 87, "For": [87, 89, 92, 97, 102, 109, 114, 115, 117, 118, 121, 123, 124, 126, 127, 128, 130, 133, 134], "place": 87, "scan": 87, "23": [87, 122, 132], "31": 87, "29": [87, 132], "28": 87, "34": [87, 124, 132], "scanner": 87, "6": [87, 88, 92, 95, 96, 97, 98, 109, 118, 121, 123, 126, 129, 130, 133], "b": [87, 115, 134], "df_meta": 87, "s7": [87, 88, 95], "s8": [87, 88, 95], "s9": [87, 88, 95], "13": [87, 88, 95, 98, 102, 104, 108, 109, 112, 121, 122, 126, 127, 128, 132, 133, 134], "16": [87, 88, 95, 97, 98, 124, 126, 127, 132], "036739": 87, "131641": 87, "17": [87, 88, 95, 97, 98, 124, 132], "004900": 87, "036362": 87, "030099": 87, "121574": 87, "000643": 87, "051040": 87, "009959": 87, "103513": 87, "532": [87, 88, 89, 95, 103, 104, 121], "suppos": [87, 89, 122], "dure": [87, 88, 95, 118, 121, 122, 124, 126], "There": [87, 123, 129, 131, 134], "009038": 87, "009642": 87, "047859": 87, "026727": 87, "085040": 87, "086399": 87, "069775": 87, "070558": 87, "115321": 87, "154058": 87, "010535": 87, "061817": 87, "034386": 87, "130267": 87, "15": [87, 88, 95, 97, 98, 121, 122, 126, 128], "002170": 87, "048007": 87, "038257": 87, "134828": 87, "004290": 87, "035395": 87, "266": [87, 88, 95, 103, 104, 134], "sinc": [87, 92, 97, 101, 103, 124, 134], "previou": [87, 92, 96, 97, 115, 127, 132, 133, 134], "multiindex": 87, "trick": 87, "underscor": 87, "_": [87, 96, 108, 115, 134], "frontal_cu": 87, "parietal_stim": 87, "157": [87, 90], "run_combine_panda": [87, 90], "groupkfold": 88, "kimia": 88, "nazarzadeh": 88, "necessari": [88, 117, 122, 127], "librari": [88, 117, 119], "stratifiedgroupkfold": 88, "39": [88, 89, 132, 134], "733": [88, 104], "infer": [88, 95], "studi": [88, 95, 122, 123], "brain": [88, 95, 119, 121, 122], "condit": [88, 95], "groupbi": [88, 95], "1064": [88, 95], "exactli": [88, 95, 126, 134], "rf": [88, 92, 96, 97, 105, 108, 114, 124, 127, 132], "759": [88, 124], "760": [88, 122, 124], "761": [88, 124, 133], "762": [88, 124, 133], "763": [88, 133], "764": [88, 126, 133], "6841826838300122": 88, "613": [88, 92], "614": [88, 92], "615": [88, 92, 127], "616": [88, 92, 127], "617": [88, 92], "618": 88, "6898496240601504": 88, "096": [88, 101, 106, 124], "097": 88, "098": 88, "099": 88, "6879699248120301": 88, "845": [88, 90], "run_grouped_cv": [88, 90], "358": 89, "359": [89, 121], "three": [89, 92, 96, 98, 105, 108, 115, 119, 124, 132, 133], "isin": [89, 92, 96, 98, 105, 108, 115, 124], "sepal": [89, 92, 98, 105, 108, 130, 134], "length": [89, 92, 98, 105, 108], "petal": [89, 92, 98, 105, 108, 130, 134], "406": 89, "407": 89, "408": 89, "409": 89, "410": 89, "411": 89, "412": [89, 97], "90": [89, 92, 132], "70": [89, 92], "assess": [89, 92, 122, 126], "unbalanc": [89, 92], "df_unbalanc": [89, 92], "value_count": [89, 92], "30": [89, 92, 95, 97, 122, 132], "account": [89, 122], "imbal": 89, "suitabl": [89, 118, 122], "balanced_accuraci": [89, 92, 133], "balanced_accuracy_scor": 89, "test_balanced_accuraci": [89, 92], "467": [89, 132], "468": [89, 132], "469": [89, 132], "80": [89, 92, 132], "470": [89, 132], "471": [89, 121, 132], "_classif": 89, "2394": 89, "8625": 89, "8678571428571429": 89, "u": [89, 96, 108, 109, 118, 122, 126, 132, 133], "correctli": 89, "precis": [89, 133], "ratio": 89, "tp": 89, "precision_scor": 89, "530": 89, "531": [89, 121], "533": [89, 121], "534": [89, 121, 134], "535": [89, 121, 134], "240": [89, 90], "run_simple_binary_classif": [89, 90], "00": [90, 93, 97, 99, 105, 106, 110, 113, 126, 127, 132], "04": [90, 93, 99, 106], "658": [90, 124], "execut": [90, 93, 99, 106, 110, 113, 115], "auto_examples_00_start": 90, "mb": [90, 93, 99, 106, 110, 113], "At": [92, 119, 129, 134], "statist": [92, 97, 108, 119, 131, 133], "repeatedstratifiedkfold": [92, 98, 132, 133], "corrected_ttest": [92, 132], "44": [92, 112, 132], "674": 92, "678": 92, "679": 92, "680": [92, 126], "681": 92, "682": [92, 132], "roc_auc": [92, 108, 132, 133], "scores1": [92, 117, 124, 132], "736": 92, "737": 92, "738": 92, "739": 92, "740": 92, "scores2": [92, 117, 124, 132], "113": 92, "114": 92, "115": 92, "116": 92, "117": 92, "third": [92, 133], "kernel": [92, 103, 104, 122, 124, 126, 127, 134], "scores3": [92, 117, 124, 132], "svm__kernel": [92, 104, 124], "svm_linear": 92, "stats_df": [92, 132], "model_2": [92, 127, 132], "val": [92, 132], "175075": 92, "062567": 92, "895662": 92, "151390": 92, "782741": 92, "test_roc_auc": [92, 108, 132], "108944": 92, "835331": 92, "236153": 92, "685092": 92, "669010": 92, "324331": 92, "viewer": 92, "plot_scor": [92, 117, 132], "uncom": [92, 132], "line": [92, 115, 123, 132], "read": [92, 96, 115, 119, 120, 123, 129, 131, 132, 134], "holoviz": [92, 132], "getting_start": [92, 132], "build_app": [92, 132], "deploi": [92, 126, 132], "pane": 92, "unknown": 92, "keyword": [92, 97, 121], "argument": [92, 97, 109, 123], "widget": 92, "could": [92, 95, 97, 109, 119, 121, 126, 130, 132, 133, 134], "button_typ": 92, "look": [92, 95, 97, 102, 109, 114, 121, 123, 124, 126, 127, 129, 130, 131, 133, 134], "interact": [92, 95, 119, 126, 132], "zoom": [92, 132], "hover": [92, 132], "button": [92, 132], "463": [92, 93], "plot_simple_model_comparison": [92, 93], "auto_examples_01_model_comparison": 93, "demonstr": [94, 115, 127, 133], "analys": [95, 96, 104, 122], "groupshufflesplit": 95, "51": 95, "639": [95, 96, 108, 112], "665": 95, "666": 95, "667": 95, "668": 95, "669": [95, 133], "670": [95, 133], "7218303650149884": 95, "decod": [95, 122], "claim": [95, 108, 123], "acquir": 95, "randomli": 95, "characterist": 95, "unseen": [95, 129], "whom": 95, "later": [95, 98, 115, 123, 132], "748": 95, "749": 95, "750": [95, 96], "751": [95, 96], "752": [95, 96], "7210526315789474": 95, "visual": [95, 118, 119, 123, 129, 131], "part": [95, 117, 119, 121, 123, 129, 132, 134], "raw": [95, 97, 134], "hue": [95, 108], "set_titl": [95, 96, 97, 123], "pre_x": 95, "pre_df": 95, "join": 95, "parietal__": 95, "frontal__": 95, "noth": [95, 124, 133], "standardscal": [95, 114, 124, 126, 128, 133, 134], "seem": [95, 103, 104, 108, 124, 131, 132, 133], "quit": [95, 118, 121, 126], "linearli": 95, "clf": 95, "xlim": 95, "ylim": 95, "xx": 95, "linspac": [95, 123], "yy": 95, "meshgrid": 95, "xy": 95, "vstack": 95, "ravel": 95, "xy_df": 95, "reshap": 95, "contour": 95, "alpha": [95, 121, 123], "linestyl": [95, 123], "boundari": [95, 124], "581": [95, 99], "plot_groupcv_inspect_svm": [95, 99], "49": [96, 98, 122, 127], "746": 96, "753": 96, "754": 96, "intern": [96, 126, 127, 133, 134], "_important_": 96, "caution": [96, 123], "proper": [96, 108, 120, 131], "randomforestclassifi": [96, 114, 124], "understandhow": 96, "to_plot": 96, "feature_importances_": [96, 108], "barplot": 96, "review": [96, 115], "myself": 96, "wander": 96, "about": [96, 115, 122, 123, 126, 127, 129, 131, 132, 133, 134], "entir": [96, 133, 134], "634": 96, "635": 96, "636": 96, "637": [96, 112], "638": [96, 108, 112], "i_fold": [96, 108], "enumer": [96, 108], "this_import": [96, 108], "743": [96, 99], "plot_inspect_random_forest": [96, 99], "make_regress": [97, 121, 122, 127], "pre": [97, 118, 120, 134, 135], "process": [97, 102, 124, 130, 133, 134], "normal": [97, 109, 114, 115, 122, 123, 134, 135], "reduct": 97, "52": 97, "392": [97, 124], "n_inform": 97, "nois": [97, 122], "first_two": 97, "determin": [97, 124, 134], "belong": [97, 109], "x_to_zscor": 97, "summari": [97, 115], "111790": 97, "141618": 97, "023682": 97, "167718": 97, "686170": 97, "977322": 97, "972988": 97, "087946": 97, "895011": 97, "79": [97, 115], "741431": 97, "069985": 97, "772593": 97, "552990": 97, "659172": 97, "204": 97, "293317": 97, "751257": 97, "484100": 97, "759419": 97, "688891": 97, "64": 97, "724008": 97, "206729": 97, "194442": 97, "028152": 97, "174160": 97, "789944": 97, "421885": 97, "724302": 97, "772156": 97, "408321": 97, "392804": 97, "943621": 97, "256723": 97, "383145": 97, "259309": 97, "216": 97, "221085": 97, "explicitli": [97, 103, 122, 124], "declar": 97, "init": 97, "special": 97, "cannot": [97, 122, 134], "tree": [97, 114], "pipeline_cr": [97, 102, 105, 109, 122, 126, 127], "select_vari": [97, 114], "n_compon": [97, 102, 134], "n_estim": [97, 127], "becaus": [97, 109, 122, 123, 124, 126, 129, 131, 132, 133, 134], "creator": [97, 98, 101, 102, 103, 104, 108, 109, 121, 124, 128, 133, 134], "simpli": [97, 121, 122, 123, 126, 127, 134], "did": [97, 104], "hand": [97, 115, 121, 122, 127, 130], "r2": [97, 102, 122, 133], "x_after_pca": 97, "earlier": 97, "x_after_zscor": 97, "high": [97, 121], "pca__pca0": [97, 109], "pca__pca1": [97, 109], "__x_to_zscor": 97, "413": 97, "414": 97, "415": [97, 121], "417": 97, "418": 97, "725696": 97, "582295": 97, "314458": 97, "942935": 97, "977336": 97, "463217": 97, "525139": 97, "219493": 97, "618559": 97, "908592": 97, "395105": 97, "743192": 97, "96": [97, 98, 135], "328111": 97, "670912": 97, "97": [97, 98, 108], "573900": 97, "401304": 97, "98": [97, 98, 123, 132], "918034": 97, "137435": 97, "99": [97, 98, 132], "894566": 97, "357729": 97, "1__": 97, "4__": 97, "013728": 97, "426259": 97, "364686": 97, "944446": 97, "118838": 97, "931848": 97, "004437": 97, "030684": 97, "309092": 97, "523891": 97, "206189": 97, "157667": 97, "099154": 97, "028182": 97, "335538": 97, "252795": 97, "049139": 97, "133702": 97, "240085": 97, "443863": 97, "deviat": [97, 122], "000000e": 97, "02": [97, 104, 126, 127], "689893e": 97, "387779e": 97, "005038e": 97, "013728e": 97, "010202e": 97, "576015e": 97, "463286e": 97, "763131e": 97, "456486e": 97, "488094e": 97, "018781e": 97, "113700e": 97, "184776e": 97, "732": [97, 99, 104], "plot_preprocess": [97, 99], "shufflesplit": 98, "288": 98, "293": 98, "294": 98, "295": 98, "296": 98, "006275": 98, "003355": 98, "42489ff0163b2f12752440a6b7ef74c7": 98, "005949": 98, "003306": 98, "005826": 98, "003270": 98, "005809": 98, "003226": 98, "005819": 98, "003291": 98, "005923": 98, "003268": 98, "005825": 98, "005832": 98, "003286": [98, 133], "005830": 98, "003255": 98, "005790": 98, "003248": 98, "005836": 98, "003264": 98, "005811": 98, "003251": 98, "005844": 98, "003241": 98, "005862": [98, 112], "005846": 98, "003281": 98, "005890": 98, "003282": [98, 133], "005894": 98, "003319": 98, "005962": 98, "003280": 98, "005913": 98, "003303": 98, "19": [98, 121, 124, 132], "005996": 98, "cv_predict": 98, "repeat0_p0": [98, 126], "repeat1_p0": [98, 126], "repeat2_p0": [98, 126], "repeat3_p0": 98, "_pipelin": 98, "pipelineinspector": 98, "0x7f01ed4524d0": 98, "313": [98, 99, 127, 134], "run_binary_inspect_fold": [98, 99], "369": 99, "auto_examples_02_inspect": 99, "Then": [101, 109, 120, 127, 129, 134], "lya": 101, "paa": 101, "olivero": 101, "sami": [101, 109, 122, 135], "hamdan": [101, 109, 122, 135], "crucial": [101, 122], "54": [101, 103, 132], "305": 101, "target_cr": [101, 128], "target_pipeline_cr": [101, 122], "0x7f01edae49a0": 101, "325": 101, "326": 101, "327": [101, 122], "328": 101, "329": 101, "005773": 101, "004259": 101, "005286": 101, "004134": 101, "005276": 101, "004157": 101, "005215": 101, "004159": 101, "005226": 101, "004171": 101, "154": 101, "0615805903489": 101, "run_apply_to_target": [101, 106], "reduc": [102, 109, 134], "dimension": [102, 109, 121, 124, 134], "subset": [102, 124, 129], "georgio": 102, "antonopoulo": 102, "kaustubh": [102, 135], "r": [102, 112], "patil": [102, 135], "119": [102, 132], "assign": [102, 115], "pca1": 102, "pca2": 102, "pca_feats1": 102, "pca_feats2": 102, "138": 102, "__pca1": 102, "__pca2": 102, "139": 102, "__categor": [102, 128], "0x7f01ed5d1e70": 102, "141": 102, "142": 102, "143": 102, "144": [102, 134], "018072": 102, "008087": 102, "017152": 102, "007902": 102, "016965": 102, "007961": 102, "017447": 102, "008213": 102, "017264": 102, "007956": 102, "3107976743678922": 102, "untouch": 102, "data_processed1": 102, "data_processed2": 102, "pca_feats1__pca0": 102, "161": 102, "063175": 102, "133274": 102, "108111": 102, "075741": 102, "085907": 102, "054779": 102, "030464": 102, "033246": 102, "015491": 102, "098172": 102, "033216": 102, "015999": 102, "050783": 102, "032289": 102, "012577": 102, "067737": 102, "013504": 102, "315": [102, 134], "045025": 102, "031454": 102, "010903": 102, "001078": 102, "pca_feats2__pca0": 102, "234716": 102, "012141": 102, "078784": 102, "006290": 102, "026190": 102, "341472": 102, "348168": 102, "269257": 102, "286067": 102, "309025": 102, "362": [102, 121], "485": [102, 106], "run_example_pca_featset": [102, 106], "545": [103, 134], "attempt": [103, 104], "564": 103, "565": 103, "566": 103, "567": [103, 132], "568": 103, "5939164168576971": [103, 104], "gamma": [103, 104, 124, 126], "But": [103, 108, 109, 123, 124, 126, 131, 133, 134], "rbf": [103, 104, 124], "auto": [103, 124], "1e": [103, 104, 124, 126, 127], "speed": [103, 104], "646": 103, "647": [103, 104], "001": [103, 104, 124, 126], "649": [103, 104], "svm__c": [103, 104, 124, 126, 127], "inner": [103, 104, 124, 126, 127, 135], "svm__gamma": [103, 104, 124], "651": [103, 104], "set_column_typ": [103, 124, 126, 133], "setcolumntyp": [103, 124, 126, 133], "svc": [103, 114, 124, 126, 133, 134], "652": [103, 104], "653": 103, "654": 103, "7087109857168048": [103, 104], "best_params_": [103, 104, 124], "best_estimator_": [103, 104], "_gamma": [103, 104], "823": [103, 106], "run_hyperparameter_multiple_grid": [103, 106], "628": 104, "optim": [104, 124, 126, 134], "find": [104, 124, 131], "best": [104, 124, 134], "730": 104, "731": 104, "734": 104, "735": 104, "588308940222183": 104, "much": [104, 123, 124, 126, 129], "explor": [104, 109, 126, 127], "too": [104, 124], "poli": 104, "123": [104, 126, 132], "124": [104, 128, 132], "125": 104, "126": 104, "127": 104, "128": 104, "lest": 104, "03": [104, 106, 132], "129": 104, "5188855581026275": 104, "happen": [104, 126, 127], "889": 104, "890": 104, "891": 104, "892": 104, "893": 104, "894": 104, "345": [104, 106], "run_hyperparameter_tun": [104, 106], "logist": [105, 114, 132, 134], "56": 105, "510": [105, 124], "petal_width": [105, 108, 124, 130, 133, 134], "model_sep": 105, "model_pet": 105, "514": 105, "515": 105, "__sepal": [105, 134], "__petal": [105, 134], "516": 105, "0x7f01ed1f4070": 105, "0x7f01ed1f7910": 105, "517": 105, "518": [105, 121], "519": 105, "521": 105, "655": 105, "656": 105, "657": 105, "85": 105, "977": [105, 106], "run_stacked_model": [105, 106], "auto_examples_03_complex_model": 106, "relat": [107, 122, 130], "stratifiedbootstrap": 108, "06": [108, 109], "813": 108, "ml": [108, 119], "classic": 108, "frequentist": 108, "contrast": 108, "gap": 108, "approach": [108, 121, 123, 124, 129, 134], "below": [108, 118, 121], "2000": 108, "n_bootstrap": 108, "n_element": 108, "len": [108, 109, 122], "scores_ncr": 108, "817": [108, 124], "818": [108, 124], "819": [108, 124], "820": [108, 124], "821": 108, "next": [108, 118, 120, 128, 130, 134], "again": [108, 122, 123, 124, 126, 129, 134], "tell": [108, 122, 133], "confound_remov": [108, 109, 114, 122], "scores_cr": 108, "09": 108, "__featur": [108, 122], "__confound": [108, 122], "640": [108, 112], "641": 108, "643": 108, "644": 108, "645": 108, "easier": [108, 115, 134], "long": 108, "df_ncr_metric": 108, "df_cr_metric": 108, "df_metric": 108, "catplot": 108, "col": 108, "swarm": 108, "04_confound": 108, "plot_confound_removal_classif": [108, 110], "155": 108, "them": [108, 115, 117, 118, 121, 123, 124, 132, 133, 134], "pair": 108, "systemat": 108, "differec": 108, "df_diff_metr": 108, "whisker": 108, "box": [108, 119], "whi": 108, "axhlin": 108, "roc": 108, "auc": 108, "term": [108, 123, 130, 134], "mayb": [108, 132], "percentil": [108, 114], "amount": [108, 119, 126], "ncr_fi": 108, "cr_fi": 108, "feature_import": 108, "dodg": [108, 123], "235": 108, "diff_fi": 108, "axvlin": [108, 123], "551": [108, 110, 127], "most": [109, 118, 121, 122, 123, 126, 129, 134], "remove_confound": 109, "sometim": [109, 122, 126, 127, 128], "discuss": 109, "df_featur": 109, "furthermor": 109, "put": [109, 122], "806": 109, "807": 109, "0x7f01ed59c490": 109, "feature_nam": [109, 132], "808": 109, "809": 109, "811": 109, "812": 109, "df_deconfound": 109, "assum": [109, 123], "closer": [109, 114, 133], "understand": [109, 119, 122, 126, 131, 132, 134], "achiev": [109, 122, 128, 133, 134], "autoclass": 109, "029271": 109, "057228": 109, "009658": 109, "019424": 109, "012310": 109, "028194": 109, "005874": 109, "047538": 109, "015568": 109, "024667": 109, "061639": 109, "082913": 109, "076494": 109, "039983": 109, "017885": 109, "004736": 109, "036479": 109, "081307": 109, "007659": 109, "025897": 109, "049135": 109, "029380": 109, "000071": 109, "013139": 109, "032449": 109, "032631": 109, "012234": 109, "025295": 109, "037349": 109, "087": 109, "088": 109, "0x7f01ed59eb30": 109, "089": 109, "090": 109, "091": [109, 124], "092": [109, 124], "df_transform": 109, "pca__pca2": 109, "pca__pca7": 109, "pca__pca8": 109, "014051": 109, "075715": 109, "017395": 109, "008604": 109, "002330": 109, "099883": 109, "062829": 109, "014516": 109, "024022": 109, "002075": 109, "029015": 109, "053253": 109, "032477": 109, "001197": 109, "002579": 109, "035162": 109, "001324": 109, "106807": 109, "006566": 109, "003545": 109, "003951": 109, "025445": 109, "000421": 109, "002095": 109, "000517": 109, "lastli": [109, 122], "395": 109, "396": 109, "397": 109, "399": 109, "031292": 109, "011614": 109, "030381": 109, "011564": 109, "030391": 109, "011509": 109, "030627": 109, "011646": 109, "030911": 109, "011450": 109, "875": [109, 110, 124], "run_return_confound": [109, 110], "08": [110, 132], "426": 110, "auto_examples_04_confound": 110, "extend": [111, 133], "variou": 111, "aspect": [111, 123, 134], "make_scor": 112, "register_scor": 112, "550": 112, "569": [112, 132], "570": 112, "571": 112, "572": 112, "006238": 112, "003066": 112, "005815": 112, "003117": 112, "005843": 112, "003075": 112, "005852": 112, "003081": 112, "264653948271885": 112, "thing": [112, 129, 134], "r2_corr": [112, 133], "test_neg_mean_absolute_error": 112, "test_r2_corr": 112, "264654": 112, "486498": 112, "take": [112, 123, 126, 134], "def": 112, "pearson_scor": 112, "squeez": 112, "699": 112, "700": 112, "701": 112, "702": 112, "219": [112, 113], "run_custom_scorers_regress": [112, 113], "auto_examples_05_custom": 113, "descript": [114, 115, 134], "short": [114, 115, 122], "link": [114, 115, 131, 134], "unit": [114, 119], "scaler_robust": 114, "median": 114, "iqr": 114, "robustscal": [114, 124], "scaler_minmax": 114, "minmaxscal": 114, "scaler_maxab": 114, "maxabsscal": 114, "scaler_norm": 114, "norm": 114, "scaler_quantil": 114, "uniform": [114, 123, 135], "robust": [114, 117], "quantiletransform": 114, "scaler_pow": 114, "gaussianis": 114, "powertransform": 114, "select_univari": 114, "genericunivariateselect": 114, "select_percentil": 114, "rank": 114, "selectpercentil": 114, "select_k": [114, 124], "selectkbest": [114, 124], "select_fdr": 114, "selectfdr": 114, "select_fpr": 114, "fpr": 114, "selectfpr": 114, "select_fw": 114, "fwe": 114, "selectfw": 114, "variancethreshold": 114, "drop_column": 114, "dropcolumn": 114, "change_column_typ": 114, "changecolumntyp": 114, "filtercolumn": 114, "princip": [114, 134], "svr": [114, 127, 128], "randomforestregressor": 114, "extratreesclassifi": 114, "extratreesregressor": 114, "adaboost": 114, "adaboostclassifi": 114, "adaboostregressor": 114, "bag": 114, "baggingclassifi": 114, "baggingregressor": 114, "gradientboost": 114, "gradient": 114, "boost": 114, "gradientboostingclassifi": 114, "gradientboostingregressor": 114, "stackingclassifi": [114, 127], "stackingregressor": [114, 127], "gauss": 114, "gaussianprocessclassifi": 114, "gaussianprocessregressor": 114, "logit": [114, 124, 132], "aka": 114, "maxent": 114, "logisticregress": [114, 124], "logitcv": 114, "logisticregressioncv": 114, "l2": [114, 124], "ridgeclassifi": 114, "ridgecv": 114, "built": [114, 119, 127, 132, 133, 134], "ridgeclassifiercv": 114, "sgd": 114, "minim": 114, "empir": [114, 123], "loss": [114, 122], "sgdclassifi": 114, "sgdregressor": 114, "nb_bernoulli": 114, "multivari": 114, "bernoulli": 114, "bernoullinb": 114, "nb_categor": 114, "categoricalnb": 114, "nb_complement": 114, "complementnb": 114, "nb_gaussian": 114, "gaussiannb": 114, "nb_multinomi": 114, "multinomi": 114, "multinomialnb": 114, "dynamicselect": [114, 135], "dummyclassifi": 114, "dummyregressor": 114, "fork": 115, "com": [115, 123, 129], "repositori": 115, "never": [115, 134], "offici": [115, 118], "clone": 115, "virtual": [115, 118], "pip": [115, 117, 118], "branch": [115, 120], "refactor": [115, 135], "feat": 115, "prefix": 115, "git": [115, 120], "checkout": [115, 120], "help": [115, 118, 119, 122, 126, 132, 134], "commit": [115, 120], "regularli": 115, "On": [115, 122, 133], "save": [115, 134], "smaller": 115, "semant": 115, "suit": [115, 126], "tox": 115, "push": [115, 120], "open": 115, "displai": [115, 126, 132], "submit": 115, "templat": 115, "web": 115, "interfac": [115, 127], "meet": 115, "directori": 115, "rare": 115, "circumst": 115, "coverag": 115, "decreas": 115, "report": 115, "codecov": 115, "usag": [115, 118, 129, 134], "draft": [115, 120], "id": 115, "liner": [115, 132], "newsfrag": 115, "bug": [115, 135], "bugfix": 115, "enhanc": 115, "enh": 115, "improv": [115, 118], "miscellan": 115, "misc": 115, "record": 115, "101": 115, "content": 115, "typo": 115, "intro": 115, "biggest": 115, "fan": 115, "yourself": 115, "contributor": 115, "inc": 115, "against": 115, "someon": [115, 123], "core": [115, 129, 132], "team": 115, "success": [115, 124, 129], "pytest": 115, "come": [115, 123, 126, 130, 134], "intend": 115, "cd": 115, "_build": 115, "situat": 115, "clean": [115, 118], "rest": 115, "rst": [115, 120], "plot_": 115, "run_": 115, "dependend": 115, "block": 115, "comment": 115, "render": [115, 133], "emb": 115, "shall": [115, 123], "preced": 115, "issu": [117, 120, 123, 126, 135], "bokeh": [117, 118], "These": [117, 118, 121, 133], "develop": [117, 118, 119, 120, 135], "usual": [117, 124, 134], "through": [117, 134], "manag": 117, "conda": [117, 118], "forg": 117, "standalon": 117, "applic": [117, 121, 122, 126], "browser": 117, "jupyter_bokeh": 117, "servabl": 117, "0rc1": 118, "0b1": 118, "nevertheless": [118, 134], "although": 118, "strongli": 118, "recommend": [118, 130], "environ": [118, 119, 133], "promin": 118, "venv": 118, "env": 118, "latest": [118, 120, 135], "therefor": [118, 121, 122, 133, 134], "oftentim": 118, "newest": 118, "sens": [118, 124], "aim": [118, 119, 134], "pypi": [118, 120], "relas": 118, "yet": [118, 130], "insal": 118, "mod": 118, "orient": 119, "aml": 119, "institut": 119, "neurosci": [119, 121], "medicin": 119, "inm": 119, "thought": [119, 134], "research": [119, 121, 122, 123], "simpler": 119, "abstract": 119, "power": [119, 126, 127], "minor": [119, 120], "flexibilii": 119, "video": 119, "tutori": 119, "offer": [119, 130], "essenti": [119, 126], "benefit": 119, "therebi": 119, "avoid": [119, 122, 123, 124], "nice": [119, 130, 133, 134], "system": [119, 120], "accord": [119, 121, 123, 127, 135], "setup": [119, 131], "suggest": [119, 123], "deeper": [119, 126, 131, 132], "topic": [119, 123, 131, 132], "overview": [119, 126, 132, 134], "contribut": 119, "local": 119, "pull": [119, 120], "guidelin": 119, "write": [119, 134], "maintain": 119, "frequenli": 119, "ask": 119, "question": [119, 122, 123], "2022": [119, 122], "major": 120, "micro": 120, "devn": 120, "distanc": 120, "setuptools_scm": 120, "plugin": 120, "tag": 120, "increment": [120, 134], "segment": 120, "publish": 120, "testpypi": 120, "onc": [120, 126, 129, 131, 134], "mileston": 120, "reach": 120, "towncrier": 120, "proceed": [120, 134], "sync": 120, "rebas": 120, "changelog": 120, "properli": 120, "reflect": 120, "whats_new": 120, "chage": 120, "pr": 120, "merg": 120, "via": [120, 131], "vx": 120, "setuptools_scm_debug": 120, "dir": 120, "dist": 120, "bump": [120, 135], "vd": 120, "neuroimag": [121, 122], "typic": 121, "problemat": 121, "due": [121, 123], "curs": 121, "especi": 121, "recent": 121, "propos": 121, "fluid": 121, "intellig": 121, "sustain": 121, "attent": 121, "connect": [121, 122], "nutshel": 121, "summar": 121, "subsequ": 121, "commonli": [121, 134], "principl": 121, "leverag": [121, 126], "workflow": [121, 126, 131, 134], "x_name": [121, 127], "feature_": [121, 122, 127], "cbpm_pipeline_cr": 121, "final_model": [121, 126], "360": 121, "feature_1": [121, 122, 127], "feature_2": [121, 122, 127], "feature_3": [121, 122, 127], "feature_4": [121, 122, 127], "feature_5": [121, 122, 127], "feature_6": [121, 122, 127], "feature_7": [121, 122, 127], "feature_8": [121, 122, 127], "feature_9": [121, 122, 127], "feature_10": [121, 122, 127], "feature_11": [121, 122, 127], "feature_12": [121, 122, 127], "feature_13": [121, 122, 127], "feature_14": [121, 122, 127], "feature_15": [121, 122, 127], "feature_16": [121, 122, 127], "feature_17": [121, 122, 127], "feature_18": [121, 122, 127], "feature_19": [121, 122, 127], "feature_20": [121, 127], "363": 121, "364": 121, "387": [121, 124], "No": [121, 123], "rid": 121, "443": 121, "499": 121, "527": [121, 133], "customis": [121, 127], "increas": 121, "cbpm__significance_threshold": 121, "noteworthi": 121, "sign": 121, "spearmanr": 121, "0x7f01f2907d00": 121, "0x7f0203773880": 121, "0x7f020377fb70": 121, "guess": 121, "spearman": 121, "xilin": 121, "individu": [121, 126, 133], "behavior": [121, 122, 126, 135], "nat": 121, "protoc": 121, "2017": [121, 122], "mar": [121, 122], "506": [121, 124], "emili": 121, "fingerprint": 121, "2015": 121, "nov": 121, "1664": 121, "71": 121, "rosenberg": 121, "monica": 121, "neuromark": 121, "whole": 121, "jan": [121, 122], "165": 121, "ultim": 122, "real": [122, 126], "world": [122, 126], "scenario": [122, 133, 134], "relationship": 122, "un": 122, "observ": 122, "potenti": [122, 126], "often": [122, 129, 134], "similarli": [122, 126], "rather": 122, "jointli": 122, "prevent": [122, 124], "laid": 122, "rel": [122, 127], "littl": 122, "involv": 122, "simul": 122, "artifici": [122, 127, 134], "normal_dist_conf_on": 122, "normal_dist_conf_two": 122, "noise_conf_on": 122, "rand": [122, 123], "noise_conf_two": 122, "multipli": 122, "factor": 122, "confound_on": 122, "confound_two": 122, "prefer": 122, "human": 122, "readabl": 122, "confound_1": 122, "confound_2": 122, "my_target": 122, "distinguish": [122, 127, 134], "predictor": 122, "accordingli": [122, 129], "think": 122, "parametris": 122, "initialis": [122, 127], "962": 122, "963": 122, "964": 122, "feature_0": 122, "965": 122, "967": 122, "968": 122, "969": 122, "22": [122, 126, 132], "032445": 122, "009315": 122, "031403": 122, "009128": 122, "031449": 122, "009143": 122, "031469": 122, "009064": 122, "031047": 122, "009228": 122, "slightli": 122, "target_confound_remov": 122, "0x7f01ed61a230": 122, "insert": 122, "importantli": [122, 123, 126, 129, 130, 134], "189": 122, "0x7f01ed1aafe0": 122, "190": 122, "191": 122, "193": 122, "194": 122, "210": 122, "space": 122, "224": 122, "239": 122, "253": 122, "267": [122, 134], "008787": 122, "005508": 122, "008136": 122, "005461": 122, "008102": 122, "005541": 122, "008072": 122, "005512": 122, "008131": 122, "005548": 122, "fashion": 122, "reason": [122, 123], "further": [122, 129], "consider": 122, "why": [122, 123, 124, 131], "mitig": 122, "bia": [122, 123], "accur": 122, "argu": 122, "appropri": 122, "valuabl": [122, 126, 129], "difficult": [122, 124], "challeng": 122, "ineffect": 122, "particular": [122, 126, 134], "fact": [122, 126], "collid": 122, "spuriou": 122, "evid": [122, 123], "leak": [122, 129], "bias": [122, 123], "care": [122, 134], "thorough": 122, "strength": 122, "limit": 122, "techniqu": [122, 123, 124, 126], "rao": 122, "anil": 122, "presenc": 122, "volum": [122, 123], "april": 122, "snoek": 122, "luka": 122, "184": [122, 132], "januari": 122, "2019": [122, 132], "741": 122, "he": 122, "tong": 122, "neural": [122, 134], "network": [122, 134], "206": 122, "februari": 122, "2020": 122, "116276": 122, "practic": [122, 123], "knowledg": [122, 126], "discoveri": 122, "databas": 122, "scienc": [122, 129], "demo": 122, "track": 122, "2021": 122, "12461": 122, "chyzhyk": 122, "darya": 122, "biomark": 122, "gigasci": 122, "holmberg": 122, "mathia": 122, "jama": 122, "1282": 122, "1283": 122, "1001": [122, 132], "1820": 122, "arxiv": 122, "2210": 122, "09232": 122, "revis": 122, "27": [122, 132], "oct": 122, "319": [122, 127], "mention": 123, "don": [123, 124], "_almost_": 123, "infinit": 123, "unbias": 123, "overestim": 123, "rememb": [123, 126, 133], "_unseen_": 123, "surpris": 123, "would": [123, 124, 130, 132, 134], "answer": 123, "imposs": 123, "bengio": 123, "grandvalet": 123, "colleagu": 123, "few": [123, 126, 129], "word": [123, 124], "thumb": [123, 134], "compromis": 123, "loocv": 123, "holdout": 123, "taken": 123, "intens": 123, "unconclus": 123, "intuit": [123, 126, 132], "direct": 123, "thread": 123, "emir": 123, "extrem": 123, "choic": 123, "fun": 123, "begin": 123, "variant": 123, "solv": [123, 129], "shed": 123, "light": 123, "poorli": 123, "stratifiedkfold": [123, 133], "rescu": 123, "matter": [123, 129, 132], "quantiz": 123, "divid": 123, "histplot": 123, "train_set": 123, "test_set": 123, "shrink": [123, 126], "suptitl": 123, "gaussian": 123, "almost": 123, "discrete_i": 123, "digit": 123, "kdeplot": 123, "layer": 123, "dash": 123, "repeatedcontinuousstratifiedkfold": [123, 135], "repeatedcontinuousstratifiedgroupkfold": 123, "jmlr": 123, "decemb": 123, "2004": 123, "1089": 123, "1105": 123, "stackexchang": 123, "61783": 123, "kohavi": 123, "ijcai": 123, "1137": 123, "1145": 123, "flower": 124, "pprint": [124, 126, 133], "pretti": 124, "tolist": [124, 132], "756": 124, "757": 124, "who": 124, "common": [124, 129], "creator2": [124, 132], "758": 124, "8099999999999999": 124, "816": 124, "etc": 124, "optimist": 124, "loop": 124, "873": 124, "scores_tun": 124, "model_tun": 124, "876": 124, "877": 124, "878": 124, "879": 124, "9100000000000001": 124, "tri": 124, "conclud": 124, "36": 124, "168": 124, "169": 124, "170": [124, 135], "171": 124, "172": 124, "173": 124, "174": 124, "mixtur": 124, "0001": 124, "093": 124, "094": 124, "095": 124, "select_k__k": 124, "388": 124, "389": 124, "390": 124, "391": 124, "393": 124, "concept": [124, 129], "receiv": 124, "gridsearchcv": 124, "veri": [124, 126, 127, 129, 130], "construct": 124, "diment": 124, "randomizedsearchcv": 124, "similar": [124, 127, 133, 134], "lot": [124, 126], "consum": 124, "501": 124, "those": [124, 129], "unnecessari": 124, "model1": 124, "503": 124, "504": 124, "505": 124, "507": 124, "508": 124, "509": 124, "511": 124, "512": 124, "93": 124, "forc": 124, "repat": 124, "creator1": [124, 132], "model2": 124, "768": [124, 126], "769": [124, 126], "770": [124, 126], "771": [124, 126], "772": [124, 126], "773": 124, "774": 124, "775": 124, "776": 124, "777": 124, "inde": [124, 133], "equival": 124, "param_grid": [124, 126], "stop": 124, "creator3": [124, 132], "max_depth": [124, 127], "creator4": 124, "penalti": 124, "l1": 124, "dual": 124, "solver": 124, "liblinear": 124, "model3": 124, "24": [124, 132, 135], "032": 124, "033": 124, "034": 124, "035": 124, "036": 124, "model__c": 124, "model__gamma": 124, "037": 124, "038": 124, "model__max_depth": 124, "039": 124, "040": 124, "model__penalti": 124, "041": 124, "042": 124, "043": 124, "044": 124, "045": 124, "046": 124, "9200000000000002": 124, "beat": 124, "gain": 126, "insight": 126, "impact": 126, "analyz": 126, "abil": 126, "critic": 126, "influenc": 126, "deploy": 126, "focu": [126, 130], "anomali": 126, "logger": [126, 127], "toi": [126, 127], "plai": 126, "penguin": 126, "penguins_df": 126, "island": 126, "queri": 126, "chinstrap": 126, "dropna": 126, "adeli": 126, "gentoo": 126, "687": 126, "fairli": 126, "geomspac": [126, 127], "1e2": [126, 127], "765": [126, 133], "notic": [126, 134], "nformat": 126, "766": 126, "bill_length_mm": 126, "bill_depth_mm": 126, "flipper_length_mm": 126, "body_mass_g": 126, "767": 126, "274": 126, "151": [126, 135], "quick": 126, "error_scor": 126, "nan": 126, "jucolumntransform": 126, "with_mean": [126, 134], "with_std": 126, "wrapmodel": 126, "break_ti": 126, "cache_s": 126, "class_weight": 126, "coef0": 126, "decision_function_shap": 126, "ovr": 126, "max_it": 126, "tol": 126, "estimator__memori": 126, "estimator__set_column_typ": 126, "estimator__set_column_types__x_typ": 126, "estimator__set_column_types__row_select_col_typ": 126, "estimator__set_column_types__row_select_v": 126, "estimator__step": 126, "estimator__svm": 126, "estimator__svm__c": 126, "estimator__svm__apply_to": 126, "estimator__svm__break_ti": 126, "estimator__svm__cache_s": 126, "estimator__svm__class_weight": 126, "estimator__svm__coef0": 126, "estimator__svm__decision_function_shap": 126, "estimator__svm__degre": 126, "estimator__svm__gamma": 126, "estimator__svm__kernel": 126, "estimator__svm__max_it": 126, "estimator__svm__model": 126, "estimator__svm__needed_typ": 126, "estimator__svm__prob": 126, "estimator__svm__random_st": 126, "estimator__svm__shrink": 126, "estimator__svm__tol": 126, "estimator__svm__verbos": 126, "estimator__verbos": 126, "estimator__zscor": 126, "estimator__zscore__apply_to": 126, "estimator__zscore__copi": 126, "estimator__zscore__nam": 126, "estimator__zscore__needed_typ": 126, "estimator__zscore__row_select_col_typ": 126, "estimator__zscore__row_select_v": 126, "estimator__zscore__transform": 126, "estimator__zscore__with_mean": 126, "estimator__zscore__with_std": 126, "pre_dispatch": 126, "refit": 126, "get_fitted_param": 126, "set_column_types__column_mapper_": 126, "bill_depth_mm__": 126, "bill_length_mm__": 126, "body_mass_g__": 126, "flipper_length_mm__": 126, "set_column_types__feature_names_in_": 126, "svm__model_": 126, "zscore__column_transformer_": 126, "remaind": 126, "passthrough": 126, "make_type_selector": 126, "0x7f01ed52cbe0": 126, "verbose_feature_names_out": 126, "zscore__feature_names_in_": 126, "zscore__mean_": 126, "70291971": 126, "83613139": 126, "202": 126, "17883212": 126, "4318": 126, "06569343": 126, "zscore__n_features_in_": 126, "zscore__n_samples_seen_": 126, "zscore__scale_": 126, "18607683": 126, "00973207": 126, "02045287": 126, "834": 126, "40628575": 126, "zscore__var_": 126, "68953929e": 126, "03902299e": 126, "25614004e": 126, "96233850e": 126, "somewhat": [126, 127], "structur": [126, 130], "made": [126, 131, 132], "handi": [126, 130, 134], "fold_predict": 126, "repeat8_p0": 126, "repeat9_p0": 126, "269": 126, "270": 126, "271": 126, "272": 126, "273": 126, "foldsinspector": 126, "_c_": 126, "c_valu": 126, "fold_inspector": 126, "fold_model": 126, "realis": 126, "ever": 126, "address": 126, "aris": 126, "serv": 126, "asset": 126, "transpar": [126, 129], "reliabl": 126, "capabl": [126, 127, 135], "navig": 126, "har": 126, "flexibl": 127, "cours": 127, "428": 127, "429": 127, "mind": 127, "arbitrari": [127, 133], "model_1": [127, 132], "431": 127, "00000000e": 127, "78255940e": 127, "74263683e": 127, "15443469e": 127, "99484250e": 127, "66810054e": 127, "64158883e": 127, "29154967e": 127, "59381366e": 127, "432": 127, "0x7f01ecfa7310": 127, "min_samples_leaf": 127, "min_samples_split": 127, "433": 127, "0x7f01ecfa4b80": 127, "0x7f01ecfa6c50": 127, "434": 127, "435": 127, "436": 127, "437": 127, "438": [127, 132], "439": 127, "rf__max_depth": 127, "rf__min_samples_leaf": 127, "rf__min_samples_split": 127, "440": 127, "desir": [127, 134], "type1": 127, "type2": 127, "type1_": 127, "type2_": 127, "38": [127, 132, 133], "311": [127, 134], "__type1": 127, "312": [127, 134], "0x7f01ed4521d0": 127, "__type2": 127, "0x7f01ed728fa0": 127, "314": [127, 134], "type1_1": 127, "type1_2": 127, "type1_3": 127, "type1_4": 127, "type1_5": 127, "type1_6": 127, "type1_7": 127, "type1_8": 127, "type1_9": 127, "type1_10": 127, "type2_1": 127, "type2_2": 127, "type2_3": 127, "type2_4": 127, "type2_5": 127, "type2_6": 127, "type2_7": 127, "type2_8": 127, "type2_9": 127, "type2_10": 127, "316": 127, "317": 127, "320": 127, "321": 127, "322": 127, "552": 127, "flexibli": 127, "Of": 127, "015": 127, "cover": [128, 130, 134], "far": [128, 130, 133, 134], "conist": 128, "manner": [128, 129, 130, 132, 134], "clear": 128, "105": [128, 135], "target_jutargetpipelin": 128, "0x7f01edce5fc0": 128, "106": 128, "107": 128, "108": [128, 135], "109": 128, "013520": 128, "004506": 128, "011750": 128, "004335": 128, "012493": 128, "004522": 128, "012309": 128, "004409": 128, "012320": 128, "004358": 128, "overal": 128, "goal": 129, "beyond": 129, "exact": 129, "domingo": 129, "2012": 129, "ressourc": 129, "efficeint": 129, "disadvantag": 129, "small": 129, "unstabl": 129, "overcom": 129, "resourc": 129, "accident": 129, "quickli": 129, "obviou": 129, "straightforward": [129, 134], "prone": [129, 132], "mistak": 129, "www": 129, "sciencedirect": 129, "articl": 129, "pii": 129, "s105381191630595x": 129, "natur": 129, "s41746": 129, "022": 129, "00592": 129, "s1053811917305311": 129, "cross_valid": [129, 131], "commun": 130, "capac": 130, "colum": 130, "manipul": 130, "anyth": [130, 133], "meaning": 130, "_sepal_": 130, "_petal_": 130, "hundr": 130, "thousand": 130, "saw": [130, 132, 133, 134], "parametr": [130, 134], "advanc": 130, "006": 130, "backbon": 131, "magic": 131, "goe": 131, "utmost": 131, "glanc": [131, 133], "chapter": 131, "ist": 131, "familiar": 131, "along": 131, "fundament": 131, "essenc": 131, "click": 131, "fanci": 131, "stuff": 131, "decent": 132, "benchmark": 132, "enough": 132, "tediou": 132, "sound": 132, "switch": 132, "breast": 132, "cancer": 132, "malign": 132, "benign": 132, "load_breast_canc": 132, "radiu": 132, "textur": 132, "perimet": 132, "area": 132, "smooth": 132, "compact": 132, "concav": 132, "symmetri": 132, "fractal": 132, "dimens": 132, "worst": 132, "122": [132, 135], "11840": 132, "27760": 132, "3001": 132, "14710": 132, "2419": 132, "07871": 132, "0950": 132, "9053": 132, "589": [132, 133], "153": 132, "006399": 132, "04904": 132, "05373": 132, "01587": 132, "03003": 132, "006193": 132, "33": 132, "1622": 132, "6656": 132, "7119": 132, "2654": 132, "4601": 132, "11890": 132, "57": 132, "132": 132, "1326": 132, "08474": 132, "07864": 132, "0869": 132, "07017": 132, "1812": 132, "05667": 132, "5435": 132, "7339": 132, "398": 132, "74": 132, "005225": 132, "01308": 132, "01860": 132, "01340": 132, "01389": 132, "003532": 132, "158": 132, "1956": 132, "1238": 132, "1866": 132, "2416": 132, "1860": 132, "2750": 132, "08902": 132, "69": 132, "130": 132, "1203": 132, "10960": 132, "15990": 132, "1974": 132, "12790": 132, "2069": 132, "05999": 132, "7456": 132, "7869": 132, "585": 132, "94": [132, 135], "006150": 132, "04006": 132, "03832": 132, "02058": 132, "02250": 132, "004571": 132, "1709": 132, "1444": 132, "4245": 132, "4504": 132, "2430": 132, "3613": 132, "08758": 132, "58": 132, "386": 132, "14250": 132, "28390": 132, "2414": 132, "10520": 132, "2597": 132, "09744": 132, "4956": 132, "1560": 132, "445": 132, "009110": 132, "07458": 132, "05661": 132, "01867": 132, "05963": 132, "009208": 132, "91": 132, "26": 132, "2098": 132, "8663": 132, "6869": 132, "2575": 132, "6638": 132, "17300": 132, "135": [132, 135], "1297": 132, "10030": 132, "13280": 132, "1980": 132, "10430": 132, "1809": 132, "05883": 132, "7572": 132, "7813": 132, "011490": 132, "02461": 132, "05688": 132, "01885": 132, "01756": 132, "005115": 132, "67": 132, "1575": 132, "1374": 132, "2050": 132, "4000": 132, "1625": 132, "2364": 132, "07678": 132, "cv_splitter": [132, 133], "902": 132, "903": 132, "905": 132, "907": 132, "908": 132, "909": 132, "357": 132, "212": 132, "121": 132, "472": [132, 134], "473": 132, "685": 132, "686": 132, "689": 132, "690": 132, "pairwis": 132, "neither": 132, "nor": 132, "946304": 132, "083461": 132, "250382": 132, "140882": 132, "891066": 132, "285373": 132, "048138": 132, "144413": 132, "361847": 132, "206356": 132, "619069": 132, "014156": 132, "989015": 132, "093249": 132, "302681": 132, "908044": 132, "dive": 132, "curiou": 132, "915": 132, "_iris_": 133, "523": 133, "524": 133, "525": 133, "526": 133, "006494": 133, "005987": 133, "003292": 133, "005944": 133, "003301": 133, "005948": 133, "003307": 133, "005946": 133, "933": 133, "overfit": 133, "587": 133, "588": 133, "591": 133, "006268": 133, "003324": 133, "006038": 133, "003297": 133, "006056": 133, "003294": 133, "006049": 133, "003271": 133, "005992": 133, "003260": 133, "train_scor": 133, "cryptic": 133, "verifi": 133, "worri": 133, "doesn": 133, "671": 133, "672": 133, "673": 133, "006208": 133, "003299": 133, "006097": 133, "003305": 133, "005959": 133, "003313": 133, "006083": 133, "003279": 133, "x27": 133, "rerun": 133, "cell": 133, "represent": 133, "trust": 133, "unabl": 133, "nbviewer": 133, "pipelinepipelin": 133, "setcolumntypessetcolumntyp": 133, "standardscalerstandardscal": 133, "svcsvc": 133, "weather": 133, "didn": 133, "got": 133, "five": 133, "back": 133, "ourselv": 133, "fourth": 133, "006436": 133, "003296": 133, "7449876d309382acfef94df9d102aa76": 133, "006070": 133, "003284": [133, 134], "003285": 133, "003235": 133, "005982": 133, "003263": 133, "006114": 133, "006117": 133, "003300": 133, "006101": 133, "003278": 133, "006178": 133, "003254": 133, "006130": 133, "assumpt": 133, "list_scor": 133, "adjusted_mutual_info_scor": 133, "adjusted_rand_scor": 133, "average_precis": 133, "completeness_scor": 133, "explained_vari": 133, "f1": 133, "f1_macro": 133, "f1_micro": 133, "f1_sampl": 133, "f1_weight": 133, "fowlkes_mallows_scor": 133, "homogeneity_scor": 133, "jaccard": 133, "jaccard_macro": 133, "jaccard_micro": 133, "jaccard_sampl": 133, "jaccard_weight": 133, "matthews_corrcoef": 133, "max_error": 133, "mutual_info_scor": 133, "neg_brier_scor": 133, "neg_log_loss": 133, "neg_mean_absolute_percentage_error": 133, "neg_mean_gamma_devi": 133, "neg_mean_poisson_devi": 133, "neg_mean_squared_error": 133, "neg_mean_squared_log_error": 133, "neg_median_absolute_error": 133, "neg_negative_likelihood_ratio": 133, "neg_root_mean_squared_error": 133, "normalized_mutual_info_scor": 133, "positive_likelihood_ratio": 133, "precision_macro": 133, "precision_micro": 133, "precision_sampl": 133, "precision_weight": 133, "rand_scor": 133, "recal": 133, "recall_macro": 133, "recall_micro": 133, "recall_sampl": 133, "recall_weight": 133, "roc_auc_ovo": 133, "roc_auc_ovo_weight": 133, "roc_auc_ovr": 133, "roc_auc_ovr_weight": 133, "top_k_accuraci": 133, "v_measure_scor": 133, "r_corr": 133, "916": 133, "917": 133, "918": 133, "919": 133, "006336": 133, "005133": 133, "006054": 133, "004996": 133, "006096": 133, "005021": 133, "006078": 133, "004992": 133, "006025": 133, "004986": 133, "006085": 133, "005044": 133, "005051": 133, "006187": 133, "005019": 133, "006191": 133, "005049": 133, "006166": 133, "005056": 133, "autom": 134, "pipe": 134, "fed": 134, "modifi": 134, "friendli": 134, "safe": 134, "263": 134, "264": 134, "265": 134, "268": 134, "004064": 134, "002358": 134, "003748": 134, "002263": 134, "003621": 134, "002201": 134, "003614": 134, "002270": 134, "002231": 134, "voil\u00e0": 134, "resembl": 134, "scaler": 134, "wish": 134, "006573": 134, "003387": 134, "006103": 134, "005995": 134, "003287": 134, "006115": 134, "003283": 134, "006051": 134, "003288": 134, "decomposit": 134, "previous": 134, "376": 134, "377": 134, "378": 134, "379": 134, "380": 134, "007761": 134, "004393": 134, "007630": 134, "004366": 134, "007566": 134, "004348": 134, "007704": 134, "004344": 134, "007593": 134, "004347": 134, "intranspar": 134, "simplifi": 134, "neat": 134, "functiona": 134, "455": 134, "456": 134, "457": 134, "458": 134, "459": 134, "460": 134, "007779": 134, "004327": 134, "007603": 134, "004328": 134, "007580": 134, "004375": 134, "007650": 134, "004367": 134, "004309": 134, "awesom": 134, "jump": 134, "aren": 134, "shouldn": 134, "ye": 134, "turn": 134, "_configur": 134, "learnt": 134, "experi": 134, "heurist": 134, "_tuned_": 134, "rate": 134, "sigma": 134, "sai": 134, "basi": 134, "comma": 134, "536": 134, "537": 134, "wonder": 134, "besid": 134, "definit": 134, "ref": 134, "data_usag": 134, "featuer": 134, "539": 134, "pca_1": 134, "540": 134, "_pca_": 134, "541": 134, "542": 134, "544": 134, "546": 134, "023632": 134, "009948": 134, "023098": 134, "009917": 134, "022352": 134, "009797": 134, "022555": 134, "009733": 134, "022357": 134, "009877": 134, "boser": 134, "guyon": 134, "vapnik": 134, "margin": 134, "colt": 134, "92": 134, "fifth": 134, "annual": 134, "workshop": 134, "theori": 134, "1992": 134, "jul": 134, "fede": 135, "surround": 135, "146": 135, "instruct": 135, "multiprocess": 135, "nos": 135, "extendeddataframepipelin": 135, "miss": 135, "tranform_until": 135, "63": 135, "minimum": 135, "face": 135, "create_pipelin": 135, "contin": 135, "register_model": 135}, "objects": {"julearn": [[1, 0, 1, "", "PipelineCreator"], [2, 0, 1, "", "TargetPipelineCreator"], [73, 3, 0, "-", "api"], [0, 3, 0, "-", "base"], [72, 3, 0, "-", "inspect"], [74, 3, 0, "-", "model_selection"], [75, 3, 0, "-", "models"], [76, 3, 0, "-", "pipeline"], [77, 3, 0, "-", "prepare"], [33, 5, 1, "", "run_cross_validation"], [78, 3, 0, "-", "scoring"], [79, 3, 0, "-", "stats"], [80, 3, 0, "-", "transformers"], [81, 3, 0, "-", "utils"], [82, 3, 0, "-", "viz"]], "julearn.PipelineCreator": [[1, 1, 1, "", "__init__"], [1, 1, 1, "", "add"], [1, 1, 1, "", "copy"], [1, 1, 1, "", "from_list"], [1, 1, 1, "", "has_model"], [1, 1, 1, "", "split"], [1, 2, 1, "", "steps"], [1, 1, 1, "", "to_pipeline"]], "julearn.TargetPipelineCreator": [[2, 1, 1, "", "__init__"], [2, 1, 1, "", "add"], [2, 1, 1, "", "to_pipeline"]], "julearn.base": [[3, 0, 1, "", "ColumnTypes"], [4, 4, 1, "", "ColumnTypesLike"], [5, 0, 1, "", "JuBaseEstimator"], [6, 0, 1, "", "JuTransformer"], [7, 0, 1, "", "WrapModel"], [8, 5, 1, "", "change_column_type"], [9, 5, 1, "", "ensure_column_types"], [10, 5, 1, "", "get_column_type"], [11, 5, 1, "", "make_type_selector"]], "julearn.base.ColumnTypes": [[3, 1, 1, "", "__init__"], [3, 1, 1, "", "add"], [3, 1, 1, "", "copy"], [3, 2, 1, "", "pattern"], [3, 1, 1, "", "to_type_selector"]], "julearn.base.JuBaseEstimator": [[5, 1, 1, "", "__init__"], [5, 1, 1, "", "filter_columns"], [5, 1, 1, "", "get_apply_to"], [5, 1, 1, "", "get_metadata_routing"], [5, 1, 1, "", "get_needed_types"], [5, 1, 1, "", "get_params"], [5, 1, 1, "", "set_params"]], "julearn.base.JuTransformer": [[6, 1, 1, "", "__init__"], [6, 1, 1, "", "filter_columns"], [6, 1, 1, "", "fit"], [6, 1, 1, "", "fit_transform"], [6, 1, 1, "", "get_apply_to"], [6, 1, 1, "", "get_metadata_routing"], [6, 1, 1, "", "get_needed_types"], [6, 1, 1, "", "get_params"], [6, 1, 1, "", "set_output"], [6, 1, 1, "", "set_params"]], "julearn.base.WrapModel": [[7, 1, 1, "", "__init__"], [7, 2, 1, "", "classes_"], [7, 1, 1, "", "decision_function"], [7, 1, 1, "", "filter_columns"], [7, 1, 1, "", "fit"], [7, 1, 1, "", "get_apply_to"], [7, 1, 1, "", "get_metadata_routing"], [7, 1, 1, "", "get_needed_types"], [7, 1, 1, "", "get_params"], [7, 1, 1, "", "predict"], [7, 1, 1, "", "predict_log_proba"], [7, 1, 1, "", "predict_proba"], [7, 1, 1, "", "score"], [7, 1, 1, "", "set_params"]], "julearn.inspect": [[12, 0, 1, "", "FoldsInspector"], [13, 0, 1, "", "Inspector"], [14, 5, 1, "", "preprocess"]], "julearn.inspect.FoldsInspector": [[12, 1, 1, "", "__init__"], [12, 1, 1, "", "decision_function"], [12, 1, 1, "", "predict"], [12, 1, 1, "", "predict_log_proba"], [12, 1, 1, "", "predict_proba"]], "julearn.inspect.Inspector": [[13, 1, 1, "", "__init__"], [13, 2, 1, "", "folds"], [13, 2, 1, "", "model"]], "julearn.model_selection": [[15, 0, 1, "", "ContinuousStratifiedGroupKFold"], [16, 0, 1, "", "ContinuousStratifiedKFold"], [17, 0, 1, "", "RepeatedContinuousStratifiedGroupKFold"], [18, 0, 1, "", "RepeatedContinuousStratifiedKFold"], [19, 0, 1, "", "StratifiedBootstrap"], [20, 5, 1, "", "get_searcher"], [21, 5, 1, "", "list_searchers"], [22, 5, 1, "", "register_searcher"], [23, 5, 1, "", "reset_searcher_register"]], "julearn.model_selection.ContinuousStratifiedGroupKFold": [[15, 1, 1, "", "__init__"], [15, 1, 1, "", "get_metadata_routing"], [15, 1, 1, "", "get_n_splits"], [15, 1, 1, "", "set_split_request"], [15, 1, 1, "", "split"]], "julearn.model_selection.ContinuousStratifiedKFold": [[16, 1, 1, "", "__init__"], [16, 1, 1, "", "get_metadata_routing"], [16, 1, 1, "", "get_n_splits"], [16, 1, 1, "", "split"]], "julearn.model_selection.RepeatedContinuousStratifiedGroupKFold": [[17, 1, 1, "", "__init__"], [17, 1, 1, "", "get_metadata_routing"], [17, 1, 1, "", "get_n_splits"], [17, 1, 1, "", "split"]], "julearn.model_selection.RepeatedContinuousStratifiedKFold": [[18, 1, 1, "", "__init__"], [18, 1, 1, "", "get_metadata_routing"], [18, 1, 1, "", "get_n_splits"], [18, 1, 1, "", "split"]], "julearn.model_selection.StratifiedBootstrap": [[19, 1, 1, "", "__init__"], [19, 1, 1, "", "get_metadata_routing"], [19, 1, 1, "", "get_n_splits"], [19, 1, 1, "", "split"]], "julearn.models": [[75, 3, 0, "-", "dynamic"], [25, 5, 1, "", "get_model"], [26, 5, 1, "", "list_models"], [27, 5, 1, "", "register_model"], [28, 5, 1, "", "reset_model_register"]], "julearn.models.dynamic": [[24, 0, 1, "", "DynamicSelection"]], "julearn.models.dynamic.DynamicSelection": [[24, 1, 1, "", "__init__"], [24, 1, 1, "", "fit"], [24, 1, 1, "", "get_metadata_routing"], [24, 1, 1, "", "get_params"], [24, 1, 1, "", "predict"], [24, 1, 1, "", "predict_proba"], [24, 1, 1, "", "score"], [24, 1, 1, "", "set_params"], [24, 1, 1, "", "set_score_request"]], "julearn.pipeline": [[29, 0, 1, "", "JuTargetPipeline"]], "julearn.pipeline.JuTargetPipeline": [[29, 1, 1, "", "__init__"], [29, 1, 1, "", "can_inverse_transform"], [29, 1, 1, "", "fit"], [29, 1, 1, "", "fit_transform"], [29, 1, 1, "", "inverse_transform"], [29, 2, 1, "", "needed_types"], [29, 1, 1, "", "transform"]], "julearn.pipeline.pipeline_creator": [[30, 0, 1, "", "Step"]], "julearn.pipeline.pipeline_creator.Step": [[30, 1, 1, "", "__init__"], [30, 4, 1, "", "apply_to"], [30, 4, 1, "", "estimator"], [30, 4, 1, "", "name"], [30, 4, 1, "", "needed_types"], [30, 4, 1, "", "params_to_tune"], [30, 4, 1, "", "row_select_col_type"], [30, 4, 1, "", "row_select_vals"]], "julearn.prepare": [[31, 5, 1, "", "check_consistency"], [32, 5, 1, "", "prepare_input_data"]], "julearn.scoring": [[34, 5, 1, "", "check_scoring"], [35, 5, 1, "", "get_scorer"], [36, 5, 1, "", "list_scorers"], [78, 3, 0, "-", "metrics"], [39, 5, 1, "", "register_scorer"], [40, 5, 1, "", "reset_scorer_register"]], "julearn.scoring.metrics": [[37, 5, 1, "", "r2_corr"], [38, 5, 1, "", "r_corr"]], "julearn.stats": [[41, 5, 1, "", "corrected_ttest"]], "julearn.transformers": [[42, 0, 1, "", "CBPM"], [43, 0, 1, "", "ChangeColumnTypes"], [44, 0, 1, "", "DropColumns"], [45, 0, 1, "", "FilterColumns"], [46, 0, 1, "", "JuColumnTransformer"], [47, 0, 1, "", "SetColumnTypes"], [49, 5, 1, "", "get_transformer"], [50, 5, 1, "", "list_transformers"], [51, 5, 1, "", "register_transformer"], [52, 5, 1, "", "reset_transformer_register"], [80, 3, 0, "-", "target"]], "julearn.transformers.CBPM": [[42, 1, 1, "", "__init__"], [42, 1, 1, "", "aggregate"], [42, 1, 1, "", "fit"], [42, 1, 1, "", "fit_transform"], [42, 1, 1, "", "get_feature_names_out"], [42, 1, 1, "", "get_metadata_routing"], [42, 1, 1, "", "get_params"], [42, 1, 1, "", "set_output"], [42, 1, 1, "", "set_params"], [42, 1, 1, "", "transform"]], "julearn.transformers.ChangeColumnTypes": [[43, 1, 1, "", "__init__"], [43, 1, 1, "", "filter_columns"], [43, 1, 1, "", "fit"], [43, 1, 1, "", "fit_transform"], [43, 1, 1, "", "get_apply_to"], [43, 1, 1, "", "get_feature_names_out"], [43, 1, 1, "", "get_metadata_routing"], [43, 1, 1, "", "get_needed_types"], [43, 1, 1, "", "get_params"], [43, 1, 1, "", "set_output"], [43, 1, 1, "", "set_params"], [43, 1, 1, "", "transform"]], "julearn.transformers.DropColumns": [[44, 1, 1, "", "__init__"], [44, 1, 1, "", "filter_columns"], [44, 1, 1, "", "fit"], [44, 1, 1, "", "fit_transform"], [44, 1, 1, "", "get_apply_to"], [44, 1, 1, "", "get_metadata_routing"], [44, 1, 1, "", "get_needed_types"], [44, 1, 1, "", "get_params"], [44, 1, 1, "", "get_support"], [44, 1, 1, "", "set_output"], [44, 1, 1, "", "set_params"], [44, 1, 1, "", "transform"]], "julearn.transformers.FilterColumns": [[45, 1, 1, "", "__init__"], [45, 1, 1, "", "filter_columns"], [45, 1, 1, "", "fit"], [45, 1, 1, "", "fit_transform"], [45, 1, 1, "", "get_apply_to"], [45, 1, 1, "", "get_feature_names_out"], [45, 1, 1, "", "get_metadata_routing"], [45, 1, 1, "", "get_needed_types"], [45, 1, 1, "", "get_params"], [45, 1, 1, "", "set_output"], [45, 1, 1, "", "set_params"], [45, 1, 1, "", "transform"]], "julearn.transformers.JuColumnTransformer": [[46, 1, 1, "", "__init__"], [46, 1, 1, "", "filter_columns"], [46, 1, 1, "", "fit"], [46, 1, 1, "", "fit_transform"], [46, 1, 1, "", "get_apply_to"], [46, 1, 1, "", "get_feature_names_out"], [46, 1, 1, "", "get_metadata_routing"], [46, 1, 1, "", "get_needed_types"], [46, 1, 1, "", "get_params"], [46, 1, 1, "", "set_output"], [46, 1, 1, "", "set_params"], [46, 1, 1, "", "transform"]], "julearn.transformers.SetColumnTypes": [[47, 1, 1, "", "__init__"], [47, 1, 1, "", "filter_columns"], [47, 1, 1, "", "fit"], [47, 1, 1, "", "fit_transform"], [47, 1, 1, "", "get_apply_to"], [47, 1, 1, "", "get_feature_names_out"], [47, 1, 1, "", "get_metadata_routing"], [47, 1, 1, "", "get_needed_types"], [47, 1, 1, "", "get_params"], [47, 1, 1, "", "set_output"], [47, 1, 1, "", "set_params"], [47, 1, 1, "", "transform"]], "julearn.transformers.confound_remover": [[48, 0, 1, "", "ConfoundRemover"]], "julearn.transformers.confound_remover.ConfoundRemover": [[48, 1, 1, "", "__init__"], [48, 1, 1, "", "filter_columns"], [48, 1, 1, "", "fit"], [48, 1, 1, "", "fit_transform"], [48, 1, 1, "", "get_apply_to"], [48, 1, 1, "", "get_feature_names_out"], [48, 1, 1, "", "get_metadata_routing"], [48, 1, 1, "", "get_needed_types"], [48, 1, 1, "", "get_params"], [48, 1, 1, "", "get_support"], [48, 1, 1, "", "set_output"], [48, 1, 1, "", "set_params"], [48, 1, 1, "", "transform"]], "julearn.transformers.target": [[53, 0, 1, "", "JuTargetTransformer"], [54, 0, 1, "", "JuTransformedTargetModel"], [55, 0, 1, "", "TargetConfoundRemover"], [56, 0, 1, "", "TransformedTargetWarning"], [57, 5, 1, "", "get_target_transformer"], [58, 5, 1, "", "list_target_transformers"], [59, 5, 1, "", "register_target_transformer"], [60, 5, 1, "", "reset_target_transformer_register"]], "julearn.transformers.target.JuTargetTransformer": [[53, 1, 1, "", "__init__"], [53, 1, 1, "", "fit"], [53, 1, 1, "", "fit_transform"], [53, 1, 1, "", "transform"]], "julearn.transformers.target.JuTransformedTargetModel": [[54, 1, 1, "", "__init__"], [54, 2, 1, "", "classes_"], [54, 1, 1, "", "decision_function"], [54, 1, 1, "", "filter_columns"], [54, 1, 1, "", "fit"], [54, 1, 1, "", "get_apply_to"], [54, 1, 1, "", "get_metadata_routing"], [54, 1, 1, "", "get_needed_types"], [54, 1, 1, "", "get_params"], [54, 1, 1, "", "predict"], [54, 1, 1, "", "predict_proba"], [54, 1, 1, "", "score"], [54, 1, 1, "", "set_params"], [54, 1, 1, "", "transform_target"]], "julearn.transformers.target.TargetConfoundRemover": [[55, 1, 1, "", "__init__"], [55, 1, 1, "", "fit"], [55, 1, 1, "", "fit_transform"], [55, 2, 1, "", "needed_types"], [55, 1, 1, "", "transform"]], "julearn.transformers.target.TransformedTargetWarning": [[56, 1, 1, "", "__init__"], [56, 4, 1, "", "args"], [56, 1, 1, "", "with_traceback"]], "julearn.utils": [[61, 5, 1, "", "configure_logging"], [62, 4, 1, "", "logger"], [63, 5, 1, "", "raise_error"], [81, 3, 0, "-", "typing"], [69, 5, 1, "", "warn_with_log"]], "julearn.utils.typing": [[64, 4, 1, "", "EstimatorLike"], [65, 0, 1, "", "EstimatorLikeFit1"], [66, 0, 1, "", "EstimatorLikeFit2"], [67, 0, 1, "", "EstimatorLikeFity"], [68, 0, 1, "", "JuEstimatorLike"]], "julearn.utils.typing.EstimatorLikeFit1": [[65, 1, 1, "", "__init__"], [65, 1, 1, "", "fit"], [65, 1, 1, "", "get_params"], [65, 1, 1, "", "set_params"]], "julearn.utils.typing.EstimatorLikeFit2": [[66, 1, 1, "", "__init__"], [66, 1, 1, "", "fit"], [66, 1, 1, "", "get_params"], [66, 1, 1, "", "set_params"]], "julearn.utils.typing.EstimatorLikeFity": [[67, 1, 1, "", "__init__"], [67, 1, 1, "", "fit"], [67, 1, 1, "", "get_params"], [67, 1, 1, "", "set_params"]], "julearn.utils.typing.JuEstimatorLike": [[68, 1, 1, "", "__init__"], [68, 1, 1, "", "fit"], [68, 1, 1, "", "get_apply_to"], [68, 1, 1, "", "get_needed_types"], [68, 1, 1, "", "get_params"], [68, 1, 1, "", "set_params"]], "julearn.viz": [[70, 5, 1, "", "plot_scores"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:module", "4": "py:attribute", "5": "py:function"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "module", "Python module"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "function", "Python function"]}, "titleterms": {"base": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 121], "julearn": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 83, 115, 117, 119, 121, 122, 135], "pipelinecr": [1, 134], "exampl": [1, 2, 13, 14, 16, 19, 33, 36, 39, 41, 61, 70, 115, 116], "us": [1, 2, 13, 14, 16, 19, 33, 36, 39, 41, 61, 70, 109, 117, 122, 134], "targetpipelinecr": 2, "columntyp": 3, "columntypeslik": 4, "jubaseestim": 5, "jutransform": 6, "wrapmodel": 7, "change_column_typ": 8, "ensure_column_typ": 9, "get_column_typ": 10, "make_type_selector": 11, "inspect": [12, 13, 14, 72, 94, 95, 96, 98, 126], "foldsinspector": 12, "inspector": 13, "preprocess": [14, 97, 128, 134], "model_select": [15, 16, 17, 18, 19, 20, 21, 22, 23], "continuousstratifiedgroupkfold": 15, "continuousstratifiedkfold": 16, "repeatedcontinuousstratifiedgroupkfold": 17, "repeatedcontinuousstratifiedkfold": 18, "stratifiedbootstrap": 19, "get_search": 20, "list_search": 21, "register_search": 22, "reset_searcher_regist": 23, "model": [24, 25, 26, 27, 28, 74, 75, 91, 92, 95, 96, 100, 108, 114, 121, 124, 126, 127, 132, 133, 134], "dynam": [24, 75, 114], "dynamicselect": 24, "get_model": 25, "list_model": 26, "register_model": 27, "reset_model_regist": 28, "pipelin": [29, 30, 76, 114, 134], "jutargetpipelin": 29, "pipeline_cr": 30, "step": [30, 114], "prepar": [31, 32, 77], "check_consist": 31, "prepare_input_data": 32, "run_cross_valid": [33, 129, 130, 133, 134], "score": [34, 35, 36, 37, 38, 39, 40, 78, 101, 112, 132, 133], "check_scor": 34, "get_scor": 35, "list_scor": 36, "metric": [37, 38, 78, 133], "r2_corr": 37, "r_corr": 38, "register_scor": 39, "reset_scorer_regist": 40, "stat": [41, 79], "corrected_ttest": 41, "transform": [42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 80, 101, 114], "cbpm": [42, 121], "changecolumntyp": 43, "dropcolumn": 44, "filtercolumn": 45, "jucolumntransform": 46, "setcolumntyp": 47, "confound_remov": 48, "confoundremov": 48, "get_transform": 49, "list_transform": 50, "register_transform": 51, "reset_transformer_regist": 52, "target": [53, 54, 55, 56, 57, 58, 59, 60, 80, 101, 122, 128], "jutargettransform": 53, "jutransformedtargetmodel": 54, "targetconfoundremov": 55, "transformedtargetwarn": 56, "get_target_transform": 57, "list_target_transform": 58, "register_target_transform": 59, "reset_target_transformer_regist": 60, "util": [61, 62, 63, 64, 65, 66, 67, 68, 69, 81], "configure_log": 61, "logger": 62, "raise_error": 63, "type": [64, 65, 66, 67, 68, 81, 127, 130, 134], "estimatorlik": 64, "estimatorlikefit1": 65, "estimatorlikefit2": 66, "estimatorlikef": 67, "juestimatorlik": 68, "warn_with_log": 69, "viz": [70, 117], "plot_scor": 70, "refer": [71, 87, 88, 95, 103, 104, 121, 122, 123, 129, 134], "main": 73, "api": [73, 135], "select": [74, 75, 114, 125, 134], "deslib": 75, "vizual": 82, "start": [83, 118], "multiclass": 84, "classif": [84, 89, 105], "regress": [85, 86, 102, 112, 122], "analysi": [85, 86, 102], "stratifi": 86, "k": 86, "fold": [86, 98], "cv": [86, 88], "work": 87, "panda": 87, "from": [87, 122], "long": 87, "wide": 87, "format": 87, "merg": 87, "join": 87, "data": [87, 130], "frame": 87, "reshap": 87, "more": [87, 124], "complex": [87, 100], "group": [88, 123], "deal": [88, 95], "cross": [88, 95, 122, 123, 129, 133], "valid": [88, 95, 122, 123, 129, 133], "techniqu": [88, 95], "simpl": [89, 92], "binari": 89, "comput": [90, 93, 99, 106, 110, 113], "time": [90, 93, 99, 106, 110, 113], "comparison": [91, 92, 108, 132], "svm": 95, "random": 96, "forest": 96, "variabl": [96, 101], "import": 96, "varianc": 97, "threshold": 97, "zscore": 97, "pca": 97, "wise": 98, "predict": [98, 121], "z": 101, "tune": [103, 104, 124], "multipl": 103, "hyperparamet": [103, 104, 124, 134], "grid": [103, 124], "stack": [105, 127], "confound": [107, 108, 109, 122], "remov": [108, 109, 122], "return": [109, 133], "typic": 109, "case": 109, "custom": [111, 112, 114], "function": 112, "overview": 114, "avail": 114, "scaler": 114, "featur": [114, 122, 127, 130, 134, 135], "datafram": 114, "oper": 114, "decomposit": 114, "estim": [114, 127, 133], "support": 114, "vector": 114, "machin": 114, "ensembl": 114, "gaussian": 114, "process": 114, "linear": 114, "naiv": 114, "bay": 114, "dummi": 114, "contribut": 115, "set": [115, 134], "up": 115, "local": 115, "develop": 115, "environ": 115, "github": 115, "pull": 115, "request": 115, "guidelin": 115, "run": 115, "unit": 115, "test": 115, "ad": 115, "build": [115, 134], "document": [115, 119, 135], "write": 115, "content": [116, 119, 125], "frequenli": 117, "ask": 117, "question": 117, "2": [117, 135], "how": 117, "do": 117, "i": [117, 119, 122], "interact": 117, "plot": 117, "get": 118, "requir": 118, "setup": 118, "suggest": 118, "instal": 118, "option": 118, "depend": 118, "welcom": 119, "": [119, 135], "what": [119, 131, 135], "why": [119, 129], "tabl": [119, 125], "indic": 119, "maintain": 120, "version": 120, "releas": 120, "new": [120, 135], "connectom": 121, "consist": 122, "should": 122, "splitter": [123, 133], "stratif": 123, "paramet": 124, "v": 124, "searcher": 124, "than": 124, "one": 124, "deeper": 125, "topic": 125, "fit": 127, "each": 127, "all": 127, "specif": [127, 134], "appli": 128, "The": [129, 133], "fundament": 129, "essenc": 129, "input": 130, "give": 130, "you": 131, "realli": 131, "need": 131, "know": 131, "statist": 132, "visual": 132, "evalu": 133, "output": 133, "made": 134, "easi": 134, "0": 135, "3": 135, "dev222": 135, "2023": 135, "07": 135, "10": 135, "bugfix": 135, "enhanc": 135, "5": 135, "2022": 135, "21": 135, "chang": 135, "improv": 135}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"Base": [[0, "module-julearn.base"]], "julearn.PipelineCreator": [[1, "julearn-pipelinecreator"]], "Examples using julearn.PipelineCreator": [[1, "examples-using-julearn-pipelinecreator"]], "julearn.TargetPipelineCreator": [[2, "julearn-targetpipelinecreator"]], "Examples using julearn.TargetPipelineCreator": [[2, "examples-using-julearn-targetpipelinecreator"]], "julearn.base.ColumnTypes": [[3, "julearn-base-columntypes"]], "julearn.base.ColumnTypesLike": [[4, "julearn-base-columntypeslike"]], "julearn.base.JuBaseEstimator": [[5, "julearn-base-jubaseestimator"]], "julearn.base.JuTransformer": [[6, "julearn-base-jutransformer"]], "julearn.base.WrapModel": [[7, "julearn-base-wrapmodel"]], "julearn.base.change_column_type": [[8, "julearn-base-change-column-type"]], "julearn.base.ensure_column_types": [[9, "julearn-base-ensure-column-types"]], "julearn.base.get_column_type": [[10, "julearn-base-get-column-type"]], "julearn.base.make_type_selector": [[11, "julearn-base-make-type-selector"]], "julearn.inspect.FoldsInspector": [[12, "julearn-inspect-foldsinspector"]], "julearn.inspect.Inspector": [[13, "julearn-inspect-inspector"]], "Examples using julearn.inspect.Inspector": [[13, "examples-using-julearn-inspect-inspector"]], "julearn.inspect.preprocess": [[14, "julearn-inspect-preprocess"]], "Examples using julearn.inspect.preprocess": [[14, "examples-using-julearn-inspect-preprocess"]], "julearn.model_selection.ContinuousStratifiedGroupKFold": [[15, "julearn-model-selection-continuousstratifiedgroupkfold"]], "julearn.model_selection.ContinuousStratifiedKFold": [[16, "julearn-model-selection-continuousstratifiedkfold"]], "Examples using julearn.model_selection.ContinuousStratifiedKFold": [[16, "examples-using-julearn-model-selection-continuousstratifiedkfold"]], "julearn.model_selection.RepeatedContinuousStratifiedGroupKFold": [[17, "julearn-model-selection-repeatedcontinuousstratifiedgroupkfold"]], "julearn.model_selection.RepeatedContinuousStratifiedKFold": [[18, "julearn-model-selection-repeatedcontinuousstratifiedkfold"]], "julearn.model_selection.StratifiedBootstrap": [[19, "julearn-model-selection-stratifiedbootstrap"]], "Examples using julearn.model_selection.StratifiedBootstrap": [[19, "examples-using-julearn-model-selection-stratifiedbootstrap"]], "julearn.model_selection.get_searcher": [[20, "julearn-model-selection-get-searcher"]], "julearn.model_selection.list_searchers": [[21, "julearn-model-selection-list-searchers"]], "julearn.model_selection.register_searcher": [[22, "julearn-model-selection-register-searcher"]], "julearn.model_selection.reset_searcher_register": [[23, "julearn-model-selection-reset-searcher-register"]], "julearn.models.dynamic.DynamicSelection": [[24, "julearn-models-dynamic-dynamicselection"]], "julearn.models.get_model": [[25, "julearn-models-get-model"]], "julearn.models.list_models": [[26, "julearn-models-list-models"]], "julearn.models.register_model": [[27, "julearn-models-register-model"]], "julearn.models.reset_model_register": [[28, "julearn-models-reset-model-register"]], "julearn.pipeline.JuTargetPipeline": [[29, "julearn-pipeline-jutargetpipeline"]], "julearn.pipeline.pipeline_creator.Step": [[30, "julearn-pipeline-pipeline-creator-step"]], "julearn.prepare.check_consistency": [[31, "julearn-prepare-check-consistency"]], "julearn.prepare.prepare_input_data": [[32, "julearn-prepare-prepare-input-data"]], "julearn.run_cross_validation": [[33, "julearn-run-cross-validation"]], "Examples using julearn.run_cross_validation": [[33, "examples-using-julearn-run-cross-validation"]], "julearn.scoring.check_scoring": [[34, "julearn-scoring-check-scoring"]], "julearn.scoring.get_scorer": [[35, "julearn-scoring-get-scorer"]], "julearn.scoring.list_scorers": [[36, "julearn-scoring-list-scorers"]], "Examples using julearn.scoring.list_scorers": [[36, "examples-using-julearn-scoring-list-scorers"]], "julearn.scoring.metrics.r2_corr": [[37, "julearn-scoring-metrics-r2-corr"]], "julearn.scoring.metrics.r_corr": [[38, "julearn-scoring-metrics-r-corr"]], "julearn.scoring.register_scorer": [[39, "julearn-scoring-register-scorer"]], "Examples using julearn.scoring.register_scorer": [[39, "examples-using-julearn-scoring-register-scorer"]], "julearn.scoring.reset_scorer_register": [[40, "julearn-scoring-reset-scorer-register"]], "julearn.stats.corrected_ttest": [[41, "julearn-stats-corrected-ttest"]], "Examples using julearn.stats.corrected_ttest": [[41, "examples-using-julearn-stats-corrected-ttest"]], "julearn.transformers.CBPM": [[42, "julearn-transformers-cbpm"]], "julearn.transformers.ChangeColumnTypes": [[43, "julearn-transformers-changecolumntypes"]], "julearn.transformers.DropColumns": [[44, "julearn-transformers-dropcolumns"]], "julearn.transformers.FilterColumns": [[45, "julearn-transformers-filtercolumns"]], "julearn.transformers.JuColumnTransformer": [[46, "julearn-transformers-jucolumntransformer"]], "julearn.transformers.SetColumnTypes": [[47, "julearn-transformers-setcolumntypes"]], "julearn.transformers.confound_remover.ConfoundRemover": [[48, "julearn-transformers-confound-remover-confoundremover"]], "julearn.transformers.get_transformer": [[49, "julearn-transformers-get-transformer"]], "julearn.transformers.list_transformers": [[50, "julearn-transformers-list-transformers"]], "julearn.transformers.register_transformer": [[51, "julearn-transformers-register-transformer"]], "julearn.transformers.reset_transformer_register": [[52, "julearn-transformers-reset-transformer-register"]], "julearn.transformers.target.JuTargetTransformer": [[53, "julearn-transformers-target-jutargettransformer"]], "julearn.transformers.target.JuTransformedTargetModel": [[54, "julearn-transformers-target-jutransformedtargetmodel"]], "julearn.transformers.target.TargetConfoundRemover": [[55, "julearn-transformers-target-targetconfoundremover"]], "julearn.transformers.target.TransformedTargetWarning": [[56, "julearn-transformers-target-transformedtargetwarning"]], "julearn.transformers.target.get_target_transformer": [[57, "julearn-transformers-target-get-target-transformer"]], "julearn.transformers.target.list_target_transformers": [[58, "julearn-transformers-target-list-target-transformers"]], "julearn.transformers.target.register_target_transformer": [[59, "julearn-transformers-target-register-target-transformer"]], "julearn.transformers.target.reset_target_transformer_register": [[60, "julearn-transformers-target-reset-target-transformer-register"]], "julearn.utils.configure_logging": [[61, "julearn-utils-configure-logging"]], "Examples using julearn.utils.configure_logging": [[61, "examples-using-julearn-utils-configure-logging"]], "julearn.utils.logger": [[62, "julearn-utils-logger"]], "julearn.utils.raise_error": [[63, "julearn-utils-raise-error"]], "julearn.utils.typing.EstimatorLike": [[64, "julearn-utils-typing-estimatorlike"]], "julearn.utils.typing.EstimatorLikeFit1": [[65, "julearn-utils-typing-estimatorlikefit1"]], "julearn.utils.typing.EstimatorLikeFit2": [[66, "julearn-utils-typing-estimatorlikefit2"]], "julearn.utils.typing.EstimatorLikeFity": [[67, "julearn-utils-typing-estimatorlikefity"]], "julearn.utils.typing.JuEstimatorLike": [[68, "julearn-utils-typing-juestimatorlike"]], "julearn.utils.warn_with_log": [[69, "julearn-utils-warn-with-log"]], "julearn.viz.plot_scores": [[70, "julearn-viz-plot-scores"]], "Examples using julearn.viz.plot_scores": [[70, "examples-using-julearn-viz-plot-scores"]], "Reference": [[71, "reference"]], "Inspect": [[72, "module-julearn.inspect"]], "Main API": [[73, "module-julearn.api"]], "Model Selection": [[74, "module-julearn.model_selection"]], "Models": [[75, "module-julearn.models"]], "Dynamic Selection (DESLib)": [[75, "dynamic-selection-deslib"]], "Pipeline": [[76, "module-julearn.pipeline"]], "Prepare": [[77, "module-julearn.prepare"]], "Scoring": [[78, "module-julearn.scoring"]], "Scoring Metrics": [[78, "module-julearn.scoring.metrics"]], "Stats": [[79, "module-julearn.stats"]], "Transformers": [[80, "module-julearn.transformers"], [114, "transformers"]], "Target Transformers": [[80, "module-julearn.transformers.target"]], "Utils": [[81, "module-julearn.utils"]], "Typing": [[81, "module-julearn.utils.typing"]], "Vizualization": [[82, "vizualization"]], "Starting with julearn": [[83, "starting-with-julearn"]], "Multiclass Classification.": [[84, "multiclass-classification"]], "Regression Analysis": [[85, "regression-analysis"], [102, "regression-analysis"]], "Stratified K-fold CV for regression analysis": [[86, "stratified-k-fold-cv-for-regression-analysis"]], "Working with pandas": [[87, "working-with-pandas"]], "References": [[87, "references"], [88, "references"], [95, "references"], [103, "references"], [104, "references"]], "From long to wide format": [[87, "from-long-to-wide-format"]], "Merging or joining data frames": [[87, "merging-or-joining-data-frames"]], "Reshaping data frames (more complex)": [[87, "reshaping-data-frames-more-complex"]], "Grouped CV.": [[88, "grouped-cv"]], "Dealing with Cross-Validation techniques": [[88, "dealing-with-cross-validation-techniques"], [95, "dealing-with-cross-validation-techniques"]], "Simple Binary Classification": [[89, "simple-binary-classification"]], "Computation times": [[90, "computation-times"], [93, "computation-times"], [99, "computation-times"], [106, "computation-times"], [110, "computation-times"], [113, "computation-times"]], "Model Comparison": [[91, "model-comparison"]], "Simple Model Comparison": [[92, "simple-model-comparison"]], "Inspection": [[94, "inspection"]], "Inspecting SVM models.": [[95, "inspecting-svm-models"]], "Inspecting Random Forest models": [[96, "inspecting-random-forest-models"]], "Random Forest variable importance": [[96, "random-forest-variable-importance"]], "Preprocessing with variance threshold, zscore and PCA": [[97, "preprocessing-with-variance-threshold-zscore-and-pca"]], "Inspecting the fold-wise predictions": [[98, "inspecting-the-fold-wise-predictions"]], "Complex Models": [[100, "complex-models"]], "Transforming target variable with z-score.": [[101, "transforming-target-variable-with-z-score"]], "Tuning Multiple Hyperparameters Grids": [[103, "tuning-multiple-hyperparameters-grids"]], "Tuning Hyperparameters": [[104, "tuning-hyperparameters"]], "Stacking Classification": [[105, "stacking-classification"]], "Confounds": [[107, "confounds"]], "Confound Removal (model comparison)": [[108, "confound-removal-model-comparison"]], "Return Confounds in Confound Removal": [[109, "return-confounds-in-confound-removal"]], "Confound Removal Typical Use Case": [[109, "confound-removal-typical-use-case"]], "Customization": [[111, "customization"]], "Custom Scoring Function for Regression": [[112, "custom-scoring-function-for-regression"]], "Overview of available Pipeline Steps": [[114, "overview-of-available-pipeline-steps"]], "Scalers": [[114, "scalers"]], "Feature Selection": [[114, "feature-selection"]], "DataFrame operations": [[114, "dataframe-operations"]], "Decomposition": [[114, "decomposition"]], "Custom": [[114, "custom"]], "Models (Estimators)": [[114, "models-estimators"]], "Support Vector Machines": [[114, "support-vector-machines"]], "Ensemble": [[114, "ensemble"]], "Gaussian Processes": [[114, "gaussian-processes"]], "Linear Models": [[114, "linear-models"]], "Naive Bayes": [[114, "naive-bayes"]], "Dynamic Selection": [[114, "dynamic-selection"]], "Dummy": [[114, "dummy"]], "Contributing to julearn": [[115, "contributing-to-julearn"]], "Setting up the local development environment": [[115, "setting-up-the-local-development-environment"]], "GitHub Pull Request guidelines": [[115, "github-pull-request-guidelines"]], "Running unit tests": [[115, "running-unit-tests"]], "Adding and building documentation": [[115, "adding-and-building-documentation"]], "Writing Examples": [[115, "writing-examples"]], "Examples": [[116, "examples"]], "Contents:": [[116, null]], "Frequenly Asked Questions": [[117, "frequenly-asked-questions"]], "2. How do I use the julearn viz interactive plots?": [[117, "how-do-i-use-the-julearn-viz-interactive-plots"]], "Getting started": [[118, "getting-started"]], "Requirements": [[118, "requirements"]], "Setup suggestion": [[118, "setup-suggestion"]], "Installing": [[118, "installing"]], "Optional Dependencies": [[118, "optional-dependencies"]], "Welcome to julearn\u2019s documentation!": [[119, "welcome-to-julearn-s-documentation"]], "What is Julearn?": [[119, "what-is-julearn"]], "Why Julearn?": [[119, "why-julearn"]], "Table of Contents": [[119, "table-of-contents"], [125, null]], "Indices and tables": [[119, "indices-and-tables"]], "Maintaining": [[120, "maintaining"]], "Versioning": [[120, "versioning"]], "Releasing a new version": [[120, "releasing-a-new-version"]], "Connectome-based Predictive Modeling (CBPM)": [[121, "connectome-based-predictive-modeling-cbpm"]], "CBPM in Julearn": [[121, "cbpm-in-julearn"]], "References:": [[121, null], [122, null], [123, null], [129, null], [134, null]], "Cross-validation consistent Confound Removal": [[122, "cross-validation-consistent-confound-removal"]], "Confound Removal in Julearn": [[122, "confound-removal-in-julearn"]], "Removing Confounds from the Features": [[122, "removing-confounds-from-the-features"]], "Removing Confounds from the Target": [[122, "removing-confounds-from-the-target"]], "Should I use Confound Regression?": [[122, "should-i-use-confound-regression"]], "Cross-validation splitters": [[123, "cross-validation-splitters"], [133, "cross-validation-splitters"]], "Stratification": [[123, "stratification"]], "Grouping": [[123, "grouping"]], "Hyperparameter Tuning": [[124, "hyperparameter-tuning"], [124, "id1"]], "Parameters vs Hyperparameters": [[124, "parameters-vs-hyperparameters"]], "Searchers": [[124, "searchers"]], "Tuning more than one grid": [[124, "tuning-more-than-one-grid"]], "Models as hyperparameters": [[124, "models-as-hyperparameters"]], "Selected deeper topics": [[125, "selected-deeper-topics"]], "Inspecting Models": [[126, "inspecting-models"]], "Stacking Models": [[127, "stacking-models"]], "Fitting each estimator on all of the features": [[127, "fitting-each-estimator-on-all-of-the-features"]], "Fitting each estimator on a specific feature type": [[127, "fitting-each-estimator-on-a-specific-feature-type"]], "Applying preprocessing to the target": [[128, "applying-preprocessing-to-the-target"]], "Why cross validation?": [[129, "why-cross-validation"]], "Cross-validation - The fundamentals": [[129, "cross-validation-the-fundamentals"]], "The essence of run_cross_validation()": [[129, "the-essence-of-run-cross-validation"]], "Data": [[130, "data"]], "Data input to run_cross_validation()": [[130, "data-input-to-run-cross-validation"]], "Giving types to features": [[130, "giving-types-to-features"]], "What you really need to know": [[131, "what-you-really-need-to-know"]], "Model comparison": [[132, "model-comparison"]], "Statistical comparisons": [[132, "statistical-comparisons"]], "Score visualizations": [[132, "score-visualizations"]], "Model evaluation": [[133, "model-evaluation"]], "The output of run_cross_validation()": [[133, "the-output-of-run-cross-validation"]], "Cross-validation scores": [[133, "cross-validation-scores"]], "Returning a model (estimator)": [[133, "returning-a-model-estimator"]], "Scoring metrics": [[133, "scoring-metrics"]], "Model Building": [[134, "model-building"]], "Pipeline specification in run_cross_validation()": [[134, "pipeline-specification-in-run-cross-validation"]], "Feature preprocessing": [[134, "feature-preprocessing"]], "Pipeline specification made easy with the PipelineCreator": [[134, "pipeline-specification-made-easy-with-the-pipelinecreator"]], "Setting hyperparameters": [[134, "setting-hyperparameters"]], "Selective preprocessing using feature types": [[134, "selective-preprocessing-using-feature-types"]], "What\u2019s new": [[135, "what-s-new"]], "Julearn 0.3.0.dev222 (2023-07-10)": [[135, "julearn-0-3-0-dev222-2023-07-10"]], "Bugfixes": [[135, "bugfixes"], [135, "id1"]], "Enhancements": [[135, "enhancements"], [135, "id2"]], "Features": [[135, "features"], [135, "id3"]], "Julearn 0.2.5 (2022-07-21)": [[135, "julearn-0-2-5-2022-07-21"]], "API Changes": [[135, "api-changes"]], "Improved Documentation": [[135, "improved-documentation"]]}, "indexentries": {"julearn.base": [[0, "module-julearn.base"]], "module": [[0, "module-julearn.base"], [72, "module-julearn.inspect"], [73, "module-julearn.api"], [74, "module-julearn.model_selection"], [75, "module-julearn.models"], [75, "module-julearn.models.dynamic"], [76, "module-julearn.pipeline"], [77, "module-julearn.prepare"], [78, "module-julearn.scoring"], [78, "module-julearn.scoring.metrics"], [79, "module-julearn.stats"], [80, "module-julearn.transformers"], [80, "module-julearn.transformers.target"], [81, "module-julearn.utils"], [81, "module-julearn.utils.typing"], [82, "module-julearn.viz"]], "pipelinecreator (class in julearn)": [[1, "julearn.PipelineCreator"]], "__init__() (julearn.pipelinecreator method)": [[1, "julearn.PipelineCreator.__init__"]], "add() (julearn.pipelinecreator method)": [[1, "julearn.PipelineCreator.add"]], "copy() (julearn.pipelinecreator method)": [[1, "julearn.PipelineCreator.copy"]], "from_list() (julearn.pipelinecreator class method)": [[1, "julearn.PipelineCreator.from_list"]], "has_model() (julearn.pipelinecreator method)": [[1, "julearn.PipelineCreator.has_model"]], "split() (julearn.pipelinecreator method)": [[1, "julearn.PipelineCreator.split"]], "steps (julearn.pipelinecreator property)": [[1, "julearn.PipelineCreator.steps"]], "to_pipeline() (julearn.pipelinecreator method)": [[1, "julearn.PipelineCreator.to_pipeline"]], "targetpipelinecreator (class in julearn)": [[2, "julearn.TargetPipelineCreator"]], "__init__() (julearn.targetpipelinecreator method)": [[2, "julearn.TargetPipelineCreator.__init__"]], "add() (julearn.targetpipelinecreator method)": [[2, "julearn.TargetPipelineCreator.add"]], "to_pipeline() (julearn.targetpipelinecreator method)": [[2, "julearn.TargetPipelineCreator.to_pipeline"]], "columntypes (class in julearn.base)": [[3, "julearn.base.ColumnTypes"]], "__init__() (julearn.base.columntypes method)": [[3, "julearn.base.ColumnTypes.__init__"]], "add() (julearn.base.columntypes method)": [[3, "julearn.base.ColumnTypes.add"]], "copy() (julearn.base.columntypes method)": [[3, "julearn.base.ColumnTypes.copy"]], "pattern (julearn.base.columntypes property)": [[3, "julearn.base.ColumnTypes.pattern"]], "to_type_selector() (julearn.base.columntypes method)": [[3, "julearn.base.ColumnTypes.to_type_selector"]], "columntypeslike (in module julearn.base)": [[4, "julearn.base.ColumnTypesLike"]], "jubaseestimator (class in julearn.base)": [[5, "julearn.base.JuBaseEstimator"]], "__init__() (julearn.base.jubaseestimator method)": [[5, "julearn.base.JuBaseEstimator.__init__"]], "filter_columns() (julearn.base.jubaseestimator method)": [[5, "julearn.base.JuBaseEstimator.filter_columns"]], "get_apply_to() (julearn.base.jubaseestimator method)": [[5, "julearn.base.JuBaseEstimator.get_apply_to"]], "get_metadata_routing() (julearn.base.jubaseestimator method)": [[5, "julearn.base.JuBaseEstimator.get_metadata_routing"]], "get_needed_types() (julearn.base.jubaseestimator method)": [[5, "julearn.base.JuBaseEstimator.get_needed_types"]], "get_params() (julearn.base.jubaseestimator method)": [[5, "julearn.base.JuBaseEstimator.get_params"]], "set_params() (julearn.base.jubaseestimator method)": [[5, "julearn.base.JuBaseEstimator.set_params"]], "jutransformer (class in julearn.base)": [[6, "julearn.base.JuTransformer"]], "__init__() (julearn.base.jutransformer method)": [[6, "julearn.base.JuTransformer.__init__"]], "filter_columns() (julearn.base.jutransformer method)": [[6, "julearn.base.JuTransformer.filter_columns"]], "fit() (julearn.base.jutransformer method)": [[6, "julearn.base.JuTransformer.fit"]], "fit_transform() (julearn.base.jutransformer method)": [[6, "julearn.base.JuTransformer.fit_transform"]], "get_apply_to() (julearn.base.jutransformer method)": [[6, "julearn.base.JuTransformer.get_apply_to"]], "get_metadata_routing() (julearn.base.jutransformer method)": [[6, "julearn.base.JuTransformer.get_metadata_routing"]], "get_needed_types() (julearn.base.jutransformer method)": [[6, "julearn.base.JuTransformer.get_needed_types"]], "get_params() (julearn.base.jutransformer method)": [[6, "julearn.base.JuTransformer.get_params"]], "set_output() (julearn.base.jutransformer method)": [[6, "julearn.base.JuTransformer.set_output"]], "set_params() (julearn.base.jutransformer method)": [[6, "julearn.base.JuTransformer.set_params"]], "wrapmodel (class in julearn.base)": [[7, "julearn.base.WrapModel"]], "__init__() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.__init__"]], "classes_ (julearn.base.wrapmodel property)": [[7, "julearn.base.WrapModel.classes_"]], "decision_function() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.decision_function"]], "filter_columns() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.filter_columns"]], "fit() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.fit"]], "get_apply_to() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.get_apply_to"]], "get_metadata_routing() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.get_metadata_routing"]], "get_needed_types() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.get_needed_types"]], "get_params() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.get_params"]], "predict() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.predict"]], "predict_log_proba() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.predict_log_proba"]], "predict_proba() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.predict_proba"]], "score() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.score"]], "set_params() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.set_params"]], "change_column_type() (in module julearn.base)": [[8, "julearn.base.change_column_type"]], "ensure_column_types() (in module julearn.base)": [[9, "julearn.base.ensure_column_types"]], "get_column_type() (in module julearn.base)": [[10, "julearn.base.get_column_type"]], "make_type_selector() (in module julearn.base)": [[11, "julearn.base.make_type_selector"]], "foldsinspector (class in julearn.inspect)": [[12, "julearn.inspect.FoldsInspector"]], "__init__() (julearn.inspect.foldsinspector method)": [[12, "julearn.inspect.FoldsInspector.__init__"]], "decision_function() (julearn.inspect.foldsinspector method)": [[12, "julearn.inspect.FoldsInspector.decision_function"]], "predict() (julearn.inspect.foldsinspector method)": [[12, "julearn.inspect.FoldsInspector.predict"]], "predict_log_proba() (julearn.inspect.foldsinspector method)": [[12, "julearn.inspect.FoldsInspector.predict_log_proba"]], "predict_proba() (julearn.inspect.foldsinspector method)": [[12, "julearn.inspect.FoldsInspector.predict_proba"]], "inspector (class in julearn.inspect)": [[13, "julearn.inspect.Inspector"]], "__init__() (julearn.inspect.inspector method)": [[13, "julearn.inspect.Inspector.__init__"]], "folds (julearn.inspect.inspector property)": [[13, "julearn.inspect.Inspector.folds"]], "model (julearn.inspect.inspector property)": [[13, "julearn.inspect.Inspector.model"]], "preprocess() (in module julearn.inspect)": [[14, "julearn.inspect.preprocess"]], "continuousstratifiedgroupkfold (class in julearn.model_selection)": [[15, "julearn.model_selection.ContinuousStratifiedGroupKFold"]], "__init__() (julearn.model_selection.continuousstratifiedgroupkfold method)": [[15, "julearn.model_selection.ContinuousStratifiedGroupKFold.__init__"]], "get_metadata_routing() (julearn.model_selection.continuousstratifiedgroupkfold method)": [[15, "julearn.model_selection.ContinuousStratifiedGroupKFold.get_metadata_routing"]], "get_n_splits() (julearn.model_selection.continuousstratifiedgroupkfold method)": [[15, "julearn.model_selection.ContinuousStratifiedGroupKFold.get_n_splits"]], "set_split_request() (julearn.model_selection.continuousstratifiedgroupkfold method)": [[15, "julearn.model_selection.ContinuousStratifiedGroupKFold.set_split_request"]], "split() (julearn.model_selection.continuousstratifiedgroupkfold method)": [[15, "julearn.model_selection.ContinuousStratifiedGroupKFold.split"]], "continuousstratifiedkfold (class in julearn.model_selection)": [[16, "julearn.model_selection.ContinuousStratifiedKFold"]], "__init__() (julearn.model_selection.continuousstratifiedkfold method)": [[16, "julearn.model_selection.ContinuousStratifiedKFold.__init__"]], "get_metadata_routing() (julearn.model_selection.continuousstratifiedkfold method)": [[16, "julearn.model_selection.ContinuousStratifiedKFold.get_metadata_routing"]], "get_n_splits() (julearn.model_selection.continuousstratifiedkfold method)": [[16, "julearn.model_selection.ContinuousStratifiedKFold.get_n_splits"]], "split() (julearn.model_selection.continuousstratifiedkfold method)": [[16, "julearn.model_selection.ContinuousStratifiedKFold.split"]], "repeatedcontinuousstratifiedgroupkfold (class in julearn.model_selection)": [[17, "julearn.model_selection.RepeatedContinuousStratifiedGroupKFold"]], "__init__() (julearn.model_selection.repeatedcontinuousstratifiedgroupkfold method)": [[17, "julearn.model_selection.RepeatedContinuousStratifiedGroupKFold.__init__"]], "get_metadata_routing() (julearn.model_selection.repeatedcontinuousstratifiedgroupkfold method)": [[17, "julearn.model_selection.RepeatedContinuousStratifiedGroupKFold.get_metadata_routing"]], "get_n_splits() (julearn.model_selection.repeatedcontinuousstratifiedgroupkfold method)": [[17, "julearn.model_selection.RepeatedContinuousStratifiedGroupKFold.get_n_splits"]], "split() (julearn.model_selection.repeatedcontinuousstratifiedgroupkfold method)": [[17, "julearn.model_selection.RepeatedContinuousStratifiedGroupKFold.split"]], "repeatedcontinuousstratifiedkfold (class in julearn.model_selection)": [[18, "julearn.model_selection.RepeatedContinuousStratifiedKFold"]], "__init__() (julearn.model_selection.repeatedcontinuousstratifiedkfold method)": [[18, "julearn.model_selection.RepeatedContinuousStratifiedKFold.__init__"]], "get_metadata_routing() (julearn.model_selection.repeatedcontinuousstratifiedkfold method)": [[18, "julearn.model_selection.RepeatedContinuousStratifiedKFold.get_metadata_routing"]], "get_n_splits() (julearn.model_selection.repeatedcontinuousstratifiedkfold method)": [[18, "julearn.model_selection.RepeatedContinuousStratifiedKFold.get_n_splits"]], "split() (julearn.model_selection.repeatedcontinuousstratifiedkfold method)": [[18, "julearn.model_selection.RepeatedContinuousStratifiedKFold.split"]], "stratifiedbootstrap (class in julearn.model_selection)": [[19, "julearn.model_selection.StratifiedBootstrap"]], "__init__() (julearn.model_selection.stratifiedbootstrap method)": [[19, "julearn.model_selection.StratifiedBootstrap.__init__"]], "get_metadata_routing() (julearn.model_selection.stratifiedbootstrap method)": [[19, "julearn.model_selection.StratifiedBootstrap.get_metadata_routing"]], "get_n_splits() (julearn.model_selection.stratifiedbootstrap method)": [[19, "julearn.model_selection.StratifiedBootstrap.get_n_splits"]], "split() (julearn.model_selection.stratifiedbootstrap method)": [[19, "julearn.model_selection.StratifiedBootstrap.split"]], "get_searcher() (in module julearn.model_selection)": [[20, "julearn.model_selection.get_searcher"]], "list_searchers() (in module julearn.model_selection)": [[21, "julearn.model_selection.list_searchers"]], "register_searcher() (in module julearn.model_selection)": [[22, "julearn.model_selection.register_searcher"]], "reset_searcher_register() (in module julearn.model_selection)": [[23, "julearn.model_selection.reset_searcher_register"]], "dynamicselection (class in julearn.models.dynamic)": [[24, "julearn.models.dynamic.DynamicSelection"]], "__init__() (julearn.models.dynamic.dynamicselection method)": [[24, "julearn.models.dynamic.DynamicSelection.__init__"]], "fit() (julearn.models.dynamic.dynamicselection method)": [[24, "julearn.models.dynamic.DynamicSelection.fit"]], "get_metadata_routing() (julearn.models.dynamic.dynamicselection method)": [[24, "julearn.models.dynamic.DynamicSelection.get_metadata_routing"]], "get_params() (julearn.models.dynamic.dynamicselection method)": [[24, "julearn.models.dynamic.DynamicSelection.get_params"]], "predict() (julearn.models.dynamic.dynamicselection method)": [[24, "julearn.models.dynamic.DynamicSelection.predict"]], "predict_proba() (julearn.models.dynamic.dynamicselection method)": [[24, "julearn.models.dynamic.DynamicSelection.predict_proba"]], "score() (julearn.models.dynamic.dynamicselection method)": [[24, "julearn.models.dynamic.DynamicSelection.score"]], "set_params() (julearn.models.dynamic.dynamicselection method)": [[24, "julearn.models.dynamic.DynamicSelection.set_params"]], "set_score_request() (julearn.models.dynamic.dynamicselection method)": [[24, "julearn.models.dynamic.DynamicSelection.set_score_request"]], "get_model() (in module julearn.models)": [[25, "julearn.models.get_model"]], "list_models() (in module julearn.models)": [[26, "julearn.models.list_models"]], "register_model() (in module julearn.models)": [[27, "julearn.models.register_model"]], "reset_model_register() (in module julearn.models)": [[28, "julearn.models.reset_model_register"]], "jutargetpipeline (class in julearn.pipeline)": [[29, "julearn.pipeline.JuTargetPipeline"]], "__init__() (julearn.pipeline.jutargetpipeline method)": [[29, "julearn.pipeline.JuTargetPipeline.__init__"]], "can_inverse_transform() (julearn.pipeline.jutargetpipeline method)": [[29, "julearn.pipeline.JuTargetPipeline.can_inverse_transform"]], "fit() (julearn.pipeline.jutargetpipeline method)": [[29, "julearn.pipeline.JuTargetPipeline.fit"]], "fit_transform() (julearn.pipeline.jutargetpipeline method)": [[29, "julearn.pipeline.JuTargetPipeline.fit_transform"]], "inverse_transform() (julearn.pipeline.jutargetpipeline method)": [[29, "julearn.pipeline.JuTargetPipeline.inverse_transform"]], "needed_types (julearn.pipeline.jutargetpipeline property)": [[29, "julearn.pipeline.JuTargetPipeline.needed_types"]], "transform() (julearn.pipeline.jutargetpipeline method)": [[29, "julearn.pipeline.JuTargetPipeline.transform"]], "step (class in julearn.pipeline.pipeline_creator)": [[30, "julearn.pipeline.pipeline_creator.Step"]], "__init__() (julearn.pipeline.pipeline_creator.step method)": [[30, "julearn.pipeline.pipeline_creator.Step.__init__"]], "apply_to (julearn.pipeline.pipeline_creator.step attribute)": [[30, "julearn.pipeline.pipeline_creator.Step.apply_to"]], "estimator (julearn.pipeline.pipeline_creator.step attribute)": [[30, "julearn.pipeline.pipeline_creator.Step.estimator"]], "name (julearn.pipeline.pipeline_creator.step attribute)": [[30, "julearn.pipeline.pipeline_creator.Step.name"]], "needed_types (julearn.pipeline.pipeline_creator.step attribute)": [[30, "julearn.pipeline.pipeline_creator.Step.needed_types"]], "params_to_tune (julearn.pipeline.pipeline_creator.step attribute)": [[30, "julearn.pipeline.pipeline_creator.Step.params_to_tune"]], "row_select_col_type (julearn.pipeline.pipeline_creator.step attribute)": [[30, "julearn.pipeline.pipeline_creator.Step.row_select_col_type"]], "row_select_vals (julearn.pipeline.pipeline_creator.step attribute)": [[30, "julearn.pipeline.pipeline_creator.Step.row_select_vals"]], "check_consistency() (in module julearn.prepare)": [[31, "julearn.prepare.check_consistency"]], "prepare_input_data() (in module julearn.prepare)": [[32, "julearn.prepare.prepare_input_data"]], "run_cross_validation() (in module julearn)": [[33, "julearn.run_cross_validation"]], "check_scoring() (in module julearn.scoring)": [[34, "julearn.scoring.check_scoring"]], "get_scorer() (in module julearn.scoring)": [[35, "julearn.scoring.get_scorer"]], "list_scorers() (in module julearn.scoring)": [[36, "julearn.scoring.list_scorers"]], "r2_corr() (in module julearn.scoring.metrics)": [[37, "julearn.scoring.metrics.r2_corr"]], "r_corr() (in module julearn.scoring.metrics)": [[38, "julearn.scoring.metrics.r_corr"]], "register_scorer() (in module julearn.scoring)": [[39, "julearn.scoring.register_scorer"]], "reset_scorer_register() (in module julearn.scoring)": [[40, "julearn.scoring.reset_scorer_register"]], "corrected_ttest() (in module julearn.stats)": [[41, "julearn.stats.corrected_ttest"]], "cbpm (class in julearn.transformers)": [[42, "julearn.transformers.CBPM"]], "__init__() (julearn.transformers.cbpm method)": [[42, "julearn.transformers.CBPM.__init__"]], "aggregate() (julearn.transformers.cbpm method)": [[42, "julearn.transformers.CBPM.aggregate"]], "fit() (julearn.transformers.cbpm method)": [[42, "julearn.transformers.CBPM.fit"]], "fit_transform() (julearn.transformers.cbpm method)": [[42, "julearn.transformers.CBPM.fit_transform"]], "get_feature_names_out() (julearn.transformers.cbpm method)": [[42, "julearn.transformers.CBPM.get_feature_names_out"]], "get_metadata_routing() (julearn.transformers.cbpm method)": [[42, "julearn.transformers.CBPM.get_metadata_routing"]], "get_params() (julearn.transformers.cbpm method)": [[42, "julearn.transformers.CBPM.get_params"]], "set_output() (julearn.transformers.cbpm method)": [[42, "julearn.transformers.CBPM.set_output"]], "set_params() (julearn.transformers.cbpm method)": [[42, "julearn.transformers.CBPM.set_params"]], "transform() (julearn.transformers.cbpm method)": [[42, "julearn.transformers.CBPM.transform"]], "changecolumntypes (class in julearn.transformers)": [[43, "julearn.transformers.ChangeColumnTypes"]], "__init__() (julearn.transformers.changecolumntypes method)": [[43, "julearn.transformers.ChangeColumnTypes.__init__"]], "filter_columns() (julearn.transformers.changecolumntypes method)": [[43, "julearn.transformers.ChangeColumnTypes.filter_columns"]], "fit() (julearn.transformers.changecolumntypes method)": [[43, "julearn.transformers.ChangeColumnTypes.fit"]], "fit_transform() (julearn.transformers.changecolumntypes method)": [[43, "julearn.transformers.ChangeColumnTypes.fit_transform"]], "get_apply_to() (julearn.transformers.changecolumntypes method)": [[43, "julearn.transformers.ChangeColumnTypes.get_apply_to"]], "get_feature_names_out() (julearn.transformers.changecolumntypes method)": [[43, "julearn.transformers.ChangeColumnTypes.get_feature_names_out"]], "get_metadata_routing() (julearn.transformers.changecolumntypes method)": [[43, "julearn.transformers.ChangeColumnTypes.get_metadata_routing"]], "get_needed_types() (julearn.transformers.changecolumntypes method)": [[43, "julearn.transformers.ChangeColumnTypes.get_needed_types"]], "get_params() (julearn.transformers.changecolumntypes method)": [[43, "julearn.transformers.ChangeColumnTypes.get_params"]], "set_output() (julearn.transformers.changecolumntypes method)": [[43, "julearn.transformers.ChangeColumnTypes.set_output"]], "set_params() (julearn.transformers.changecolumntypes method)": [[43, "julearn.transformers.ChangeColumnTypes.set_params"]], "transform() (julearn.transformers.changecolumntypes method)": [[43, "julearn.transformers.ChangeColumnTypes.transform"]], "dropcolumns (class in julearn.transformers)": [[44, "julearn.transformers.DropColumns"]], "__init__() (julearn.transformers.dropcolumns method)": [[44, "julearn.transformers.DropColumns.__init__"]], "filter_columns() (julearn.transformers.dropcolumns method)": [[44, "julearn.transformers.DropColumns.filter_columns"]], "fit() (julearn.transformers.dropcolumns method)": [[44, "julearn.transformers.DropColumns.fit"]], "fit_transform() (julearn.transformers.dropcolumns method)": [[44, "julearn.transformers.DropColumns.fit_transform"]], "get_apply_to() (julearn.transformers.dropcolumns method)": [[44, "julearn.transformers.DropColumns.get_apply_to"]], "get_metadata_routing() (julearn.transformers.dropcolumns method)": [[44, "julearn.transformers.DropColumns.get_metadata_routing"]], "get_needed_types() (julearn.transformers.dropcolumns method)": [[44, "julearn.transformers.DropColumns.get_needed_types"]], "get_params() (julearn.transformers.dropcolumns method)": [[44, "julearn.transformers.DropColumns.get_params"]], "get_support() (julearn.transformers.dropcolumns method)": [[44, "julearn.transformers.DropColumns.get_support"]], "set_output() (julearn.transformers.dropcolumns method)": [[44, "julearn.transformers.DropColumns.set_output"]], "set_params() (julearn.transformers.dropcolumns method)": [[44, "julearn.transformers.DropColumns.set_params"]], "transform() (julearn.transformers.dropcolumns method)": [[44, "julearn.transformers.DropColumns.transform"]], "filtercolumns (class in julearn.transformers)": [[45, "julearn.transformers.FilterColumns"]], "__init__() (julearn.transformers.filtercolumns method)": [[45, "julearn.transformers.FilterColumns.__init__"]], "filter_columns() (julearn.transformers.filtercolumns method)": [[45, "julearn.transformers.FilterColumns.filter_columns"]], "fit() (julearn.transformers.filtercolumns method)": [[45, "julearn.transformers.FilterColumns.fit"]], "fit_transform() (julearn.transformers.filtercolumns method)": [[45, "julearn.transformers.FilterColumns.fit_transform"]], "get_apply_to() (julearn.transformers.filtercolumns method)": [[45, "julearn.transformers.FilterColumns.get_apply_to"]], "get_feature_names_out() (julearn.transformers.filtercolumns method)": [[45, "julearn.transformers.FilterColumns.get_feature_names_out"]], "get_metadata_routing() (julearn.transformers.filtercolumns method)": [[45, "julearn.transformers.FilterColumns.get_metadata_routing"]], "get_needed_types() (julearn.transformers.filtercolumns method)": [[45, "julearn.transformers.FilterColumns.get_needed_types"]], "get_params() (julearn.transformers.filtercolumns method)": [[45, "julearn.transformers.FilterColumns.get_params"]], "set_output() (julearn.transformers.filtercolumns method)": [[45, "julearn.transformers.FilterColumns.set_output"]], "set_params() (julearn.transformers.filtercolumns method)": [[45, "julearn.transformers.FilterColumns.set_params"]], "transform() (julearn.transformers.filtercolumns method)": [[45, "julearn.transformers.FilterColumns.transform"]], "jucolumntransformer (class in julearn.transformers)": [[46, "julearn.transformers.JuColumnTransformer"]], "__init__() (julearn.transformers.jucolumntransformer method)": [[46, "julearn.transformers.JuColumnTransformer.__init__"]], "filter_columns() (julearn.transformers.jucolumntransformer method)": [[46, "julearn.transformers.JuColumnTransformer.filter_columns"]], "fit() (julearn.transformers.jucolumntransformer method)": [[46, "julearn.transformers.JuColumnTransformer.fit"]], "fit_transform() (julearn.transformers.jucolumntransformer method)": [[46, "julearn.transformers.JuColumnTransformer.fit_transform"]], "get_apply_to() (julearn.transformers.jucolumntransformer method)": [[46, "julearn.transformers.JuColumnTransformer.get_apply_to"]], "get_feature_names_out() (julearn.transformers.jucolumntransformer method)": [[46, "julearn.transformers.JuColumnTransformer.get_feature_names_out"]], "get_metadata_routing() (julearn.transformers.jucolumntransformer method)": [[46, "julearn.transformers.JuColumnTransformer.get_metadata_routing"]], "get_needed_types() (julearn.transformers.jucolumntransformer method)": [[46, "julearn.transformers.JuColumnTransformer.get_needed_types"]], "get_params() (julearn.transformers.jucolumntransformer method)": [[46, "julearn.transformers.JuColumnTransformer.get_params"]], "set_output() (julearn.transformers.jucolumntransformer method)": [[46, "julearn.transformers.JuColumnTransformer.set_output"]], "set_params() (julearn.transformers.jucolumntransformer method)": [[46, "julearn.transformers.JuColumnTransformer.set_params"]], "transform() (julearn.transformers.jucolumntransformer method)": [[46, "julearn.transformers.JuColumnTransformer.transform"]], "setcolumntypes (class in julearn.transformers)": [[47, "julearn.transformers.SetColumnTypes"]], "__init__() (julearn.transformers.setcolumntypes method)": [[47, "julearn.transformers.SetColumnTypes.__init__"]], "filter_columns() (julearn.transformers.setcolumntypes method)": [[47, "julearn.transformers.SetColumnTypes.filter_columns"]], "fit() (julearn.transformers.setcolumntypes method)": [[47, "julearn.transformers.SetColumnTypes.fit"]], "fit_transform() (julearn.transformers.setcolumntypes method)": [[47, "julearn.transformers.SetColumnTypes.fit_transform"]], "get_apply_to() (julearn.transformers.setcolumntypes method)": [[47, "julearn.transformers.SetColumnTypes.get_apply_to"]], "get_feature_names_out() (julearn.transformers.setcolumntypes method)": [[47, "julearn.transformers.SetColumnTypes.get_feature_names_out"]], "get_metadata_routing() (julearn.transformers.setcolumntypes method)": [[47, "julearn.transformers.SetColumnTypes.get_metadata_routing"]], "get_needed_types() (julearn.transformers.setcolumntypes method)": [[47, "julearn.transformers.SetColumnTypes.get_needed_types"]], "get_params() (julearn.transformers.setcolumntypes method)": [[47, "julearn.transformers.SetColumnTypes.get_params"]], "set_output() (julearn.transformers.setcolumntypes method)": [[47, "julearn.transformers.SetColumnTypes.set_output"]], "set_params() (julearn.transformers.setcolumntypes method)": [[47, "julearn.transformers.SetColumnTypes.set_params"]], "transform() (julearn.transformers.setcolumntypes method)": [[47, "julearn.transformers.SetColumnTypes.transform"]], "confoundremover (class in julearn.transformers.confound_remover)": [[48, "julearn.transformers.confound_remover.ConfoundRemover"]], "__init__() (julearn.transformers.confound_remover.confoundremover method)": [[48, "julearn.transformers.confound_remover.ConfoundRemover.__init__"]], "filter_columns() (julearn.transformers.confound_remover.confoundremover method)": [[48, "julearn.transformers.confound_remover.ConfoundRemover.filter_columns"]], "fit() (julearn.transformers.confound_remover.confoundremover method)": [[48, "julearn.transformers.confound_remover.ConfoundRemover.fit"]], "fit_transform() (julearn.transformers.confound_remover.confoundremover method)": [[48, "julearn.transformers.confound_remover.ConfoundRemover.fit_transform"]], "get_apply_to() (julearn.transformers.confound_remover.confoundremover method)": [[48, "julearn.transformers.confound_remover.ConfoundRemover.get_apply_to"]], "get_feature_names_out() (julearn.transformers.confound_remover.confoundremover method)": [[48, "julearn.transformers.confound_remover.ConfoundRemover.get_feature_names_out"]], "get_metadata_routing() (julearn.transformers.confound_remover.confoundremover method)": [[48, "julearn.transformers.confound_remover.ConfoundRemover.get_metadata_routing"]], "get_needed_types() (julearn.transformers.confound_remover.confoundremover method)": [[48, "julearn.transformers.confound_remover.ConfoundRemover.get_needed_types"]], "get_params() (julearn.transformers.confound_remover.confoundremover method)": [[48, "julearn.transformers.confound_remover.ConfoundRemover.get_params"]], "get_support() (julearn.transformers.confound_remover.confoundremover method)": [[48, "julearn.transformers.confound_remover.ConfoundRemover.get_support"]], "set_output() (julearn.transformers.confound_remover.confoundremover method)": [[48, "julearn.transformers.confound_remover.ConfoundRemover.set_output"]], "set_params() (julearn.transformers.confound_remover.confoundremover method)": [[48, "julearn.transformers.confound_remover.ConfoundRemover.set_params"]], "transform() (julearn.transformers.confound_remover.confoundremover method)": [[48, "julearn.transformers.confound_remover.ConfoundRemover.transform"]], "get_transformer() (in module julearn.transformers)": [[49, "julearn.transformers.get_transformer"]], "list_transformers() (in module julearn.transformers)": [[50, "julearn.transformers.list_transformers"]], "register_transformer() (in module julearn.transformers)": [[51, "julearn.transformers.register_transformer"]], "reset_transformer_register() (in module julearn.transformers)": [[52, "julearn.transformers.reset_transformer_register"]], "jutargettransformer (class in julearn.transformers.target)": [[53, "julearn.transformers.target.JuTargetTransformer"]], "__init__() (julearn.transformers.target.jutargettransformer method)": [[53, "julearn.transformers.target.JuTargetTransformer.__init__"]], "fit() (julearn.transformers.target.jutargettransformer method)": [[53, "julearn.transformers.target.JuTargetTransformer.fit"]], "fit_transform() (julearn.transformers.target.jutargettransformer method)": [[53, "julearn.transformers.target.JuTargetTransformer.fit_transform"]], "transform() (julearn.transformers.target.jutargettransformer method)": [[53, "julearn.transformers.target.JuTargetTransformer.transform"]], "jutransformedtargetmodel (class in julearn.transformers.target)": [[54, "julearn.transformers.target.JuTransformedTargetModel"]], "__init__() (julearn.transformers.target.jutransformedtargetmodel method)": [[54, "julearn.transformers.target.JuTransformedTargetModel.__init__"]], "classes_ (julearn.transformers.target.jutransformedtargetmodel property)": [[54, "julearn.transformers.target.JuTransformedTargetModel.classes_"]], "decision_function() (julearn.transformers.target.jutransformedtargetmodel method)": [[54, "julearn.transformers.target.JuTransformedTargetModel.decision_function"]], "filter_columns() (julearn.transformers.target.jutransformedtargetmodel method)": [[54, "julearn.transformers.target.JuTransformedTargetModel.filter_columns"]], "fit() (julearn.transformers.target.jutransformedtargetmodel method)": [[54, "julearn.transformers.target.JuTransformedTargetModel.fit"]], "get_apply_to() (julearn.transformers.target.jutransformedtargetmodel method)": [[54, "julearn.transformers.target.JuTransformedTargetModel.get_apply_to"]], "get_metadata_routing() (julearn.transformers.target.jutransformedtargetmodel method)": [[54, "julearn.transformers.target.JuTransformedTargetModel.get_metadata_routing"]], "get_needed_types() (julearn.transformers.target.jutransformedtargetmodel method)": [[54, "julearn.transformers.target.JuTransformedTargetModel.get_needed_types"]], "get_params() (julearn.transformers.target.jutransformedtargetmodel method)": [[54, "julearn.transformers.target.JuTransformedTargetModel.get_params"]], "predict() (julearn.transformers.target.jutransformedtargetmodel method)": [[54, "julearn.transformers.target.JuTransformedTargetModel.predict"]], "predict_proba() (julearn.transformers.target.jutransformedtargetmodel method)": [[54, "julearn.transformers.target.JuTransformedTargetModel.predict_proba"]], "score() (julearn.transformers.target.jutransformedtargetmodel method)": [[54, "julearn.transformers.target.JuTransformedTargetModel.score"]], "set_params() (julearn.transformers.target.jutransformedtargetmodel method)": [[54, "julearn.transformers.target.JuTransformedTargetModel.set_params"]], "transform_target() (julearn.transformers.target.jutransformedtargetmodel method)": [[54, "julearn.transformers.target.JuTransformedTargetModel.transform_target"]], "targetconfoundremover (class in julearn.transformers.target)": [[55, "julearn.transformers.target.TargetConfoundRemover"]], "__init__() (julearn.transformers.target.targetconfoundremover method)": [[55, "julearn.transformers.target.TargetConfoundRemover.__init__"]], "fit() (julearn.transformers.target.targetconfoundremover method)": [[55, "julearn.transformers.target.TargetConfoundRemover.fit"]], "fit_transform() (julearn.transformers.target.targetconfoundremover method)": [[55, "julearn.transformers.target.TargetConfoundRemover.fit_transform"]], "needed_types (julearn.transformers.target.targetconfoundremover property)": [[55, "julearn.transformers.target.TargetConfoundRemover.needed_types"]], "transform() (julearn.transformers.target.targetconfoundremover method)": [[55, "julearn.transformers.target.TargetConfoundRemover.transform"]], "transformedtargetwarning (class in julearn.transformers.target)": [[56, "julearn.transformers.target.TransformedTargetWarning"]], "__init__() (julearn.transformers.target.transformedtargetwarning method)": [[56, "julearn.transformers.target.TransformedTargetWarning.__init__"]], "args (julearn.transformers.target.transformedtargetwarning attribute)": [[56, "julearn.transformers.target.TransformedTargetWarning.args"]], "with_traceback() (julearn.transformers.target.transformedtargetwarning method)": [[56, "julearn.transformers.target.TransformedTargetWarning.with_traceback"]], "get_target_transformer() (in module julearn.transformers.target)": [[57, "julearn.transformers.target.get_target_transformer"]], "list_target_transformers() (in module julearn.transformers.target)": [[58, "julearn.transformers.target.list_target_transformers"]], "register_target_transformer() (in module julearn.transformers.target)": [[59, "julearn.transformers.target.register_target_transformer"]], "reset_target_transformer_register() (in module julearn.transformers.target)": [[60, "julearn.transformers.target.reset_target_transformer_register"]], "configure_logging() (in module julearn.utils)": [[61, "julearn.utils.configure_logging"]], "logger (in module julearn.utils)": [[62, "julearn.utils.logger"]], "raise_error() (in module julearn.utils)": [[63, "julearn.utils.raise_error"]], "estimatorlike (in module julearn.utils.typing)": [[64, "julearn.utils.typing.EstimatorLike"]], "estimatorlikefit1 (class in julearn.utils.typing)": [[65, "julearn.utils.typing.EstimatorLikeFit1"]], "__init__() (julearn.utils.typing.estimatorlikefit1 method)": [[65, "julearn.utils.typing.EstimatorLikeFit1.__init__"]], "fit() (julearn.utils.typing.estimatorlikefit1 method)": [[65, "julearn.utils.typing.EstimatorLikeFit1.fit"]], "get_params() (julearn.utils.typing.estimatorlikefit1 method)": [[65, "julearn.utils.typing.EstimatorLikeFit1.get_params"]], "set_params() (julearn.utils.typing.estimatorlikefit1 method)": [[65, "julearn.utils.typing.EstimatorLikeFit1.set_params"]], "estimatorlikefit2 (class in julearn.utils.typing)": [[66, "julearn.utils.typing.EstimatorLikeFit2"]], "__init__() (julearn.utils.typing.estimatorlikefit2 method)": [[66, "julearn.utils.typing.EstimatorLikeFit2.__init__"]], "fit() (julearn.utils.typing.estimatorlikefit2 method)": [[66, "julearn.utils.typing.EstimatorLikeFit2.fit"]], "get_params() (julearn.utils.typing.estimatorlikefit2 method)": [[66, "julearn.utils.typing.EstimatorLikeFit2.get_params"]], "set_params() (julearn.utils.typing.estimatorlikefit2 method)": [[66, "julearn.utils.typing.EstimatorLikeFit2.set_params"]], "estimatorlikefity (class in julearn.utils.typing)": [[67, "julearn.utils.typing.EstimatorLikeFity"]], "__init__() (julearn.utils.typing.estimatorlikefity method)": [[67, "julearn.utils.typing.EstimatorLikeFity.__init__"]], "fit() (julearn.utils.typing.estimatorlikefity method)": [[67, "julearn.utils.typing.EstimatorLikeFity.fit"]], "get_params() (julearn.utils.typing.estimatorlikefity method)": [[67, "julearn.utils.typing.EstimatorLikeFity.get_params"]], "set_params() (julearn.utils.typing.estimatorlikefity method)": [[67, "julearn.utils.typing.EstimatorLikeFity.set_params"]], "juestimatorlike (class in julearn.utils.typing)": [[68, "julearn.utils.typing.JuEstimatorLike"]], "__init__() (julearn.utils.typing.juestimatorlike method)": [[68, "julearn.utils.typing.JuEstimatorLike.__init__"]], "fit() (julearn.utils.typing.juestimatorlike method)": [[68, "julearn.utils.typing.JuEstimatorLike.fit"]], "get_apply_to() (julearn.utils.typing.juestimatorlike method)": [[68, "julearn.utils.typing.JuEstimatorLike.get_apply_to"]], "get_needed_types() (julearn.utils.typing.juestimatorlike method)": [[68, "julearn.utils.typing.JuEstimatorLike.get_needed_types"]], "get_params() (julearn.utils.typing.juestimatorlike method)": [[68, "julearn.utils.typing.JuEstimatorLike.get_params"]], "set_params() (julearn.utils.typing.juestimatorlike method)": [[68, "julearn.utils.typing.JuEstimatorLike.set_params"]], "warn_with_log() (in module julearn.utils)": [[69, "julearn.utils.warn_with_log"]], "plot_scores() (in module julearn.viz)": [[70, "julearn.viz.plot_scores"]], "julearn.inspect": [[72, "module-julearn.inspect"]], "julearn.api": [[73, "module-julearn.api"]], "julearn.model_selection": [[74, "module-julearn.model_selection"]], "julearn.models": [[75, "module-julearn.models"]], "julearn.models.dynamic": [[75, "module-julearn.models.dynamic"]], "julearn.pipeline": [[76, "module-julearn.pipeline"]], "julearn.prepare": [[77, "module-julearn.prepare"]], "julearn.scoring": [[78, "module-julearn.scoring"]], "julearn.scoring.metrics": [[78, "module-julearn.scoring.metrics"]], "julearn.stats": [[79, "module-julearn.stats"]], "julearn.transformers": [[80, "module-julearn.transformers"]], "julearn.transformers.target": [[80, "module-julearn.transformers.target"]], "julearn.utils": [[81, "module-julearn.utils"]], "julearn.utils.typing": [[81, "module-julearn.utils.typing"]], "julearn.viz": [[82, "module-julearn.viz"]]}})