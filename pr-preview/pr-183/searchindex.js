Search.setIndex({"docnames": ["api/base", "api/generated/julearn.PipelineCreator", "api/generated/julearn.TargetPipelineCreator", "api/generated/julearn.base.ColumnTypes", "api/generated/julearn.base.ColumnTypesLike", "api/generated/julearn.base.JuBaseEstimator", "api/generated/julearn.base.JuTransformer", "api/generated/julearn.base.WrapModel", "api/generated/julearn.base.change_column_type", "api/generated/julearn.base.ensure_column_types", "api/generated/julearn.base.get_column_type", "api/generated/julearn.base.make_type_selector", "api/generated/julearn.inspect.preprocess", "api/generated/julearn.model_selection.RepeatedStratifiedGroupsKFold", "api/generated/julearn.model_selection.StratifiedBootstrap", "api/generated/julearn.model_selection.StratifiedGroupsKFold", "api/generated/julearn.model_selection.get_searcher", "api/generated/julearn.model_selection.list_searchers", "api/generated/julearn.model_selection.register_searcher", "api/generated/julearn.model_selection.reset_searcher_register", "api/generated/julearn.models.dynamic.DynamicSelection", "api/generated/julearn.models.get_model", "api/generated/julearn.models.list_models", "api/generated/julearn.models.register_model", "api/generated/julearn.models.reset_model_register", "api/generated/julearn.pipeline.JuTargetPipeline", "api/generated/julearn.pipeline.pipeline_creator.Step", "api/generated/julearn.prepare.check_consistency", "api/generated/julearn.prepare.prepare_input_data", "api/generated/julearn.run_cross_validation", "api/generated/julearn.scoring.check_scoring", "api/generated/julearn.scoring.get_scorer", "api/generated/julearn.scoring.list_scorers", "api/generated/julearn.scoring.metrics.r2_corr", "api/generated/julearn.scoring.register_scorer", "api/generated/julearn.scoring.reset_scorer_register", "api/generated/julearn.transformers.CBPM", "api/generated/julearn.transformers.ChangeColumnTypes", "api/generated/julearn.transformers.DropColumns", "api/generated/julearn.transformers.FilterColumns", "api/generated/julearn.transformers.JuColumnTransformer", "api/generated/julearn.transformers.SetColumnTypes", "api/generated/julearn.transformers.confound_remover.ConfoundRemover", "api/generated/julearn.transformers.get_transformer", "api/generated/julearn.transformers.list_transformers", "api/generated/julearn.transformers.register_transformer", "api/generated/julearn.transformers.reset_transformer_register", "api/generated/julearn.transformers.target.JuTargetTransformer", "api/generated/julearn.transformers.target.JuTransformedTargetModel", "api/generated/julearn.transformers.target.TargetConfoundRemover", "api/generated/julearn.transformers.target.TransformedTargetWarning", "api/generated/julearn.transformers.target.get_target_transformer", "api/generated/julearn.transformers.target.list_target_transformers", "api/generated/julearn.transformers.target.register_target_transformer", "api/generated/julearn.transformers.target.reset_target_transformer_register", "api/generated/julearn.utils.configure_logging", "api/generated/julearn.utils.logger", "api/generated/julearn.utils.raise_error", "api/generated/julearn.utils.typing.EstimatorLike", "api/generated/julearn.utils.typing.EstimatorLikeFit1", "api/generated/julearn.utils.typing.EstimatorLikeFit2", "api/generated/julearn.utils.typing.EstimatorLikeFity", "api/generated/julearn.utils.typing.JuEstimatorLike", "api/generated/julearn.utils.warn_with_log", "api/generated/julearn.viz.plot_scores", "api/index", "api/inspect", "api/main", "api/model_selection", "api/models", "api/pipeline", "api/prepare", "api/scoring", "api/transformers", "api/utils", "api/viz", "auto_examples/00_starting/index", "auto_examples/00_starting/plot_cm_acc_multiclass", "auto_examples/00_starting/plot_example_regression", "auto_examples/00_starting/plot_stratified_kfold_reg", "auto_examples/00_starting/run_combine_pandas", "auto_examples/00_starting/run_grouped_cv", "auto_examples/00_starting/run_simple_binary_classification", "auto_examples/00_starting/sg_execution_times", "auto_examples/01_model_comparison/index", "auto_examples/01_model_comparison/plot_simple_model_comparison", "auto_examples/01_model_comparison/sg_execution_times", "auto_examples/02_inspection/index", "auto_examples/02_inspection/plot_groupcv_inspect_svm", "auto_examples/02_inspection/plot_inspect_random_forest", "auto_examples/02_inspection/plot_preprocess", "auto_examples/02_inspection/run_binary_inspect_folds", "auto_examples/02_inspection/sg_execution_times", "auto_examples/03_complex_models/index", "auto_examples/03_complex_models/run_apply_to_target", "auto_examples/03_complex_models/run_example_pca_featsets", "auto_examples/03_complex_models/run_hyperparameter_tuning", "auto_examples/03_complex_models/run_stacked_models", "auto_examples/03_complex_models/sg_execution_times", "auto_examples/04_confounds/index", "auto_examples/04_confounds/plot_confound_removal_classification", "auto_examples/04_confounds/run_return_confounds", "auto_examples/04_confounds/sg_execution_times", "auto_examples/05_customization/index", "auto_examples/05_customization/run_custom_scorers_regression", "auto_examples/05_customization/sg_execution_times", "available_pipeline_steps", "contributing", "examples", "faq", "getting_started", "index", "maintaining", "selected_deeper_topics/CBPM", "selected_deeper_topics/HPT", "selected_deeper_topics/confound_removal", "selected_deeper_topics/cross_validation_splitter", "selected_deeper_topics/index", "selected_deeper_topics/model_inspect", "selected_deeper_topics/stacked_models", "what_really_need_know/cross_validation", "what_really_need_know/data", "what_really_need_know/index", "what_really_need_know/model_evaluation", "what_really_need_know/pipeline", "whats_new"], "filenames": ["api/base.rst", "api/generated/julearn.PipelineCreator.rst", "api/generated/julearn.TargetPipelineCreator.rst", "api/generated/julearn.base.ColumnTypes.rst", "api/generated/julearn.base.ColumnTypesLike.rst", "api/generated/julearn.base.JuBaseEstimator.rst", "api/generated/julearn.base.JuTransformer.rst", "api/generated/julearn.base.WrapModel.rst", "api/generated/julearn.base.change_column_type.rst", "api/generated/julearn.base.ensure_column_types.rst", "api/generated/julearn.base.get_column_type.rst", "api/generated/julearn.base.make_type_selector.rst", "api/generated/julearn.inspect.preprocess.rst", "api/generated/julearn.model_selection.RepeatedStratifiedGroupsKFold.rst", "api/generated/julearn.model_selection.StratifiedBootstrap.rst", "api/generated/julearn.model_selection.StratifiedGroupsKFold.rst", "api/generated/julearn.model_selection.get_searcher.rst", "api/generated/julearn.model_selection.list_searchers.rst", "api/generated/julearn.model_selection.register_searcher.rst", "api/generated/julearn.model_selection.reset_searcher_register.rst", "api/generated/julearn.models.dynamic.DynamicSelection.rst", "api/generated/julearn.models.get_model.rst", "api/generated/julearn.models.list_models.rst", "api/generated/julearn.models.register_model.rst", "api/generated/julearn.models.reset_model_register.rst", "api/generated/julearn.pipeline.JuTargetPipeline.rst", "api/generated/julearn.pipeline.pipeline_creator.Step.rst", "api/generated/julearn.prepare.check_consistency.rst", "api/generated/julearn.prepare.prepare_input_data.rst", "api/generated/julearn.run_cross_validation.rst", "api/generated/julearn.scoring.check_scoring.rst", "api/generated/julearn.scoring.get_scorer.rst", "api/generated/julearn.scoring.list_scorers.rst", "api/generated/julearn.scoring.metrics.r2_corr.rst", "api/generated/julearn.scoring.register_scorer.rst", "api/generated/julearn.scoring.reset_scorer_register.rst", "api/generated/julearn.transformers.CBPM.rst", "api/generated/julearn.transformers.ChangeColumnTypes.rst", "api/generated/julearn.transformers.DropColumns.rst", "api/generated/julearn.transformers.FilterColumns.rst", "api/generated/julearn.transformers.JuColumnTransformer.rst", "api/generated/julearn.transformers.SetColumnTypes.rst", "api/generated/julearn.transformers.confound_remover.ConfoundRemover.rst", "api/generated/julearn.transformers.get_transformer.rst", "api/generated/julearn.transformers.list_transformers.rst", "api/generated/julearn.transformers.register_transformer.rst", "api/generated/julearn.transformers.reset_transformer_register.rst", "api/generated/julearn.transformers.target.JuTargetTransformer.rst", "api/generated/julearn.transformers.target.JuTransformedTargetModel.rst", "api/generated/julearn.transformers.target.TargetConfoundRemover.rst", "api/generated/julearn.transformers.target.TransformedTargetWarning.rst", "api/generated/julearn.transformers.target.get_target_transformer.rst", "api/generated/julearn.transformers.target.list_target_transformers.rst", "api/generated/julearn.transformers.target.register_target_transformer.rst", "api/generated/julearn.transformers.target.reset_target_transformer_register.rst", "api/generated/julearn.utils.configure_logging.rst", "api/generated/julearn.utils.logger.rst", "api/generated/julearn.utils.raise_error.rst", "api/generated/julearn.utils.typing.EstimatorLike.rst", "api/generated/julearn.utils.typing.EstimatorLikeFit1.rst", "api/generated/julearn.utils.typing.EstimatorLikeFit2.rst", "api/generated/julearn.utils.typing.EstimatorLikeFity.rst", "api/generated/julearn.utils.typing.JuEstimatorLike.rst", "api/generated/julearn.utils.warn_with_log.rst", "api/generated/julearn.viz.plot_scores.rst", "api/index.rst", "api/inspect.rst", "api/main.rst", "api/model_selection.rst", "api/models.rst", "api/pipeline.rst", "api/prepare.rst", "api/scoring.rst", "api/transformers.rst", "api/utils.rst", "api/viz.rst", "auto_examples/00_starting/index.rst", "auto_examples/00_starting/plot_cm_acc_multiclass.rst", "auto_examples/00_starting/plot_example_regression.rst", "auto_examples/00_starting/plot_stratified_kfold_reg.rst", "auto_examples/00_starting/run_combine_pandas.rst", "auto_examples/00_starting/run_grouped_cv.rst", "auto_examples/00_starting/run_simple_binary_classification.rst", "auto_examples/00_starting/sg_execution_times.rst", "auto_examples/01_model_comparison/index.rst", "auto_examples/01_model_comparison/plot_simple_model_comparison.rst", "auto_examples/01_model_comparison/sg_execution_times.rst", "auto_examples/02_inspection/index.rst", "auto_examples/02_inspection/plot_groupcv_inspect_svm.rst", "auto_examples/02_inspection/plot_inspect_random_forest.rst", "auto_examples/02_inspection/plot_preprocess.rst", "auto_examples/02_inspection/run_binary_inspect_folds.rst", "auto_examples/02_inspection/sg_execution_times.rst", "auto_examples/03_complex_models/index.rst", "auto_examples/03_complex_models/run_apply_to_target.rst", "auto_examples/03_complex_models/run_example_pca_featsets.rst", "auto_examples/03_complex_models/run_hyperparameter_tuning.rst", "auto_examples/03_complex_models/run_stacked_models.rst", "auto_examples/03_complex_models/sg_execution_times.rst", "auto_examples/04_confounds/index.rst", "auto_examples/04_confounds/plot_confound_removal_classification.rst", "auto_examples/04_confounds/run_return_confounds.rst", "auto_examples/04_confounds/sg_execution_times.rst", "auto_examples/05_customization/index.rst", "auto_examples/05_customization/run_custom_scorers_regression.rst", "auto_examples/05_customization/sg_execution_times.rst", "available_pipeline_steps.rst", "contributing.rst", "examples.rst", "faq.rst", "getting_started.rst", "index.rst", "maintaining.rst", "selected_deeper_topics/CBPM.rst", "selected_deeper_topics/HPT.rst", "selected_deeper_topics/confound_removal.rst", "selected_deeper_topics/cross_validation_splitter.rst", "selected_deeper_topics/index.rst", "selected_deeper_topics/model_inspect.rst", "selected_deeper_topics/stacked_models.rst", "what_really_need_know/cross_validation.rst", "what_really_need_know/data.rst", "what_really_need_know/index.rst", "what_really_need_know/model_evaluation.rst", "what_really_need_know/pipeline.rst", "whats_new.rst"], "titles": ["<span class=\"section-number\">6.4. </span>Base", "julearn.PipelineCreator", "julearn.TargetPipelineCreator", "julearn.base.ColumnTypes", "julearn.base.ColumnTypesLike", "julearn.base.JuBaseEstimator", "julearn.base.JuTransformer", "julearn.base.WrapModel", "julearn.base.change_column_type", "julearn.base.ensure_column_types", "julearn.base.get_column_type", "julearn.base.make_type_selector", "julearn.inspect.preprocess", "julearn.model_selection.RepeatedStratifiedGroupsKFold", "julearn.model_selection.StratifiedBootstrap", "julearn.model_selection.StratifiedGroupsKFold", "julearn.model_selection.get_searcher", "julearn.model_selection.list_searchers", "julearn.model_selection.register_searcher", "julearn.model_selection.reset_searcher_register", "julearn.models.dynamic.DynamicSelection", "julearn.models.get_model", "julearn.models.list_models", "julearn.models.register_model", "julearn.models.reset_model_register", "julearn.pipeline.JuTargetPipeline", "julearn.pipeline.pipeline_creator.Step", "julearn.prepare.check_consistency", "julearn.prepare.prepare_input_data", "julearn.run_cross_validation", "julearn.scoring.check_scoring", "julearn.scoring.get_scorer", "julearn.scoring.list_scorers", "julearn.scoring.metrics.r2_corr", "julearn.scoring.register_scorer", "julearn.scoring.reset_scorer_register", "julearn.transformers.CBPM", "julearn.transformers.ChangeColumnTypes", "julearn.transformers.DropColumns", "julearn.transformers.FilterColumns", "julearn.transformers.JuColumnTransformer", "julearn.transformers.SetColumnTypes", "julearn.transformers.confound_remover.ConfoundRemover", "julearn.transformers.get_transformer", "julearn.transformers.list_transformers", "julearn.transformers.register_transformer", "julearn.transformers.reset_transformer_register", "julearn.transformers.target.JuTargetTransformer", "julearn.transformers.target.JuTransformedTargetModel", "julearn.transformers.target.TargetConfoundRemover", "julearn.transformers.target.TransformedTargetWarning", "julearn.transformers.target.get_target_transformer", "julearn.transformers.target.list_target_transformers", "julearn.transformers.target.register_target_transformer", "julearn.transformers.target.reset_target_transformer_register", "julearn.utils.configure_logging", "julearn.utils.logger", "julearn.utils.raise_error", "julearn.utils.typing.EstimatorLike", "julearn.utils.typing.EstimatorLikeFit1", "julearn.utils.typing.EstimatorLikeFit2", "julearn.utils.typing.EstimatorLikeFity", "julearn.utils.typing.JuEstimatorLike", "julearn.utils.warn_with_log", "julearn.viz.plot_scores", "<span class=\"section-number\">6. </span>Reference", "<span class=\"section-number\">6.5. </span>Inspect", "<span class=\"section-number\">6.1. </span>Main API", "<span class=\"section-number\">6.3. </span>Model Selection", "<span class=\"section-number\">6.6. </span>Models", "<span class=\"section-number\">6.2. </span>Pipeline", "<span class=\"section-number\">6.14. </span>Prepare", "<span class=\"section-number\">6.8. </span>Scoring", "<span class=\"section-number\">6.10. </span>Transformers", "<span class=\"section-number\">6.12. </span>Utils", "<span class=\"section-number\">6.15. </span>Vizualization", "<span class=\"section-number\">5.1. </span>Starting with julearn", "Multiclass Classification.", "Regression Analysis", "Stratified K-fold CV for regression analysis", "Working with pandas", "Grouped CV.", "Simple Binary Classification", "Computation times", "<span class=\"section-number\">5.2. </span>Model Comparison", "Simple Model Comparison", "Computation times", "<span class=\"section-number\">5.3. </span>Inspection", "Inspecting SVM models.", "Inspecting Random Forest models", "Preprocessing with variance threshold, zscore and PCA", "Inspecting the fold-wise predictions", "Computation times", "<span class=\"section-number\">5.4. </span>Complex Models", "Transforming target variable with z-score.", "Regression Analysis", "Tuning Hyperparameters", "Stacking Classification", "Computation times", "<span class=\"section-number\">5.5. </span>Confounds", "Confound Removal (model comparison)", "Return Confounds in Confound Removal", "Computation times", "<span class=\"section-number\">5.6. </span>Customization", "Custom Scoring Function for Regression", "Computation times", "<span class=\"section-number\">4. </span>Overview of available Pipeline Steps", "<span class=\"section-number\">7. </span>Contributing to julearn", "<span class=\"section-number\">5. </span>Examples", "<span class=\"section-number\">9. </span>Frequenly Asked Questions", "<span class=\"section-number\">1. </span>Getting started", "Welcome to julearn\u2019s documentation!", "<span class=\"section-number\">8. </span>Maintaining julearn", "<span class=\"section-number\">3.6. </span>Connectome-based Predictive Modeling (CBPM)", "<span class=\"section-number\">3.2. </span>Hyper Parameter Tuning", "<span class=\"section-number\">3.1. </span>Cross-validation consistent Confound Removal", "<span class=\"section-number\">3.4. </span>Cross-validation splitter", "<span class=\"section-number\">3. </span>Selected deeper topics", "<span class=\"section-number\">3.3. </span>Inspecting Models", "<span class=\"section-number\">3.5. </span>Stacking Models", "<span class=\"section-number\">2.1. </span>Why cross validation?", "<span class=\"section-number\">2.2. </span>Data", "<span class=\"section-number\">2. </span>What you really need to know", "<span class=\"section-number\">2.4. </span>Model evaluation", "<span class=\"section-number\">2.3. </span>Pipeline", "<span class=\"section-number\">10. </span>What\u2019s new"], "terms": {"provid": [0, 1, 3, 5, 14, 15, 29, 48, 69, 80, 101, 107, 111, 115, 119, 123, 124, 125], "import": [0, 25, 47, 77, 78, 79, 80, 81, 82, 85, 88, 90, 91, 94, 95, 96, 97, 100, 101, 104, 107, 113, 115, 119, 120, 121, 122, 123, 124], "modul": [0, 29, 69, 75, 101, 110, 111, 120, 123], "class": [0, 1, 2, 3, 4, 5, 6, 7, 13, 14, 15, 18, 20, 23, 25, 26, 29, 36, 37, 38, 39, 40, 41, 42, 45, 47, 48, 49, 50, 53, 56, 57, 58, 59, 60, 61, 62, 63, 68, 69, 70, 73, 74, 77, 79, 81, 82, 85, 88, 89, 91, 96, 97, 100, 106, 115, 123, 124], "function": [0, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 43, 44, 45, 46, 48, 51, 52, 53, 54, 55, 57, 63, 64, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 82, 85, 88, 89, 90, 99, 101, 103, 105, 109, 110, 111, 113, 115, 120, 121, 122, 123, 124, 125], "thi": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 69, 75, 77, 78, 79, 80, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 101, 104, 106, 107, 109, 110, 112, 113, 115, 119, 120, 121, 122, 123, 124], "page": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 111, 115], "i": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 75, 77, 78, 79, 80, 81, 82, 85, 88, 89, 90, 94, 95, 96, 100, 101, 104, 106, 107, 110, 112, 113, 117, 119, 120, 121, 122, 123, 124], "refer": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 90, 106, 107, 111, 121], "document": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 75, 79, 85, 89, 106, 112, 123, 124, 125], "It": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 88, 96, 110, 111, 113, 120, 123, 124], "onli": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 79, 85, 88, 90, 100, 101, 113, 115, 119, 120, 121, 122, 123, 125], "explain": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 107], "signatur": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64], "how": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 76, 81, 82, 85, 87, 88, 89, 93, 95, 101, 106, 107, 110, 111, 115, 119, 120, 122, 123], "pleas": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 69, 75, 90, 111, 122, 123, 124], "what": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 80, 81, 88, 95, 96, 101, 106, 107, 115, 119, 121, 123, 124], "you": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 80, 85, 90, 101, 107, 109, 110, 111, 112, 113, 115, 119, 120, 123, 124], "realli": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 100, 111], "need": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 80, 81, 82, 85, 88, 94, 100, 101, 104, 107, 109, 110, 111, 113, 115, 120, 121, 123, 124, 125], "know": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 95, 96, 111, 121, 124], "section": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 121, 123, 124, 125], "big": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64], "pictur": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64], "problem_typ": [1, 21, 27, 29, 77, 78, 79, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 101, 104, 115, 119, 123, 124], "apply_to": [1, 5, 6, 7, 26, 37, 38, 39, 40, 41, 42, 48, 90, 94, 95, 97, 100, 101, 115, 119, 124], "continu": [1, 7, 26, 37, 39, 41, 42, 77, 78, 79, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 100, 101, 104], "creat": [1, 2, 3, 36, 77, 79, 80, 82, 88, 90, 94, 95, 97, 106, 112, 113, 115, 119, 123, 124], "pipelin": [1, 2, 5, 6, 7, 12, 20, 27, 28, 29, 36, 37, 38, 39, 40, 41, 42, 47, 48, 65, 71, 88, 90, 91, 94, 95, 96, 97, 100, 101, 111, 113, 115, 119, 120, 121, 122, 123], "As": [1, 80, 82, 85, 91, 97, 100, 101, 104, 109, 113, 115, 119, 123, 124], "creation": [1, 115], "bit": [1, 110, 119, 123], "more": [1, 3, 29, 77, 78, 79, 81, 82, 85, 88, 90, 95, 100, 104, 107, 110, 115, 119, 120, 122, 123, 124, 125], "complic": [1, 120], "than": [1, 29, 79, 80, 88, 111, 115, 123, 124], "just": [1, 107, 111, 115, 122, 123, 124], "ad": [1, 29, 77, 78, 79, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 101, 104, 115, 121, 124], "step": [1, 2, 12, 25, 29, 77, 78, 79, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 101, 104, 107, 111, 113, 115, 120, 121, 122, 124], "helper": 1, "so": [1, 5, 6, 7, 20, 34, 36, 37, 38, 39, 40, 41, 42, 48, 80, 82, 85, 90, 96, 106, 109, 120, 121, 123, 124], "user": [1, 18, 23, 34, 36, 45, 50, 53, 55, 90, 104, 107, 110, 111, 115, 119, 124, 125], "can": [1, 3, 13, 14, 15, 18, 20, 23, 25, 27, 29, 34, 36, 40, 42, 45, 48, 53, 77, 78, 79, 80, 81, 82, 85, 88, 89, 90, 91, 94, 95, 100, 101, 104, 106, 107, 109, 111, 113, 115, 119, 120, 121, 122, 123, 124], "easili": [1, 113], "complex": [1, 88, 97, 108, 111, 115, 124], "sklearn": [1, 3, 5, 11, 20, 25, 40, 42, 49, 77, 78, 79, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 101, 104, 113, 115, 119, 123], "object": [1, 2, 5, 6, 7, 13, 14, 15, 20, 21, 27, 29, 31, 34, 36, 37, 38, 39, 40, 41, 42, 43, 45, 48, 51, 77, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 101, 109, 115, 123], "paramet": [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 20, 21, 23, 25, 26, 27, 28, 29, 30, 31, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 45, 47, 48, 49, 51, 53, 55, 57, 63, 64, 71, 77, 78, 79, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 101, 104, 106, 111, 113, 117, 120, 121, 122, 123, 124, 125], "classif": [1, 23, 27, 29, 55, 76, 81, 83, 85, 88, 89, 91, 93, 96, 98, 100, 107, 119, 123, 124], "regress": [1, 12, 15, 23, 27, 29, 34, 55, 76, 83, 90, 93, 94, 97, 98, 101, 103, 105, 106, 113, 117, 119, 123, 124, 125], "The": [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 20, 21, 23, 25, 26, 27, 28, 29, 33, 36, 37, 38, 39, 40, 41, 42, 43, 45, 47, 48, 49, 51, 53, 55, 57, 63, 64, 77, 78, 79, 80, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 101, 104, 106, 107, 108, 109, 110, 111, 112, 113, 115, 119, 121, 122, 124], "problem": [1, 13, 14, 15, 21, 23, 27, 29, 77, 78, 79, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 101, 104, 113, 115, 124, 125], "type": [1, 3, 5, 6, 7, 8, 10, 11, 12, 21, 23, 25, 26, 27, 28, 29, 37, 38, 39, 40, 41, 42, 48, 49, 65, 77, 78, 79, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 101, 104, 106, 111, 115, 117, 120, 122], "which": [1, 5, 6, 18, 23, 26, 29, 36, 37, 38, 39, 40, 41, 42, 45, 49, 53, 75, 78, 79, 81, 82, 88, 90, 94, 95, 96, 100, 101, 104, 107, 111, 113, 115, 119, 122, 123, 124], "should": [1, 5, 6, 14, 18, 23, 26, 34, 36, 37, 38, 39, 40, 41, 42, 45, 53, 90, 95, 100, 106, 107, 112, 113, 117, 120, 121, 123, 124], "columntypeslik": [1, 26, 37, 38, 39, 40, 42], "option": [1, 2, 6, 7, 12, 18, 20, 23, 26, 29, 34, 36, 37, 38, 39, 40, 41, 42, 45, 49, 53, 55, 57, 63, 64, 69, 75, 80, 101, 111, 121, 123], "To": [1, 40, 42, 88, 90, 107, 109, 111, 119, 120, 122, 123, 124], "transform": [1, 2, 6, 25, 29, 55, 65, 80, 90, 93, 98, 101, 111, 113, 115, 124, 125], "appli": [1, 5, 6, 7, 26, 29, 36, 37, 38, 39, 40, 41, 42, 48, 49, 77, 78, 79, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 101, 104, 111, 113, 115, 119, 121, 122, 123], "specifi": [1, 14, 16, 18, 28, 29, 39, 42, 49, 51, 80, 88, 89, 95, 101, 106, 107, 110, 113, 115, 119, 120, 121, 122, 123], "add": [1, 2, 3, 18, 23, 45, 90, 91, 94, 95, 96, 97, 100, 101, 107, 113, 115, 119, 121, 123, 124, 125], "method": [1, 5, 6, 7, 20, 36, 37, 38, 39, 40, 41, 42, 48, 80, 90, 101, 110, 113, 124], "default": [1, 2, 5, 6, 7, 12, 13, 14, 15, 18, 20, 23, 24, 26, 29, 34, 35, 36, 37, 38, 39, 40, 41, 42, 45, 48, 49, 53, 55, 57, 63, 64, 85, 88, 90, 96, 97, 100, 101, 106, 110, 113, 115, 123, 124, 125], "__init__": [1, 2, 3, 5, 6, 7, 13, 14, 15, 20, 25, 26, 36, 37, 38, 39, 40, 41, 42, 47, 48, 49, 50, 59, 60, 61, 62], "name": [1, 2, 5, 6, 7, 8, 12, 16, 17, 18, 20, 21, 22, 23, 26, 29, 31, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 51, 52, 53, 55, 77, 78, 79, 80, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 101, 104, 106, 107, 111, 115, 119, 121, 123, 124], "none": [1, 2, 5, 6, 7, 12, 13, 14, 15, 18, 20, 23, 25, 26, 27, 28, 29, 34, 36, 37, 38, 39, 40, 41, 42, 45, 49, 53, 55, 57, 78, 79, 80, 81, 82, 85, 88, 89, 90, 94, 95, 96, 97, 100, 101, 104, 123, 124], "row_select_col_typ": [1, 6, 26, 37, 38, 39, 40, 41, 42], "row_select_v": [1, 6, 26, 37, 38, 39, 40, 41, 42], "param": [1, 2, 5, 6, 7, 20, 36, 37, 38, 39, 40, 41, 42, 43, 48, 51, 59, 60, 61, 62, 110], "estimatorlik": [1, 30, 40], "an": [1, 2, 6, 13, 14, 15, 27, 29, 31, 36, 37, 38, 39, 40, 41, 42, 77, 80, 81, 82, 85, 88, 89, 90, 96, 100, 107, 111, 113, 115, 119, 120, 121, 123, 124, 125], "available_transform": 1, "available_model": 1, "str": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 16, 17, 18, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 51, 52, 53, 55, 57, 63, 77, 78, 95, 106, 123, 124], "compat": [1, 13, 14, 15, 16, 18, 20, 29, 37, 38, 39, 40, 41, 42, 43, 49, 113, 123, 124, 125], "model": [1, 7, 12, 14, 29, 42, 48, 49, 55, 64, 65, 72, 77, 78, 79, 81, 82, 86, 87, 90, 91, 92, 94, 95, 96, 97, 99, 101, 102, 104, 108, 111, 115, 117, 120, 122, 124], "If": [1, 2, 5, 6, 7, 12, 14, 15, 16, 18, 20, 23, 27, 28, 29, 36, 37, 38, 39, 40, 41, 42, 45, 48, 51, 53, 55, 80, 82, 88, 90, 100, 104, 107, 110, 111, 115, 121, 122, 123, 124], "obtain": [1, 2, 7, 48, 89, 115, 120], "from": [1, 2, 3, 5, 20, 25, 28, 29, 37, 42, 45, 47, 49, 53, 77, 78, 79, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 101, 104, 106, 107, 110, 111, 112, 113, 119, 120, 121, 123, 124], "repres": [1, 3, 14, 15, 26, 42, 49], "column": [1, 3, 5, 6, 7, 8, 10, 11, 12, 20, 26, 28, 29, 37, 38, 39, 40, 41, 42, 48, 49, 77, 78, 79, 80, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 100, 101, 104, 106, 113, 115, 119, 122, 123, 124, 125], "list": [1, 3, 4, 5, 6, 7, 12, 17, 22, 25, 26, 28, 29, 32, 37, 38, 39, 40, 41, 42, 44, 49, 52, 101, 106, 121, 123, 124], "attribut": [1, 5, 7, 9, 20, 36, 48], "set": [1, 3, 4, 5, 6, 7, 13, 14, 15, 18, 20, 25, 26, 29, 34, 36, 37, 38, 39, 40, 41, 42, 48, 49, 50, 77, 78, 79, 80, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 101, 104, 108, 111, 113, 122, 123, 124, 125], "columntyp": [1, 4, 5, 6, 7, 9, 26, 37, 38, 39, 40, 41, 42, 48, 49, 77, 78, 79, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 101, 104], "select": [1, 6, 7, 11, 20, 26, 37, 38, 39, 40, 41, 42, 65, 90, 111, 113, 122, 123, 124], "row": [1, 6, 26, 37, 38, 39, 40, 41, 42, 77, 78, 79, 80, 81, 85, 88, 90, 91, 94, 95, 101, 104, 123], "int": [1, 6, 13, 14, 15, 20, 26, 27, 28, 29, 36, 37, 38, 39, 40, 41, 42, 55, 64, 123], "bool": [1, 5, 6, 7, 12, 18, 20, 23, 25, 26, 29, 34, 36, 37, 38, 39, 40, 41, 42, 45, 48, 53, 55], "valu": [1, 5, 6, 7, 14, 20, 26, 29, 33, 36, 37, 38, 39, 40, 41, 42, 48, 49, 77, 78, 79, 80, 81, 82, 88, 90, 94, 95, 96, 100, 104, 106, 113, 120, 123, 124], "": [1, 5, 6, 7, 20, 26, 29, 36, 37, 38, 39, 40, 41, 42, 48, 49, 55, 77, 78, 79, 80, 81, 88, 90, 94, 95, 96, 100, 101, 104, 106, 107, 113, 115, 119, 120, 121, 122, 123, 124], "train": [1, 6, 13, 14, 15, 20, 26, 29, 36, 37, 38, 39, 40, 41, 42, 49, 77, 78, 79, 81, 88, 90, 94, 95, 100, 104, 115, 120, 123, 124], "mostli": [1, 2], "includ": [1, 2, 12, 14, 89, 90, 101, 107, 110, 120], "hyperparamet": [1, 2, 29, 55, 85, 90, 93, 95, 97, 98, 100, 101, 113, 119, 122, 123, 125], "ani": [1, 2, 7, 18, 20, 23, 25, 26, 27, 28, 29, 34, 45, 47, 48, 53, 107, 113, 124], "other": [1, 2, 18, 20, 23, 45, 75, 80, 82, 95, 96, 101, 107, 113, 115, 120, 122], "initi": [1, 2, 18, 19, 45, 46, 53, 54, 100, 115, 124], "multipl": [1, 13, 14, 15, 90, 120, 123, 124], "lead": [1, 110, 115, 121, 123, 124], "search": [1, 17, 18, 29, 90, 96, 111], "return": [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21, 22, 25, 28, 29, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 79, 88, 89, 99, 102, 104, 120, 122, 124], "its": [1, 5, 19, 46, 54, 119, 120, 122, 124], "last": [1, 90, 95, 101, 112, 115], "rais": [1, 15, 16, 18, 23, 27, 28, 34, 45, 51, 53, 55, 57, 124, 125], "valueerror": [1, 15, 16, 18, 23, 27, 28, 34, 45, 51, 53, 57], "valid": [1, 13, 14, 15, 27, 28, 29, 71, 77, 78, 89, 95, 100, 101, 106, 111, 113, 117, 121, 122], "targetpipelinecr": [1, 94, 106, 115, 124], "target": [1, 2, 6, 7, 13, 14, 20, 25, 27, 28, 29, 36, 37, 38, 39, 40, 41, 42, 55, 65, 77, 78, 79, 80, 81, 82, 85, 88, 89, 90, 91, 93, 95, 96, 97, 98, 100, 101, 104, 106, 111, 113, 119, 121, 122, 123, 125], "properti": [1, 3, 7, 25, 48, 49], "get": [1, 3, 5, 6, 7, 10, 16, 20, 21, 25, 31, 36, 37, 38, 39, 40, 41, 42, 43, 48, 49, 51, 77, 78, 81, 88, 89, 90, 95, 101, 111, 119, 121, 123], "have": [1, 5, 6, 7, 20, 28, 36, 37, 38, 39, 40, 41, 42, 48, 77, 80, 81, 82, 85, 88, 90, 96, 100, 101, 106, 107, 110, 111, 113, 115, 119, 120, 121, 122, 123, 124], "been": [1, 50, 113], "has_model": 1, "whether": [1, 12, 18, 23, 29, 34, 36, 42, 45, 53, 81, 85, 88, 107, 115], "ha": [1, 29, 36, 50, 77, 78, 79, 80, 81, 82, 85, 88, 89, 91, 95, 97, 100, 104, 107, 113, 115, 121, 123, 124], "classmethod": 1, "from_list": 1, "model_param": [1, 29, 85, 125], "union": [1, 4, 25, 26, 30, 49, 58], "dict": [1, 5, 6, 7, 20, 26, 28, 29, 36, 37, 38, 39, 40, 41, 42, 48], "kei": [1, 28, 29, 37, 41, 80, 90, 124], "being": [1, 110, 123, 124], "pieplin": 1, "to_pipelin": [1, 2], "x_type": [1, 28, 29, 37, 38, 39, 41, 42, 77, 78, 79, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 101, 104, 115, 119, 121, 124], "search_param": [1, 29, 96, 125], "data": [1, 5, 6, 7, 12, 13, 14, 15, 20, 25, 27, 28, 29, 36, 37, 38, 39, 40, 41, 42, 47, 48, 49, 71, 77, 78, 79, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 101, 104, 106, 111, 113, 115, 119, 120, 122, 123, 124], "inspect": [1, 29, 55, 65, 90, 92, 95, 101, 108, 111, 117, 121, 123], "fold": [1, 13, 15, 29, 55, 76, 77, 78, 83, 87, 88, 89, 92, 94, 95, 100, 101, 104, 120, 123, 124], "wise": [1, 29, 55, 87, 92], "predict": [1, 7, 20, 28, 29, 33, 42, 48, 49, 55, 77, 78, 79, 80, 81, 82, 85, 87, 88, 92, 94, 95, 97, 101, 104, 106, 111, 115, 117, 119, 120, 123, 124], "preprocess": [1, 29, 55, 77, 78, 79, 81, 82, 85, 87, 88, 89, 92, 95, 100, 101, 104, 113, 120, 121, 122, 123], "varianc": [1, 12, 29, 55, 79, 87, 92, 106], "threshold": [1, 12, 29, 36, 42, 49, 55, 87, 92, 106, 113], "zscore": [1, 12, 29, 55, 77, 78, 79, 81, 82, 85, 87, 88, 89, 91, 92, 94, 96, 97, 100, 104, 106, 123, 124], "pca": [1, 12, 29, 55, 87, 92, 95, 101, 106, 124], "variabl": [1, 2, 13, 14, 15, 27, 28, 29, 55, 78, 79, 81, 88, 93, 95, 98, 101, 104, 115, 121, 123, 124, 125], "z": [1, 2, 29, 55, 88, 93, 98, 112, 123, 124], "score": [1, 2, 7, 20, 29, 48, 55, 64, 65, 77, 78, 79, 81, 82, 85, 88, 89, 90, 91, 93, 95, 96, 97, 98, 100, 101, 103, 105, 111, 113, 115, 119, 120, 122, 124, 125], "stack": [1, 29, 55, 93, 98, 100, 106, 111, 117], "tune": [1, 26, 29, 55, 93, 98, 111, 113, 117, 124], "analysi": [1, 12, 15, 29, 55, 76, 83, 88, 93, 94, 98, 104, 106, 124], "confound": [1, 12, 14, 29, 37, 42, 49, 55, 80, 102, 106, 108, 111, 117, 123, 125], "remov": [1, 12, 14, 29, 37, 42, 49, 55, 85, 90, 99, 102, 106, 107, 111, 117, 123, 125], "comparison": [1, 14, 29, 55, 64, 86, 99, 102, 108, 111, 122], "analog": 2, "pipelinecr": [2, 29, 90, 91, 94, 95, 96, 97, 100, 101, 106, 113, 115, 119, 122, 123], "allow": [2, 18, 23, 34, 45, 53, 82, 100, 109, 113, 115, 122, 125], "target_pipelin": [2, 115], "jutargetpipelin": [2, 48, 94], "easi": [2, 80, 111, 115, 119, 122, 123], "wai": [2, 82, 85, 107, 109, 111, 115, 119, 123, 124], "out": [2, 17, 40, 42, 43, 52, 85, 101, 106, 111, 112, 115, 119, 122, 123], "us": [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 69, 75, 76, 77, 78, 79, 80, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 104, 106, 107, 108, 110, 111, 113, 117, 119, 120, 121, 122, 123, 124, 125], "column_typ": 3, "hold": [3, 123], "regard": [3, 123], "pd": [3, 5, 6, 7, 12, 20, 25, 29, 37, 38, 39, 40, 41, 42, 47, 48, 49, 64, 77, 78, 79, 80, 88, 89, 90, 94, 95, 100, 104, 113, 115, 119, 123], "datafram": [3, 5, 6, 7, 12, 20, 25, 28, 29, 36, 37, 38, 39, 40, 41, 42, 47, 48, 49, 64, 77, 78, 79, 80, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 101, 104, 111, 113, 115, 119, 121, 123, 125], "One": [3, 20, 80, 115, 119, 124], "instead": [3, 14, 15, 18, 23, 34, 36, 45, 53, 79, 115, 119, 123, 125], "also": [3, 77, 80, 82, 85, 90, 95, 101, 107, 113, 115, 119, 121, 123, 124], "itself": [3, 119], "self": [3, 5, 6, 20, 25, 36, 37, 38, 39, 40, 41, 42, 47, 48, 50], "updat": [3, 5, 6, 7, 20, 36, 37, 38, 39, 40, 41, 42, 48, 110, 112, 125], "pattern": [3, 11, 77, 78, 79, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 101, 104, 113], "regex": 3, "match": [3, 40, 80], "all": [3, 12, 17, 18, 22, 29, 32, 36, 37, 41, 42, 44, 49, 52, 76, 77, 78, 81, 82, 84, 87, 88, 89, 90, 91, 93, 95, 99, 100, 101, 103, 104, 106, 107, 111, 112, 113, 115, 117, 120, 122, 123, 124], "to_type_selector": 3, "selector": [3, 11], "usabl": [3, 124], "compos": [3, 11], "columntransform": [3, 11], "callabl": [3, 30, 31, 34, 36, 125], "copi": [3, 79, 101, 107], "alia": [4, 56, 58], "needed_typ": [5, 6, 7, 25, 26, 40, 49], "estim": [5, 6, 7, 20, 26, 29, 30, 31, 34, 36, 37, 38, 39, 40, 41, 42, 48, 88, 89, 90, 96, 97, 100, 101, 111, 113, 115, 117, 120, 122, 124], "everi": [5, 23, 28, 29, 45, 107, 112, 121, 124], "awar": [5, 110], "thu": [5, 88, 120], "thei": [5, 7, 20, 48, 77, 78, 79, 80, 81, 82, 85, 88, 89, 90, 91, 94, 96, 100, 104, 107, 123, 124], "abl": [5, 85, 107, 123], "main": [5, 65, 100, 107, 111, 112], "differ": [5, 13, 14, 15, 23, 79, 80, 82, 85, 90, 95, 96, 97, 100, 101, 107, 109, 110, 113, 119, 120, 121, 124], "between": [5, 14, 27, 78, 100, 107, 113, 115, 119, 120, 123, 124], "baseestim": [5, 125], "purpos": [5, 79, 80, 123, 124], "That": [5, 15, 113, 115, 124], "ar": [5, 6, 7, 15, 18, 20, 23, 25, 29, 34, 36, 37, 38, 39, 40, 41, 42, 45, 47, 48, 49, 53, 77, 78, 79, 80, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 100, 101, 104, 107, 108, 109, 110, 111, 112, 113, 115, 119, 120, 122, 123, 124, 125], "get_needed_typ": [5, 6, 7, 37, 38, 39, 40, 41, 42, 48, 62], "get_apply_to": [5, 6, 7, 37, 38, 39, 40, 41, 42, 48, 62], "filter_column": [5, 6, 7, 37, 38, 39, 40, 41, 42, 48, 97, 106, 119], "x": [5, 6, 7, 12, 13, 14, 15, 20, 25, 28, 29, 31, 34, 36, 37, 38, 39, 40, 41, 42, 47, 48, 49, 59, 60, 62, 77, 78, 79, 80, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 101, 104, 112, 113, 115, 119, 121, 123, 124], "panda": [5, 6, 7, 27, 28, 29, 36, 37, 38, 39, 40, 41, 42, 48, 76, 77, 78, 79, 81, 82, 83, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 104, 110, 111, 113, 115, 119, 121], "filter": [5, 6, 7, 37, 38, 39, 40, 41, 42, 48, 106, 124], "get_param": [5, 6, 7, 20, 36, 37, 38, 39, 40, 41, 42, 48, 59, 60, 61, 62], "deep": [5, 6, 7, 20, 36, 37, 38, 39, 40, 41, 42, 48, 59, 60, 61, 62, 115], "true": [5, 6, 7, 18, 20, 23, 25, 29, 33, 34, 36, 37, 38, 39, 40, 41, 42, 45, 48, 53, 59, 60, 61, 62, 77, 78, 79, 82, 88, 91, 94, 95, 100, 101, 104, 115, 120, 123, 124], "contain": [5, 6, 7, 20, 28, 29, 32, 36, 37, 38, 39, 40, 41, 42, 48, 64, 77, 78, 79, 82, 94, 95, 104, 121, 123], "subobject": [5, 6, 7, 20, 36, 37, 38, 39, 41, 42, 48], "map": [5, 6, 7, 20, 36, 37, 38, 39, 40, 41, 42, 48, 78, 101], "set_param": [5, 6, 7, 20, 36, 37, 38, 39, 40, 41, 42, 48, 59, 60, 61, 62], "work": [5, 6, 7, 20, 25, 36, 37, 38, 39, 40, 41, 42, 47, 48, 76, 77, 78, 79, 81, 82, 83, 85, 88, 89, 90, 91, 94, 96, 100, 101, 104, 115, 119, 125], "simpl": [5, 6, 7, 20, 29, 36, 37, 38, 39, 40, 41, 42, 48, 55, 64, 76, 83, 84, 86, 88, 89, 90, 91, 96, 100, 101, 106, 107, 113, 119, 124], "well": [5, 6, 7, 20, 36, 37, 38, 39, 40, 41, 42, 48, 113, 115, 119, 120, 121, 122, 123, 124], "nest": [5, 6, 7, 20, 36, 37, 38, 39, 40, 41, 42, 48, 113, 120], "latter": [5, 6, 7, 20, 36, 37, 38, 39, 40, 41, 42, 48], "form": [5, 6, 7, 20, 36, 37, 38, 39, 40, 41, 42, 48, 121, 124], "compon": [5, 6, 7, 20, 36, 37, 38, 39, 40, 41, 42, 48, 90, 95, 106, 124], "__": [5, 6, 7, 20, 36, 37, 38, 39, 40, 41, 42, 48, 77, 78, 79, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 101, 104], "possibl": [5, 6, 7, 18, 20, 23, 34, 36, 37, 38, 39, 40, 41, 42, 45, 48, 53, 80, 111, 120, 123, 124], "each": [5, 6, 7, 13, 14, 15, 20, 28, 29, 36, 37, 38, 39, 40, 41, 42, 48, 49, 77, 78, 80, 81, 88, 89, 90, 91, 95, 100, 104, 106, 107, 113, 115, 117, 123, 124], "instanc": [5, 6, 7, 13, 14, 15, 20, 36, 37, 38, 39, 40, 41, 42, 48, 115, 124], "fit": [6, 7, 20, 25, 29, 36, 37, 38, 39, 40, 41, 42, 47, 48, 49, 59, 60, 61, 62, 88, 89, 95, 101, 106, 113, 115, 117, 120, 123, 124], "y": [6, 7, 13, 14, 15, 20, 25, 27, 28, 29, 31, 34, 36, 37, 38, 39, 40, 41, 42, 47, 48, 49, 59, 60, 61, 62, 77, 78, 79, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 101, 104, 106, 112, 113, 115, 119, 120, 121, 123, 124], "fit_param": [6, 7, 36, 37, 38, 39, 40, 41, 42, 48], "fit_transform": [6, 25, 36, 37, 38, 39, 40, 41, 42, 47, 49], "version": [6, 14, 36, 37, 38, 39, 40, 41, 42, 77, 78, 79, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 104, 107, 110, 111, 125], "arrai": [6, 7, 13, 14, 15, 29, 36, 37, 38, 39, 40, 41, 42, 48], "like": [6, 7, 13, 14, 15, 23, 36, 37, 38, 39, 40, 41, 42, 45, 48, 85, 95, 110, 120, 121, 123, 124], "shape": [6, 7, 13, 14, 15, 36, 37, 38, 39, 40, 41, 42, 48, 77, 88], "n_sampl": [6, 7, 13, 14, 15, 36, 37, 38, 39, 40, 41, 42, 48, 90, 119], "n_featur": [6, 13, 14, 15, 36, 37, 38, 39, 40, 41, 42, 90, 115, 119], "input": [6, 25, 27, 28, 29, 36, 37, 38, 39, 40, 41, 42, 47, 48, 49, 71, 77, 78, 79, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 101, 104, 113, 122, 124], "sampl": [6, 7, 13, 14, 15, 20, 28, 36, 37, 38, 39, 40, 41, 42, 48, 77, 78, 79, 80, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 101, 104, 113, 119, 123], "n_output": [6, 36, 37, 38, 39, 40, 41, 42], "unsupervis": [6, 36, 37, 38, 39, 40, 41, 42], "addit": [6, 7, 20, 29, 36, 37, 38, 39, 40, 41, 42, 48, 110, 111, 113, 119, 123, 124], "x_new": [6, 36, 37, 38, 39, 40, 41, 42], "ndarrai": [6, 7, 13, 14, 15, 20, 36, 37, 38, 39, 40, 41, 42, 48], "n_features_new": [6, 36, 37, 38, 39, 40, 41, 42], "set_output": [6, 36, 37, 38, 39, 40, 41, 42], "output": [6, 12, 13, 14, 15, 29, 36, 37, 38, 39, 40, 41, 42, 55, 64, 79, 100, 107, 123, 124], "see": [6, 13, 15, 21, 28, 29, 36, 37, 38, 39, 40, 41, 42, 55, 69, 75, 77, 78, 79, 80, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 101, 104, 106, 109, 115, 119, 120, 122, 123, 124], "introduc": [6, 36, 37, 38, 39, 40, 41, 42, 80, 115], "api": [6, 36, 37, 38, 39, 40, 41, 42, 65, 111, 119, 122, 124], "exampl": [6, 36, 37, 38, 39, 40, 41, 42, 76, 77, 78, 79, 80, 81, 82, 84, 85, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 99, 100, 101, 103, 104, 109, 110, 111, 113, 115, 119, 121, 123, 124, 125], "configur": [6, 36, 37, 38, 39, 40, 41, 42, 55, 115, 119], "format": [6, 36, 37, 38, 39, 40, 41, 42, 55, 78, 95, 96, 100, 107, 112, 115], "unchang": [6, 36, 37, 38, 39, 40, 41, 42], "wrap": [7, 48, 125], "make": [7, 11, 13, 14, 15, 20, 78, 80, 81, 88, 90, 95, 96, 100, 107, 110, 112, 115, 119, 120, 121, 123, 124, 125], "modellik": [7, 20, 21, 23, 42, 48, 49], "datalik": [7, 20, 25, 39, 47, 48, 49], "pass": [7, 13, 14, 15, 20, 48, 106, 107, 120, 123, 124], "float": [7, 14, 20, 28, 29, 33, 36, 42, 49, 64, 77], "predict_proba": [7, 20, 48], "comput": [7, 20, 33, 36, 48, 82, 95, 104, 124], "probabl": [7, 20, 29, 48], "outcom": [7, 20, 48, 124], "np": [7, 13, 14, 15, 20, 36, 48, 77, 78, 81, 88, 95, 96, 113, 115, 119], "correspond": [7, 20, 29, 48], "sort": [7, 20, 48, 81, 88, 106], "order": [7, 20, 48, 80, 81, 88, 100, 101, 107, 115, 119], "appear": [7, 20, 48, 123], "classes_": [7, 20, 48], "decision_funct": [7, 48, 88, 125], "evalu": [7, 29, 48, 72, 82, 88, 111, 120, 122, 124], "decis": [7, 48, 80, 81, 88, 96, 115], "n_class": [7, 48], "1": [7, 14, 20, 28, 29, 40, 48, 77, 78, 79, 80, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 101, 104, 110, 111, 112, 113, 115, 119, 121, 123, 124], "2": [7, 13, 14, 15, 20, 48, 77, 78, 79, 80, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 101, 104, 110, 111, 115, 119, 123, 124], "predict_log_proba": 7, "kwarg": [7, 20, 21, 40, 47, 50, 59, 60, 61, 62], "new_typ": 8, "chang": [8, 14, 37, 75, 96, 100, 106, 110, 112, 123, 124], "new": [8, 88, 94, 101, 107, 111, 120, 124], "attr": 9, "ensur": [9, 15, 37, 39, 41, 42], "check": [9, 25, 27, 30, 74, 80, 81, 88, 90, 100, 107, 111, 112, 123, 125], "until": [12, 88, 90, 95, 101, 110, 123], "with_column_typ": [12, 88], "fals": [12, 15, 18, 23, 29, 34, 38, 42, 45, 53, 55, 78, 79, 81, 82, 85, 88, 89, 90, 94, 95, 96, 97, 101, 104], "certain": [12, 121, 122, 123], "inclus": [12, 101], "featur": [12, 13, 14, 15, 25, 28, 29, 36, 37, 38, 39, 40, 41, 42, 47, 49, 77, 78, 79, 80, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 101, 104, 110, 113, 117, 120, 122, 123], "svm": [12, 29, 55, 77, 82, 85, 87, 91, 92, 96, 97, 106, 119, 123, 124], "n_split": [13, 14, 15, 20, 77, 78, 79, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 101, 104, 123], "5": [13, 14, 15, 29, 77, 78, 79, 80, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 101, 104, 111, 113, 120, 123], "n_repeat": [13, 77, 85, 91, 123], "10": [13, 36, 77, 78, 79, 80, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 101, 104, 115, 119, 123], "random_st": [13, 14, 15, 20, 77, 78, 79, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 101, 104, 123], "repeat": [13, 77, 78, 95, 120, 123], "stratifi": [13, 14, 15, 29, 55, 76, 77, 83, 123, 125], "group": [13, 14, 15, 27, 28, 29, 55, 76, 79, 83, 88, 95, 111, 113, 123, 125], "k": [13, 15, 29, 55, 76, 77, 78, 81, 83, 88, 94, 95, 100, 106, 123], "cross": [13, 14, 15, 27, 29, 77, 78, 89, 95, 100, 101, 106, 111, 113, 117, 121, 122], "stratifiedgroupskfold": [13, 79, 81, 125], "n": [13, 15, 77, 78, 79, 90, 94, 95, 104, 106, 112, 124], "time": [13, 15, 77, 78, 79, 80, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 101, 104, 107, 112, 113, 120, 123], "random": [13, 14, 15, 20, 29, 55, 81, 82, 85, 87, 90, 92, 96, 100, 106, 115, 119, 123, 124], "repetit": [13, 15, 77, 78, 95], "number": [13, 14, 15, 29, 77, 78, 79, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 101, 104, 112, 123, 124], "must": [13, 15, 40, 64, 80, 81, 88, 95, 107, 112], "least": [13, 15, 29, 79, 100, 106], "randomst": [13, 14, 15], "control": [13, 14, 15, 80, 81, 88, 96, 103, 115, 119], "gener": [13, 14, 15, 29, 40, 76, 77, 78, 79, 80, 81, 82, 84, 85, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 99, 100, 101, 103, 104, 107, 111, 119, 120, 123, 124], "state": [13, 15, 19, 20, 24, 35, 46, 54, 115, 123], "reproduc": [13, 14, 15, 20, 29, 123], "across": [13, 14, 15, 78, 89, 94, 95, 104], "call": [13, 14, 15, 18, 31, 34, 109, 115, 119, 120, 121, 123, 124], "glossari": [13, 15], "note": [13, 14, 15, 29, 90, 100, 115, 119], "cv": [13, 14, 15, 20, 27, 28, 29, 55, 76, 77, 78, 82, 83, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 101, 104, 106, 123, 124, 125], "splitter": [13, 14, 15, 20, 29, 111, 117], "mai": [13, 14, 15, 75, 113, 115, 119], "result": [13, 14, 15, 25, 29, 47, 80, 88, 100, 101, 115, 123], "split": [13, 14, 15, 20, 29, 77, 78, 79, 82, 85, 88, 94, 95, 104, 120, 123, 124], "ident": [13, 14, 15], "integ": [13, 14, 15, 123], "get_n_split": [13, 14, 15], "iter": [13, 14, 15, 29, 90, 100, 113, 123, 125], "alwai": [13, 14, 15, 82, 96, 100, 115, 119, 123, 124], "ignor": [13, 14, 15, 101, 104], "exist": [13, 14, 15, 34, 55, 107], "zero": [13, 14, 15, 90], "placehold": [13, 14, 15], "label": [13, 14, 28, 29, 77, 82, 121, 123, 124], "while": [13, 14, 29, 89, 100, 111, 115, 119, 120, 124], "dataset": [13, 14, 77, 78, 79, 80, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 101, 104, 107, 113, 115, 119, 120, 121, 123, 124], "test": [13, 14, 15, 20, 29, 49, 77, 78, 79, 85, 88, 94, 95, 96, 100, 111, 115, 120, 123, 125], "indic": [13, 14, 15, 29, 38, 42, 88, 106, 123, 124], "where": [13, 14, 15, 80, 107, 112, 124, 125], "supervis": [13, 14], "learn": [13, 14, 16, 18, 29, 36, 37, 39, 40, 41, 42, 43, 47, 80, 82, 88, 89, 104, 106, 110, 111, 113, 115, 119, 120, 121, 122, 123, 124, 125], "yield": [13, 14, 15, 29, 123], "test_siz": [14, 77, 78, 88, 94, 95, 100], "0": [14, 20, 28, 29, 36, 42, 49, 64, 77, 78, 79, 80, 81, 82, 83, 85, 86, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 100, 101, 102, 104, 105, 110, 111, 113, 123], "train_siz": [14, 88, 91, 100], "bootstrap": [14, 100], "resampl": 14, "replac": [14, 36, 89, 100, 107, 112], "respect": [14, 36, 106, 121, 123, 124], "distribut": [14, 77, 81, 82, 85, 88, 89, 91, 96, 97, 100, 106, 115, 124], "re": [14, 124], "shuffl": [14, 15, 78, 79, 81, 82, 85, 88, 89, 90, 94, 95, 96, 97, 101, 104, 123], "proport": 14, "round": 14, "up": [14, 29, 57, 90, 96, 101, 111, 113, 122, 124], "absolut": [14, 78, 94, 95, 104, 106], "complement": [14, 106], "size": [14, 113, 115], "21": [14, 80, 119], "remain": 14, "unspecifi": 14, "otherwis": [14, 55, 124], "automat": [14, 107, 110, 112], "produc": 14, "suffici": [14, 15], "henc": [14, 15], "actual": [14, 15, 36, 42, 77, 78, 95, 101, 104], "n_label": 14, "stratif": [14, 15, 79, 81], "done": [14, 107, 110, 112, 119, 120, 123, 124], "base": [14, 25, 47, 65, 106, 107, 109, 111, 115, 117, 121, 122, 124, 125], "particular": [15, 115, 124], "implement": [15, 36, 111, 113, 115, 119, 124, 125], "searcher": [16, 17, 18, 19, 29, 125], "obj": [16, 18], "scikit": [16, 18, 29, 36, 37, 39, 40, 41, 42, 43, 47, 82, 88, 89, 104, 106, 110, 111, 113, 115, 119, 120, 123, 124, 125], "avail": [16, 17, 18, 22, 29, 31, 32, 44, 51, 52, 110, 111, 120, 123, 124], "algorithm": [17, 18, 20, 29, 120, 123, 124, 125], "A": [17, 22, 28, 29, 37, 41, 44, 52, 79, 80, 81, 82, 88, 96, 97, 113, 115, 121, 124], "searcher_nam": 18, "overwrit": [18, 23, 34, 45, 53, 55, 125], "regist": [18, 19, 23, 24, 34, 35, 45, 46, 53, 54, 104, 125], "after": [18, 25, 42, 47, 49, 78, 79, 88, 90, 94, 95, 100, 101, 104, 107, 120], "referenc": [18, 23, 45, 53], "decid": [18, 23, 34, 53], "warn": [18, 23, 27, 28, 34, 45, 50, 53, 55, 63, 77, 78, 79, 81, 82, 85, 88, 89, 90, 91, 94, 96, 100, 104, 125], "without": [18, 23, 34, 45, 53, 79, 81, 96, 100, 101, 106, 120, 123], "error": [18, 23, 28, 29, 34, 45, 53, 55, 57, 78, 80, 94, 95, 104, 107, 124, 125], "alreadi": [18, 23, 34, 45, 53, 88, 90, 107, 111, 115, 119, 122, 124], "reset": [19, 24, 35, 46, 54, 80], "ensembl": [20, 119], "ds_split": 20, "random_state_algorithm": 20, "deslib": [20, 65, 106, 110, 111], "e": [20, 23, 29, 36, 42, 49, 55, 106, 110, 113, 115, 123, 124], "g": [20, 23, 29, 55, 95, 106, 110, 123], "randomforest": 20, "metad": 20, "singlebest": 20, "staticselect": 20, "stackedclassifi": 20, "knorau": 20, "knora": 20, "desp": 20, "ola": 20, "mcb": 20, "knop": 20, "consist": [20, 27, 111, 113, 117, 120, 121, 123, 124, 125], "case": [20, 28, 29, 36, 80, 88, 94, 104, 107, 113, 115, 123, 124], "sample_weight": 20, "weight": [20, 124], "when": [20, 79, 100, 106, 107, 113, 115, 123, 124, 125], "run_cross_valid": [21, 23, 64, 77, 78, 79, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 101, 104, 107, 113, 115, 119, 122, 124, 125], "model_nam": 23, "classification_cl": 23, "regression_cl": 23, "afterward": [23, 45, 119], "behav": [23, 45], "insid": [23, 123, 124], "runtimewarn": [23, 27, 28, 45, 53, 63, 77, 78, 79, 81, 82, 85, 88, 89, 90, 91, 94, 96, 100, 104], "unlik": [25, 47], "both": [25, 36, 47, 79, 81, 88, 100, 101, 115, 119, 120, 123, 124], "requir": [25, 47, 69, 75, 111, 124], "inform": [25, 29, 47, 77, 78, 79, 80, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 101, 104, 115, 119, 120, 121, 122, 123, 124, 125], "targetconfoundremov": [25, 47], "encod": [25, 47], "one": [25, 29, 37, 38, 39, 41, 47, 78, 79, 80, 81, 88, 90, 94, 95, 96, 97, 101, 104, 106, 107, 113, 115, 119, 120, 121, 122, 123, 124, 125], "present": [25, 47, 101], "leakag": [25, 47, 111, 115, 120, 124], "drop": [25, 36, 38, 47, 79, 82, 85, 90, 101, 106], "tupl": [25, 36], "jutargettransform": [25, 51, 53], "transformerlik": [25, 29, 124], "perform": [25, 29, 77, 78, 79, 81, 82, 84, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 104, 107, 113, 115, 120, 122, 123, 124], "inverse_transform": 25, "invers": 25, "can_inverse_transform": 25, "factori": 26, "params_to_tun": 26, "juestimatorlik": 26, "estimatorlikefit1": [26, 58], "estimatorlikefit2": [26, 58], "estimatorlikef": [26, 58], "seri": [27, 28, 49], "inconsist": [27, 28], "might": [27, 28, 75, 80, 82, 85, 89, 96, 107, 110, 115, 123, 124], "still": [27, 80, 101, 110, 123], "run": [27, 29, 36, 77, 78, 79, 80, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 101, 104, 107, 110, 113, 115, 119], "df": [28, 90, 119, 121, 123, 124], "pos_label": [28, 29, 82], "http": [28, 29, 36, 55, 79, 85, 107, 120, 123], "juaml": [28, 29, 107], "github": [28, 29], "io": [28, 29], "html": [28, 29, 55, 79, 85, 107, 120, 123], "detail": [28, 29, 107, 119], "interpret": [28, 29, 55, 100], "posit": [28, 29, 36, 78, 82, 113], "element": [28, 29, 55, 80, 90, 124, 125], "convert": [28, 29, 80, 100, 104], "equal": [28, 29, 106], "dictionari": [28, 29, 37, 41, 90, 101, 115, 124, 125], "df_x": 28, "df_y": 28, "df_group": 28, "return_estim": [29, 77, 78, 79, 81, 88, 89, 90, 91, 94, 95, 96, 100, 101, 104, 113, 119, 123], "return_inspector": [29, 91], "return_train_scor": [29, 123], "seed": [29, 82, 85, 90, 96, 100, 119], "n_job": [29, 36, 125], "verbos": [29, 36, 125], "numpi": [29, 38, 42, 77, 78, 79, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 104, 113, 115, 119], "string": [29, 55, 106, 119, 121, 123, 124, 125], "kind": [29, 77, 78, 81, 82, 85, 88, 89, 91, 96, 97, 100, 107, 123], "categor": [29, 95, 101, 106], "multiple_class": 29, "binari": [29, 55, 76, 81, 83, 85, 88, 89, 91, 96, 97, 100, 106, 107, 112, 123], "ordin": 29, "final": [29, 77, 78, 79, 80, 81, 88, 89, 90, 94, 95, 96, 97, 100, 101, 104, 107, 119, 123, 124], "inspector": [29, 91], "strategi": [29, 123], "kfold": [29, 78, 79, 81, 82, 85, 88, 89, 90, 94, 95, 96, 97, 101, 104, 123], "scorerlik": [29, 30, 31, 34], "metric": [29, 65, 77, 78, 80, 82, 85, 95, 100, 104, 111], "org": [29, 36, 55, 79, 85, 120, 123], "stabl": [29, 79, 110, 120, 123], "model_evalu": 29, "comprehens": 29, "scorer": [29, 31, 32, 34, 35, 104, 123, 125], "defin": [29, 40, 77, 78, 79, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 104, 115, 121, 123, 124], "follow": [29, 36, 40, 55, 57, 77, 78, 79, 80, 81, 82, 85, 88, 89, 90, 91, 94, 96, 100, 101, 104, 106, 107, 108, 110, 111, 112, 113, 115, 121, 122, 123, 124], "step__paramet": 29, "sever": [29, 80, 81, 88], "svm__probabl": 29, "grid": [29, 88, 96, 119], "go": [29, 77, 78, 79, 80, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 101, 104, 107, 121, 122, 124], "same": [29, 41, 55, 82, 85, 88, 96, 100, 104, 111, 113, 115, 119, 120, 123, 124], "befor": [29, 48, 80, 100, 104, 107, 110, 123, 124, 125], "oper": [29, 101], "level": [29, 55, 77, 78, 79, 80, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 104, 113, 119], "outer": [29, 77, 78, 79, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 101, 104, 125], "joblib": [29, 36], "convernt": 29, "mean": [29, 36, 42, 49, 75, 78, 79, 81, 82, 88, 90, 94, 95, 96, 100, 101, 104, 106, 115, 123, 124], "print": [29, 55, 77, 78, 79, 80, 81, 82, 85, 88, 90, 91, 94, 95, 96, 97, 100, 101, 104, 123], "larger": 29, "50": [29, 78, 79, 82, 85, 89, 90, 91, 94, 95, 96, 97, 100, 101, 104, 119], "standard": [29, 36, 88, 90, 107, 115, 119, 124], "standrad": 29, "addition": [29, 55, 82, 85, 111, 112, 115, 121, 123, 124], "fit_tim": [29, 77, 78, 91, 94, 95, 101, 104, 123], "And": [29, 81, 88, 100], "final_estim": 29, "parallel": [29, 36, 125], "job": [29, 36], "convent": [29, 36], "unless": 29, "parallel_backend": 29, "process": [29, 90, 95, 121, 124], "parallelis": 29, "multiclass": [29, 55, 76, 83, 106], "forest": [29, 55, 81, 85, 87, 90, 92, 100, 106, 119, 123, 124], "custom": [29, 34, 55, 105, 108, 111, 123], "scalar": [31, 34], "greater": [31, 34], "better": [31, 34, 96, 123], "Will": [31, 34], "y_true": [33, 77, 78, 82, 95, 104], "y_pred": [33, 77, 78, 82, 95, 104], "squar": [33, 104, 106], "pearson": [33, 104, 113], "product": [33, 104], "moment": [33, 104], "correl": [33, 36, 78, 104, 113], "coeffici": [33, 78, 104, 123, 124], "arraylik": 33, "scorer_nam": [34, 104], "access": [34, 80], "want": [34, 42, 77, 80, 81, 82, 88, 90, 100, 101, 104, 107, 110, 111, 115, 119, 120, 121, 122, 123, 124], "userwarn": [34, 79, 82], "significance_threshold": [36, 113], "05": [36, 77, 78, 79, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 97, 98, 100, 101, 104, 113], "corr_method": [36, 113], "pearsonr": [36, 104], "agg_method": [36, 113], "sum": [36, 77, 113, 125], "corr_sign": [36, 113], "posneg": [36, 113], "aggreg": [36, 113], "togeth": [36, 42, 78, 79, 94, 95, 101, 104, 106], "significantli": 36, "signific": [36, 85, 113], "neg": [36, 113], "aggregate": 36, "separ": [36, 88, 90, 120, 124], "non": 36, "ones": 36, "choos": [36, 82, 85, 107, 123], "In": [36, 80, 81, 82, 88, 89, 100, 101, 104, 107, 111, 113, 115, 119, 120, 121, 123, 124], "procedur": 36, "describ": [36, 78, 79, 90, 94, 95, 101, 104, 123], "shen": [36, 113], "finn": [36, 113], "scheinost": 36, "d": [36, 77, 80, 81, 88, 96, 106, 113], "et": [36, 106, 113, 115, 124], "al": [36, 113, 115], "2016": [36, 80, 81, 88, 96, 113], "doi": [36, 115], "1038": 36, "nprot": 36, "178": 36, "p": [36, 77, 85, 100, 113], "scipi": [36, 77, 78, 79, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 104, 113], "stat": [36, 85, 104, 113, 123], "axi": [36, 77, 78, 79, 94, 95, 104], "po": [36, 113], "correlation_valu": 36, "found": [36, 96, 123], "used_corr_sign_": 36, "mani": [36, 81, 88, 115, 123, 124], "log": [36, 55, 57, 63, 77, 78, 79, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 104], "y_mean_": 36, "show": [36, 76, 85, 93, 99, 103, 109, 123, 124, 125], "wa": [36, 81, 88, 89, 90, 101, 123], "x_y_correlations_": 36, "significant_mask_": 36, "origin": [36, 57, 107, 112], "had": [36, 96, 123, 124, 125], "pos_mask_": 36, "pos_significant_mask_": 36, "neg_significant_mask_": 36, "used_significant_mask_": 36, "threhsold": 36, "mask": [36, 38, 42], "per": [36, 77, 81, 88, 95, 123], "get_feature_names_out": [36, 37, 39, 40, 41, 42], "input_featur": [36, 37, 39, 40, 41, 42], "x_types_renam": 37, "Not": [37, 38, 39, 40, 41, 100], "here": [37, 38, 39, 41, 79, 80, 81, 88, 90, 101, 111, 119, 123, 124], "kept": [37, 39, 40, 41, 42, 101], "get_support": [38, 42], "support": [38, 42, 48, 69, 77, 81, 82, 88, 91, 96, 107, 111, 119, 123, 124], "support_mask": [38, 42], "keep": [39, 80, 82, 85, 89, 91, 95, 97, 100, 101, 107, 110, 111, 119, 124], "junif": 40, "wrapper": [40, 48, 125], "around": 40, "directli": [40, 80, 111, 123, 124], "feature_names_in_": 40, "x0": 40, "x1": 40, "n_features_in_": 40, "model_confound": [42, 49], "keep_confound": [42, 101], "specif": [42, 82, 88, 90, 115, 117, 120, 122], "subtract": [42, 49, 106], "given": [42, 88, 100, 106, 115, 121, 123, 124], "regular": [42, 96, 106, 115], "express": 42, "syntax": 42, "independ": [42, 49, 88, 100, 106], "linearregress": [42, 49, 106], "By": [42, 49, 88, 89, 90, 101, 106, 113], "residu": [42, 49, 115], "fall": [42, 49, 113, 123], "under": [42, 49, 104, 107, 110, 123, 124], "deconfound": [42, 101], "o": 44, "transformer_nam": [45, 53], "transformer_cl": [45, 53], "arg": [47, 50, 59, 60, 61, 62], "_model_": 48, "confoundremov": [49, 101, 106, 115, 125], "notifi": [50, 55], "with_traceback": 50, "except": [50, 57], "tb": 50, "__traceback__": 50, "fname": 55, "output_format": 55, "debug": [55, 120], "info": [55, 56, 77, 78, 79, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 101, 104, 119], "messag": [55, 57, 63, 107, 125], "pathlib": 55, "path": 55, "filenam": [55, 107], "stdout": 55, "file": [55, 80, 83, 86, 92, 98, 102, 105, 107], "statement": 55, "append": [55, 89, 100, 112], "entri": [55, 124], "doc": [55, 79, 107, 112, 125], "python": [55, 76, 77, 78, 79, 80, 81, 82, 84, 85, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 99, 100, 101, 103, 104, 107, 110, 112, 125], "dev": [55, 107, 111], "howto": 55, "asctim": 55, "levelnam": 55, "msg": [57, 63, 77, 78, 79, 81, 82, 85, 88, 89, 90, 91, 94, 96, 100, 104], "klass": 57, "first": [57, 63, 77, 81, 82, 85, 88, 90, 94, 95, 96, 100, 101, 107, 111, 113, 115, 119, 121, 123, 124], "subclass": [57, 63], "categori": [63, 77, 78, 79, 81, 82, 85, 88, 89, 90, 91, 94, 96, 100, 104], "width": [64, 82, 85, 91, 97, 100], "800": [64, 89, 92], "height": 64, "600": [64, 79, 101], "ci": [64, 100, 112], "95": [64, 82, 85, 90, 91, 95, 97, 100], "plot": [64, 77, 78, 79, 85, 88, 89, 90, 95, 100, 111, 123], "panel": [64, 85, 109, 110, 123], "dashboard": 64, "confid": [64, 100], "interv": [64, 100], "dynam": [65, 110, 111], "util": [65, 77, 78, 79, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 104, 107, 111, 119], "prepar": [65, 80, 111, 113, 115, 119], "vizual": [65, 111], "julearn": [67, 69, 71, 73, 74, 75, 77, 78, 79, 80, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 97, 99, 100, 101, 103, 104, 106, 108, 110, 117, 119, 120, 121, 122, 125], "depend": [69, 75, 80, 81, 88, 96, 111, 120, 123], "instal": [69, 75, 109, 111, 123, 125], "extra": [69, 75, 77, 78, 79, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 104, 106, 119, 124], "currentmodul": [71, 73, 74], "protocol": 74, "experiment": 75, "futur": 75, "complet": 75, "particularli": [75, 123], "reli": 75, "beta": 75, "releas": [75, 107, 110, 125], "packag": [75, 79, 82, 107, 109, 110, 119], "viz": [75, 85, 110, 111, 123], "basic": [76, 107, 121, 122], "download": [76, 77, 78, 79, 80, 81, 82, 84, 85, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 99, 100, 101, 103, 104], "sourc": [76, 77, 78, 79, 80, 81, 82, 84, 85, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 99, 100, 101, 103, 104, 112], "code": [76, 77, 78, 79, 80, 81, 82, 84, 85, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 99, 100, 101, 103, 104, 106, 111, 115, 124], "00_starting_python": 76, "zip": [76, 84, 87, 93, 99, 103], "jupyt": [76, 77, 78, 79, 80, 81, 82, 84, 85, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 99, 100, 101, 103, 104, 109], "notebook": [76, 77, 78, 79, 80, 81, 82, 84, 85, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 99, 100, 101, 103, 104, 109], "00_starting_jupyt": 76, "galleri": [76, 77, 78, 79, 80, 81, 82, 84, 85, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 99, 100, 101, 103, 104, 107], "sphinx": [76, 77, 78, 79, 80, 81, 82, 84, 85, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 99, 100, 101, 103, 104, 107], "end": [77, 78, 79, 80, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 101, 104, 110], "full": [77, 78, 79, 80, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 101, 104, 107], "iri": [77, 82, 85, 89, 91, 97, 100, 107, 121, 123], "vector": [77, 81, 82, 88, 91, 96, 107, 119, 123, 124], "machin": [77, 80, 81, 82, 88, 91, 96, 107, 111, 113, 115, 120, 121, 122, 124], "classifi": [77, 81, 82, 88, 89, 91, 96, 97, 100, 107, 123, 124], "heatmap": [77, 78, 95], "accuraci": [77, 82, 96, 100, 115, 123], "confus": [77, 90, 123, 124], "matrix": 77, "author": [77, 78, 79, 80, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 101, 104], "shammi": [77, 78, 79, 81, 88, 90, 95, 100, 104, 115, 125], "fz": [77, 78, 79, 80, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 101, 104], "juelich": [77, 78, 79, 80, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 101, 104], "de": [77, 78, 79, 80, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 101, 104, 115], "federico": [77, 78, 79, 80, 81, 82, 85, 88, 89, 91, 95, 96, 97, 100, 104], "raimondo": [77, 78, 79, 80, 81, 82, 85, 88, 89, 91, 95, 96, 97, 100, 104, 125], "f": [77, 78, 79, 80, 81, 82, 85, 88, 89, 90, 91, 95, 96, 97, 100, 104, 115, 119], "licens": [77, 78, 79, 80, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 101, 104], "agpl": [77, 78, 79, 80, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 101, 104], "seaborn": [77, 78, 79, 80, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 107, 110, 111, 121], "sn": [77, 78, 79, 88, 89, 90, 94, 95, 100], "matplotlib": [77, 78, 79, 88, 89, 90, 94, 95, 100, 111], "pyplot": [77, 78, 79, 88, 89, 90, 94, 95, 100], "plt": [77, 78, 79, 88, 89, 90, 94, 95, 100], "load_dataset": [77, 80, 81, 82, 85, 88, 89, 91, 96, 97, 100, 107, 121], "model_select": [77, 78, 79, 81, 85, 88, 91, 94, 95, 100, 123, 125], "train_test_split": [77, 78, 94, 95], "repeatedkfold": 77, "confusion_matrix": 77, "configure_log": [77, 78, 79, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 104, 107, 119], "2023": [77, 78, 79, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 101, 104], "08": [77, 78, 79, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 101, 102, 104], "11": [77, 78, 79, 80, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 101, 104, 110, 113, 115, 119], "30": [77, 82, 85, 88, 90, 115, 123], "613": 77, "lib": [77, 78, 79, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 104], "23": [77, 78, 79, 80, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 104, 115], "614": 77, "3": [77, 78, 79, 80, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 101, 104, 107, 110, 113, 115, 119, 123, 125], "dev180": [77, 78, 79, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 104], "load": [77, 78, 79, 94, 95, 96, 100, 101, 104, 121], "df_iri": [77, 82, 85, 89, 91, 97, 100, 107], "sepal_length": [77, 82, 85, 89, 91, 97, 100, 124], "sepal_width": [77, 82, 85, 89, 91, 97, 100, 124], "petal_length": [77, 82, 85, 89, 91, 97, 100, 121, 124], "speci": [77, 82, 85, 89, 91, 97, 100, 107, 121, 123, 124], "train_iri": 77, "test_iri": 77, "200": [77, 90, 91, 100, 119], "we": [77, 78, 79, 80, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 101, 104, 107, 110, 111, 115, 119, 120, 121, 123, 124], "model_iri": [77, 89], "618": 77, "expand": [77, 78, 79, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 101, 104], "619": 77, "treat": [77, 78, 79, 81, 82, 85, 88, 89, 90, 91, 94, 96, 100, 104], "home": [77, 78, 79, 81, 82, 85, 88, 89, 90, 91, 94, 96, 100, 104], "runner": [77, 78, 79, 81, 82, 85, 88, 89, 90, 91, 94, 96, 100, 104], "py": [77, 78, 79, 80, 81, 82, 83, 85, 86, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 100, 101, 102, 104, 105, 107], "238": [77, 78, 79, 81, 82, 85, 88, 89, 90, 91, 94, 96, 100, 104], "620": 77, "__continu": [77, 78, 79, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 100, 101, 104], "621": 77, "120": [77, 123], "622": 77, "versicolor": [77, 82, 85, 89, 91, 97, 100, 107, 123], "40": [77, 78, 88], "virginica": [77, 82, 85, 89, 91, 97, 100, 107, 123], "setosa": [77, 123], "dtype": [77, 78, 79, 81, 82, 85, 88, 89, 91, 94, 95, 96, 97, 100, 101, 104], "int64": [77, 81, 82, 85, 88, 89, 91, 96, 97, 100], "scheme": [77, 78, 79, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 101, 104, 120, 125], "multi": [77, 80, 123], "detect": [77, 81, 82, 85, 88, 89, 91, 96, 97, 100, 120], "head": [77, 78, 79, 80, 81, 88, 94, 95, 96, 100, 101, 104, 121, 124], "score_tim": [77, 78, 91, 94, 95, 101, 104, 123], "cv_mdsum": [77, 78, 91, 94, 95, 101, 104, 123], "006390": 77, "003302": 77, "fa5ab7a2b930761687a8e82d9971ebca": 77, "006068": 77, "003279": 77, "005848": [77, 94], "003227": 77, "005775": 77, "003223": 77, "4": [77, 78, 79, 80, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 101, 104, 110, 113, 119, 123], "005737": 77, "003242": 77, "8": [77, 78, 80, 81, 88, 91, 94, 95, 100, 101, 104, 110, 115, 120], "now": [77, 78, 79, 80, 82, 85, 88, 89, 91, 94, 95, 96, 100, 101, 104, 107, 112, 115, 119, 123, 124], "df_accuraci": 77, "set_index": [77, 78, 80, 95, 100], "test_accuraci": [77, 82, 100], "unstack": [77, 78, 95], "index": [77, 78, 79, 80, 81, 88, 90, 94, 95, 96, 100, 104, 107, 111], "916667": 77, "833333": 77, "958333": 77, "875000": 77, "750000": 77, "000000": [77, 78, 79, 85, 90, 94, 95, 101, 104], "791667": 77, "over": [77, 78, 82, 85, 90, 95, 113, 115, 119], "font_scal": [77, 78], "fig": [77, 78, 79, 88, 89, 90, 95], "ax": [77, 78, 79, 88, 89, 90, 95], "subplot": [77, 78, 79, 88, 89, 90, 95], "figsiz": [77, 78, 79, 88, 89, 90, 95], "7": [77, 78, 79, 80, 81, 88, 91, 95, 111, 120, 125], "cmap": [77, 78, 95], "ylgnbu": [77, 78, 95], "titl": [77, 78, 95, 107], "text": [77, 78, 88, 90, 95, 107], "our": [77, 80, 81, 82, 88, 90, 97, 101, 111, 115, 119, 120, 123, 124], "annot": [77, 78], "cm": 77, "uniqu": [77, 81, 88], "9": [77, 78, 80, 81, 88, 90, 91, 95, 101, 115, 124], "let": [77, 78, 79, 80, 81, 88, 90, 94, 95, 96, 100, 101, 104, 111, 115, 119, 121, 124], "build": [77, 81, 88, 93, 111, 112, 113, 119, 120, 123, 124], "anoth": [77, 80, 90, 104, 119, 123, 124], "cm_sum": 77, "keepdim": 77, "cm_perc": 77, "astyp": 77, "100": [77, 82, 85, 89, 90, 91, 97, 100], "empty_lik": 77, "nrow": 77, "ncol": 77, "rang": [77, 80, 90, 106, 119], "j": [77, 115], "c": [77, 80, 81, 88, 96, 109, 119, 123, 124], "els": 77, "1f": [77, 78], "fmt": [77, 78], "total": [77, 78, 79, 80, 81, 82, 83, 85, 86, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 100, 101, 102, 104, 105], "script": [77, 78, 79, 80, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 101, 104, 107, 112], "minut": [77, 78, 79, 80, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 101, 104], "635": [77, 83], "second": [77, 78, 79, 80, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 101, 104, 115, 119, 123], "plot_cm_acc_multiclass": [77, 83], "ipynb": [77, 78, 79, 80, 81, 82, 85, 88, 89, 90, 91, 94, 95, 96, 97, 100, 101, 104], "diabet": [78, 79, 94, 95, 104], "ridg": [78, 94, 95, 104, 106], "load_diabet": [78, 79, 94, 95, 101, 104], "mean_absolute_error": [78, 95], "31": [78, 79, 80], "917": 78, "918": 78, "return_x_i": [78, 79, 94, 95, 101, 104], "as_fram": [78, 79, 94, 95, 101, 104], "ten": [78, 79, 94, 95, 104], "ag": [78, 79, 80, 94, 95, 101, 104], "sex": [78, 79, 94, 95, 101, 104, 115], "bodi": [78, 79, 94, 95, 104], "mass": [78, 79, 94, 95, 104], "averag": [78, 79, 94, 95, 101, 104, 113], "blood": [78, 79, 94, 95, 101, 104], "pressur": [78, 79, 94, 95, 101, 104], "six": [78, 79, 94, 95, 104], "serum": [78, 79, 94, 95, 104], "measur": [78, 79, 94, 95, 101, 104, 115], "s1": [78, 79, 80, 81, 88, 94, 95, 101, 104], "s6": [78, 79, 80, 81, 88, 94, 95, 101, 104], "patient": [78, 79, 94, 95, 104], "quantit": [78, 79, 94, 95, 104], "diseas": [78, 79, 94, 95, 104], "progress": [78, 79, 94, 95, 104], "year": [78, 79, 94, 95, 104], "baselin": [78, 79, 94, 95, 104], "interest": [78, 79, 82, 94, 95, 100, 104, 119, 122, 123, 124], "bmi": [78, 79, 94, 95, 101, 104], "s4": [78, 79, 80, 81, 88, 94, 95, 101, 104], "s5": [78, 79, 80, 81, 88, 94, 95, 96, 101, 104], "038076": [78, 79, 94, 95, 101, 104], "050680": [78, 79, 94, 95, 101, 104], "061696": [78, 79, 94, 95, 101, 104], "002592": [78, 79, 94, 95, 101, 104], "019907": [78, 79, 94, 95, 101, 104], "017646": [78, 79, 94, 95, 101, 104], "001882": [78, 79, 94, 95, 101, 104], "044642": [78, 79, 94, 95, 101, 104], "051474": [78, 79, 94, 95, 101, 104], "039493": [78, 79, 94, 95, 101, 104], "068332": [78, 79, 94, 95, 101, 104], "092204": [78, 79, 94, 95, 101, 104], "085299": [78, 79, 94, 95, 101, 104], "044451": [78, 79, 94, 95, 101, 104], "002861": [78, 79, 94, 95, 101, 104], "025930": [78, 79, 94, 95, 101, 104], "089063": [78, 79, 94, 95, 101, 104], "011595": [78, 79, 94, 95, 101, 104], "034309": [78, 79, 94, 95, 101, 104], "022688": [78, 79, 94, 95, 101, 104], "009362": [78, 79, 94, 95, 101, 104], "005383": [78, 79, 94, 95, 101, 104], "036385": [78, 79, 94, 95, 101, 104], "031988": [78, 79, 94, 95, 101, 104], "046641": [78, 79, 94, 95, 101, 104], "count": [78, 79, 81, 88, 90, 94, 95, 101, 104], "442": [78, 79, 94, 95, 97, 101, 104], "152": [78, 79, 94, 95, 100, 101, 104, 124, 125], "133484": [78, 79, 94, 95, 101, 104], "std": [78, 79, 90, 94, 95, 101, 104, 115], "77": [78, 79, 94, 95, 101, 104, 125], "093005": [78, 79, 94, 95, 101, 104], "min": [78, 79, 90, 94, 95, 101, 104], "25": [78, 79, 80, 90, 94, 95, 101, 104], "87": [78, 79, 94, 95, 101, 104], "140": [78, 79, 94, 95, 101, 104], "500000": [78, 79, 94, 95, 101, 104], "75": [78, 79, 82, 85, 90, 94, 95, 101, 104], "211": [78, 79, 94, 95, 101, 104], "max": [78, 79, 90, 94, 95, 101, 104, 106], "346": [78, 79, 94, 95, 101, 104], "float64": [78, 79, 82, 85, 90, 94, 95, 97, 101, 104], "combin": [78, 79, 80, 94, 95, 100, 104, 124], "data_diabet": [78, 94, 95, 104], "concat": [78, 79, 89, 94, 95, 100, 104], "bp": [78, 79, 94, 95, 101, 104], "s2": [78, 79, 80, 81, 88, 94, 95, 101, 104], "s3": [78, 79, 80, 81, 88, 94, 95, 101, 104], "calcul": 78, "heat": 78, "corr": [78, 95], "xticklabel": 78, "yticklabel": 78, "train_diabet": [78, 94, 95], "test_diabet": [78, 94, 95], "neg_mean_absolute_error": [78, 79, 90, 94, 104], "32": [78, 85], "221": 78, "222": 78, "223": 78, "224": 78, "309": [78, 82, 88, 94, 95, 97], "225": 78, "006484": 78, "003106": 78, "b10eef89b4192178d482d7a1587a248a": [78, 94, 95, 101, 104], "005924": 78, "002949": 78, "005862": 78, "003117": 78, "005826": 78, "003050": 78, "005816": 78, "003014": 78, "test_scor": [78, 79, 81, 82, 85, 88, 94, 95, 96, 97, 104, 123], "45": 78, "444084441470615": 78, "mae": [78, 95], "df_mae": [78, 95], "48": [78, 80, 96], "783874": 78, "47": 78, "573568": 78, "37": [78, 85, 91], "617474": 78, "686852": 78, "558655": 78, "coef_": [78, 101], "sort_valu": 78, "ascend": 78, "inplac": 78, "barh": 78, "color": [78, 79, 88, 100], "blue": 78, "red": 78, "xlabel": [78, 95], "249999999999986": 78, "scatterplot": [78, 88, 90, 95], "v": [78, 95, 107, 112, 124], "2f": [78, 95], "corrcoef": [78, 95], "set_styl": [78, 79, 95], "darkgrid": [78, 79, 95], "scatter": [78, 90, 95], "xmin": [78, 95], "xmax": [78, 95], "get_xlim": [78, 88, 95], "ymin": [78, 95], "ymax": [78, 95], "get_ylim": [78, 88, 95], "ylabel": [78, 95], "01": [78, 83, 90, 92, 95, 96, 113], "verticalalign": [78, 95], "top": [78, 95, 107, 111, 123], "horizontalalign": [78, 95], "right": [78, 95, 96, 107], "fontsiz": [78, 95], "12": [78, 80, 81, 88, 90, 91, 95, 110, 113, 115], "scale": [78, 95, 96, 106, 124], "649999999999999": 78, "347": 78, "35": [78, 80], "809": [78, 83], "plot_example_regress": [78, 83], "leonard": [79, 90, 100], "sass": [79, 90, 100], "l": [79, 80, 81, 88, 90, 94, 96, 100], "math": 79, "449": 79, "450": 79, "some": [79, 80, 81, 88, 89, 107, 110, 113, 115, 119, 120, 123], "outlier": 79, "data_df": 79, "new_df": 79, "145": [79, 95], "150": [79, 100, 115], "590": [79, 81], "580": 79, "597": 79, "595": 79, "reset_index": [79, 80, 81, 88, 96, 100], "00_start": 79, "plot_stratified_kfold_reg": [79, 83], "53": [79, 101], "settingwithcopywarn": 79, "try": [79, 81, 82, 85, 88, 91, 96, 97], "slice": 79, "loc": 79, "row_index": 79, "col_index": 79, "caveat": 79, "pydata": 79, "user_guid": 79, "view": [79, 107], "versu": 79, "bin": 79, "num_split": 79, "num_bin": 79, "floor": 79, "len": [79, 100, 101, 115], "num": 79, "bins_on": 79, "qc": 79, "cut": 79, "tolist": [79, 121, 123], "divid": 79, "linear": [79, 85, 96, 101, 113, 115, 119, 124], "cv_stratifi": [79, 81], "scores_strat": 79, "linreg": [79, 101, 106, 113, 115], "475": 79, "476": 79, "477": 79, "478": 79, "479": 79, "opt": [79, 82], "hostedtoolcach": [79, 82], "x64": [79, 82], "python3": [79, 82], "site": [79, 82], "_split": 79, "700": 79, "popul": [79, 100], "member": 79, "less": [79, 90, 111, 120], "561": 79, "562": 79, "563": [79, 81], "564": 79, "compar": [79, 85, 100, 107, 115, 120], "two": [79, 80, 82, 85, 88, 89, 90, 91, 95, 97, 100, 101, 104, 107, 110, 113, 115, 119, 123, 124], "With": [79, 123], "df_score": 79, "boxplot": [79, 100], "much": [79, 96], "higher": [79, 100], "were": [79, 80, 81, 88, 89, 100, 123], "swarmplot": [79, 89], "329": [79, 83], "fmri": [80, 81, 88, 96], "bse": 80, "waskom": [80, 81, 88, 96], "m": [80, 81, 88, 96, 112, 124], "frank": [80, 81, 88, 96], "wagner": [80, 81, 88, 96], "adapt": [80, 81, 88, 96], "engag": [80, 81, 88, 96], "cognit": [80, 81, 88, 96], "context": [80, 81, 88, 96], "cerebr": [80, 81, 88, 96], "cortex": [80, 81, 88, 96], "known": [80, 121, 124], "excel": 80, "spreadsheet": 80, "csv": [80, 85], "ideal": 80, "everyth": [80, 107, 121, 122], "tabul": 80, "organis": [80, 115], "your": [80, 110, 113, 115, 120, 121, 122, 123, 124], "demograph": [80, 115], "diagnost": 80, "behaviour": [80, 111], "manual": [80, 123, 124], "edit": [80, 107], "sure": [80, 88, 107, 112, 115, 119], "readi": [80, 107, 123, 124], "do": [80, 88, 90, 95, 96, 100, 101, 104, 106, 111, 112, 115, 119, 120, 121, 122, 123, 124], "howev": [80, 85, 88, 89, 90, 101, 110, 115, 119, 121, 123, 124], "prune": 80, "fortun": 80, "tool": [80, 107, 110, 123], "deal": [80, 113, 121], "task": [80, 88, 101, 124], "collect": [80, 100], "start": [80, 107, 108, 111, 119, 122, 123, 124], "df_fmri": [80, 81, 88, 96], "subject": [80, 81, 88, 96], "timepoint": [80, 81, 88, 96], "event": [80, 81, 88, 96], "region": [80, 81, 88, 96], "signal": [80, 81, 88, 96], "s13": [80, 81, 88, 96], "18": [80, 81, 88, 91, 96, 113, 115], "stim": [80, 81, 88, 96], "pariet": [80, 81, 88, 96], "017552": [80, 81, 88, 96], "14": [80, 81, 88, 90, 91, 96, 115], "080883": [80, 81, 88, 96], "s12": [80, 81, 88, 96], "081033": [80, 81, 88, 96], "s11": [80, 81, 88, 96], "046134": [80, 81, 88, 96], "s10": [80, 81, 88, 96], "037970": [80, 81, 88, 96], "seen": [80, 124], "pivot": [80, 81, 88, 96], "tabl": [80, 81, 88], "extract": [80, 81, 88], "becom": [80, 120, 124], "identifi": [80, 82, 113, 115], "rule": [80, 106, 124], "t": [80, 85, 88, 123, 124], "duplic": 80, "frontal": [80, 81, 88, 96], "s0": [80, 81, 88, 96], "cue": [80, 81, 88, 96], "007766": [80, 96], "006899": [80, 96], "021452": [80, 96], "039327": [80, 96], "016440": [80, 96], "000300": [80, 96], "021054": [80, 96], "035735": [80, 96], "024296": [80, 96], "033220": [80, 96], "sutil": 80, "For": [80, 82, 85, 90, 95, 101, 106, 107, 109, 110, 113, 119, 121, 123, 124], "place": [80, 107], "scan": 80, "metadata": 80, "29": [80, 81], "43": [80, 94, 97], "28": [80, 81, 82], "34": 80, "scanner": 80, "6": [80, 81, 85, 88, 89, 90, 91, 101, 110, 111, 113, 120, 123], "b": [80, 107, 124], "df_meta": 80, "s7": [80, 81, 88], "s8": [80, 81, 88], "s9": [80, 81, 88], "13": [80, 81, 88, 91, 115], "16": [80, 81, 88, 90, 91], "036739": 80, "131641": 80, "17": [80, 81, 88, 90, 91], "004900": 80, "036362": 80, "030099": 80, "121574": 80, "000643": 80, "051040": 80, "009959": 80, "103513": 80, "532": [80, 81, 88, 96], "suppos": [80, 82, 115], "dure": [80, 81, 88, 110, 113, 115], "There": [80, 107, 122, 124], "009038": 80, "009642": 80, "047859": 80, "026727": 80, "085040": 80, "086399": 80, "069775": 80, "070558": 80, "115321": 80, "154058": 80, "010535": 80, "061817": 80, "034386": 80, "130267": 80, "15": [80, 81, 88, 90, 91, 115], "002170": 80, "048007": 80, "038257": 80, "134828": 80, "004290": 80, "035395": 80, "266": [80, 81, 88, 96, 101, 104], "sinc": [80, 85, 90, 94], "previou": [80, 85, 89, 90, 119, 123, 124], "multiindex": 80, "trick": 80, "underscor": 80, "_": [80, 89, 100, 124], "frontal_cu": 80, "parietal_stim": 80, "469": [80, 83], "run_combine_panda": [80, 83], "groupkfold": 81, "kimia": 81, "nazarzadeh": 81, "necessari": [81, 115, 119, 124], "librari": [81, 111], "infer": [81, 88], "studi": [81, 88, 115], "brain": [81, 88, 111, 113, 115], "condit": [81, 88], "groupbi": [81, 88], "1064": [81, 88], "exactli": [81, 88, 124], "rf": [81, 85, 89, 90, 97, 100, 106, 119, 123], "591": 81, "592": 81, "593": 81, "594": 81, "6841826838300122": 81, "481": 81, "482": [81, 95, 98], "483": 81, "484": 81, "485": 81, "5902255639097744": 81, "975": 81, "976": 81, "977": 81, "978": 81, "979": 81, "980": 81, "6879699248120301": 81, "911": [81, 83], "run_grouped_cv": [81, 83], "201": 82, "three": [82, 85, 89, 91, 97, 100, 107, 111, 123], "isin": [82, 85, 89, 91, 97, 100, 107], "sepal": [82, 85, 91, 97, 100, 124], "length": [82, 85, 91, 97, 100], "petal": [82, 85, 91, 97, 100, 121, 124], "248": 82, "249": 82, "251": 82, "252": 82, "253": 82, "254": 82, "90": [82, 85], "70": [82, 85], "assess": [82, 85, 115], "unbalanc": [82, 85], "df_unbalanc": [82, 85], "20": [82, 85, 91, 100, 115, 119], "value_count": [82, 85], "account": [82, 107, 115], "imbal": 82, "suitabl": [82, 110], "balanced_accuraci": [82, 85], "balanc": 82, "42": [82, 85, 88, 96, 100, 123], "test_balanced_accuraci": [82, 85], "308": [82, 88, 97], "310": [82, 97], "311": [82, 97], "80": [82, 85], "312": [82, 97], "_classif": 82, "2184": 82, "8625": 82, "8678571428571429": 82, "u": [82, 89, 100, 101, 110, 115, 123], "good": [82, 96, 110, 120, 122], "correctli": [82, 107], "precis": 82, "ratio": 82, "tp": 82, "precision_scor": 82, "369": 82, "370": 82, "371": 82, "372": 82, "373": 82, "374": 82, "231": [82, 83], "run_simple_binary_classif": [82, 83], "00": [83, 86, 90, 92, 97, 98, 102, 105], "04": [83, 86, 92], "384": 83, "execut": [83, 86, 92, 98, 102, 105, 107], "auto_examples_00_start": 83, "mb": [83, 86, 92, 98, 102, 105], "01_model_comparison_python": 84, "01_model_comparison_jupyt": 84, "At": [85, 111, 120, 124], "statist": [85, 90, 100], "repeatedstratifiedkfold": [85, 91, 123], "corrected_ttest": [85, 123], "923": 85, "924": 85, "927": 85, "928": 85, "929": 85, "930": 85, "931": 85, "932": 85, "roc_auc": [85, 100, 123], "scores1": [85, 109, 123], "984": 85, "985": 85, "986": 85, "987": 85, "988": 85, "scores2": [85, 109, 123], "33": 85, "339": 85, "340": 85, "341": 85, "342": 85, "343": 85, "third": [85, 123], "kernel": [85, 96, 115, 119, 124], "scores3": [85, 109, 123], "svm__kernel": [85, 96], "svm_linear": 85, "202": 85, "203": 85, "204": [85, 90], "205": 85, "206": [85, 115], "correct": [85, 119, 123], "stats_df": [85, 123], "model_2": [85, 119], "val": 85, "175075": 85, "062567": 85, "895662": 85, "151390": 85, "782741": 85, "test_roc_auc": [85, 100], "108944": 85, "835331": 85, "236153": 85, "685092": 85, "669010": 85, "324331": 85, "line": [85, 107], "meant": 85, "soon": 85, "sphix": 85, "hide": 85, "block": [85, 107], "to_csv": 85, "tmp": 85, "viewer": 85, "plot_scor": [85, 109, 123], "uncom": 85, "read": [85, 89, 111, 112, 119, 120, 122, 124], "holoviz": 85, "getting_start": 85, "build_app": 85, "deploi": 85, "look": [85, 88, 90, 95, 101, 106, 111, 113, 119, 120, 121, 122, 123, 124], "interact": [85, 88, 111, 123], "zoom": 85, "hover": 85, "button": [85, 107], "811": [85, 86], "plot_simple_model_comparison": [85, 86], "auto_examples_01_model_comparison": 86, "demonstr": [87, 119, 123, 124], "02_inspection_python": 87, "02_inspection_jupyt": 87, "analys": [88, 89, 96, 115], "groupshufflesplit": 88, "278": [88, 89, 96], "304": [88, 91, 92], "305": 88, "306": 88, "307": [88, 97], "7218303650149884": 88, "decod": [88, 115], "claim": [88, 100], "acquir": 88, "randomli": 88, "could": [88, 90, 101, 111, 113, 121, 123, 124], "characterist": 88, "unseen": [88, 120, 124], "whom": 88, "either": [88, 90, 106, 107, 115, 120, 123, 124], "later": [88, 91, 107, 121, 123], "388": 88, "389": 88, "390": 88, "391": 88, "392": [88, 104], "393": [88, 104], "7210526315789474": 88, "visual": [88, 110, 111], "part": [88, 109, 111, 113, 123, 124], "doe": [88, 107, 120, 124], "raw": [88, 90, 124], "hue": [88, 100], "set_titl": [88, 89, 90], "pre_x": 88, "pre_df": 88, "join": 88, "parietal__": 88, "frontal__": 88, "noth": [88, 123], "scaler": [88, 124], "seem": [88, 96, 100, 123], "quit": [88, 110, 113], "linearli": 88, "clf": 88, "figur": [88, 107], "xlim": 88, "ylim": 88, "xx": 88, "linspac": 88, "yy": 88, "meshgrid": 88, "xy": 88, "vstack": 88, "ravel": 88, "xy_df": 88, "reshap": 88, "contour": 88, "alpha": [88, 113], "linestyl": 88, "boundari": 88, "582": [88, 92], "plot_groupcv_inspect_svm": [88, 92], "38": 89, "327": [89, 115], "328": 89, "331": [89, 104], "332": [89, 104], "333": [89, 96, 98, 104], "334": [89, 104], "335": 89, "336": 89, "intern": [89, 119, 123, 124], "_important_": 89, "caution": 89, "proper": [89, 100, 112, 122], "to_plot": 89, "feature_importances_": [89, 100], "barplot": 89, "tight_layout": [89, 100], "review": [89, 107], "myself": 89, "wander": 89, "about": [89, 115, 119, 120, 122, 123, 124], "entir": [89, 123, 124], "39": 89, "279": [89, 96], "280": [89, 96], "281": [89, 96], "282": [89, 96], "283": [89, 96], "i_fold": [89, 100], "enumer": [89, 100], "this_import": [89, 100], "plot_inspect_random_forest": [89, 92], "make_regress": [90, 113, 115, 119], "pre": [90, 110, 112, 123, 124, 125], "low": [90, 106, 113], "normal": [90, 101, 106, 107, 115, 124, 125], "reduct": 90, "41": 90, "026": 90, "n_inform": 90, "nois": [90, 115], "first_two": 90, "determin": 90, "belong": [90, 101, 124], "x_to_zscor": 90, "summari": 90, "111790": 90, "141618": 90, "023682": 90, "167718": 90, "686170": 90, "977322": 90, "972988": 90, "087946": 90, "895011": 90, "79": [90, 107], "741431": 90, "069985": 90, "772593": 90, "552990": 90, "659172": 90, "293317": 90, "751257": 90, "484100": 90, "759419": 90, "688891": 90, "64": 90, "724008": 90, "206729": 90, "194442": 90, "028152": 90, "174160": 90, "789944": 90, "421885": 90, "724302": 90, "772156": 90, "408321": 90, "392804": 90, "943621": 90, "256723": 90, "383145": 90, "259309": 90, "216": 90, "221085": 90, "explicitli": [90, 115], "declar": 90, "keyword": [90, 113], "argument": [90, 101, 124], "init": 90, "special": 90, "cannot": [90, 120, 124], "tree": [90, 106], "pipeline_cr": [90, 95, 97, 101, 115], "select_vari": [90, 106], "n_compon": [90, 95, 124], "n_estim": [90, 119], "becaus": [90, 101, 115, 122, 123, 124], "creator": [90, 91, 94, 95, 96, 100, 101, 113, 123, 124], "simpli": [90, 107, 113, 115, 119, 124], "did": [90, 96], "hand": [90, 113, 115, 119], "r2": [90, 95, 115], "x_after_pca": 90, "earlier": 90, "x_after_zscor": 90, "high": [90, 113], "pca__pca0": [90, 101], "pca__pca1": [90, 101], "047": [90, 100], "__x_to_zscor": 90, "048": [90, 100], "049": 90, "050": 90, "052": [90, 100], "725696": 90, "582295": 90, "314458": 90, "942935": 90, "977336": 90, "463217": 90, "525139": 90, "219493": 90, "618559": 90, "908592": 90, "395105": 90, "743192": 90, "96": [90, 91, 125], "328111": 90, "670912": 90, "97": [90, 91, 100], "573900": 90, "401304": 90, "98": [90, 91], "918034": 90, "137435": 90, "99": [90, 91], "894566": 90, "357729": 90, "1__": 90, "4__": 90, "013728": 90, "426259": 90, "364686": 90, "944446": 90, "118838": 90, "931848": 90, "004437": 90, "030684": 90, "309092": 90, "523891": 90, "206189": 90, "157667": 90, "099154": 90, "028182": 90, "335538": 90, "252795": 90, "049139": 90, "133702": 90, "240085": 90, "443863": 90, "deviat": [90, 115], "000000e": 90, "02": [90, 104], "689893e": 90, "387779e": 90, "005038e": 90, "013728e": 90, "010202e": 90, "576015e": 90, "463286e": 90, "763131e": 90, "456486e": 90, "488094e": 90, "018781e": 90, "113700e": 90, "184776e": 90, "870": [90, 92], "plot_preprocess": [90, 92], "shufflesplit": 91, "883": 91, "887": 91, "888": 91, "request": [91, 111], "889": 91, "890": 91, "891": 91, "892": 91, "006093": 91, "003317": 91, "42489ff0163b2f12752440a6b7ef74c7": 91, "005764": 91, "003243": 91, "005823": 91, "003261": 91, "005701": 91, "003259": 91, "005707": 91, "003197": 91, "005772": 91, "003240": 91, "005600": 91, "003215": 91, "005751": 91, "003235": 91, "005771": 91, "003234": 91, "003186": 91, "005689": 91, "003213": 91, "005592": 91, "003140": 91, "005637": 91, "003159": 91, "005721": 91, "003141": 91, "005683": 91, "003180": 91, "005738": 91, "003170": 91, "005513": 91, "003128": 91, "005785": 91, "003143": 91, "005560": 91, "003177": [91, 104], "19": [91, 113], "005627": 91, "cv_predict": 91, "repeat_0": 91, "repeat_1": 91, "repeat_2": 91, "repeat_3": 91, "_pipelin": 91, "pipelineinspector": 91, "0x7fe04baef040": 91, "run_binary_inspect_fold": [91, 92], "555": 92, "auto_examples_02_inspect": 92, "03_complex_models_python": 93, "03_complex_models_jupyt": 93, "Then": [94, 101, 107, 119, 124], "lya": 94, "paa": 94, "olivero": 94, "sami": [94, 101, 115, 125], "hamdan": [94, 101, 115, 125], "crucial": [94, 115], "067": 94, "target_cr": [94, 124], "target_pipeline_cr": 94, "0x7fe04c7887c0": 94, "088": 94, "089": 94, "090": [94, 98], "091": 94, "092": 94, "002975": 94, "005204": 94, "002950": 94, "005199": 94, "002931": 94, "005231": 94, "002938": 94, "005236": 94, "002969": [94, 104], "51": [94, 96], "51357151914368": 94, "run_apply_to_target": [94, 98], "reduc": [95, 101, 124], "dimension": [95, 101, 113, 124], "subset": [95, 120], "georgio": 95, "antonopoulo": 95, "kaustubh": [95, 125], "r": [95, 104, 107], "patil": [95, 125], "52": [95, 101], "268": 95, "assign": [95, 123], "pca1": 95, "pca2": 95, "pca_feats1": 95, "pca_feats2": 95, "287": 95, "__pca1": 95, "288": 95, "__pca2": 95, "__categor": 95, "0x7fe04bf24c40": 95, "289": 95, "290": 95, "291": 95, "292": 95, "293": 95, "018240": 95, "008045": 95, "017380": 95, "008073": 95, "017115": 95, "008053": 95, "017084": 95, "008102": 95, "017512": 95, "008035": 95, "3107976743678922": 95, "untouch": 95, "data_processed1": 95, "data_processed2": 95, "pca_feats1__pca0": 95, "161": 95, "063175": 95, "133274": 95, "108111": 95, "075741": 95, "085907": 95, "054779": 95, "030464": 95, "033246": 95, "015491": 95, "098172": 95, "033216": 95, "015999": 95, "050783": 95, "032289": 95, "012577": 95, "067737": 95, "013504": 95, "315": 95, "045025": 95, "031454": 95, "010903": 95, "001078": 95, "pca_feats2__pca0": 95, "234716": 95, "012141": 95, "078784": 95, "006290": 95, "026190": 95, "341472": 95, "348168": 95, "269257": 95, "286067": 95, "309025": 95, "362": 95, "run_example_pca_featset": [95, 98], "794": 96, "attempt": 96, "812": 96, "813": 96, "814": 96, "815": 96, "816": 96, "817": 96, "5939164168576971": 96, "optim": [96, 124], "find": [96, 107, 122], "best": [96, 124], "speed": 96, "894": 96, "895": 96, "896": 96, "svm__c": 96, "inner": [96, 125], "897": 96, "898": 96, "899": 96, "588308940222183": 96, "explor": [96, 101, 119], "too": [96, 120], "rbf": 96, "poli": 96, "49": [96, 115], "277": 96, "7087109857168048": 96, "best_params_": 96, "lest": 96, "gamma": 96, "1e": [96, 119], "296": 96, "297": 96, "001": 96, "298": 96, "299": 96, "svm__gamma": 96, "300": 96, "301": 96, "5188855581026275": 96, "happen": [96, 119], "058": 96, "059": 96, "060": 96, "061": 96, "062": 96, "063": 96, "best_estimator_": 96, "_gamma": 96, "run_hyperparameter_tun": [96, 98], "logist": [97, 106, 123, 124], "303": 97, "petal_width": [97, 100, 121, 124], "model_sep": 97, "model_pet": 97, "__sepal": 97, "__petal": 97, "0x7fe04bb353f0": 97, "0x7fe04c788910": 97, "313": 97, "314": 97, "441": 97, "443": 97, "85": 97, "355": [97, 98], "run_stacked_model": [97, 98], "09": 98, "261": [98, 101], "auto_examples_03_complex_model": 98, "03": 98, "relat": [99, 107, 115, 121], "04_confounds_python": 99, "04_confounds_jupyt": 99, "stratifiedbootstrap": 100, "54": 100, "hypothesi": 100, "ml": [100, 111], "classic": 100, "frequentist": 100, "altern": 100, "contrast": 100, "gap": 100, "approach": [100, 113, 124], "abov": [100, 115, 123, 124], "below": [100, 110, 113], "2000": 100, "n_bootstrap": 100, "n_element": 100, "scores_ncr": 100, "053": 100, "054": 100, "055": 100, "056": 100, "next": [100, 110, 121, 124], "again": [100, 115, 124], "tell": [100, 115], "confound_remov": [100, 101, 115], "scores_cr": 100, "57": 100, "148": 100, "__confound": 100, "__featur": 100, "149": 100, "153": 100, "154": 100, "easier": [100, 124], "long": 100, "df_ncr_metric": 100, "df_cr_metric": 100, "df_metric": 100, "catplot": 100, "col": 100, "swarm": 100, "them": [100, 107, 109, 110, 113, 123, 124], "pair": 100, "systemat": 100, "differec": 100, "df_diff_metr": 100, "whisker": 100, "box": 100, "whi": 100, "axhlin": 100, "roc": 100, "auc": 100, "term": 100, "mayb": [100, 123], "percentil": [100, 106], "amount": [100, 111], "But": [100, 101, 121, 122, 123, 124], "point": [100, 107, 115, 122, 123, 124], "ncr_fi": 100, "cr_fi": 100, "feature_import": 100, "dodg": 100, "diff_fi": 100, "axvlin": 100, "008": [100, 102], "plot_confound_removal_classif": [100, 102], "most": [101, 110, 113, 115, 120, 124], "remove_confound": [101, 106], "sometim": [101, 115, 119, 120, 124], "even": [101, 120, 123, 124], "discuss": 101, "df_featur": 101, "furthermor": 101, "consid": [101, 112, 115, 123], "put": [101, 115], "950": 101, "951": 101, "0x7fe04bcc0880": 101, "feature_nam": [101, 123], "952": 101, "953": 101, "954": 101, "955": 101, "956": 101, "df_deconfound": 101, "assum": 101, "closer": [101, 106, 123], "understand": [101, 115, 122, 123, 124], "achiev": [101, 115, 123, 124], "autoclass": 101, "029271": 101, "057228": 101, "009658": 101, "019424": 101, "012310": 101, "028194": 101, "005874": 101, "047538": 101, "015568": 101, "024667": 101, "061639": 101, "082913": 101, "076494": 101, "039983": 101, "017885": 101, "004736": 101, "036479": 101, "081307": 101, "007659": 101, "025897": 101, "049135": 101, "029380": 101, "000071": 101, "013139": 101, "032449": 101, "032631": 101, "012234": 101, "025295": 101, "037349": 101, "262": 101, "0x7fe04bb36ad0": 101, "263": [101, 104], "264": [101, 104], "df_transform": 101, "pca__pca2": 101, "pca__pca7": 101, "pca__pca8": 101, "014051": 101, "075715": 101, "017395": 101, "008604": 101, "002330": 101, "099883": 101, "062829": 101, "014516": 101, "024022": 101, "002075": 101, "029015": 101, "053253": 101, "032477": 101, "001197": 101, "002579": 101, "035162": 101, "001324": 101, "106807": 101, "006566": 101, "003545": 101, "003951": 101, "025445": 101, "000421": 101, "002095": 101, "000517": 101, "lastli": [101, 115], "601": 101, "602": 101, "604": 101, "034348": 101, "012497": 101, "033889": 101, "012552": 101, "034554": 101, "012558": 101, "035002": 101, "012463": 101, "034153": 101, "012539": 101, "962": [101, 102], "run_return_confound": [101, 102], "971": 102, "auto_examples_04_confound": 102, "extend": [103, 123], "variou": 103, "aspect": [103, 124], "05_customization_python": 103, "05_customization_jupyt": 103, "make_scor": 104, "register_scor": 104, "243": 104, "244": 104, "265": 104, "006280": 104, "005807": 104, "003024": 104, "005682": 104, "005735": 104, "003086": 104, "005972": 104, "003093": 104, "44": 104, "26465394827188": 104, "thing": [104, 124], "r2_corr": 104, "test_neg_mean_absolute_error": 104, "test_r2_corr": 104, "264654": 104, "486498": 104, "take": [104, 124], "def": 104, "pearson_scor": 104, "squeez": 104, "394": 104, "395": 104, "217": [104, 105], "run_custom_scorers_regress": [104, 105], "auto_examples_05_custom": 105, "descript": [106, 107, 124], "give": [106, 115, 120, 122, 123], "short": 106, "underli": [106, 115], "link": [106, 107, 111, 112, 122, 124], "unit": 106, "standardscal": 106, "scaler_robust": 106, "median": 106, "iqr": 106, "robustscal": 106, "scaler_minmax": 106, "minmaxscal": 106, "scaler_maxab": 106, "maxabsscal": 106, "scaler_norm": 106, "norm": 106, "scaler_quantil": 106, "uniform": [106, 125], "robust": 106, "quantiletransform": 106, "scaler_pow": 106, "gaussianis": 106, "powertransform": 106, "select_univari": 106, "genericunivariateselect": 106, "select_percentil": 106, "rank": 106, "selectpercentil": 106, "select_k": 106, "selectkbest": 106, "select_fdr": 106, "fdr": 106, "selectfdr": 106, "select_fpr": 106, "fpr": 106, "selectfpr": 106, "select_fw": 106, "fwe": 106, "selectfw": 106, "variancethreshold": 106, "drop_column": 106, "dropcolumn": 106, "change_column_typ": 106, "changecolumntyp": 106, "filtercolumn": 106, "princip": [106, 124], "cbpm": [106, 111, 117, 125], "connectom": [106, 111, 117], "svc": [106, 123], "svr": [106, 119], "randomforestclassifi": 106, "randomforestregressor": 106, "extratreesclassifi": 106, "extratreesregressor": 106, "adaboost": 106, "adaboostclassifi": 106, "adaboostregressor": 106, "bag": 106, "baggingclassifi": 106, "baggingregressor": 106, "gradientboost": 106, "gradient": 106, "boost": 106, "gradientboostingclassifi": 106, "gradientboostingregressor": 106, "stackingclassifi": [106, 119], "stackingregressor": [106, 119], "gauss": 106, "gaussianprocessclassifi": 106, "gaussianprocessregressor": 106, "logit": [106, 123], "aka": 106, "maxent": 106, "logisticregress": 106, "logitcv": 106, "logisticregressioncv": 106, "l2": 106, "ridgeclassifi": 106, "ridgecv": 106, "built": [106, 107, 111, 119, 123, 124], "ridgeclassifiercv": 106, "sgd": 106, "minim": 106, "empir": 106, "loss": [106, 115], "sgdclassifi": 106, "sgdregressor": 106, "nb_bernoulli": 106, "multivari": 106, "bernoulli": 106, "bernoullinb": 106, "nb_categor": 106, "categoricalnb": 106, "nb_complement": 106, "complementnb": 106, "nb_gaussian": 106, "gaussiannb": 106, "nb_multinomi": 106, "multinomi": 106, "multinomialnb": 106, "dynamicselect": [106, 125], "dummyclassifi": 106, "dummyregressor": 106, "accord": [107, 113, 119, 123, 125], "guidelin": 107, "folder": 107, "clone": 107, "git": [107, 112], "com": [107, 120], "omit": 107, "highli": 107, "recommend": [107, 110], "interfer": 107, "project": 107, "venv": [107, 110], "conda": [107, 109, 110, 123], "env": [107, 110], "within": [107, 113, 119, 120, 121], "stage": 107, "pip": [107, 109, 110, 123], "cd": 107, "txt": 107, "mode": 107, "setup": [107, 111, 122], "histori": 107, "nevertheless": [107, 110, 124], "_version": 107, "stash": 107, "forget": 107, "local": 107, "issu": [107, 112, 125], "address": 107, "idea": [107, 120], "merg": [107, 112], "fix": [107, 125], "close": [107, 112], "permiss": 107, "click": [107, 122], "corner": 107, "onc": [107, 112, 122], "usernam": 107, "fraimondo": 107, "remot": 107, "current": [107, 111], "latest": [107, 110, 112, 125], "checkout": [107, 112], "rebas": [107, 112], "command": 107, "branch_nam": 107, "prefer": [107, 115], "editor": 107, "inc": [107, 112], "briefli": 107, "made": [107, 122, 123], "yourself": 107, "contributor": 107, "workflow": [107, 113, 115, 121, 122, 124], "pr": [107, 112], "style": 107, "flake8": 107, "spell": 107, "codespel": 107, "pytest": 107, "open": [107, 112], "_build": 107, "situat": 107, "clean": [107, 110], "rerun": 107, "fail": 107, "back": [107, 123], "happi": 107, "navig": 107, "fill": 107, "contact": 107, "manitain": 107, "who": 107, "suggest": [107, 111], "everyon": 107, "displai": [107, 123], "sub": [107, 122], "directori": 107, "advanc": 107, "plot_": 107, "run_": 107, "dependend": 107, "comment": 107, "direct": 107, "rst": [107, 112], "rest": 107, "render": 107, "emb": 107, "shall": 107, "preced": 107, "bokeh": [109, 110, 123], "standalon": 109, "applic": [109, 113, 115], "browser": 109, "jupyter_bokeh": 109, "servabl": 109, "0rc1": 110, "0b1": 110, "although": 110, "strongli": 110, "virtual": 110, "environ": [110, 111, 123], "help": [110, 111, 115, 120, 123, 124], "promin": 110, "improv": 110, "develop": [110, 111, 112, 125], "therefor": [110, 113, 115, 120, 121, 123, 124], "oftentim": 110, "newest": 110, "sens": 110, "aim": [110, 111, 124], "usag": [110, 120, 124], "pypi": [110, 112], "relas": 110, "yet": [110, 121], "offici": 110, "These": [110, 113, 123], "insal": 110, "mod": 110, "orient": 111, "aml": 111, "institut": 111, "neurosci": [111, 113], "medicin": 111, "inm": 111, "thought": [111, 124], "research": [111, 113, 115], "simpler": 111, "abstract": 111, "power": [111, 119], "minor": [111, 112], "flexibilii": 111, "video": 111, "tutori": 111, "offer": [111, 121], "essenti": 111, "benefit": 111, "therebi": [111, 120], "avoid": [111, 115, 120], "nice": [111, 121, 123, 124], "todo": 111, "bett": 111, "magic": [111, 122], "impress": 111, "along": [111, 122], "chapter": [111, 122], "familiar": [111, 122], "deeper": [111, 122, 123], "topic": [111, 122, 123], "hyper": [111, 117, 124], "overview": [111, 120, 123, 124], "contribut": 111, "pull": [111, 112], "write": [111, 124], "maintain": 111, "frequenli": 111, "ask": 111, "question": [111, 115], "major": 112, "micro": 112, "devn": 112, "distanc": 112, "commit": 112, "setuptools_scm": 112, "plugin": 112, "tag": 112, "increment": [112, 124], "segment": 112, "publish": 112, "push": 112, "testpypi": 112, "mileston": 112, "reach": 112, "renam": 112, "whats_new": 112, "sync": 112, "branch": 112, "vx": 112, "system": 112, "setuptools_scm_debug": 112, "dir": 112, "dist": 112, "neuroimag": [113, 115], "typic": 113, "problemat": 113, "due": 113, "curs": 113, "especi": 113, "recent": 113, "propos": 113, "fluid": 113, "intellig": 113, "sustain": 113, "attent": 113, "connect": [113, 115], "nutshel": 113, "summar": 113, "subsequ": [113, 124], "commonli": [113, 124], "principl": 113, "apporach": 113, "leverag": 113, "to_list": 113, "cbpm_pipeline_cr": 113, "final_model": 113, "customis": [113, 119], "increas": 113, "noteworthi": 113, "sign": 113, "spearmanr": 113, "guess": 113, "spearman": 113, "xilin": 113, "individu": 113, "behavior": [113, 115, 125], "nat": 113, "protoc": 113, "2017": [113, 115], "mar": [113, 115], "506": 113, "518": 113, "emili": 113, "fingerprint": 113, "2015": 113, "nov": 113, "1664": 113, "71": 113, "rosenberg": 113, "monica": 113, "neuromark": 113, "whole": 113, "jan": [113, 115], "165": 113, "ultim": 115, "real": 115, "world": 115, "scenario": [115, 121, 123, 124], "relationship": 115, "un": 115, "observ": 115, "effect": 115, "potenti": 115, "often": [115, 120, 123, 124], "similarli": 115, "veri": [115, 119, 120, 121, 124], "rather": 115, "jointli": 115, "prevent": 115, "laid": 115, "rel": [115, 119], "littl": 115, "involv": 115, "simul": 115, "artifici": [115, 119, 124], "normal_dist_conf_on": 115, "normal_dist_conf_two": 115, "noise_conf_on": 115, "rand": 115, "noise_conf_two": 115, "multipli": 115, "factor": 115, "confound_on": 115, "confound_two": 115, "common": 115, "human": 115, "readabl": 115, "feature_": [115, 119], "confound_1": 115, "confound_2": 115, "my_target": 115, "distinguish": [115, 119, 123, 124], "predictor": 115, "accordingli": [115, 120], "think": 115, "parametris": 115, "initialis": [115, 119], "cours": [115, 119], "adjust": 115, "insert": 115, "fashion": 115, "reason": 115, "further": 115, "consider": 115, "why": [115, 122, 124], "mitig": 115, "bia": 115, "accur": 115, "On": [115, 123], "argu": 115, "appropri": 115, "valuabl": [115, 120], "difficult": 115, "challeng": 115, "ineffect": 115, "fact": 115, "collid": 115, "spuriou": 115, "evid": 115, "leak": [115, 120], "bias": 115, "care": [115, 124], "thorough": 115, "strength": 115, "limit": 115, "techniqu": 115, "rao": 115, "anil": 115, "presenc": 115, "volum": 115, "april": 115, "snoek": 115, "luka": 115, "184": 115, "januari": 115, "2019": 115, "741": 115, "760": 115, "he": 115, "tong": 115, "neural": [115, 124], "network": [115, 124], "februari": 115, "2020": 115, "116276": 115, "practic": 115, "knowledg": 115, "discoveri": 115, "databas": 115, "scienc": [115, 120], "demo": 115, "track": 115, "2021": 115, "12461": 115, "chyzhyk": 115, "darya": 115, "biomark": 115, "gigasci": 115, "2022": 115, "holmberg": 115, "mathia": 115, "jama": 115, "1282": 115, "1283": 115, "1001": 115, "1820": 115, "arxiv": 115, "2210": 115, "09232": 115, "revis": 115, "27": 115, "oct": 115, "Be": 119, "guid": 119, "nativ": 119, "perhap": 119, "flexibl": 119, "capabl": [119, 125], "toi": 119, "logger": 119, "x_name": 119, "mind": 119, "somewhat": 119, "arbitrari": [119, 123], "model_1": 119, "geomspac": 119, "1e2": 119, "max_depth": 119, "min_samples_leaf": 119, "min_samples_split": 119, "interfac": 119, "similar": [119, 123, 124], "desir": [119, 124], "thesefeatur": 119, "type1": 119, "type2": 119, "type1_": 119, "type2_": 119, "flexibli": 119, "Of": 119, "usual": [120, 124], "_predicts_": 120, "_fitting_": [120, 124], "overfit": [120, 123], "ressourc": 120, "efficeint": 120, "solv": 120, "core": [120, 123], "concept": 120, "effici": 120, "manner": [120, 121, 123, 124], "resourc": 120, "accident": 120, "quickli": 120, "erro": 120, "obviou": 120, "prone": 120, "mistak": 120, "transpar": 120, "importantli": [120, 124], "among": 120, "exact": 120, "www": 120, "sciencedirect": 120, "articl": 120, "pii": 120, "s105381191630595x": 120, "natur": 120, "s41746": 120, "022": 120, "00592": 120, "s1053811917305311": 120, "cross_valid": [120, 122], "wiht": 121, "iloc": [121, 123], "far": [121, 123, 124], "would": 121, "come": [121, 124], "costum": [121, 124], "handi": [121, 124], "depth": 121, "_petal_": [121, 124], "some_nam": 121, "saw": [121, 123, 124], "focu": 121, "backbon": 122, "goe": 122, "via": 122, "ist": 122, "fundament": 122, "essenc": 122, "fanci": 122, "stuff": 122, "pick": 122, "_iris_": [123, 124], "extendeddatafram": 123, "repitit": 123, "n_train": 123, "n_test": 123, "933": 123, "train_scor": 123, "inde": 123, "glanc": 123, "cryptic": 123, "worri": 123, "doesn": 123, "led": 123, "content": 123, "retrain": 123, "didn": 123, "anyth": 123, "got": 123, "five": 123, "stratifiedkfold": 123, "ourselv": 123, "resembl": [123, 124], "fourth": 123, "cv_splitter": 123, "assumpt": 123, "rememb": 123, "list_scor": 123, "f1": 123, "f1_macro": 123, "decent": 123, "switch": 123, "breast_canc": 123, "cancer": 123, "malign": 123, "benign": 123, "load_breast_canc": 123, "liner": 123, "pairwis": 123, "neither": 123, "nor": 123, "slower": 123, "intuit": 123, "forg": 123, "dive": 123, "curiou": 123, "autom": 124, "pipe": 124, "fed": 124, "modifi": 124, "friendli": 124, "safe": 124, "notic": 124, "contin": 124, "discret": 124, "explicit": 124, "voil\u00e0": 124, "never": 124, "wish": 124, "examplari": 124, "decomposit": 124, "previous": 124, "intranspar": 124, "simplifi": 124, "neat": 124, "straightforward": 124, "stepwis": 124, "logic": 124, "awesom": 124, "cover": 124, "jump": 124, "aren": 124, "shouldn": 124, "ye": 124, "turn": 124, "save": 124, "_configur": 124, "experi": 124, "heurist": 124, "thumb": 124, "_tuned_": 124, "rate": 124, "sigma": 124, "with_mean": 124, "basi": 124, "comma": 124, "wonder": 124, "besid": 124, "straight": 124, "forward": 124, "definit": 124, "exemplarili": 124, "_pca_": 124, "slightli": 124, "receiv": 124, "_sepal_": 124, "therfor": 124, "conist": 124, "clear": 124, "overal": 124, "boser": 124, "guyon": 124, "vapnik": 124, "margin": 124, "colt": 124, "92": 124, "proceed": 124, "fifth": 124, "annual": 124, "workshop": 124, "theori": 124, "1992": 124, "jul": 124, "144": 124, "170": 125, "151": 125, "bump": 125, "minimum": 125, "fede": 125, "refactor": 125, "face": 125, "create_pipelin": 125, "repeatedstratifiedgroupskfold": 125, "tranform_until": 125, "63": 125, "register_model": 125, "105": 125, "instruct": 125, "94": 125, "24": 125, "108": 125, "multiprocess": 125, "nos": 125, "extendeddataframepipelin": 125, "135": 125, "122": 125, "surround": 125, "miss": 125, "deprec": 125, "146": 125}, "objects": {"julearn": [[1, 0, 1, "", "PipelineCreator"], [2, 0, 1, "", "TargetPipelineCreator"], [67, 3, 0, "-", "api"], [0, 3, 0, "-", "base"], [66, 3, 0, "-", "inspect"], [68, 3, 0, "-", "model_selection"], [69, 3, 0, "-", "models"], [70, 3, 0, "-", "pipeline"], [71, 3, 0, "-", "prepare"], [29, 5, 1, "", "run_cross_validation"], [72, 3, 0, "-", "scoring"], [73, 3, 0, "-", "transformers"], [74, 3, 0, "-", "utils"], [75, 3, 0, "-", "viz"]], "julearn.PipelineCreator": [[1, 1, 1, "", "__init__"], [1, 1, 1, "", "add"], [1, 1, 1, "", "from_list"], [1, 1, 1, "", "has_model"], [1, 2, 1, "", "steps"], [1, 1, 1, "", "to_pipeline"]], "julearn.TargetPipelineCreator": [[2, 1, 1, "", "__init__"], [2, 1, 1, "", "add"], [2, 1, 1, "", "to_pipeline"]], "julearn.base": [[3, 0, 1, "", "ColumnTypes"], [4, 4, 1, "", "ColumnTypesLike"], [5, 0, 1, "", "JuBaseEstimator"], [6, 0, 1, "", "JuTransformer"], [7, 0, 1, "", "WrapModel"], [8, 5, 1, "", "change_column_type"], [9, 5, 1, "", "ensure_column_types"], [10, 5, 1, "", "get_column_type"], [11, 5, 1, "", "make_type_selector"]], "julearn.base.ColumnTypes": [[3, 1, 1, "", "__init__"], [3, 1, 1, "", "add"], [3, 1, 1, "", "copy"], [3, 2, 1, "", "pattern"], [3, 1, 1, "", "to_type_selector"]], "julearn.base.JuBaseEstimator": [[5, 1, 1, "", "__init__"], [5, 1, 1, "", "filter_columns"], [5, 1, 1, "", "get_apply_to"], [5, 1, 1, "", "get_needed_types"], [5, 1, 1, "", "get_params"], [5, 1, 1, "", "set_params"]], "julearn.base.JuTransformer": [[6, 1, 1, "", "__init__"], [6, 1, 1, "", "filter_columns"], [6, 1, 1, "", "fit"], [6, 1, 1, "", "fit_transform"], [6, 1, 1, "", "get_apply_to"], [6, 1, 1, "", "get_needed_types"], [6, 1, 1, "", "get_params"], [6, 1, 1, "", "set_output"], [6, 1, 1, "", "set_params"]], "julearn.base.WrapModel": [[7, 1, 1, "", "__init__"], [7, 2, 1, "", "classes_"], [7, 1, 1, "", "decision_function"], [7, 1, 1, "", "filter_columns"], [7, 1, 1, "", "fit"], [7, 1, 1, "", "get_apply_to"], [7, 1, 1, "", "get_needed_types"], [7, 1, 1, "", "get_params"], [7, 1, 1, "", "predict"], [7, 1, 1, "", "predict_log_proba"], [7, 1, 1, "", "predict_proba"], [7, 1, 1, "", "score"], [7, 1, 1, "", "set_params"]], "julearn.inspect": [[12, 5, 1, "", "preprocess"]], "julearn.model_selection": [[13, 0, 1, "", "RepeatedStratifiedGroupsKFold"], [14, 0, 1, "", "StratifiedBootstrap"], [15, 0, 1, "", "StratifiedGroupsKFold"], [16, 5, 1, "", "get_searcher"], [17, 5, 1, "", "list_searchers"], [18, 5, 1, "", "register_searcher"], [19, 5, 1, "", "reset_searcher_register"]], "julearn.model_selection.RepeatedStratifiedGroupsKFold": [[13, 1, 1, "", "__init__"], [13, 1, 1, "", "get_n_splits"], [13, 1, 1, "", "split"]], "julearn.model_selection.StratifiedBootstrap": [[14, 1, 1, "", "__init__"], [14, 1, 1, "", "get_n_splits"], [14, 1, 1, "", "split"]], "julearn.model_selection.StratifiedGroupsKFold": [[15, 1, 1, "", "__init__"], [15, 1, 1, "", "get_n_splits"], [15, 1, 1, "", "split"]], "julearn.models": [[69, 3, 0, "-", "dynamic"], [21, 5, 1, "", "get_model"], [22, 5, 1, "", "list_models"], [23, 5, 1, "", "register_model"], [24, 5, 1, "", "reset_model_register"]], "julearn.models.dynamic": [[20, 0, 1, "", "DynamicSelection"]], "julearn.models.dynamic.DynamicSelection": [[20, 1, 1, "", "__init__"], [20, 1, 1, "", "fit"], [20, 1, 1, "", "get_params"], [20, 1, 1, "", "predict"], [20, 1, 1, "", "predict_proba"], [20, 1, 1, "", "score"], [20, 1, 1, "", "set_params"]], "julearn.pipeline": [[25, 0, 1, "", "JuTargetPipeline"]], "julearn.pipeline.JuTargetPipeline": [[25, 1, 1, "", "__init__"], [25, 1, 1, "", "can_inverse_transform"], [25, 1, 1, "", "fit"], [25, 1, 1, "", "fit_transform"], [25, 1, 1, "", "inverse_transform"], [25, 2, 1, "", "needed_types"], [25, 1, 1, "", "transform"]], "julearn.pipeline.pipeline_creator": [[26, 0, 1, "", "Step"]], "julearn.pipeline.pipeline_creator.Step": [[26, 1, 1, "", "__init__"], [26, 4, 1, "", "apply_to"], [26, 4, 1, "", "estimator"], [26, 4, 1, "", "name"], [26, 4, 1, "", "needed_types"], [26, 4, 1, "", "params_to_tune"], [26, 4, 1, "", "row_select_col_type"], [26, 4, 1, "", "row_select_vals"]], "julearn.prepare": [[27, 5, 1, "", "check_consistency"], [28, 5, 1, "", "prepare_input_data"]], "julearn.scoring": [[30, 5, 1, "", "check_scoring"], [31, 5, 1, "", "get_scorer"], [32, 5, 1, "", "list_scorers"], [72, 3, 0, "-", "metrics"], [34, 5, 1, "", "register_scorer"], [35, 5, 1, "", "reset_scorer_register"]], "julearn.scoring.metrics": [[33, 5, 1, "", "r2_corr"]], "julearn.transformers": [[36, 0, 1, "", "CBPM"], [37, 0, 1, "", "ChangeColumnTypes"], [38, 0, 1, "", "DropColumns"], [39, 0, 1, "", "FilterColumns"], [40, 0, 1, "", "JuColumnTransformer"], [41, 0, 1, "", "SetColumnTypes"], [43, 5, 1, "", "get_transformer"], [44, 5, 1, "", "list_transformers"], [45, 5, 1, "", "register_transformer"], [46, 5, 1, "", "reset_transformer_register"], [73, 3, 0, "-", "target"]], "julearn.transformers.CBPM": [[36, 1, 1, "", "__init__"], [36, 1, 1, "", "aggregate"], [36, 1, 1, "", "fit"], [36, 1, 1, "", "fit_transform"], [36, 1, 1, "", "get_feature_names_out"], [36, 1, 1, "", "get_params"], [36, 1, 1, "", "set_output"], [36, 1, 1, "", "set_params"], [36, 1, 1, "", "transform"]], "julearn.transformers.ChangeColumnTypes": [[37, 1, 1, "", "__init__"], [37, 1, 1, "", "filter_columns"], [37, 1, 1, "", "fit"], [37, 1, 1, "", "fit_transform"], [37, 1, 1, "", "get_apply_to"], [37, 1, 1, "", "get_feature_names_out"], [37, 1, 1, "", "get_needed_types"], [37, 1, 1, "", "get_params"], [37, 1, 1, "", "set_output"], [37, 1, 1, "", "set_params"], [37, 1, 1, "", "transform"]], "julearn.transformers.DropColumns": [[38, 1, 1, "", "__init__"], [38, 1, 1, "", "filter_columns"], [38, 1, 1, "", "fit"], [38, 1, 1, "", "fit_transform"], [38, 1, 1, "", "get_apply_to"], [38, 1, 1, "", "get_needed_types"], [38, 1, 1, "", "get_params"], [38, 1, 1, "", "get_support"], [38, 1, 1, "", "set_output"], [38, 1, 1, "", "set_params"], [38, 1, 1, "", "transform"]], "julearn.transformers.FilterColumns": [[39, 1, 1, "", "__init__"], [39, 1, 1, "", "filter_columns"], [39, 1, 1, "", "fit"], [39, 1, 1, "", "fit_transform"], [39, 1, 1, "", "get_apply_to"], [39, 1, 1, "", "get_feature_names_out"], [39, 1, 1, "", "get_needed_types"], [39, 1, 1, "", "get_params"], [39, 1, 1, "", "set_output"], [39, 1, 1, "", "set_params"], [39, 1, 1, "", "transform"]], "julearn.transformers.JuColumnTransformer": [[40, 1, 1, "", "__init__"], [40, 1, 1, "", "filter_columns"], [40, 1, 1, "", "fit"], [40, 1, 1, "", "fit_transform"], [40, 1, 1, "", "get_apply_to"], [40, 1, 1, "", "get_feature_names_out"], [40, 1, 1, "", "get_needed_types"], [40, 1, 1, "", "get_params"], [40, 1, 1, "", "set_output"], [40, 1, 1, "", "set_params"], [40, 1, 1, "", "transform"]], "julearn.transformers.SetColumnTypes": [[41, 1, 1, "", "__init__"], [41, 1, 1, "", "filter_columns"], [41, 1, 1, "", "fit"], [41, 1, 1, "", "fit_transform"], [41, 1, 1, "", "get_apply_to"], [41, 1, 1, "", "get_feature_names_out"], [41, 1, 1, "", "get_needed_types"], [41, 1, 1, "", "get_params"], [41, 1, 1, "", "set_output"], [41, 1, 1, "", "set_params"], [41, 1, 1, "", "transform"]], "julearn.transformers.confound_remover": [[42, 0, 1, "", "ConfoundRemover"]], "julearn.transformers.confound_remover.ConfoundRemover": [[42, 1, 1, "", "__init__"], [42, 1, 1, "", "filter_columns"], [42, 1, 1, "", "fit"], [42, 1, 1, "", "fit_transform"], [42, 1, 1, "", "get_apply_to"], [42, 1, 1, "", "get_feature_names_out"], [42, 1, 1, "", "get_needed_types"], [42, 1, 1, "", "get_params"], [42, 1, 1, "", "get_support"], [42, 1, 1, "", "set_output"], [42, 1, 1, "", "set_params"], [42, 1, 1, "", "transform"]], "julearn.transformers.target": [[47, 0, 1, "", "JuTargetTransformer"], [48, 0, 1, "", "JuTransformedTargetModel"], [49, 0, 1, "", "TargetConfoundRemover"], [50, 0, 1, "", "TransformedTargetWarning"], [51, 5, 1, "", "get_target_transformer"], [52, 5, 1, "", "list_target_transformers"], [53, 5, 1, "", "register_target_transformer"], [54, 5, 1, "", "reset_target_transformer_register"]], "julearn.transformers.target.JuTargetTransformer": [[47, 1, 1, "", "__init__"], [47, 1, 1, "", "fit"], [47, 1, 1, "", "fit_transform"], [47, 1, 1, "", "transform"]], "julearn.transformers.target.JuTransformedTargetModel": [[48, 1, 1, "", "__init__"], [48, 2, 1, "", "classes_"], [48, 1, 1, "", "decision_function"], [48, 1, 1, "", "filter_columns"], [48, 1, 1, "", "fit"], [48, 1, 1, "", "get_apply_to"], [48, 1, 1, "", "get_needed_types"], [48, 1, 1, "", "get_params"], [48, 1, 1, "", "predict"], [48, 1, 1, "", "predict_proba"], [48, 1, 1, "", "score"], [48, 1, 1, "", "set_params"]], "julearn.transformers.target.TargetConfoundRemover": [[49, 1, 1, "", "__init__"], [49, 1, 1, "", "fit"], [49, 1, 1, "", "fit_transform"], [49, 2, 1, "", "needed_types"], [49, 1, 1, "", "transform"]], "julearn.transformers.target.TransformedTargetWarning": [[50, 1, 1, "", "__init__"], [50, 4, 1, "", "args"], [50, 1, 1, "", "with_traceback"]], "julearn.utils": [[55, 5, 1, "", "configure_logging"], [56, 4, 1, "", "logger"], [57, 5, 1, "", "raise_error"], [74, 3, 0, "-", "typing"], [63, 5, 1, "", "warn_with_log"]], "julearn.utils.typing": [[58, 4, 1, "", "EstimatorLike"], [59, 0, 1, "", "EstimatorLikeFit1"], [60, 0, 1, "", "EstimatorLikeFit2"], [61, 0, 1, "", "EstimatorLikeFity"], [62, 0, 1, "", "JuEstimatorLike"]], "julearn.utils.typing.EstimatorLikeFit1": [[59, 1, 1, "", "__init__"], [59, 1, 1, "", "fit"], [59, 1, 1, "", "get_params"], [59, 1, 1, "", "set_params"]], "julearn.utils.typing.EstimatorLikeFit2": [[60, 1, 1, "", "__init__"], [60, 1, 1, "", "fit"], [60, 1, 1, "", "get_params"], [60, 1, 1, "", "set_params"]], "julearn.utils.typing.EstimatorLikeFity": [[61, 1, 1, "", "__init__"], [61, 1, 1, "", "fit"], [61, 1, 1, "", "get_params"], [61, 1, 1, "", "set_params"]], "julearn.utils.typing.JuEstimatorLike": [[62, 1, 1, "", "__init__"], [62, 1, 1, "", "fit"], [62, 1, 1, "", "get_apply_to"], [62, 1, 1, "", "get_needed_types"], [62, 1, 1, "", "get_params"], [62, 1, 1, "", "set_params"]], "julearn.viz": [[64, 5, 1, "", "plot_scores"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:module", "4": "py:attribute", "5": "py:function"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "module", "Python module"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "function", "Python function"]}, "titleterms": {"base": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 113], "julearn": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 76, 107, 109, 111, 112, 113, 115, 123, 124], "pipelinecr": [1, 124], "exampl": [1, 2, 12, 14, 15, 29, 34, 55, 64, 107, 108], "us": [1, 2, 12, 14, 15, 29, 34, 55, 64, 101, 109, 115], "targetpipelinecr": 2, "columntyp": 3, "columntypeslik": 4, "jubaseestim": 5, "jutransform": 6, "wrapmodel": 7, "change_column_typ": 8, "ensure_column_typ": 9, "get_column_typ": 10, "make_type_selector": 11, "inspect": [12, 66, 87, 88, 89, 91, 118], "preprocess": [12, 90, 124], "model_select": [13, 14, 15, 16, 17, 18, 19], "repeatedstratifiedgroupskfold": 13, "stratifiedbootstrap": 14, "stratifiedgroupskfold": 15, "get_search": 16, "list_search": 17, "register_search": 18, "reset_searcher_regist": 19, "model": [20, 21, 22, 23, 24, 68, 69, 84, 85, 88, 89, 93, 100, 106, 113, 118, 119, 123], "dynam": [20, 69, 106], "dynamicselect": 20, "get_model": 21, "list_model": 22, "register_model": 23, "reset_model_regist": 24, "pipelin": [25, 26, 70, 106, 124], "jutargetpipelin": 25, "pipeline_cr": 26, "step": [26, 106], "prepar": [27, 28, 71], "check_consist": 27, "prepare_input_data": 28, "run_cross_valid": [29, 111, 120, 121, 123], "score": [30, 31, 32, 33, 34, 35, 72, 94, 104, 123], "check_scor": 30, "get_scor": 31, "list_scor": 32, "metric": [33, 72], "r2_corr": 33, "register_scor": 34, "reset_scorer_regist": 35, "transform": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 73, 94, 106], "cbpm": [36, 113], "changecolumntyp": 37, "dropcolumn": 38, "filtercolumn": 39, "jucolumntransform": 40, "setcolumntyp": 41, "confound_remov": 42, "confoundremov": 42, "get_transform": 43, "list_transform": 44, "register_transform": 45, "reset_transformer_regist": 46, "target": [47, 48, 49, 50, 51, 52, 53, 54, 73, 94, 115, 124], "jutargettransform": 47, "jutransformedtargetmodel": 48, "targetconfoundremov": 49, "transformedtargetwarn": 50, "get_target_transform": 51, "list_target_transform": 52, "register_target_transform": 53, "reset_target_transformer_regist": 54, "util": [55, 56, 57, 58, 59, 60, 61, 62, 63, 74], "configure_log": 55, "logger": 56, "raise_error": 57, "type": [58, 59, 60, 61, 62, 74, 119, 121, 123, 124], "estimatorlik": 58, "estimatorlikefit1": 59, "estimatorlikefit2": 60, "estimatorlikef": 61, "juestimatorlik": 62, "warn_with_log": 63, "viz": [64, 109], "plot_scor": 64, "refer": [65, 80, 81, 88, 96, 113, 115, 120, 123, 124], "main": 67, "api": [67, 125], "select": [68, 69, 106, 117], "deslib": 69, "vizual": 75, "start": [76, 110], "multiclass": 77, "classif": [77, 82, 97], "regress": [78, 79, 95, 104, 115], "analysi": [78, 79, 95], "stratifi": 79, "k": 79, "fold": [79, 91], "cv": [79, 81], "work": 80, "panda": 80, "from": [80, 115], "long": 80, "wide": 80, "format": 80, "merg": 80, "join": 80, "data": [80, 121], "frame": 80, "reshap": 80, "more": 80, "complex": [80, 93], "group": 81, "deal": [81, 88], "cross": [81, 88, 115, 116, 120, 123, 124], "valid": [81, 88, 115, 116, 120, 123, 124], "techniqu": [81, 88], "simpl": [82, 85], "binari": 82, "comput": [83, 86, 92, 98, 102, 105], "time": [83, 86, 92, 98, 102, 105], "comparison": [84, 85, 100, 123], "svm": 88, "random": 89, "forest": 89, "variabl": [89, 94], "import": 89, "varianc": 90, "threshold": 90, "zscore": 90, "pca": 90, "wise": 91, "predict": [91, 113], "z": 94, "tune": [96, 114], "hyperparamet": [96, 124], "stack": [97, 119], "confound": [99, 100, 101, 115], "remov": [100, 101, 115], "return": [101, 123], "typic": 101, "case": 101, "custom": [103, 104, 106], "function": 104, "overview": 106, "avail": 106, "scaler": 106, "featur": [106, 115, 119, 121, 124], "datafram": 106, "oper": 106, "decomposit": 106, "estim": [106, 119, 123], "support": 106, "vector": 106, "machin": 106, "ensembl": 106, "gaussian": 106, "process": 106, "linear": 106, "naiv": 106, "bay": 106, "dummi": 106, "contribut": 107, "set": 107, "up": 107, "develop": 107, "environ": 107, "download": 107, "sourc": 107, "code": 107, "creat": 107, "virtual": 107, "instal": [107, 110], "requir": [107, 110], "pull": 107, "request": 107, "fork": 107, "github": 107, "repositori": 107, "branch": 107, "your": 107, "modif": 107, "do": [107, 109], "chang": [107, 125], "commit": 107, "push": 107, "test": 107, "build": 107, "document": [107, 111], "write": 107, "content": [108, 111, 117], "frequenli": 109, "ask": 109, "question": 109, "1": 109, "how": [109, 124], "i": [109, 111, 115], "interact": 109, "plot": 109, "get": 110, "setup": 110, "suggest": 110, "option": 110, "depend": 110, "welcom": 111, "": [111, 125], "what": [111, 122, 125], "why": [111, 120], "backbon": 111, "tabl": [111, 117], "indic": 111, "maintain": 112, "version": 112, "releas": 112, "new": [112, 125], "connectom": 113, "hyper": 114, "paramet": 114, "consist": 115, "should": 115, "splitter": [116, 123], "deeper": 117, "topic": 117, "fit": 119, "each": 119, "all": 119, "specif": [119, 121, 124], "The": [120, 123], "fundament": 120, "essenc": 120, "input": 121, "give": 121, "column": 121, "you": 122, "realli": 122, "need": 122, "know": 122, "evalu": 123, "basic": [123, 124], "run": 123, "differ": 123, "statist": 123, "compar": 123, "visual": 123, "made": 124, "easi": 124, "specifi": 124, "appli": 124, "onli": 124, "certain": 124, "current": 125, "0": 125, "2": 125, "6": 125, "dev": 125, "enhanc": 125, "bug": 125, "5": 125}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"Base": [[0, "module-julearn.base"]], "julearn.PipelineCreator": [[1, "julearn-pipelinecreator"]], "Examples using julearn.PipelineCreator": [[1, "examples-using-julearn-pipelinecreator"]], "julearn.TargetPipelineCreator": [[2, "julearn-targetpipelinecreator"]], "Examples using julearn.TargetPipelineCreator": [[2, "examples-using-julearn-targetpipelinecreator"]], "julearn.base.ColumnTypes": [[3, "julearn-base-columntypes"]], "julearn.base.ColumnTypesLike": [[4, "julearn-base-columntypeslike"]], "julearn.base.JuBaseEstimator": [[5, "julearn-base-jubaseestimator"]], "julearn.base.JuTransformer": [[6, "julearn-base-jutransformer"]], "julearn.base.WrapModel": [[7, "julearn-base-wrapmodel"]], "julearn.base.change_column_type": [[8, "julearn-base-change-column-type"]], "julearn.base.ensure_column_types": [[9, "julearn-base-ensure-column-types"]], "julearn.base.get_column_type": [[10, "julearn-base-get-column-type"]], "julearn.base.make_type_selector": [[11, "julearn-base-make-type-selector"]], "julearn.inspect.preprocess": [[12, "julearn-inspect-preprocess"]], "Examples using julearn.inspect.preprocess": [[12, "examples-using-julearn-inspect-preprocess"]], "julearn.model_selection.RepeatedStratifiedGroupsKFold": [[13, "julearn-model-selection-repeatedstratifiedgroupskfold"]], "julearn.model_selection.StratifiedBootstrap": [[14, "julearn-model-selection-stratifiedbootstrap"]], "Examples using julearn.model_selection.StratifiedBootstrap": [[14, "examples-using-julearn-model-selection-stratifiedbootstrap"]], "julearn.model_selection.StratifiedGroupsKFold": [[15, "julearn-model-selection-stratifiedgroupskfold"]], "Examples using julearn.model_selection.StratifiedGroupsKFold": [[15, "examples-using-julearn-model-selection-stratifiedgroupskfold"]], "julearn.model_selection.get_searcher": [[16, "julearn-model-selection-get-searcher"]], "julearn.model_selection.list_searchers": [[17, "julearn-model-selection-list-searchers"]], "julearn.model_selection.register_searcher": [[18, "julearn-model-selection-register-searcher"]], "julearn.model_selection.reset_searcher_register": [[19, "julearn-model-selection-reset-searcher-register"]], "julearn.models.dynamic.DynamicSelection": [[20, "julearn-models-dynamic-dynamicselection"]], "julearn.models.get_model": [[21, "julearn-models-get-model"]], "julearn.models.list_models": [[22, "julearn-models-list-models"]], "julearn.models.register_model": [[23, "julearn-models-register-model"]], "julearn.models.reset_model_register": [[24, "julearn-models-reset-model-register"]], "julearn.pipeline.JuTargetPipeline": [[25, "julearn-pipeline-jutargetpipeline"]], "julearn.pipeline.pipeline_creator.Step": [[26, "julearn-pipeline-pipeline-creator-step"]], "julearn.prepare.check_consistency": [[27, "julearn-prepare-check-consistency"]], "julearn.prepare.prepare_input_data": [[28, "julearn-prepare-prepare-input-data"]], "julearn.run_cross_validation": [[29, "julearn-run-cross-validation"]], "Examples using julearn.run_cross_validation": [[29, "examples-using-julearn-run-cross-validation"]], "julearn.scoring.check_scoring": [[30, "julearn-scoring-check-scoring"]], "julearn.scoring.get_scorer": [[31, "julearn-scoring-get-scorer"]], "julearn.scoring.list_scorers": [[32, "julearn-scoring-list-scorers"]], "julearn.scoring.metrics.r2_corr": [[33, "julearn-scoring-metrics-r2-corr"]], "julearn.scoring.register_scorer": [[34, "julearn-scoring-register-scorer"]], "Examples using julearn.scoring.register_scorer": [[34, "examples-using-julearn-scoring-register-scorer"]], "julearn.scoring.reset_scorer_register": [[35, "julearn-scoring-reset-scorer-register"]], "julearn.transformers.CBPM": [[36, "julearn-transformers-cbpm"]], "julearn.transformers.ChangeColumnTypes": [[37, "julearn-transformers-changecolumntypes"]], "julearn.transformers.DropColumns": [[38, "julearn-transformers-dropcolumns"]], "julearn.transformers.FilterColumns": [[39, "julearn-transformers-filtercolumns"]], "julearn.transformers.JuColumnTransformer": [[40, "julearn-transformers-jucolumntransformer"]], "julearn.transformers.SetColumnTypes": [[41, "julearn-transformers-setcolumntypes"]], "julearn.transformers.confound_remover.ConfoundRemover": [[42, "julearn-transformers-confound-remover-confoundremover"]], "julearn.transformers.get_transformer": [[43, "julearn-transformers-get-transformer"]], "julearn.transformers.list_transformers": [[44, "julearn-transformers-list-transformers"]], "julearn.transformers.register_transformer": [[45, "julearn-transformers-register-transformer"]], "julearn.transformers.reset_transformer_register": [[46, "julearn-transformers-reset-transformer-register"]], "julearn.transformers.target.JuTargetTransformer": [[47, "julearn-transformers-target-jutargettransformer"]], "julearn.transformers.target.JuTransformedTargetModel": [[48, "julearn-transformers-target-jutransformedtargetmodel"]], "julearn.transformers.target.TargetConfoundRemover": [[49, "julearn-transformers-target-targetconfoundremover"]], "julearn.transformers.target.TransformedTargetWarning": [[50, "julearn-transformers-target-transformedtargetwarning"]], "julearn.transformers.target.get_target_transformer": [[51, "julearn-transformers-target-get-target-transformer"]], "julearn.transformers.target.list_target_transformers": [[52, "julearn-transformers-target-list-target-transformers"]], "julearn.transformers.target.register_target_transformer": [[53, "julearn-transformers-target-register-target-transformer"]], "julearn.transformers.target.reset_target_transformer_register": [[54, "julearn-transformers-target-reset-target-transformer-register"]], "julearn.utils.configure_logging": [[55, "julearn-utils-configure-logging"]], "Examples using julearn.utils.configure_logging": [[55, "examples-using-julearn-utils-configure-logging"]], "julearn.utils.logger": [[56, "julearn-utils-logger"]], "julearn.utils.raise_error": [[57, "julearn-utils-raise-error"]], "julearn.utils.typing.EstimatorLike": [[58, "julearn-utils-typing-estimatorlike"]], "julearn.utils.typing.EstimatorLikeFit1": [[59, "julearn-utils-typing-estimatorlikefit1"]], "julearn.utils.typing.EstimatorLikeFit2": [[60, "julearn-utils-typing-estimatorlikefit2"]], "julearn.utils.typing.EstimatorLikeFity": [[61, "julearn-utils-typing-estimatorlikefity"]], "julearn.utils.typing.JuEstimatorLike": [[62, "julearn-utils-typing-juestimatorlike"]], "julearn.utils.warn_with_log": [[63, "julearn-utils-warn-with-log"]], "julearn.viz.plot_scores": [[64, "julearn-viz-plot-scores"]], "Examples using julearn.viz.plot_scores": [[64, "examples-using-julearn-viz-plot-scores"]], "Reference": [[65, "reference"]], "Inspect": [[66, "module-julearn.inspect"]], "Main API": [[67, "module-julearn.api"]], "Model Selection": [[68, "module-julearn.model_selection"]], "Models": [[69, "module-julearn.models"]], "Dynamic Selection (DESLib)": [[69, "dynamic-selection-deslib"]], "Pipeline": [[70, "module-julearn.pipeline"], [124, "pipeline"]], "Prepare": [[71, "module-julearn.prepare"]], "Scoring": [[72, "module-julearn.scoring"], [123, "id2"]], "Scoring Metrics": [[72, "module-julearn.scoring.metrics"]], "Transformers": [[73, "module-julearn.transformers"], [106, "transformers"]], "Target Transformers": [[73, "module-julearn.transformers.target"]], "Utils": [[74, "module-julearn.utils"]], "Typing": [[74, "module-julearn.utils.typing"]], "Vizualization": [[75, "vizualization"]], "Starting with julearn": [[76, "starting-with-julearn"]], "Multiclass Classification.": [[77, "multiclass-classification"]], "Regression Analysis": [[78, "regression-analysis"], [95, "regression-analysis"]], "Stratified K-fold CV for regression analysis": [[79, "stratified-k-fold-cv-for-regression-analysis"]], "Working with pandas": [[80, "working-with-pandas"]], "References": [[80, "references"], [81, "references"], [88, "references"], [96, "references"]], "From long to wide format": [[80, "from-long-to-wide-format"]], "Merging or joining data frames": [[80, "merging-or-joining-data-frames"]], "Reshaping data frames (more complex)": [[80, "reshaping-data-frames-more-complex"]], "Grouped CV.": [[81, "grouped-cv"]], "Dealing with Cross-Validation techniques": [[81, "dealing-with-cross-validation-techniques"], [88, "dealing-with-cross-validation-techniques"]], "Simple Binary Classification": [[82, "simple-binary-classification"]], "Computation times": [[83, "computation-times"], [86, "computation-times"], [92, "computation-times"], [98, "computation-times"], [102, "computation-times"], [105, "computation-times"]], "Model Comparison": [[84, "model-comparison"]], "Simple Model Comparison": [[85, "simple-model-comparison"]], "Inspection": [[87, "inspection"]], "Inspecting SVM models.": [[88, "inspecting-svm-models"]], "Inspecting Random Forest models": [[89, "inspecting-random-forest-models"]], "Random Forest variable importance": [[89, "random-forest-variable-importance"]], "Preprocessing with variance threshold, zscore and PCA": [[90, "preprocessing-with-variance-threshold-zscore-and-pca"]], "Inspecting the fold-wise predictions": [[91, "inspecting-the-fold-wise-predictions"]], "Complex Models": [[93, "complex-models"]], "Transforming target variable with z-score.": [[94, "transforming-target-variable-with-z-score"]], "Tuning Hyperparameters": [[96, "tuning-hyperparameters"]], "Stacking Classification": [[97, "stacking-classification"]], "Confounds": [[99, "confounds"]], "Confound Removal (model comparison)": [[100, "confound-removal-model-comparison"]], "Return Confounds in Confound Removal": [[101, "return-confounds-in-confound-removal"]], "Confound Removal Typical Use Case": [[101, "confound-removal-typical-use-case"]], "Customization": [[103, "customization"]], "Custom Scoring Function for Regression": [[104, "custom-scoring-function-for-regression"]], "Overview of available Pipeline Steps": [[106, "overview-of-available-pipeline-steps"]], "Scalers": [[106, "scalers"]], "Feature Selection": [[106, "feature-selection"]], "DataFrame operations": [[106, "dataframe-operations"]], "Decomposition": [[106, "decomposition"]], "Custom": [[106, "custom"]], "Models (Estimators)": [[106, "models-estimators"]], "Support Vector Machines": [[106, "support-vector-machines"]], "Ensemble": [[106, "ensemble"]], "Gaussian Processes": [[106, "gaussian-processes"]], "Linear Models": [[106, "linear-models"]], "Naive Bayes": [[106, "naive-bayes"]], "Dynamic Selection": [[106, "dynamic-selection"]], "Dummy": [[106, "dummy"]], "Contributing to julearn": [[107, "contributing-to-julearn"]], "Setting up the development environment": [[107, "setting-up-the-development-environment"]], "Download the source code": [[107, "download-the-source-code"]], "Create a virtual environment": [[107, "create-a-virtual-environment"]], "Install the requirements": [[107, "install-the-requirements"]], "Install julearn": [[107, "install-julearn"]], "Contributing with a pull request": [[107, "contributing-with-a-pull-request"]], "Fork the julearn Github repository": [[107, "fork-the-julearn-github-repository"]], "Create a branch for your modifications": [[107, "create-a-branch-for-your-modifications"]], "Do the changes": [[107, "do-the-changes"]], "Commit and Push": [[107, "commit-and-push"]], "Test and build the documentation": [[107, "test-and-build-the-documentation"]], "Create a pull request": [[107, "create-a-pull-request"]], "Writing Examples": [[107, "writing-examples"]], "Examples": [[108, "examples"]], "Contents:": [[108, null]], "Frequenly Asked Questions": [[109, "frequenly-asked-questions"]], "1. How do I use the julearn viz interactive plots?": [[109, "how-do-i-use-the-julearn-viz-interactive-plots"]], "Getting started": [[110, "getting-started"]], "Requirements": [[110, "requirements"]], "Setup suggestion": [[110, "setup-suggestion"]], "Installing": [[110, "installing"]], "Optional Dependencies": [[110, "optional-dependencies"]], "Welcome to julearn\u2019s documentation!": [[111, "welcome-to-julearn-s-documentation"]], "What is Julearn?": [[111, "what-is-julearn"]], "Why Julearn?": [[111, "why-julearn"]], "Julearn\u2019s backbone - run_cross_validation()": [[111, "julearn-s-backbone-run-cross-validation"]], "Table of Contents": [[111, "table-of-contents"], [117, null]], "Indices and tables": [[111, "indices-and-tables"]], "Maintaining julearn": [[112, "maintaining-julearn"]], "Versioning": [[112, "versioning"]], "Releasing a new version": [[112, "releasing-a-new-version"]], "Connectome-based Predictive Modeling (CBPM)": [[113, "connectome-based-predictive-modeling-cbpm"]], "CBPM in Julearn": [[113, "cbpm-in-julearn"]], "References:": [[113, null], [115, null], [120, null], [123, null], [124, null]], "Hyper Parameter Tuning": [[114, "hyper-parameter-tuning"]], "Cross-validation consistent Confound Removal": [[115, "cross-validation-consistent-confound-removal"]], "Confound Removal in Julearn": [[115, "confound-removal-in-julearn"]], "Removing Confounds from the Features": [[115, "removing-confounds-from-the-features"]], "Removing Confounds from the Target": [[115, "removing-confounds-from-the-target"]], "Should I use Confound Regression?": [[115, "should-i-use-confound-regression"]], "Cross-validation splitter": [[116, "cross-validation-splitter"]], "Selected deeper topics": [[117, "selected-deeper-topics"]], "Inspecting Models": [[118, "inspecting-models"]], "Stacking Models": [[119, "stacking-models"]], "Fitting each estimator on all of the features": [[119, "fitting-each-estimator-on-all-of-the-features"]], "Fitting each estimator on a specific feature type": [[119, "fitting-each-estimator-on-a-specific-feature-type"]], "Why cross validation?": [[120, "why-cross-validation"]], "Cross-validation - The fundamentals": [[120, "cross-validation-the-fundamentals"]], "The essence of run_cross_validation()": [[120, "the-essence-of-run-cross-validation"]], "Data": [[121, "data"]], "Input data to run_cross_validation()": [[121, "input-data-to-run-cross-validation"]], "Give the feature columns a specific type": [[121, "give-the-feature-columns-a-specific-type"]], "What you really need to know": [[122, "what-you-really-need-to-know"]], "Model evaluation": [[123, "model-evaluation"]], "The returns of run_cross_validation()": [[123, "the-returns-of-run-cross-validation"]], "Cross-validation scores": [[123, "cross-validation-scores"]], "Returning a model (estimator)": [[123, "returning-a-model-estimator"]], "Cross-validation types and scoring": [[123, "cross-validation-types-and-scoring"]], "Cross-validation splitters": [[123, "cross-validation-splitters"]], "Basic model comparisons with Julearn": [[123, "basic-model-comparisons-with-julearn"]], "Running different models": [[123, "running-different-models"]], "Statistically compare the models": [[123, "statistically-compare-the-models"]], "Visualize the models": [[123, "visualize-the-models"]], "Basic cross validation with Julearn": [[124, "basic-cross-validation-with-julearn"]], "(Feature) preprocessing": [[124, "feature-preprocessing"]], "Pipeline specification made easy with the PipelineCreator": [[124, "pipeline-specification-made-easy-with-the-pipelinecreator"]], "How to specify hyperparameters": [[124, "how-to-specify-hyperparameters"]], "Applying preprocessing only to certain feature types": [[124, "applying-preprocessing-only-to-certain-feature-types"]], "Applying preprocessing to the target": [[124, "applying-preprocessing-to-the-target"]], "What\u2019s new": [[125, "what-s-new"]], "Current (0.2.6.dev)": [[125, "current-0-2-6-dev"]], "Enhancements": [[125, "enhancements"], [125, "id3"]], "Bugs": [[125, "bugs"], [125, "id4"]], "API changes": [[125, "api-changes"], [125, "id5"]], "0.2.5": [[125, "id1"]]}, "indexentries": {"julearn.base": [[0, "module-julearn.base"]], "module": [[0, "module-julearn.base"], [66, "module-julearn.inspect"], [67, "module-julearn.api"], [68, "module-julearn.model_selection"], [69, "module-julearn.models"], [69, "module-julearn.models.dynamic"], [70, "module-julearn.pipeline"], [71, "module-julearn.prepare"], [72, "module-julearn.scoring"], [72, "module-julearn.scoring.metrics"], [73, "module-julearn.transformers"], [73, "module-julearn.transformers.target"], [74, "module-julearn.utils"], [74, "module-julearn.utils.typing"], [75, "module-julearn.viz"]], "pipelinecreator (class in julearn)": [[1, "julearn.PipelineCreator"]], "__init__() (julearn.pipelinecreator method)": [[1, "julearn.PipelineCreator.__init__"]], "add() (julearn.pipelinecreator method)": [[1, "julearn.PipelineCreator.add"]], "from_list() (julearn.pipelinecreator class method)": [[1, "julearn.PipelineCreator.from_list"]], "has_model() (julearn.pipelinecreator method)": [[1, "julearn.PipelineCreator.has_model"]], "steps (julearn.pipelinecreator property)": [[1, "julearn.PipelineCreator.steps"]], "to_pipeline() (julearn.pipelinecreator method)": [[1, "julearn.PipelineCreator.to_pipeline"]], "targetpipelinecreator (class in julearn)": [[2, "julearn.TargetPipelineCreator"]], "__init__() (julearn.targetpipelinecreator method)": [[2, "julearn.TargetPipelineCreator.__init__"]], "add() (julearn.targetpipelinecreator method)": [[2, "julearn.TargetPipelineCreator.add"]], "to_pipeline() (julearn.targetpipelinecreator method)": [[2, "julearn.TargetPipelineCreator.to_pipeline"]], "columntypes (class in julearn.base)": [[3, "julearn.base.ColumnTypes"]], "__init__() (julearn.base.columntypes method)": [[3, "julearn.base.ColumnTypes.__init__"]], "add() (julearn.base.columntypes method)": [[3, "julearn.base.ColumnTypes.add"]], "copy() (julearn.base.columntypes method)": [[3, "julearn.base.ColumnTypes.copy"]], "pattern (julearn.base.columntypes property)": [[3, "julearn.base.ColumnTypes.pattern"]], "to_type_selector() (julearn.base.columntypes method)": [[3, "julearn.base.ColumnTypes.to_type_selector"]], "columntypeslike (in module julearn.base)": [[4, "julearn.base.ColumnTypesLike"]], "jubaseestimator (class in julearn.base)": [[5, "julearn.base.JuBaseEstimator"]], "__init__() (julearn.base.jubaseestimator method)": [[5, "julearn.base.JuBaseEstimator.__init__"]], "filter_columns() (julearn.base.jubaseestimator method)": [[5, "julearn.base.JuBaseEstimator.filter_columns"]], "get_apply_to() (julearn.base.jubaseestimator method)": [[5, "julearn.base.JuBaseEstimator.get_apply_to"]], "get_needed_types() (julearn.base.jubaseestimator method)": [[5, "julearn.base.JuBaseEstimator.get_needed_types"]], "get_params() (julearn.base.jubaseestimator method)": [[5, "julearn.base.JuBaseEstimator.get_params"]], "set_params() (julearn.base.jubaseestimator method)": [[5, "julearn.base.JuBaseEstimator.set_params"]], "jutransformer (class in julearn.base)": [[6, "julearn.base.JuTransformer"]], "__init__() (julearn.base.jutransformer method)": [[6, "julearn.base.JuTransformer.__init__"]], "filter_columns() (julearn.base.jutransformer method)": [[6, "julearn.base.JuTransformer.filter_columns"]], "fit() (julearn.base.jutransformer method)": [[6, "julearn.base.JuTransformer.fit"]], "fit_transform() (julearn.base.jutransformer method)": [[6, "julearn.base.JuTransformer.fit_transform"]], "get_apply_to() (julearn.base.jutransformer method)": [[6, "julearn.base.JuTransformer.get_apply_to"]], "get_needed_types() (julearn.base.jutransformer method)": [[6, "julearn.base.JuTransformer.get_needed_types"]], "get_params() (julearn.base.jutransformer method)": [[6, "julearn.base.JuTransformer.get_params"]], "set_output() (julearn.base.jutransformer method)": [[6, "julearn.base.JuTransformer.set_output"]], "set_params() (julearn.base.jutransformer method)": [[6, "julearn.base.JuTransformer.set_params"]], "wrapmodel (class in julearn.base)": [[7, "julearn.base.WrapModel"]], "__init__() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.__init__"]], "classes_ (julearn.base.wrapmodel property)": [[7, "julearn.base.WrapModel.classes_"]], "decision_function() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.decision_function"]], "filter_columns() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.filter_columns"]], "fit() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.fit"]], "get_apply_to() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.get_apply_to"]], "get_needed_types() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.get_needed_types"]], "get_params() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.get_params"]], "predict() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.predict"]], "predict_log_proba() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.predict_log_proba"]], "predict_proba() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.predict_proba"]], "score() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.score"]], "set_params() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.set_params"]], "change_column_type() (in module julearn.base)": [[8, "julearn.base.change_column_type"]], "ensure_column_types() (in module julearn.base)": [[9, "julearn.base.ensure_column_types"]], "get_column_type() (in module julearn.base)": [[10, "julearn.base.get_column_type"]], "make_type_selector() (in module julearn.base)": [[11, "julearn.base.make_type_selector"]], "preprocess() (in module julearn.inspect)": [[12, "julearn.inspect.preprocess"]], "repeatedstratifiedgroupskfold (class in julearn.model_selection)": [[13, "julearn.model_selection.RepeatedStratifiedGroupsKFold"]], "__init__() (julearn.model_selection.repeatedstratifiedgroupskfold method)": [[13, "julearn.model_selection.RepeatedStratifiedGroupsKFold.__init__"]], "get_n_splits() (julearn.model_selection.repeatedstratifiedgroupskfold method)": [[13, "julearn.model_selection.RepeatedStratifiedGroupsKFold.get_n_splits"]], "split() (julearn.model_selection.repeatedstratifiedgroupskfold method)": [[13, "julearn.model_selection.RepeatedStratifiedGroupsKFold.split"]], "stratifiedbootstrap (class in julearn.model_selection)": [[14, "julearn.model_selection.StratifiedBootstrap"]], "__init__() (julearn.model_selection.stratifiedbootstrap method)": [[14, "julearn.model_selection.StratifiedBootstrap.__init__"]], "get_n_splits() (julearn.model_selection.stratifiedbootstrap method)": [[14, "julearn.model_selection.StratifiedBootstrap.get_n_splits"]], "split() (julearn.model_selection.stratifiedbootstrap method)": [[14, "julearn.model_selection.StratifiedBootstrap.split"]], "stratifiedgroupskfold (class in julearn.model_selection)": [[15, "julearn.model_selection.StratifiedGroupsKFold"]], "__init__() (julearn.model_selection.stratifiedgroupskfold method)": [[15, "julearn.model_selection.StratifiedGroupsKFold.__init__"]], "get_n_splits() (julearn.model_selection.stratifiedgroupskfold method)": [[15, "julearn.model_selection.StratifiedGroupsKFold.get_n_splits"]], "split() (julearn.model_selection.stratifiedgroupskfold method)": [[15, "julearn.model_selection.StratifiedGroupsKFold.split"]], "get_searcher() (in module julearn.model_selection)": [[16, "julearn.model_selection.get_searcher"]], "list_searchers() (in module julearn.model_selection)": [[17, "julearn.model_selection.list_searchers"]], "register_searcher() (in module julearn.model_selection)": [[18, "julearn.model_selection.register_searcher"]], "reset_searcher_register() (in module julearn.model_selection)": [[19, "julearn.model_selection.reset_searcher_register"]], "dynamicselection (class in julearn.models.dynamic)": [[20, "julearn.models.dynamic.DynamicSelection"]], "__init__() (julearn.models.dynamic.dynamicselection method)": [[20, "julearn.models.dynamic.DynamicSelection.__init__"]], "fit() (julearn.models.dynamic.dynamicselection method)": [[20, "julearn.models.dynamic.DynamicSelection.fit"]], "get_params() (julearn.models.dynamic.dynamicselection method)": [[20, "julearn.models.dynamic.DynamicSelection.get_params"]], "predict() (julearn.models.dynamic.dynamicselection method)": [[20, "julearn.models.dynamic.DynamicSelection.predict"]], "predict_proba() (julearn.models.dynamic.dynamicselection method)": [[20, "julearn.models.dynamic.DynamicSelection.predict_proba"]], "score() (julearn.models.dynamic.dynamicselection method)": [[20, "julearn.models.dynamic.DynamicSelection.score"]], "set_params() (julearn.models.dynamic.dynamicselection method)": [[20, "julearn.models.dynamic.DynamicSelection.set_params"]], "get_model() (in module julearn.models)": [[21, "julearn.models.get_model"]], "list_models() (in module julearn.models)": [[22, "julearn.models.list_models"]], "register_model() (in module julearn.models)": [[23, "julearn.models.register_model"]], "reset_model_register() (in module julearn.models)": [[24, "julearn.models.reset_model_register"]], "jutargetpipeline (class in julearn.pipeline)": [[25, "julearn.pipeline.JuTargetPipeline"]], "__init__() (julearn.pipeline.jutargetpipeline method)": [[25, "julearn.pipeline.JuTargetPipeline.__init__"]], "can_inverse_transform() (julearn.pipeline.jutargetpipeline method)": [[25, "julearn.pipeline.JuTargetPipeline.can_inverse_transform"]], "fit() (julearn.pipeline.jutargetpipeline method)": [[25, "julearn.pipeline.JuTargetPipeline.fit"]], "fit_transform() (julearn.pipeline.jutargetpipeline method)": [[25, "julearn.pipeline.JuTargetPipeline.fit_transform"]], "inverse_transform() (julearn.pipeline.jutargetpipeline method)": [[25, "julearn.pipeline.JuTargetPipeline.inverse_transform"]], "needed_types (julearn.pipeline.jutargetpipeline property)": [[25, "julearn.pipeline.JuTargetPipeline.needed_types"]], "transform() (julearn.pipeline.jutargetpipeline method)": [[25, "julearn.pipeline.JuTargetPipeline.transform"]], "step (class in julearn.pipeline.pipeline_creator)": [[26, "julearn.pipeline.pipeline_creator.Step"]], "__init__() (julearn.pipeline.pipeline_creator.step method)": [[26, "julearn.pipeline.pipeline_creator.Step.__init__"]], "apply_to (julearn.pipeline.pipeline_creator.step attribute)": [[26, "julearn.pipeline.pipeline_creator.Step.apply_to"]], "estimator (julearn.pipeline.pipeline_creator.step attribute)": [[26, "julearn.pipeline.pipeline_creator.Step.estimator"]], "name (julearn.pipeline.pipeline_creator.step attribute)": [[26, "julearn.pipeline.pipeline_creator.Step.name"]], "needed_types (julearn.pipeline.pipeline_creator.step attribute)": [[26, "julearn.pipeline.pipeline_creator.Step.needed_types"]], "params_to_tune (julearn.pipeline.pipeline_creator.step attribute)": [[26, "julearn.pipeline.pipeline_creator.Step.params_to_tune"]], "row_select_col_type (julearn.pipeline.pipeline_creator.step attribute)": [[26, "julearn.pipeline.pipeline_creator.Step.row_select_col_type"]], "row_select_vals (julearn.pipeline.pipeline_creator.step attribute)": [[26, "julearn.pipeline.pipeline_creator.Step.row_select_vals"]], "check_consistency() (in module julearn.prepare)": [[27, "julearn.prepare.check_consistency"]], "prepare_input_data() (in module julearn.prepare)": [[28, "julearn.prepare.prepare_input_data"]], "run_cross_validation() (in module julearn)": [[29, "julearn.run_cross_validation"]], "check_scoring() (in module julearn.scoring)": [[30, "julearn.scoring.check_scoring"]], "get_scorer() (in module julearn.scoring)": [[31, "julearn.scoring.get_scorer"]], "list_scorers() (in module julearn.scoring)": [[32, "julearn.scoring.list_scorers"]], "r2_corr() (in module julearn.scoring.metrics)": [[33, "julearn.scoring.metrics.r2_corr"]], "register_scorer() (in module julearn.scoring)": [[34, "julearn.scoring.register_scorer"]], "reset_scorer_register() (in module julearn.scoring)": [[35, "julearn.scoring.reset_scorer_register"]], "cbpm (class in julearn.transformers)": [[36, "julearn.transformers.CBPM"]], "__init__() (julearn.transformers.cbpm method)": [[36, "julearn.transformers.CBPM.__init__"]], "aggregate() (julearn.transformers.cbpm method)": [[36, "julearn.transformers.CBPM.aggregate"]], "fit() (julearn.transformers.cbpm method)": [[36, "julearn.transformers.CBPM.fit"]], "fit_transform() (julearn.transformers.cbpm method)": [[36, "julearn.transformers.CBPM.fit_transform"]], "get_feature_names_out() (julearn.transformers.cbpm method)": [[36, "julearn.transformers.CBPM.get_feature_names_out"]], "get_params() (julearn.transformers.cbpm method)": [[36, "julearn.transformers.CBPM.get_params"]], "set_output() (julearn.transformers.cbpm method)": [[36, "julearn.transformers.CBPM.set_output"]], "set_params() (julearn.transformers.cbpm method)": [[36, "julearn.transformers.CBPM.set_params"]], "transform() (julearn.transformers.cbpm method)": [[36, "julearn.transformers.CBPM.transform"]], "changecolumntypes (class in julearn.transformers)": [[37, "julearn.transformers.ChangeColumnTypes"]], "__init__() (julearn.transformers.changecolumntypes method)": [[37, "julearn.transformers.ChangeColumnTypes.__init__"]], "filter_columns() (julearn.transformers.changecolumntypes method)": [[37, "julearn.transformers.ChangeColumnTypes.filter_columns"]], "fit() (julearn.transformers.changecolumntypes method)": [[37, "julearn.transformers.ChangeColumnTypes.fit"]], "fit_transform() (julearn.transformers.changecolumntypes method)": [[37, "julearn.transformers.ChangeColumnTypes.fit_transform"]], "get_apply_to() (julearn.transformers.changecolumntypes method)": [[37, "julearn.transformers.ChangeColumnTypes.get_apply_to"]], "get_feature_names_out() (julearn.transformers.changecolumntypes method)": [[37, "julearn.transformers.ChangeColumnTypes.get_feature_names_out"]], "get_needed_types() (julearn.transformers.changecolumntypes method)": [[37, "julearn.transformers.ChangeColumnTypes.get_needed_types"]], "get_params() (julearn.transformers.changecolumntypes method)": [[37, "julearn.transformers.ChangeColumnTypes.get_params"]], "set_output() (julearn.transformers.changecolumntypes method)": [[37, "julearn.transformers.ChangeColumnTypes.set_output"]], "set_params() (julearn.transformers.changecolumntypes method)": [[37, "julearn.transformers.ChangeColumnTypes.set_params"]], "transform() (julearn.transformers.changecolumntypes method)": [[37, "julearn.transformers.ChangeColumnTypes.transform"]], "dropcolumns (class in julearn.transformers)": [[38, "julearn.transformers.DropColumns"]], "__init__() (julearn.transformers.dropcolumns method)": [[38, "julearn.transformers.DropColumns.__init__"]], "filter_columns() (julearn.transformers.dropcolumns method)": [[38, "julearn.transformers.DropColumns.filter_columns"]], "fit() (julearn.transformers.dropcolumns method)": [[38, "julearn.transformers.DropColumns.fit"]], "fit_transform() (julearn.transformers.dropcolumns method)": [[38, "julearn.transformers.DropColumns.fit_transform"]], "get_apply_to() (julearn.transformers.dropcolumns method)": [[38, "julearn.transformers.DropColumns.get_apply_to"]], "get_needed_types() (julearn.transformers.dropcolumns method)": [[38, "julearn.transformers.DropColumns.get_needed_types"]], "get_params() (julearn.transformers.dropcolumns method)": [[38, "julearn.transformers.DropColumns.get_params"]], "get_support() (julearn.transformers.dropcolumns method)": [[38, "julearn.transformers.DropColumns.get_support"]], "set_output() (julearn.transformers.dropcolumns method)": [[38, "julearn.transformers.DropColumns.set_output"]], "set_params() (julearn.transformers.dropcolumns method)": [[38, "julearn.transformers.DropColumns.set_params"]], "transform() (julearn.transformers.dropcolumns method)": [[38, "julearn.transformers.DropColumns.transform"]], "filtercolumns (class in julearn.transformers)": [[39, "julearn.transformers.FilterColumns"]], "__init__() (julearn.transformers.filtercolumns method)": [[39, "julearn.transformers.FilterColumns.__init__"]], "filter_columns() (julearn.transformers.filtercolumns method)": [[39, "julearn.transformers.FilterColumns.filter_columns"]], "fit() (julearn.transformers.filtercolumns method)": [[39, "julearn.transformers.FilterColumns.fit"]], "fit_transform() (julearn.transformers.filtercolumns method)": [[39, "julearn.transformers.FilterColumns.fit_transform"]], "get_apply_to() (julearn.transformers.filtercolumns method)": [[39, "julearn.transformers.FilterColumns.get_apply_to"]], "get_feature_names_out() (julearn.transformers.filtercolumns method)": [[39, "julearn.transformers.FilterColumns.get_feature_names_out"]], "get_needed_types() (julearn.transformers.filtercolumns method)": [[39, "julearn.transformers.FilterColumns.get_needed_types"]], "get_params() (julearn.transformers.filtercolumns method)": [[39, "julearn.transformers.FilterColumns.get_params"]], "set_output() (julearn.transformers.filtercolumns method)": [[39, "julearn.transformers.FilterColumns.set_output"]], "set_params() (julearn.transformers.filtercolumns method)": [[39, "julearn.transformers.FilterColumns.set_params"]], "transform() (julearn.transformers.filtercolumns method)": [[39, "julearn.transformers.FilterColumns.transform"]], "jucolumntransformer (class in julearn.transformers)": [[40, "julearn.transformers.JuColumnTransformer"]], "__init__() (julearn.transformers.jucolumntransformer method)": [[40, "julearn.transformers.JuColumnTransformer.__init__"]], "filter_columns() (julearn.transformers.jucolumntransformer method)": [[40, "julearn.transformers.JuColumnTransformer.filter_columns"]], "fit() (julearn.transformers.jucolumntransformer method)": [[40, "julearn.transformers.JuColumnTransformer.fit"]], "fit_transform() (julearn.transformers.jucolumntransformer method)": [[40, "julearn.transformers.JuColumnTransformer.fit_transform"]], "get_apply_to() (julearn.transformers.jucolumntransformer method)": [[40, "julearn.transformers.JuColumnTransformer.get_apply_to"]], "get_feature_names_out() (julearn.transformers.jucolumntransformer method)": [[40, "julearn.transformers.JuColumnTransformer.get_feature_names_out"]], "get_needed_types() (julearn.transformers.jucolumntransformer method)": [[40, "julearn.transformers.JuColumnTransformer.get_needed_types"]], "get_params() (julearn.transformers.jucolumntransformer method)": [[40, "julearn.transformers.JuColumnTransformer.get_params"]], "set_output() (julearn.transformers.jucolumntransformer method)": [[40, "julearn.transformers.JuColumnTransformer.set_output"]], "set_params() (julearn.transformers.jucolumntransformer method)": [[40, "julearn.transformers.JuColumnTransformer.set_params"]], "transform() (julearn.transformers.jucolumntransformer method)": [[40, "julearn.transformers.JuColumnTransformer.transform"]], "setcolumntypes (class in julearn.transformers)": [[41, "julearn.transformers.SetColumnTypes"]], "__init__() (julearn.transformers.setcolumntypes method)": [[41, "julearn.transformers.SetColumnTypes.__init__"]], "filter_columns() (julearn.transformers.setcolumntypes method)": [[41, "julearn.transformers.SetColumnTypes.filter_columns"]], "fit() (julearn.transformers.setcolumntypes method)": [[41, "julearn.transformers.SetColumnTypes.fit"]], "fit_transform() (julearn.transformers.setcolumntypes method)": [[41, "julearn.transformers.SetColumnTypes.fit_transform"]], "get_apply_to() (julearn.transformers.setcolumntypes method)": [[41, "julearn.transformers.SetColumnTypes.get_apply_to"]], "get_feature_names_out() (julearn.transformers.setcolumntypes method)": [[41, "julearn.transformers.SetColumnTypes.get_feature_names_out"]], "get_needed_types() (julearn.transformers.setcolumntypes method)": [[41, "julearn.transformers.SetColumnTypes.get_needed_types"]], "get_params() (julearn.transformers.setcolumntypes method)": [[41, "julearn.transformers.SetColumnTypes.get_params"]], "set_output() (julearn.transformers.setcolumntypes method)": [[41, "julearn.transformers.SetColumnTypes.set_output"]], "set_params() (julearn.transformers.setcolumntypes method)": [[41, "julearn.transformers.SetColumnTypes.set_params"]], "transform() (julearn.transformers.setcolumntypes method)": [[41, "julearn.transformers.SetColumnTypes.transform"]], "confoundremover (class in julearn.transformers.confound_remover)": [[42, "julearn.transformers.confound_remover.ConfoundRemover"]], "__init__() (julearn.transformers.confound_remover.confoundremover method)": [[42, "julearn.transformers.confound_remover.ConfoundRemover.__init__"]], "filter_columns() (julearn.transformers.confound_remover.confoundremover method)": [[42, "julearn.transformers.confound_remover.ConfoundRemover.filter_columns"]], "fit() (julearn.transformers.confound_remover.confoundremover method)": [[42, "julearn.transformers.confound_remover.ConfoundRemover.fit"]], "fit_transform() (julearn.transformers.confound_remover.confoundremover method)": [[42, "julearn.transformers.confound_remover.ConfoundRemover.fit_transform"]], "get_apply_to() (julearn.transformers.confound_remover.confoundremover method)": [[42, "julearn.transformers.confound_remover.ConfoundRemover.get_apply_to"]], "get_feature_names_out() (julearn.transformers.confound_remover.confoundremover method)": [[42, "julearn.transformers.confound_remover.ConfoundRemover.get_feature_names_out"]], "get_needed_types() (julearn.transformers.confound_remover.confoundremover method)": [[42, "julearn.transformers.confound_remover.ConfoundRemover.get_needed_types"]], "get_params() (julearn.transformers.confound_remover.confoundremover method)": [[42, "julearn.transformers.confound_remover.ConfoundRemover.get_params"]], "get_support() (julearn.transformers.confound_remover.confoundremover method)": [[42, "julearn.transformers.confound_remover.ConfoundRemover.get_support"]], "set_output() (julearn.transformers.confound_remover.confoundremover method)": [[42, "julearn.transformers.confound_remover.ConfoundRemover.set_output"]], "set_params() (julearn.transformers.confound_remover.confoundremover method)": [[42, "julearn.transformers.confound_remover.ConfoundRemover.set_params"]], "transform() (julearn.transformers.confound_remover.confoundremover method)": [[42, "julearn.transformers.confound_remover.ConfoundRemover.transform"]], "get_transformer() (in module julearn.transformers)": [[43, "julearn.transformers.get_transformer"]], "list_transformers() (in module julearn.transformers)": [[44, "julearn.transformers.list_transformers"]], "register_transformer() (in module julearn.transformers)": [[45, "julearn.transformers.register_transformer"]], "reset_transformer_register() (in module julearn.transformers)": [[46, "julearn.transformers.reset_transformer_register"]], "jutargettransformer (class in julearn.transformers.target)": [[47, "julearn.transformers.target.JuTargetTransformer"]], "__init__() (julearn.transformers.target.jutargettransformer method)": [[47, "julearn.transformers.target.JuTargetTransformer.__init__"]], "fit() (julearn.transformers.target.jutargettransformer method)": [[47, "julearn.transformers.target.JuTargetTransformer.fit"]], "fit_transform() (julearn.transformers.target.jutargettransformer method)": [[47, "julearn.transformers.target.JuTargetTransformer.fit_transform"]], "transform() (julearn.transformers.target.jutargettransformer method)": [[47, "julearn.transformers.target.JuTargetTransformer.transform"]], "jutransformedtargetmodel (class in julearn.transformers.target)": [[48, "julearn.transformers.target.JuTransformedTargetModel"]], "__init__() (julearn.transformers.target.jutransformedtargetmodel method)": [[48, "julearn.transformers.target.JuTransformedTargetModel.__init__"]], "classes_ (julearn.transformers.target.jutransformedtargetmodel property)": [[48, "julearn.transformers.target.JuTransformedTargetModel.classes_"]], "decision_function() (julearn.transformers.target.jutransformedtargetmodel method)": [[48, "julearn.transformers.target.JuTransformedTargetModel.decision_function"]], "filter_columns() (julearn.transformers.target.jutransformedtargetmodel method)": [[48, "julearn.transformers.target.JuTransformedTargetModel.filter_columns"]], "fit() (julearn.transformers.target.jutransformedtargetmodel method)": [[48, "julearn.transformers.target.JuTransformedTargetModel.fit"]], "get_apply_to() (julearn.transformers.target.jutransformedtargetmodel method)": [[48, "julearn.transformers.target.JuTransformedTargetModel.get_apply_to"]], "get_needed_types() (julearn.transformers.target.jutransformedtargetmodel method)": [[48, "julearn.transformers.target.JuTransformedTargetModel.get_needed_types"]], "get_params() (julearn.transformers.target.jutransformedtargetmodel method)": [[48, "julearn.transformers.target.JuTransformedTargetModel.get_params"]], "predict() (julearn.transformers.target.jutransformedtargetmodel method)": [[48, "julearn.transformers.target.JuTransformedTargetModel.predict"]], "predict_proba() (julearn.transformers.target.jutransformedtargetmodel method)": [[48, "julearn.transformers.target.JuTransformedTargetModel.predict_proba"]], "score() (julearn.transformers.target.jutransformedtargetmodel method)": [[48, "julearn.transformers.target.JuTransformedTargetModel.score"]], "set_params() (julearn.transformers.target.jutransformedtargetmodel method)": [[48, "julearn.transformers.target.JuTransformedTargetModel.set_params"]], "targetconfoundremover (class in julearn.transformers.target)": [[49, "julearn.transformers.target.TargetConfoundRemover"]], "__init__() (julearn.transformers.target.targetconfoundremover method)": [[49, "julearn.transformers.target.TargetConfoundRemover.__init__"]], "fit() (julearn.transformers.target.targetconfoundremover method)": [[49, "julearn.transformers.target.TargetConfoundRemover.fit"]], "fit_transform() (julearn.transformers.target.targetconfoundremover method)": [[49, "julearn.transformers.target.TargetConfoundRemover.fit_transform"]], "needed_types (julearn.transformers.target.targetconfoundremover property)": [[49, "julearn.transformers.target.TargetConfoundRemover.needed_types"]], "transform() (julearn.transformers.target.targetconfoundremover method)": [[49, "julearn.transformers.target.TargetConfoundRemover.transform"]], "transformedtargetwarning (class in julearn.transformers.target)": [[50, "julearn.transformers.target.TransformedTargetWarning"]], "__init__() (julearn.transformers.target.transformedtargetwarning method)": [[50, "julearn.transformers.target.TransformedTargetWarning.__init__"]], "args (julearn.transformers.target.transformedtargetwarning attribute)": [[50, "julearn.transformers.target.TransformedTargetWarning.args"]], "with_traceback() (julearn.transformers.target.transformedtargetwarning method)": [[50, "julearn.transformers.target.TransformedTargetWarning.with_traceback"]], "get_target_transformer() (in module julearn.transformers.target)": [[51, "julearn.transformers.target.get_target_transformer"]], "list_target_transformers() (in module julearn.transformers.target)": [[52, "julearn.transformers.target.list_target_transformers"]], "register_target_transformer() (in module julearn.transformers.target)": [[53, "julearn.transformers.target.register_target_transformer"]], "reset_target_transformer_register() (in module julearn.transformers.target)": [[54, "julearn.transformers.target.reset_target_transformer_register"]], "configure_logging() (in module julearn.utils)": [[55, "julearn.utils.configure_logging"]], "logger (in module julearn.utils)": [[56, "julearn.utils.logger"]], "raise_error() (in module julearn.utils)": [[57, "julearn.utils.raise_error"]], "estimatorlike (in module julearn.utils.typing)": [[58, "julearn.utils.typing.EstimatorLike"]], "estimatorlikefit1 (class in julearn.utils.typing)": [[59, "julearn.utils.typing.EstimatorLikeFit1"]], "__init__() (julearn.utils.typing.estimatorlikefit1 method)": [[59, "julearn.utils.typing.EstimatorLikeFit1.__init__"]], "fit() (julearn.utils.typing.estimatorlikefit1 method)": [[59, "julearn.utils.typing.EstimatorLikeFit1.fit"]], "get_params() (julearn.utils.typing.estimatorlikefit1 method)": [[59, "julearn.utils.typing.EstimatorLikeFit1.get_params"]], "set_params() (julearn.utils.typing.estimatorlikefit1 method)": [[59, "julearn.utils.typing.EstimatorLikeFit1.set_params"]], "estimatorlikefit2 (class in julearn.utils.typing)": [[60, "julearn.utils.typing.EstimatorLikeFit2"]], "__init__() (julearn.utils.typing.estimatorlikefit2 method)": [[60, "julearn.utils.typing.EstimatorLikeFit2.__init__"]], "fit() (julearn.utils.typing.estimatorlikefit2 method)": [[60, "julearn.utils.typing.EstimatorLikeFit2.fit"]], "get_params() (julearn.utils.typing.estimatorlikefit2 method)": [[60, "julearn.utils.typing.EstimatorLikeFit2.get_params"]], "set_params() (julearn.utils.typing.estimatorlikefit2 method)": [[60, "julearn.utils.typing.EstimatorLikeFit2.set_params"]], "estimatorlikefity (class in julearn.utils.typing)": [[61, "julearn.utils.typing.EstimatorLikeFity"]], "__init__() (julearn.utils.typing.estimatorlikefity method)": [[61, "julearn.utils.typing.EstimatorLikeFity.__init__"]], "fit() (julearn.utils.typing.estimatorlikefity method)": [[61, "julearn.utils.typing.EstimatorLikeFity.fit"]], "get_params() (julearn.utils.typing.estimatorlikefity method)": [[61, "julearn.utils.typing.EstimatorLikeFity.get_params"]], "set_params() (julearn.utils.typing.estimatorlikefity method)": [[61, "julearn.utils.typing.EstimatorLikeFity.set_params"]], "juestimatorlike (class in julearn.utils.typing)": [[62, "julearn.utils.typing.JuEstimatorLike"]], "__init__() (julearn.utils.typing.juestimatorlike method)": [[62, "julearn.utils.typing.JuEstimatorLike.__init__"]], "fit() (julearn.utils.typing.juestimatorlike method)": [[62, "julearn.utils.typing.JuEstimatorLike.fit"]], "get_apply_to() (julearn.utils.typing.juestimatorlike method)": [[62, "julearn.utils.typing.JuEstimatorLike.get_apply_to"]], "get_needed_types() (julearn.utils.typing.juestimatorlike method)": [[62, "julearn.utils.typing.JuEstimatorLike.get_needed_types"]], "get_params() (julearn.utils.typing.juestimatorlike method)": [[62, "julearn.utils.typing.JuEstimatorLike.get_params"]], "set_params() (julearn.utils.typing.juestimatorlike method)": [[62, "julearn.utils.typing.JuEstimatorLike.set_params"]], "warn_with_log() (in module julearn.utils)": [[63, "julearn.utils.warn_with_log"]], "plot_scores() (in module julearn.viz)": [[64, "julearn.viz.plot_scores"]], "julearn.inspect": [[66, "module-julearn.inspect"]], "julearn.api": [[67, "module-julearn.api"]], "julearn.model_selection": [[68, "module-julearn.model_selection"]], "julearn.models": [[69, "module-julearn.models"]], "julearn.models.dynamic": [[69, "module-julearn.models.dynamic"]], "julearn.pipeline": [[70, "module-julearn.pipeline"]], "julearn.prepare": [[71, "module-julearn.prepare"]], "julearn.scoring": [[72, "module-julearn.scoring"]], "julearn.scoring.metrics": [[72, "module-julearn.scoring.metrics"]], "julearn.transformers": [[73, "module-julearn.transformers"]], "julearn.transformers.target": [[73, "module-julearn.transformers.target"]], "julearn.utils": [[74, "module-julearn.utils"]], "julearn.utils.typing": [[74, "module-julearn.utils.typing"]], "julearn.viz": [[75, "module-julearn.viz"]]}})