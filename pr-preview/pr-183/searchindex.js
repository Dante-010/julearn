Search.setIndex({"docnames": ["api/base", "api/generated/julearn.PipelineCreator", "api/generated/julearn.TargetPipelineCreator", "api/generated/julearn.base.ColumnTypes", "api/generated/julearn.base.ColumnTypesLike", "api/generated/julearn.base.JuBaseEstimator", "api/generated/julearn.base.JuTransformer", "api/generated/julearn.base.WrapModel", "api/generated/julearn.base.change_column_type", "api/generated/julearn.base.ensure_column_types", "api/generated/julearn.base.get_column_type", "api/generated/julearn.base.make_type_selector", "api/generated/julearn.inspect.FoldsInspector", "api/generated/julearn.inspect.Inspector", "api/generated/julearn.inspect.preprocess", "api/generated/julearn.model_selection.RepeatedStratifiedGroupsKFold", "api/generated/julearn.model_selection.StratifiedBootstrap", "api/generated/julearn.model_selection.StratifiedGroupsKFold", "api/generated/julearn.model_selection.get_searcher", "api/generated/julearn.model_selection.list_searchers", "api/generated/julearn.model_selection.register_searcher", "api/generated/julearn.model_selection.reset_searcher_register", "api/generated/julearn.models.dynamic.DynamicSelection", "api/generated/julearn.models.get_model", "api/generated/julearn.models.list_models", "api/generated/julearn.models.register_model", "api/generated/julearn.models.reset_model_register", "api/generated/julearn.pipeline.JuTargetPipeline", "api/generated/julearn.pipeline.pipeline_creator.Step", "api/generated/julearn.prepare.check_consistency", "api/generated/julearn.prepare.prepare_input_data", "api/generated/julearn.run_cross_validation", "api/generated/julearn.scoring.check_scoring", "api/generated/julearn.scoring.get_scorer", "api/generated/julearn.scoring.list_scorers", "api/generated/julearn.scoring.metrics.r2_corr", "api/generated/julearn.scoring.register_scorer", "api/generated/julearn.scoring.reset_scorer_register", "api/generated/julearn.transformers.CBPM", "api/generated/julearn.transformers.ChangeColumnTypes", "api/generated/julearn.transformers.DropColumns", "api/generated/julearn.transformers.FilterColumns", "api/generated/julearn.transformers.JuColumnTransformer", "api/generated/julearn.transformers.SetColumnTypes", "api/generated/julearn.transformers.confound_remover.ConfoundRemover", "api/generated/julearn.transformers.get_transformer", "api/generated/julearn.transformers.list_transformers", "api/generated/julearn.transformers.register_transformer", "api/generated/julearn.transformers.reset_transformer_register", "api/generated/julearn.transformers.target.JuTargetTransformer", "api/generated/julearn.transformers.target.JuTransformedTargetModel", "api/generated/julearn.transformers.target.TargetConfoundRemover", "api/generated/julearn.transformers.target.TransformedTargetWarning", "api/generated/julearn.transformers.target.get_target_transformer", "api/generated/julearn.transformers.target.list_target_transformers", "api/generated/julearn.transformers.target.register_target_transformer", "api/generated/julearn.transformers.target.reset_target_transformer_register", "api/generated/julearn.utils.configure_logging", "api/generated/julearn.utils.logger", "api/generated/julearn.utils.raise_error", "api/generated/julearn.utils.typing.EstimatorLike", "api/generated/julearn.utils.typing.EstimatorLikeFit1", "api/generated/julearn.utils.typing.EstimatorLikeFit2", "api/generated/julearn.utils.typing.EstimatorLikeFity", "api/generated/julearn.utils.typing.JuEstimatorLike", "api/generated/julearn.utils.warn_with_log", "api/generated/julearn.viz.plot_scores", "api/index", "api/inspect", "api/main", "api/model_selection", "api/models", "api/pipeline", "api/prepare", "api/scoring", "api/transformers", "api/utils", "api/viz", "auto_examples/00_starting/index", "auto_examples/00_starting/plot_cm_acc_multiclass", "auto_examples/00_starting/plot_example_regression", "auto_examples/00_starting/plot_stratified_kfold_reg", "auto_examples/00_starting/run_combine_pandas", "auto_examples/00_starting/run_grouped_cv", "auto_examples/00_starting/run_simple_binary_classification", "auto_examples/00_starting/sg_execution_times", "auto_examples/01_model_comparison/index", "auto_examples/01_model_comparison/plot_simple_model_comparison", "auto_examples/01_model_comparison/sg_execution_times", "auto_examples/02_inspection/index", "auto_examples/02_inspection/plot_groupcv_inspect_svm", "auto_examples/02_inspection/plot_inspect_random_forest", "auto_examples/02_inspection/plot_preprocess", "auto_examples/02_inspection/run_binary_inspect_folds", "auto_examples/02_inspection/sg_execution_times", "auto_examples/03_complex_models/index", "auto_examples/03_complex_models/run_apply_to_target", "auto_examples/03_complex_models/run_example_pca_featsets", "auto_examples/03_complex_models/run_hyperparameter_multiple_grids", "auto_examples/03_complex_models/run_hyperparameter_tuning", "auto_examples/03_complex_models/run_stacked_models", "auto_examples/03_complex_models/sg_execution_times", "auto_examples/04_confounds/index", "auto_examples/04_confounds/plot_confound_removal_classification", "auto_examples/04_confounds/run_return_confounds", "auto_examples/04_confounds/sg_execution_times", "auto_examples/05_customization/index", "auto_examples/05_customization/run_custom_scorers_regression", "auto_examples/05_customization/sg_execution_times", "available_pipeline_steps", "contributing", "examples", "faq", "getting_started", "index", "maintaining", "selected_deeper_topics/CBPM", "selected_deeper_topics/confound_removal", "selected_deeper_topics/cross_validation_splitter", "selected_deeper_topics/hyperparameter_tuning", "selected_deeper_topics/index", "selected_deeper_topics/model_inspect", "selected_deeper_topics/stacked_models", "selected_deeper_topics/target_transformers", "what_really_need_know/cross_validation", "what_really_need_know/data", "what_really_need_know/index", "what_really_need_know/model_comparison", "what_really_need_know/model_evaluation", "what_really_need_know/pipeline", "whats_new"], "filenames": ["api/base.rst", "api/generated/julearn.PipelineCreator.rst", "api/generated/julearn.TargetPipelineCreator.rst", "api/generated/julearn.base.ColumnTypes.rst", "api/generated/julearn.base.ColumnTypesLike.rst", "api/generated/julearn.base.JuBaseEstimator.rst", "api/generated/julearn.base.JuTransformer.rst", "api/generated/julearn.base.WrapModel.rst", "api/generated/julearn.base.change_column_type.rst", "api/generated/julearn.base.ensure_column_types.rst", "api/generated/julearn.base.get_column_type.rst", "api/generated/julearn.base.make_type_selector.rst", "api/generated/julearn.inspect.FoldsInspector.rst", "api/generated/julearn.inspect.Inspector.rst", "api/generated/julearn.inspect.preprocess.rst", "api/generated/julearn.model_selection.RepeatedStratifiedGroupsKFold.rst", "api/generated/julearn.model_selection.StratifiedBootstrap.rst", "api/generated/julearn.model_selection.StratifiedGroupsKFold.rst", "api/generated/julearn.model_selection.get_searcher.rst", "api/generated/julearn.model_selection.list_searchers.rst", "api/generated/julearn.model_selection.register_searcher.rst", "api/generated/julearn.model_selection.reset_searcher_register.rst", "api/generated/julearn.models.dynamic.DynamicSelection.rst", "api/generated/julearn.models.get_model.rst", "api/generated/julearn.models.list_models.rst", "api/generated/julearn.models.register_model.rst", "api/generated/julearn.models.reset_model_register.rst", "api/generated/julearn.pipeline.JuTargetPipeline.rst", "api/generated/julearn.pipeline.pipeline_creator.Step.rst", "api/generated/julearn.prepare.check_consistency.rst", "api/generated/julearn.prepare.prepare_input_data.rst", "api/generated/julearn.run_cross_validation.rst", "api/generated/julearn.scoring.check_scoring.rst", "api/generated/julearn.scoring.get_scorer.rst", "api/generated/julearn.scoring.list_scorers.rst", "api/generated/julearn.scoring.metrics.r2_corr.rst", "api/generated/julearn.scoring.register_scorer.rst", "api/generated/julearn.scoring.reset_scorer_register.rst", "api/generated/julearn.transformers.CBPM.rst", "api/generated/julearn.transformers.ChangeColumnTypes.rst", "api/generated/julearn.transformers.DropColumns.rst", "api/generated/julearn.transformers.FilterColumns.rst", "api/generated/julearn.transformers.JuColumnTransformer.rst", "api/generated/julearn.transformers.SetColumnTypes.rst", "api/generated/julearn.transformers.confound_remover.ConfoundRemover.rst", "api/generated/julearn.transformers.get_transformer.rst", "api/generated/julearn.transformers.list_transformers.rst", "api/generated/julearn.transformers.register_transformer.rst", "api/generated/julearn.transformers.reset_transformer_register.rst", "api/generated/julearn.transformers.target.JuTargetTransformer.rst", "api/generated/julearn.transformers.target.JuTransformedTargetModel.rst", "api/generated/julearn.transformers.target.TargetConfoundRemover.rst", "api/generated/julearn.transformers.target.TransformedTargetWarning.rst", "api/generated/julearn.transformers.target.get_target_transformer.rst", "api/generated/julearn.transformers.target.list_target_transformers.rst", "api/generated/julearn.transformers.target.register_target_transformer.rst", "api/generated/julearn.transformers.target.reset_target_transformer_register.rst", "api/generated/julearn.utils.configure_logging.rst", "api/generated/julearn.utils.logger.rst", "api/generated/julearn.utils.raise_error.rst", "api/generated/julearn.utils.typing.EstimatorLike.rst", "api/generated/julearn.utils.typing.EstimatorLikeFit1.rst", "api/generated/julearn.utils.typing.EstimatorLikeFit2.rst", "api/generated/julearn.utils.typing.EstimatorLikeFity.rst", "api/generated/julearn.utils.typing.JuEstimatorLike.rst", "api/generated/julearn.utils.warn_with_log.rst", "api/generated/julearn.viz.plot_scores.rst", "api/index.rst", "api/inspect.rst", "api/main.rst", "api/model_selection.rst", "api/models.rst", "api/pipeline.rst", "api/prepare.rst", "api/scoring.rst", "api/transformers.rst", "api/utils.rst", "api/viz.rst", "auto_examples/00_starting/index.rst", "auto_examples/00_starting/plot_cm_acc_multiclass.rst", "auto_examples/00_starting/plot_example_regression.rst", "auto_examples/00_starting/plot_stratified_kfold_reg.rst", "auto_examples/00_starting/run_combine_pandas.rst", "auto_examples/00_starting/run_grouped_cv.rst", "auto_examples/00_starting/run_simple_binary_classification.rst", "auto_examples/00_starting/sg_execution_times.rst", "auto_examples/01_model_comparison/index.rst", "auto_examples/01_model_comparison/plot_simple_model_comparison.rst", "auto_examples/01_model_comparison/sg_execution_times.rst", "auto_examples/02_inspection/index.rst", "auto_examples/02_inspection/plot_groupcv_inspect_svm.rst", "auto_examples/02_inspection/plot_inspect_random_forest.rst", "auto_examples/02_inspection/plot_preprocess.rst", "auto_examples/02_inspection/run_binary_inspect_folds.rst", "auto_examples/02_inspection/sg_execution_times.rst", "auto_examples/03_complex_models/index.rst", "auto_examples/03_complex_models/run_apply_to_target.rst", "auto_examples/03_complex_models/run_example_pca_featsets.rst", "auto_examples/03_complex_models/run_hyperparameter_multiple_grids.rst", "auto_examples/03_complex_models/run_hyperparameter_tuning.rst", "auto_examples/03_complex_models/run_stacked_models.rst", "auto_examples/03_complex_models/sg_execution_times.rst", "auto_examples/04_confounds/index.rst", "auto_examples/04_confounds/plot_confound_removal_classification.rst", "auto_examples/04_confounds/run_return_confounds.rst", "auto_examples/04_confounds/sg_execution_times.rst", "auto_examples/05_customization/index.rst", "auto_examples/05_customization/run_custom_scorers_regression.rst", "auto_examples/05_customization/sg_execution_times.rst", "available_pipeline_steps.rst", "contributing.rst", "examples.rst", "faq.rst", "getting_started.rst", "index.rst", "maintaining.rst", "selected_deeper_topics/CBPM.rst", "selected_deeper_topics/confound_removal.rst", "selected_deeper_topics/cross_validation_splitter.rst", "selected_deeper_topics/hyperparameter_tuning.rst", "selected_deeper_topics/index.rst", "selected_deeper_topics/model_inspect.rst", "selected_deeper_topics/stacked_models.rst", "selected_deeper_topics/target_transformers.rst", "what_really_need_know/cross_validation.rst", "what_really_need_know/data.rst", "what_really_need_know/index.rst", "what_really_need_know/model_comparison.rst", "what_really_need_know/model_evaluation.rst", "what_really_need_know/pipeline.rst", "whats_new.rst"], "titles": ["<span class=\"section-number\">6.4. </span>Base", "julearn.PipelineCreator", "julearn.TargetPipelineCreator", "julearn.base.ColumnTypes", "julearn.base.ColumnTypesLike", "julearn.base.JuBaseEstimator", "julearn.base.JuTransformer", "julearn.base.WrapModel", "julearn.base.change_column_type", "julearn.base.ensure_column_types", "julearn.base.get_column_type", "julearn.base.make_type_selector", "julearn.inspect.FoldsInspector", "julearn.inspect.Inspector", "julearn.inspect.preprocess", "julearn.model_selection.RepeatedStratifiedGroupsKFold", "julearn.model_selection.StratifiedBootstrap", "julearn.model_selection.StratifiedGroupsKFold", "julearn.model_selection.get_searcher", "julearn.model_selection.list_searchers", "julearn.model_selection.register_searcher", "julearn.model_selection.reset_searcher_register", "julearn.models.dynamic.DynamicSelection", "julearn.models.get_model", "julearn.models.list_models", "julearn.models.register_model", "julearn.models.reset_model_register", "julearn.pipeline.JuTargetPipeline", "julearn.pipeline.pipeline_creator.Step", "julearn.prepare.check_consistency", "julearn.prepare.prepare_input_data", "julearn.run_cross_validation", "julearn.scoring.check_scoring", "julearn.scoring.get_scorer", "julearn.scoring.list_scorers", "julearn.scoring.metrics.r2_corr", "julearn.scoring.register_scorer", "julearn.scoring.reset_scorer_register", "julearn.transformers.CBPM", "julearn.transformers.ChangeColumnTypes", "julearn.transformers.DropColumns", "julearn.transformers.FilterColumns", "julearn.transformers.JuColumnTransformer", "julearn.transformers.SetColumnTypes", "julearn.transformers.confound_remover.ConfoundRemover", "julearn.transformers.get_transformer", "julearn.transformers.list_transformers", "julearn.transformers.register_transformer", "julearn.transformers.reset_transformer_register", "julearn.transformers.target.JuTargetTransformer", "julearn.transformers.target.JuTransformedTargetModel", "julearn.transformers.target.TargetConfoundRemover", "julearn.transformers.target.TransformedTargetWarning", "julearn.transformers.target.get_target_transformer", "julearn.transformers.target.list_target_transformers", "julearn.transformers.target.register_target_transformer", "julearn.transformers.target.reset_target_transformer_register", "julearn.utils.configure_logging", "julearn.utils.logger", "julearn.utils.raise_error", "julearn.utils.typing.EstimatorLike", "julearn.utils.typing.EstimatorLikeFit1", "julearn.utils.typing.EstimatorLikeFit2", "julearn.utils.typing.EstimatorLikeFity", "julearn.utils.typing.JuEstimatorLike", "julearn.utils.warn_with_log", "julearn.viz.plot_scores", "<span class=\"section-number\">6. </span>Reference", "<span class=\"section-number\">6.5. </span>Inspect", "<span class=\"section-number\">6.1. </span>Main API", "<span class=\"section-number\">6.3. </span>Model Selection", "<span class=\"section-number\">6.6. </span>Models", "<span class=\"section-number\">6.2. </span>Pipeline", "<span class=\"section-number\">6.14. </span>Prepare", "<span class=\"section-number\">6.8. </span>Scoring", "<span class=\"section-number\">6.10. </span>Transformers", "<span class=\"section-number\">6.12. </span>Utils", "<span class=\"section-number\">6.15. </span>Vizualization", "<span class=\"section-number\">5.1. </span>Starting with julearn", "Multiclass Classification.", "Regression Analysis", "Stratified K-fold CV for regression analysis", "Working with pandas", "Grouped CV.", "Simple Binary Classification", "Computation times", "<span class=\"section-number\">5.2. </span>Model Comparison", "Simple Model Comparison", "Computation times", "<span class=\"section-number\">5.3. </span>Inspection", "Inspecting SVM models.", "Inspecting Random Forest models", "Preprocessing with variance threshold, zscore and PCA", "Inspecting the fold-wise predictions", "Computation times", "<span class=\"section-number\">5.4. </span>Complex Models", "Transforming target variable with z-score.", "Regression Analysis", "Tuning Multiple Hyperparameters Grids", "Tuning Hyperparameters", "Stacking Classification", "Computation times", "<span class=\"section-number\">5.5. </span>Confounds", "Confound Removal (model comparison)", "Return Confounds in Confound Removal", "Computation times", "<span class=\"section-number\">5.6. </span>Customization", "Custom Scoring Function for Regression", "Computation times", "<span class=\"section-number\">4. </span>Overview of available Pipeline Steps", "<span class=\"section-number\">7. </span>Contributing to julearn", "<span class=\"section-number\">5. </span>Examples", "<span class=\"section-number\">9. </span>Frequenly Asked Questions", "<span class=\"section-number\">1. </span>Getting started", "Welcome to julearn\u2019s documentation!", "<span class=\"section-number\">8. </span>Maintaining", "<span class=\"section-number\">3.7. </span>Connectome-based Predictive Modeling (CBPM)", "<span class=\"section-number\">3.2. </span>Cross-validation consistent Confound Removal", "<span class=\"section-number\">3.5. </span>Cross-validation splitter", "<span class=\"section-number\">3.3. </span>Hyperparameter Tuning", "<span class=\"section-number\">3. </span>Selected deeper topics", "<span class=\"section-number\">3.4. </span>Inspecting Models", "<span class=\"section-number\">3.6. </span>Stacking Models", "<span class=\"section-number\">3.1. </span>Applying preprocessing to the target", "<span class=\"section-number\">2.1. </span>Why cross validation?", "<span class=\"section-number\">2.2. </span>Data", "<span class=\"section-number\">2. </span>What you really need to know", "<span class=\"section-number\">2.5. </span>Model comparison", "<span class=\"section-number\">2.4. </span>Model evaluation", "<span class=\"section-number\">2.3. </span>Model Building", "<span class=\"section-number\">10. </span>What\u2019s new"], "terms": {"provid": [0, 1, 3, 5, 16, 17, 31, 50, 71, 82, 104, 114, 117, 119, 121, 122, 124, 125, 127, 128, 129, 130], "import": [0, 27, 49, 79, 80, 81, 82, 83, 84, 87, 90, 92, 93, 96, 97, 98, 99, 100, 103, 104, 107, 110, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129], "modul": [0, 31, 71, 77, 104, 112, 113, 114, 123, 124], "class": [0, 1, 2, 3, 4, 5, 6, 7, 12, 13, 15, 16, 17, 20, 22, 25, 27, 28, 31, 38, 39, 40, 41, 42, 43, 44, 47, 49, 50, 51, 52, 55, 58, 59, 60, 61, 62, 63, 64, 65, 68, 70, 71, 72, 75, 76, 79, 81, 83, 84, 87, 90, 91, 93, 98, 99, 100, 103, 109, 117, 119, 121, 127, 128, 129], "function": [0, 1, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 45, 46, 47, 48, 50, 53, 54, 55, 56, 57, 59, 65, 66, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 84, 87, 90, 91, 92, 102, 104, 106, 108, 110, 112, 113, 114, 116, 117, 124, 125, 126, 127, 128, 129, 130], "thi": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 71, 77, 79, 80, 81, 82, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 104, 107, 109, 110, 112, 113, 115, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129], "page": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 114, 117, 128], "i": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 77, 79, 80, 81, 82, 83, 84, 87, 90, 91, 92, 96, 97, 98, 99, 103, 104, 107, 109, 110, 113, 115, 116, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129], "refer": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 92, 109, 110, 114, 119, 126], "document": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 77, 81, 87, 91, 109, 119, 127, 128, 129], "It": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 90, 98, 99, 113, 114, 116, 119, 121, 128, 129], "onli": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 81, 90, 92, 98, 103, 104, 116, 117, 119, 121, 122, 123, 124, 125, 127, 128, 129, 130], "explain": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 129], "signatur": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66], "how": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 78, 83, 84, 87, 89, 90, 91, 95, 97, 104, 109, 110, 113, 114, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129], "pleas": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 71, 77, 92, 110, 128, 129], "what": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 82, 83, 90, 97, 99, 104, 109, 117, 119, 121, 122, 123, 125, 128, 129], "you": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 79, 82, 87, 92, 104, 110, 112, 113, 114, 115, 116, 117, 121, 122, 124, 125, 127, 128, 129], "realli": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 103, 114], "need": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 82, 83, 84, 87, 90, 96, 103, 104, 107, 110, 112, 113, 114, 116, 117, 119, 121, 123, 124, 127, 128, 129, 130], "know": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 97, 99, 114, 121, 124, 127, 129], "section": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 125, 127, 128, 129, 130], "big": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66], "pictur": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66], "problem_typ": [1, 23, 29, 31, 79, 80, 81, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 104, 107, 116, 117, 119, 121, 122, 123, 127, 128, 129], "apply_to": [1, 5, 6, 7, 28, 39, 40, 41, 42, 43, 44, 50, 92, 96, 97, 100, 103, 104, 117, 121, 122, 123, 129], "continu": [1, 7, 28, 39, 41, 43, 44, 79, 80, 81, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 103, 104, 107, 116, 119, 121, 122, 123, 125, 127, 128, 129], "creat": [1, 2, 3, 38, 79, 81, 82, 84, 90, 92, 96, 97, 100, 109, 110, 112, 115, 116, 117, 119, 121, 122, 123, 127, 128, 129], "pipelin": [1, 2, 5, 6, 7, 14, 22, 29, 30, 31, 38, 39, 40, 41, 42, 43, 44, 49, 50, 67, 73, 90, 92, 93, 96, 97, 98, 99, 100, 103, 104, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128], "As": [1, 82, 84, 87, 93, 100, 103, 104, 107, 110, 112, 116, 117, 119, 121, 122, 127, 128, 129], "creation": 1, "bit": [1, 98, 113, 122, 128], "more": [1, 3, 31, 79, 80, 81, 83, 84, 87, 90, 92, 97, 103, 107, 110, 113, 117, 120, 121, 122, 124, 126, 127, 128, 129, 130], "complic": [1, 124], "than": [1, 31, 81, 82, 90, 114, 117, 120, 129], "just": [1, 110, 114, 121, 126, 128, 129], "ad": [1, 31, 79, 80, 81, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 104, 107, 114, 116, 117, 119, 121, 122, 123, 125, 127, 128, 129], "step": [1, 2, 14, 27, 31, 79, 80, 81, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 104, 107, 110, 114, 116, 117, 119, 121, 122, 123, 124, 125, 127, 128, 129], "helper": 1, "so": [1, 5, 6, 7, 22, 36, 38, 39, 40, 41, 42, 43, 44, 50, 81, 82, 84, 87, 92, 99, 109, 112, 119, 123, 125, 128, 129], "user": [1, 20, 25, 36, 38, 47, 52, 55, 57, 92, 107, 113, 114, 117, 119, 124, 129, 130], "can": [1, 3, 15, 16, 17, 20, 22, 25, 27, 29, 31, 36, 38, 42, 44, 47, 50, 55, 79, 80, 81, 82, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 103, 104, 107, 109, 110, 112, 114, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129], "easili": [1, 116], "complex": [1, 90, 100, 111, 114, 117, 121, 129], "sklearn": [1, 3, 5, 22, 27, 42, 44, 51, 79, 80, 81, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 104, 107, 116, 117, 121, 122, 123, 127, 128], "object": [1, 2, 5, 6, 7, 15, 16, 17, 22, 23, 29, 31, 33, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 50, 53, 79, 81, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 104, 112, 117, 119, 121, 122, 123, 128, 129], "paramet": [1, 2, 3, 5, 6, 7, 8, 9, 10, 14, 15, 16, 17, 18, 20, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 49, 50, 51, 53, 55, 57, 59, 65, 66, 73, 79, 80, 81, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 104, 107, 109, 116, 117, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130], "classif": [1, 25, 29, 31, 57, 78, 83, 85, 87, 90, 91, 93, 95, 98, 99, 101, 103, 110, 119, 121, 122, 127, 128, 129], "regress": [1, 14, 17, 25, 29, 31, 36, 57, 78, 85, 92, 95, 96, 100, 101, 104, 106, 108, 109, 116, 119, 120, 122, 123, 127, 128, 129, 130], "The": [1, 2, 3, 5, 6, 7, 8, 9, 10, 14, 15, 16, 17, 18, 20, 22, 23, 25, 27, 28, 29, 30, 31, 35, 38, 39, 40, 41, 42, 43, 44, 45, 47, 49, 50, 51, 53, 55, 57, 59, 65, 66, 79, 80, 81, 82, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 104, 107, 109, 110, 111, 112, 113, 115, 116, 117, 119, 121, 122, 125, 126, 127, 129], "problem": [1, 15, 16, 17, 23, 25, 29, 31, 79, 80, 81, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 104, 107, 116, 117, 119, 121, 122, 123, 124, 127, 128, 129, 130], "type": [1, 3, 5, 6, 7, 8, 10, 14, 23, 25, 27, 28, 29, 30, 31, 39, 40, 41, 42, 43, 44, 50, 51, 67, 79, 80, 81, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 104, 107, 109, 110, 114, 116, 117, 119, 120, 121, 123, 124, 126, 127, 128], "which": [1, 5, 6, 20, 25, 28, 31, 38, 39, 40, 41, 42, 43, 44, 47, 51, 55, 77, 80, 81, 83, 84, 90, 92, 96, 97, 98, 99, 103, 104, 107, 110, 116, 117, 119, 121, 122, 123, 124, 126, 128, 129], "should": [1, 5, 6, 16, 20, 25, 28, 36, 38, 39, 40, 41, 42, 43, 44, 47, 55, 81, 92, 97, 103, 109, 110, 115, 116, 119, 120, 123, 124, 128, 129], "columntypeslik": [1, 28, 39, 40, 41, 42, 44], "option": [1, 2, 6, 7, 14, 20, 22, 25, 28, 31, 36, 38, 39, 40, 41, 42, 43, 44, 47, 51, 55, 57, 59, 65, 66, 71, 77, 82, 104, 112, 114, 115, 125, 128], "To": [1, 42, 44, 90, 92, 98, 110, 112, 114, 116, 117, 119, 122, 124, 125, 127, 128, 129], "transform": [1, 2, 6, 27, 31, 57, 67, 82, 92, 95, 101, 104, 114, 116, 117, 121, 123, 124, 129, 130], "appli": [1, 2, 5, 6, 7, 28, 31, 38, 39, 40, 41, 42, 43, 44, 50, 51, 79, 80, 81, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 104, 107, 114, 116, 117, 119, 120, 121, 122, 127, 128, 129], "specifi": [1, 16, 18, 20, 30, 31, 41, 44, 51, 53, 82, 90, 91, 97, 98, 104, 109, 113, 114, 116, 117, 119, 122, 123, 124, 125, 126, 128, 129], "add": [1, 2, 3, 20, 25, 47, 92, 93, 96, 97, 98, 99, 100, 103, 104, 110, 116, 117, 119, 121, 122, 123, 125, 127, 128, 129, 130], "method": [1, 5, 6, 7, 22, 38, 39, 40, 41, 42, 43, 44, 50, 82, 92, 98, 104, 113, 116, 121, 129], "default": [1, 2, 5, 6, 7, 14, 15, 16, 17, 20, 22, 25, 26, 28, 31, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 50, 51, 55, 57, 59, 65, 66, 87, 90, 92, 98, 99, 100, 103, 104, 109, 112, 113, 116, 117, 119, 127, 128, 129, 130], "__init__": [1, 2, 3, 5, 6, 7, 12, 13, 15, 16, 17, 22, 27, 28, 38, 39, 40, 41, 42, 43, 44, 49, 50, 51, 52, 61, 62, 63, 64], "name": [1, 2, 5, 6, 7, 8, 14, 18, 19, 20, 22, 23, 24, 25, 28, 31, 33, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 53, 54, 55, 57, 79, 80, 81, 82, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 104, 107, 109, 110, 117, 119, 121, 122, 123, 124, 125, 127, 128, 129], "none": [1, 2, 5, 6, 7, 12, 13, 14, 15, 16, 17, 20, 22, 25, 27, 28, 29, 30, 31, 36, 38, 39, 40, 41, 42, 43, 44, 47, 51, 55, 57, 59, 80, 81, 82, 83, 84, 87, 90, 91, 92, 96, 97, 98, 99, 100, 103, 104, 107, 116, 117, 119, 121, 122, 123, 127, 128, 129], "row_select_col_typ": [1, 6, 28, 39, 40, 41, 42, 43, 44], "row_select_v": [1, 6, 28, 39, 40, 41, 42, 43, 44], "param": [1, 2, 5, 6, 7, 22, 38, 39, 40, 41, 42, 43, 44, 45, 50, 53, 61, 62, 63, 64, 87, 113, 116, 117, 119, 121, 123, 129], "estimatorlik": [1, 32, 42], "an": [1, 2, 6, 15, 16, 17, 29, 31, 33, 38, 39, 40, 41, 42, 43, 44, 79, 82, 83, 84, 87, 90, 91, 92, 99, 103, 110, 114, 116, 117, 119, 121, 122, 123, 124, 125, 127, 128, 129, 130], "available_transform": 1, "available_model": 1, "str": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 53, 54, 55, 57, 59, 65, 79, 80, 97, 109, 128, 129], "compat": [1, 15, 16, 17, 18, 20, 22, 31, 39, 40, 41, 42, 43, 44, 45, 51, 116, 128, 129, 130], "model": [1, 7, 13, 14, 16, 31, 34, 44, 50, 51, 57, 66, 67, 74, 79, 80, 81, 83, 84, 88, 89, 92, 93, 94, 96, 97, 98, 99, 100, 102, 104, 105, 107, 111, 114, 117, 120, 123, 124, 126], "If": [1, 2, 5, 6, 7, 14, 16, 17, 18, 20, 22, 25, 29, 30, 31, 38, 39, 40, 41, 42, 43, 44, 47, 50, 53, 55, 57, 82, 84, 90, 92, 103, 107, 110, 113, 117, 119, 125, 126, 128, 129], "obtain": [1, 2, 7, 50, 91, 117, 124], "from": [1, 2, 3, 5, 22, 27, 30, 31, 39, 44, 47, 49, 51, 55, 79, 80, 81, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 104, 107, 109, 110, 113, 114, 115, 116, 119, 121, 122, 123, 125, 127, 128, 129], "repres": [1, 3, 16, 17, 28, 44, 51, 81, 128], "column": [1, 3, 5, 6, 7, 8, 10, 14, 22, 28, 30, 31, 39, 40, 41, 42, 43, 44, 50, 51, 79, 80, 81, 82, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 103, 104, 107, 109, 116, 117, 119, 121, 122, 123, 125, 127, 128, 129, 130], "list": [1, 3, 4, 5, 6, 7, 14, 19, 24, 27, 28, 30, 31, 34, 39, 40, 41, 42, 43, 44, 46, 51, 54, 98, 104, 109, 119, 121, 125, 128, 129], "attribut": [1, 5, 7, 9, 22, 38, 50, 121], "set": [1, 3, 4, 5, 6, 7, 15, 16, 17, 20, 22, 27, 28, 31, 36, 38, 39, 40, 41, 42, 43, 44, 50, 51, 52, 79, 80, 81, 82, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 104, 107, 111, 114, 115, 116, 117, 119, 121, 122, 124, 126, 127, 128, 130], "columntyp": [1, 4, 5, 6, 7, 9, 28, 39, 40, 41, 42, 43, 44, 50, 51, 79, 80, 81, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 104, 107, 116, 117, 119, 121, 122, 123, 127, 128, 129], "select": [1, 6, 7, 22, 28, 39, 40, 41, 42, 43, 44, 67, 87, 92, 114, 116, 119, 121, 125, 126, 127], "row": [1, 6, 28, 39, 40, 41, 42, 43, 44, 79, 80, 81, 82, 83, 87, 90, 92, 93, 96, 97, 104, 107, 117, 121, 123, 128, 129], "int": [1, 6, 15, 16, 17, 22, 28, 29, 30, 31, 38, 39, 40, 41, 42, 43, 44, 57, 66, 128], "bool": [1, 5, 6, 7, 14, 20, 22, 25, 27, 28, 31, 36, 38, 39, 40, 41, 42, 43, 44, 47, 50, 55, 57], "valu": [1, 5, 6, 7, 16, 22, 28, 31, 35, 38, 39, 40, 41, 42, 43, 44, 50, 51, 79, 80, 81, 82, 83, 84, 90, 92, 96, 97, 98, 99, 103, 107, 109, 116, 119, 121, 125, 128, 129], "": [1, 5, 6, 7, 22, 28, 31, 38, 39, 40, 41, 42, 43, 44, 50, 51, 57, 79, 80, 81, 82, 83, 87, 90, 92, 96, 97, 99, 103, 104, 107, 109, 110, 115, 116, 117, 119, 121, 122, 124, 125, 126, 127, 128, 129], "train": [1, 6, 15, 16, 17, 22, 28, 31, 38, 39, 40, 41, 42, 43, 44, 51, 79, 80, 81, 83, 90, 92, 96, 97, 103, 107, 117, 119, 121, 123, 124, 127, 128, 129], "mostli": [1, 2], "includ": [1, 2, 14, 16, 91, 92, 104, 110, 113, 124], "hyperparamet": [1, 2, 31, 57, 87, 92, 95, 97, 100, 101, 103, 104, 114, 116, 117, 120, 121, 122, 126, 127, 130], "ani": [1, 2, 7, 20, 22, 25, 27, 28, 29, 30, 31, 36, 47, 49, 50, 55, 81, 116, 121, 129], "other": [1, 2, 20, 22, 25, 47, 77, 82, 84, 97, 99, 104, 110, 112, 116, 117, 126, 127, 129], "initi": [1, 2, 20, 21, 47, 48, 55, 56, 103, 117, 129], "multipl": [1, 15, 16, 17, 31, 57, 92, 95, 101, 119, 128, 129, 130], "lead": [1, 113, 117, 124, 129], "search": [1, 19, 20, 31, 92, 98, 99, 114, 119, 121, 122], "return": [1, 2, 3, 5, 6, 7, 8, 9, 10, 14, 15, 16, 17, 18, 19, 22, 23, 24, 27, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 81, 90, 91, 102, 105, 107, 129], "its": [1, 5, 21, 48, 56, 110, 119, 121, 122, 124, 126, 129], "last": [1, 92, 97, 104, 115, 117, 129], "rais": [1, 17, 18, 20, 25, 29, 30, 36, 47, 53, 55, 57, 59, 125, 130], "valueerror": [1, 17, 18, 20, 25, 29, 30, 36, 47, 53, 55, 59], "valid": [1, 2, 15, 16, 17, 29, 30, 31, 73, 79, 80, 91, 97, 103, 104, 109, 114, 116, 119, 120, 121, 125, 126, 127, 129], "targetpipelinecr": [1, 96, 109, 117, 123], "target": [1, 2, 6, 7, 15, 16, 22, 27, 29, 30, 31, 38, 39, 40, 41, 42, 43, 44, 57, 67, 79, 80, 81, 82, 83, 84, 87, 90, 91, 92, 93, 95, 97, 98, 99, 100, 101, 103, 104, 107, 109, 114, 116, 119, 120, 121, 122, 125, 127, 128, 129, 130], "properti": [1, 3, 7, 13, 27, 50, 51], "get": [1, 3, 5, 6, 7, 10, 18, 22, 23, 27, 33, 38, 39, 40, 41, 42, 43, 44, 45, 50, 51, 53, 79, 80, 83, 90, 91, 92, 97, 104, 114, 116, 121, 122, 127, 128], "have": [1, 5, 6, 7, 22, 30, 38, 39, 40, 41, 42, 43, 44, 50, 79, 82, 83, 84, 87, 90, 92, 98, 99, 103, 104, 109, 110, 112, 113, 115, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129], "been": [1, 52, 116, 117, 121], "has_model": 1, "whether": [1, 14, 20, 25, 31, 36, 38, 44, 47, 55, 83, 87, 90, 110, 117], "ha": [1, 31, 38, 52, 79, 80, 81, 82, 83, 84, 87, 90, 91, 93, 97, 100, 103, 107, 110, 116, 117, 119, 121, 124, 128, 129], "copi": [1, 3, 81, 104, 110, 121], "classmethod": 1, "from_list": 1, "model_param": [1, 31, 87, 130], "union": [1, 4, 27, 28, 32, 51, 60], "dict": [1, 5, 6, 7, 22, 28, 30, 31, 38, 39, 40, 41, 42, 43, 44, 50], "kei": [1, 30, 31, 39, 43, 82, 92, 125], "being": [1, 110, 113, 128, 129], "pieplin": 1, "split": [1, 15, 16, 17, 22, 31, 79, 80, 81, 84, 87, 90, 96, 97, 107, 117, 119, 121, 124, 128], "least": [1, 15, 17, 31, 81, 103, 109], "two": [1, 81, 82, 84, 87, 90, 91, 92, 93, 97, 98, 100, 103, 104, 107, 110, 113, 116, 117, 119, 122, 124, 127, 129], "same": [1, 31, 43, 57, 84, 87, 90, 98, 99, 103, 107, 110, 114, 116, 117, 119, 122, 124, 127, 128, 129], "consid": [1, 104, 110, 115, 117, 119, 125, 128], "point": [1, 103, 110, 117, 124, 126, 127, 128, 129], "tune": [1, 28, 31, 57, 95, 101, 114, 116, 117, 120, 121, 122, 123, 129, 130], "one": [1, 27, 31, 39, 40, 41, 43, 49, 80, 81, 82, 83, 90, 92, 96, 97, 98, 99, 100, 104, 107, 109, 110, 116, 117, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130], "each": [1, 5, 6, 7, 15, 16, 17, 22, 30, 31, 38, 39, 40, 41, 42, 43, 44, 50, 51, 79, 80, 81, 82, 83, 90, 91, 92, 93, 97, 103, 107, 109, 110, 116, 117, 119, 120, 121, 124, 127, 128, 129], "recurs": 1, "thu": [1, 5, 90, 124], "mani": [1, 38, 83, 90, 117, 128, 129], "all": [1, 3, 14, 19, 20, 24, 31, 34, 38, 39, 43, 44, 46, 51, 54, 79, 80, 83, 84, 90, 91, 92, 93, 97, 103, 104, 107, 109, 110, 115, 116, 117, 119, 120, 121, 123, 124, 125, 126, 128, 129], "configur": [1, 6, 38, 39, 40, 41, 42, 43, 44, 57, 117, 121, 122], "A": [1, 19, 24, 30, 31, 39, 43, 46, 54, 81, 82, 83, 84, 90, 98, 99, 100, 116, 117, 119, 124, 125, 129], "without": [1, 20, 25, 36, 47, 55, 81, 83, 99, 103, 104, 109, 124], "repeat": [1, 15, 79, 80, 97, 119, 121, 124, 128], "to_pipelin": [1, 2], "x_type": [1, 30, 31, 39, 40, 41, 43, 44, 79, 80, 81, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 104, 107, 116, 117, 119, 121, 122, 123, 125, 127, 128, 129], "search_param": [1, 31, 98, 99, 130], "data": [1, 5, 6, 7, 14, 15, 16, 17, 22, 27, 29, 30, 31, 38, 39, 40, 41, 42, 43, 44, 49, 50, 51, 73, 79, 80, 81, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 104, 107, 109, 114, 116, 117, 119, 121, 122, 123, 124, 126, 127, 128, 129], "inspect": [1, 31, 57, 67, 92, 94, 97, 104, 111, 114, 120, 124, 125, 127, 128], "fold": [1, 13, 15, 17, 31, 57, 78, 79, 80, 85, 89, 90, 91, 94, 96, 97, 103, 104, 107, 117, 121, 123, 124, 128, 129], "wise": [1, 13, 31, 57, 89, 94, 124], "predict": [1, 7, 12, 13, 22, 30, 31, 35, 44, 50, 51, 57, 79, 80, 81, 82, 83, 84, 87, 89, 90, 94, 96, 97, 100, 104, 107, 109, 114, 117, 120, 121, 122, 123, 124, 127, 128, 129], "preprocess": [1, 2, 31, 57, 79, 80, 81, 83, 84, 87, 89, 90, 91, 94, 97, 103, 104, 107, 114, 116, 120, 125, 126, 128], "varianc": [1, 14, 31, 57, 89, 94, 109, 121, 129], "threshold": [1, 14, 31, 38, 44, 51, 57, 89, 94, 109, 116], "zscore": [1, 14, 31, 57, 79, 80, 81, 83, 84, 87, 89, 90, 91, 93, 94, 96, 98, 99, 100, 103, 107, 109, 119, 121, 123, 127, 128, 129], "pca": [1, 14, 31, 57, 89, 94, 97, 104, 109, 119, 129], "variabl": [1, 2, 15, 16, 17, 29, 30, 31, 57, 80, 81, 83, 90, 95, 97, 101, 104, 107, 117, 119, 121, 123, 128, 129, 130], "z": [1, 2, 31, 57, 90, 95, 101, 115, 121, 123, 128, 129], "score": [1, 2, 7, 12, 13, 22, 31, 50, 57, 66, 67, 79, 80, 81, 83, 84, 87, 90, 91, 92, 93, 95, 97, 98, 99, 100, 101, 103, 104, 106, 108, 114, 116, 117, 119, 121, 122, 123, 126, 129, 130], "grid": [1, 31, 57, 90, 95, 99, 101, 120, 121, 122, 130], "stack": [1, 31, 57, 95, 101, 103, 109, 114, 120], "analysi": [1, 14, 17, 31, 57, 78, 85, 90, 95, 96, 101, 107, 109, 129], "confound": [1, 2, 14, 16, 31, 39, 44, 51, 57, 82, 105, 109, 111, 114, 120, 127, 130], "remov": [1, 2, 14, 16, 31, 39, 44, 51, 57, 92, 102, 105, 109, 110, 114, 120, 127, 130], "comparison": [1, 16, 31, 57, 66, 88, 102, 105, 111, 114, 126], "connectom": [1, 31, 109, 114, 120], "base": [1, 16, 27, 31, 49, 67, 109, 112, 114, 117, 120, 121, 124, 125, 126, 129, 130], "cbpm": [1, 31, 109, 114, 120, 130], "evalu": [1, 7, 31, 34, 50, 74, 84, 90, 114, 121, 124, 125, 126, 127, 129], "build": [1, 31, 79, 83, 90, 95, 114, 115, 116, 122, 123, 124, 126, 127], "cross": [1, 2, 15, 16, 17, 29, 31, 79, 80, 91, 97, 103, 104, 109, 114, 116, 119, 120, 121, 125, 126, 127, 129], "consist": [1, 2, 22, 29, 31, 114, 116, 120, 124, 125, 127, 129, 130], "analog": 2, "pipelinecr": [2, 31, 92, 93, 96, 97, 98, 99, 100, 103, 104, 109, 116, 117, 119, 121, 122, 123, 126, 127, 128], "allow": [2, 20, 25, 36, 47, 55, 84, 103, 112, 116, 117, 119, 125, 126, 129, 130], "target_pipelin": [2, 117, 123], "jutargetpipelin": [2, 50, 96, 117, 123], "easi": [2, 82, 114, 117, 119, 121, 122, 126, 127], "wai": [2, 84, 87, 112, 114, 117, 119, 121, 122, 124, 127, 128, 129], "out": [2, 19, 42, 44, 45, 54, 87, 104, 109, 114, 115, 117, 119, 121, 122, 126, 127, 128, 129], "us": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 71, 77, 78, 79, 80, 81, 82, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 107, 109, 110, 111, 113, 114, 116, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130], "column_typ": [3, 121], "hold": [3, 128], "regard": [3, 125, 128], "pd": [3, 5, 6, 7, 14, 22, 27, 31, 39, 40, 41, 42, 43, 44, 49, 50, 51, 66, 79, 80, 81, 82, 90, 91, 92, 96, 97, 103, 107, 116, 117, 122, 123, 127], "datafram": [3, 5, 6, 7, 14, 22, 27, 30, 31, 38, 39, 40, 41, 42, 43, 44, 49, 50, 51, 66, 79, 80, 81, 82, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 104, 107, 114, 116, 117, 119, 121, 122, 123, 124, 125, 127, 128, 129, 130], "One": [3, 22, 82, 117, 119, 122, 129], "instead": [3, 16, 17, 20, 25, 36, 38, 47, 55, 81, 117, 119, 122, 130], "also": [3, 79, 81, 82, 84, 87, 92, 97, 98, 104, 110, 112, 116, 117, 119, 121, 122, 124, 125, 127, 128, 129], "itself": [3, 122], "self": [3, 5, 6, 22, 27, 38, 39, 40, 41, 42, 43, 44, 49, 50, 52], "updat": [3, 5, 6, 7, 22, 38, 39, 40, 41, 42, 43, 44, 50, 110, 113, 130], "pattern": [3, 11, 79, 80, 81, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 104, 107, 116, 117, 119, 121, 122, 123, 127, 128, 129], "regex": 3, "match": [3, 42, 82], "to_type_selector": 3, "selector": 3, "usabl": [3, 129], "compos": 3, "columntransform": [3, 121], "callabl": [3, 32, 33, 36, 38, 130], "alia": [4, 58, 60], "needed_typ": [5, 6, 7, 27, 28, 42, 51], "estim": [5, 6, 7, 22, 28, 31, 32, 33, 36, 38, 39, 40, 41, 42, 43, 44, 50, 90, 91, 92, 98, 99, 100, 103, 104, 114, 116, 117, 119, 120, 121, 123, 124, 126, 127, 129], "everi": [5, 25, 30, 31, 47, 115, 121, 125, 129], "awar": [5, 113], "thei": [5, 7, 22, 50, 79, 80, 81, 82, 83, 84, 87, 90, 91, 92, 93, 96, 98, 99, 103, 107, 112, 116, 119, 121, 122, 128, 129], "abl": [5, 124, 127], "main": [5, 67, 103, 110, 114, 115, 117, 119, 124], "differ": [5, 15, 16, 17, 25, 81, 82, 84, 87, 92, 97, 98, 99, 100, 103, 104, 112, 113, 116, 117, 119, 121, 122, 124, 125, 127, 128, 129], "between": [5, 16, 29, 80, 103, 110, 116, 117, 122, 124, 127, 129], "baseestim": [5, 130], "purpos": [5, 81, 82, 128], "That": [5, 17, 116, 117, 119, 121, 129], "ar": [5, 6, 7, 17, 20, 22, 25, 27, 31, 36, 38, 39, 40, 41, 42, 43, 44, 47, 49, 50, 51, 55, 79, 80, 81, 82, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 103, 104, 107, 110, 111, 112, 113, 115, 116, 117, 119, 121, 122, 124, 125, 126, 127, 128, 129, 130], "get_needed_typ": [5, 6, 7, 39, 40, 41, 42, 43, 44, 50, 64], "get_apply_to": [5, 6, 7, 39, 40, 41, 42, 43, 44, 50, 64], "filter_column": [5, 6, 7, 39, 40, 41, 42, 43, 44, 50, 100, 109, 122], "x": [5, 6, 7, 12, 13, 14, 15, 16, 17, 22, 27, 30, 31, 33, 36, 38, 39, 40, 41, 42, 43, 44, 49, 50, 51, 61, 62, 64, 79, 80, 81, 82, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 104, 107, 115, 116, 117, 119, 121, 122, 123, 125, 127, 128, 129], "panda": [5, 6, 7, 29, 30, 31, 38, 39, 40, 41, 42, 43, 44, 50, 78, 79, 80, 81, 83, 84, 85, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 107, 113, 114, 116, 117, 121, 122, 123, 125, 127, 128], "filter": [5, 6, 7, 39, 40, 41, 42, 43, 44, 50, 109, 114, 129], "get_param": [5, 6, 7, 22, 38, 39, 40, 41, 42, 43, 44, 50, 61, 62, 63, 64, 121], "deep": [5, 6, 7, 22, 38, 39, 40, 41, 42, 43, 44, 50, 61, 62, 63, 64, 117], "true": [5, 6, 7, 20, 22, 25, 27, 31, 35, 36, 38, 39, 40, 41, 42, 43, 44, 47, 50, 55, 61, 62, 63, 64, 79, 80, 81, 84, 90, 93, 96, 97, 103, 104, 107, 117, 121, 123, 124, 128, 129], "contain": [5, 6, 7, 22, 30, 31, 34, 38, 39, 40, 41, 42, 43, 44, 50, 66, 79, 80, 81, 84, 96, 97, 107, 121, 125, 128], "subobject": [5, 6, 7, 22, 38, 39, 40, 41, 43, 44, 50], "map": [5, 6, 7, 22, 38, 39, 40, 41, 42, 43, 44, 50, 80, 104], "set_param": [5, 6, 7, 22, 38, 39, 40, 41, 42, 43, 44, 50, 61, 62, 63, 64], "work": [5, 6, 7, 22, 27, 38, 39, 40, 41, 42, 43, 44, 49, 50, 78, 79, 80, 81, 83, 84, 85, 87, 90, 91, 92, 93, 96, 98, 99, 103, 104, 107, 110, 116, 117, 119, 121, 122, 127, 130], "simpl": [5, 6, 7, 22, 31, 38, 39, 40, 41, 42, 43, 44, 50, 57, 66, 78, 85, 86, 88, 90, 91, 92, 93, 98, 99, 103, 104, 109, 110, 114, 116, 119, 121, 122, 124, 129], "well": [5, 6, 7, 22, 38, 39, 40, 41, 42, 43, 44, 50, 116, 117, 119, 121, 122, 124, 125, 126, 127, 129], "nest": [5, 6, 7, 22, 38, 39, 40, 41, 42, 43, 44, 50, 116, 119, 121, 124], "latter": [5, 6, 7, 22, 38, 39, 40, 41, 42, 43, 44, 50], "form": [5, 6, 7, 22, 38, 39, 40, 41, 42, 43, 44, 50, 125, 129], "compon": [5, 6, 7, 22, 38, 39, 40, 41, 42, 43, 44, 50, 92, 97, 109, 129], "__": [5, 6, 7, 22, 38, 39, 40, 41, 42, 43, 44, 50, 79, 80, 81, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 104, 107, 116, 117, 119, 122, 123, 127, 128, 129], "possibl": [5, 6, 7, 20, 22, 25, 36, 38, 39, 40, 41, 42, 43, 44, 47, 50, 55, 82, 114, 119, 124, 128, 129], "instanc": [5, 6, 7, 15, 16, 17, 22, 38, 39, 40, 41, 42, 43, 44, 50, 117, 121, 129], "fit": [6, 7, 22, 27, 31, 38, 39, 40, 41, 42, 43, 44, 49, 50, 51, 61, 62, 63, 64, 90, 91, 97, 104, 109, 116, 117, 120, 121, 124, 129], "y": [6, 7, 12, 13, 15, 16, 17, 22, 27, 29, 30, 31, 33, 36, 38, 39, 40, 41, 42, 43, 44, 49, 50, 51, 61, 62, 63, 64, 79, 80, 81, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 104, 107, 109, 115, 116, 117, 119, 121, 122, 123, 124, 125, 127, 128, 129], "fit_param": [6, 7, 38, 39, 40, 41, 42, 43, 44, 50], "fit_transform": [6, 27, 38, 39, 40, 41, 42, 43, 44, 49, 51], "version": [6, 16, 38, 39, 40, 41, 42, 43, 44, 79, 80, 81, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 107, 110, 113, 114, 121, 122, 130], "arrai": [6, 7, 15, 16, 17, 31, 38, 39, 40, 41, 42, 43, 44, 50, 79, 121], "like": [6, 7, 15, 16, 17, 25, 38, 39, 40, 41, 42, 43, 44, 47, 50, 87, 97, 113, 119, 121, 124, 125, 128, 129], "shape": [6, 7, 15, 16, 17, 38, 39, 40, 41, 42, 43, 44, 50, 79, 90], "n_sampl": [6, 7, 15, 16, 17, 38, 39, 40, 41, 42, 43, 44, 50, 92, 116, 122], "n_featur": [6, 15, 16, 17, 38, 39, 40, 41, 42, 43, 44, 92, 116, 117, 122], "input": [6, 27, 29, 30, 31, 38, 39, 40, 41, 42, 43, 44, 49, 50, 51, 73, 79, 80, 81, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 104, 107, 116, 117, 119, 121, 122, 123, 126, 127, 128, 129], "sampl": [6, 7, 15, 16, 17, 22, 30, 38, 39, 40, 41, 42, 43, 44, 50, 79, 80, 81, 82, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 104, 107, 116, 117, 119, 121, 122, 123, 127, 128, 129], "n_output": [6, 38, 39, 40, 41, 42, 43, 44], "unsupervis": [6, 38, 39, 40, 41, 42, 43, 44], "addit": [6, 7, 22, 31, 38, 39, 40, 41, 42, 43, 44, 50, 113, 114, 116, 121, 122, 124, 127, 128, 129], "x_new": [6, 38, 39, 40, 41, 42, 43, 44], "ndarrai": [6, 7, 15, 16, 17, 22, 38, 39, 40, 41, 42, 43, 44, 50], "n_features_new": [6, 38, 39, 40, 41, 42, 43, 44], "set_output": [6, 38, 39, 40, 41, 42, 43, 44], "output": [6, 14, 15, 16, 17, 31, 38, 39, 40, 41, 42, 43, 44, 57, 66, 81, 103, 110, 117, 121, 124, 125, 126, 129], "see": [6, 15, 17, 23, 30, 31, 38, 39, 40, 41, 42, 43, 44, 57, 71, 77, 79, 80, 81, 82, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 104, 107, 109, 110, 112, 117, 119, 121, 122, 124, 125, 126, 127, 128, 129], "introduc": [6, 38, 39, 40, 41, 42, 43, 44, 82, 117], "api": [6, 38, 39, 40, 41, 42, 43, 44, 67, 110, 114, 122, 129], "exampl": [6, 38, 39, 40, 41, 42, 43, 44, 78, 79, 80, 81, 82, 83, 84, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 102, 103, 104, 106, 107, 112, 113, 114, 116, 117, 119, 121, 122, 123, 124, 125, 127, 128, 129, 130], "format": [6, 38, 39, 40, 41, 42, 43, 44, 57, 80, 97, 98, 99, 103, 110, 115, 117], "unchang": [6, 38, 39, 40, 41, 42, 43, 44], "wrap": [7, 50, 130], "make": [7, 15, 16, 17, 22, 80, 82, 83, 90, 92, 97, 98, 99, 103, 110, 113, 115, 116, 117, 119, 121, 122, 123, 125, 127, 128, 129, 130], "modellik": [7, 22, 23, 25, 44, 50, 51], "datalik": [7, 22, 27, 41, 49, 50, 51], "pass": [7, 15, 16, 17, 22, 50, 98, 109, 110, 123, 128, 129], "float": [7, 16, 22, 30, 31, 35, 38, 44, 51, 66, 79], "predict_proba": [7, 12, 22, 50], "comput": [7, 22, 35, 38, 50, 84, 97, 107, 124, 129], "probabl": [7, 22, 31, 50, 121], "outcom": [7, 22, 50, 129], "np": [7, 15, 16, 17, 22, 38, 50, 79, 80, 83, 90, 97, 98, 99, 116, 117, 121, 122], "correspond": [7, 22, 31, 50, 121], "sort": [7, 22, 50, 83, 90, 109], "order": [7, 22, 50, 82, 83, 90, 103, 104, 110, 117, 119, 122, 124, 129], "appear": [7, 22, 50, 128], "classes_": [7, 22, 50], "decision_funct": [7, 12, 50, 90, 130], "decis": [7, 50, 82, 83, 90, 98, 99, 117, 121], "n_class": [7, 50], "1": [7, 16, 22, 30, 31, 42, 50, 79, 80, 81, 82, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 104, 107, 113, 115, 116, 117, 119, 121, 122, 123, 125, 127, 128, 129], "2": [7, 15, 16, 17, 22, 50, 79, 80, 81, 82, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 104, 107, 113, 114, 117, 119, 121, 122, 123, 125, 127, 128, 129], "predict_log_proba": [7, 12], "kwarg": [7, 22, 23, 42, 49, 52, 61, 62, 63, 64], "new_typ": 8, "chang": [8, 16, 39, 77, 99, 103, 109, 110, 113, 128], "new": [8, 90, 96, 104, 110, 114, 124, 129], "attr": 9, "ensur": [9, 17, 39, 41, 43, 44, 79, 121], "check": [9, 27, 29, 32, 76, 82, 83, 90, 92, 103, 110, 114, 115, 119, 128, 130], "cv": [12, 13, 15, 16, 17, 22, 29, 30, 31, 57, 78, 79, 80, 84, 85, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 104, 107, 109, 116, 117, 119, 121, 122, 123, 127, 128, 129, 130], "func": [12, 129], "group": [12, 13, 15, 16, 17, 29, 30, 31, 57, 78, 81, 85, 90, 97, 114, 116, 128, 130], "until": [14, 90, 92, 97, 104, 113, 127], "with_column_typ": [14, 90], "fals": [14, 17, 20, 25, 31, 36, 40, 44, 47, 55, 57, 80, 81, 83, 84, 87, 90, 91, 92, 96, 97, 98, 99, 100, 104, 107, 116, 117, 119, 121, 122, 123, 128, 129], "certain": [14, 125, 128, 129], "inclus": [14, 104], "featur": [14, 15, 16, 17, 27, 30, 31, 38, 39, 40, 41, 42, 43, 44, 49, 51, 79, 80, 81, 82, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 104, 107, 110, 113, 114, 116, 119, 120, 121, 123, 124, 126, 127, 128], "svm": [14, 31, 57, 79, 84, 87, 89, 93, 94, 98, 99, 100, 109, 119, 121, 122, 123, 127, 128, 129], "n_split": [15, 16, 17, 22, 79, 80, 81, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 104, 107, 116, 117, 119, 121, 122, 123, 127, 128, 129], "5": [15, 16, 17, 31, 79, 80, 81, 82, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 104, 107, 114, 116, 117, 119, 121, 122, 123, 124, 125, 127, 128, 129], "n_repeat": [15, 79, 87, 93, 121, 127, 128], "10": [15, 38, 79, 80, 81, 82, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 104, 107, 116, 117, 119, 121, 122, 123, 127, 128, 129], "random_st": [15, 16, 17, 22, 79, 80, 81, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 104, 107, 116, 117, 119, 121, 122, 123, 127, 128, 129], "stratifi": [15, 16, 17, 31, 57, 78, 79, 85, 128, 130], "k": [15, 17, 31, 57, 78, 79, 80, 83, 85, 90, 96, 97, 103, 109, 119, 124, 128], "stratifiedgroupskfold": [15, 81, 83, 130], "n": [15, 17, 79, 80, 81, 92, 96, 97, 107, 109, 115, 123, 129], "time": [15, 17, 79, 80, 81, 82, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 104, 107, 115, 116, 117, 119, 121, 122, 123, 124, 125, 127, 128, 129], "random": [15, 16, 17, 22, 31, 57, 83, 84, 87, 89, 92, 94, 98, 99, 103, 109, 117, 119, 121, 122, 127, 129], "repetit": [15, 17, 79, 80, 97], "number": [15, 16, 17, 31, 79, 80, 81, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 104, 107, 115, 116, 117, 119, 121, 122, 123, 124, 127, 128, 129], "must": [15, 17, 42, 66, 82, 83, 90, 97, 110, 119, 125, 129], "randomst": [15, 16, 17], "control": [15, 16, 17, 82, 83, 90, 98, 99, 106, 117, 122, 124], "gener": [15, 16, 17, 31, 42, 78, 79, 80, 81, 82, 83, 84, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 102, 103, 104, 106, 107, 110, 115, 123, 124, 128, 129], "state": [15, 17, 21, 22, 26, 37, 48, 56, 117], "reproduc": [15, 16, 17, 22, 31, 128], "across": [15, 16, 17, 80, 91, 96, 97, 107, 121, 128], "call": [15, 16, 17, 20, 33, 36, 112, 117, 119, 121, 122, 125, 129], "glossari": [15, 17], "note": [15, 16, 17, 31, 92, 103, 110, 117, 119, 122], "splitter": [15, 16, 17, 22, 31, 114, 120, 126, 127], "mai": [15, 16, 17, 77, 116, 117, 121, 122], "result": [15, 16, 17, 27, 31, 49, 82, 90, 103, 104, 117, 121, 124, 125, 127, 128], "ident": [15, 16, 17], "integ": [15, 16, 17, 128], "get_n_split": [15, 16, 17], "iter": [15, 16, 17, 31, 92, 103, 116, 121, 128, 130], "alwai": [15, 16, 17, 84, 98, 99, 103, 110, 117, 119, 122, 127, 128, 129], "ignor": [15, 16, 17, 104, 107], "exist": [15, 16, 17, 36, 57], "zero": [15, 16, 17, 92], "placehold": [15, 16, 17], "label": [15, 16, 30, 31, 79, 84, 124, 125, 128, 129], "while": [15, 16, 31, 91, 98, 103, 114, 117, 122, 123, 124, 129], "dataset": [15, 16, 79, 80, 81, 82, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 104, 107, 110, 116, 117, 119, 121, 122, 123, 124, 125, 127, 128, 129], "test": [15, 16, 17, 22, 31, 51, 79, 80, 81, 87, 90, 96, 97, 99, 103, 114, 117, 119, 121, 124, 127, 128, 130], "indic": [15, 16, 17, 31, 40, 44, 90, 109, 121, 128, 129], "where": [15, 16, 17, 82, 115, 121, 129, 130], "supervis": [15, 16, 129], "learn": [15, 16, 18, 20, 31, 38, 39, 41, 42, 43, 44, 45, 49, 82, 84, 90, 91, 107, 109, 110, 113, 114, 116, 117, 119, 121, 122, 124, 125, 126, 127, 128, 129, 130], "yield": [15, 16, 17, 31, 121, 128], "test_siz": [16, 79, 80, 90, 96, 97, 103], "0": [16, 22, 30, 31, 38, 44, 51, 66, 79, 80, 81, 82, 83, 84, 85, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 103, 104, 105, 107, 108, 113, 114, 115, 116, 117, 119, 121, 122, 123, 125, 127, 128, 129], "train_siz": [16, 90, 93, 103], "bootstrap": [16, 103], "resampl": 16, "replac": [16, 38, 91, 103, 115, 121], "respect": [16, 38, 109, 110, 125, 127, 128, 129], "distribut": [16, 79, 81, 83, 84, 87, 90, 91, 93, 98, 99, 100, 103, 109, 117, 119, 121, 127, 128, 129], "re": [16, 110, 129], "shuffl": [16, 17, 80, 81, 83, 84, 87, 90, 91, 92, 96, 97, 98, 99, 100, 104, 107, 116, 117, 119, 121, 122, 123, 128, 129], "proport": 16, "round": [16, 127], "up": [16, 31, 59, 92, 98, 99, 104, 114, 116, 121, 125, 126, 129], "absolut": [16, 80, 96, 97, 107, 109], "complement": [16, 109], "size": [16, 116, 117, 127], "21": [16, 82, 114, 116, 119, 122, 127], "remain": [16, 124], "unspecifi": 16, "otherwis": [16, 57], "automat": [16, 110, 113, 115, 129], "produc": [16, 119], "suffici": [16, 17, 81], "henc": [16, 17], "actual": [16, 17, 38, 44, 79, 80, 97, 104, 107, 121], "n_label": 16, "stratif": [16, 17, 81, 83], "done": [16, 98, 110, 113, 115, 121, 122, 127, 128, 129], "particular": [17, 117, 121, 129], "implement": [17, 38, 114, 116, 117, 122, 130], "searcher": [18, 19, 20, 21, 31, 120, 130], "obj": [18, 20], "scikit": [18, 20, 31, 38, 39, 41, 42, 43, 44, 45, 49, 84, 90, 91, 107, 109, 113, 114, 116, 117, 119, 122, 124, 127, 128, 129, 130], "avail": [18, 19, 20, 24, 31, 33, 34, 46, 53, 54, 113, 114, 128, 129], "algorithm": [19, 20, 22, 31, 91, 124, 127, 129, 130], "searcher_nam": 20, "overwrit": [20, 25, 36, 47, 55, 57, 130], "regist": [20, 21, 25, 26, 36, 37, 47, 48, 55, 56, 107, 130], "after": [20, 27, 44, 49, 51, 80, 81, 90, 92, 96, 97, 103, 104, 107, 110, 121], "referenc": [20, 25, 47, 55], "decid": [20, 25, 36, 55], "warn": [20, 25, 29, 30, 36, 47, 52, 55, 57, 65, 79, 80, 81, 83, 84, 87, 90, 91, 92, 93, 96, 98, 99, 103, 107, 116, 117, 121, 122, 125, 127, 130], "error": [20, 25, 30, 31, 36, 47, 55, 57, 59, 79, 80, 82, 96, 97, 107, 110, 124, 127, 130], "alreadi": [20, 25, 36, 47, 55, 90, 92, 110, 117, 122, 126, 129], "reset": [21, 26, 37, 48, 56, 82], "ensembl": [22, 122], "ds_split": 22, "random_state_algorithm": 22, "deslib": [22, 67, 109, 113, 114], "e": [22, 25, 31, 38, 44, 51, 57, 109, 110, 113, 115, 116, 117, 119, 121, 128, 129], "g": [22, 25, 31, 57, 97, 109, 113, 119, 128], "randomforest": 22, "metad": 22, "singlebest": 22, "staticselect": 22, "stackedclassifi": 22, "knorau": 22, "knora": 22, "desp": 22, "ola": 22, "mcb": 22, "knop": 22, "case": [22, 30, 31, 38, 81, 82, 90, 96, 107, 110, 116, 117, 125, 128, 129], "sample_weight": 22, "weight": [22, 119, 129], "when": [22, 81, 103, 109, 110, 112, 116, 117, 119, 123, 125, 128, 129, 130], "run_cross_valid": [23, 25, 66, 79, 80, 81, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 104, 107, 110, 116, 117, 119, 121, 122, 123, 126, 127, 130], "model_nam": 25, "classification_cl": 25, "regression_cl": 25, "afterward": [25, 47, 122], "behav": [25, 47], "insid": [25, 129], "runtimewarn": [25, 29, 30, 47, 55, 65, 79, 80, 81, 83, 84, 87, 90, 91, 92, 93, 96, 98, 99, 103, 107, 116, 121, 122, 127], "unlik": [27, 49, 124], "both": [27, 38, 49, 81, 83, 90, 103, 104, 117, 119, 122, 123, 128, 129], "requir": [27, 49, 71, 77, 110, 114, 119, 121, 123, 126, 129], "inform": [27, 31, 49, 79, 80, 81, 82, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 104, 107, 110, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130], "targetconfoundremov": [27, 49, 117], "encod": [27, 49], "present": [27, 49, 104, 110, 116], "leakag": [27, 49, 114, 117, 129], "drop": [27, 38, 40, 49, 81, 84, 87, 92, 104, 109, 121], "tupl": [27, 38], "jutargettransform": [27, 53, 55], "transformerlik": [27, 31, 129], "perform": [27, 31, 79, 80, 81, 83, 84, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 107, 110, 116, 117, 119, 121, 124, 126, 127, 128, 129], "inverse_transform": 27, "invers": [27, 117], "can_inverse_transform": 27, "factori": 28, "params_to_tun": 28, "juestimatorlik": 28, "estimatorlikefit1": [28, 60], "estimatorlikefit2": [28, 60], "estimatorlikef": [28, 60], "seri": [29, 30, 51], "inconsist": [29, 30], "might": [29, 30, 77, 82, 84, 87, 91, 98, 99, 112, 113, 117, 121, 123, 126, 128, 129], "still": [29, 82, 104, 113, 117, 128], "run": [29, 31, 38, 79, 80, 81, 82, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 104, 107, 113, 114, 115, 116, 117, 119, 121, 122, 123, 125, 127, 128, 129], "df": [30, 92, 119, 122, 125, 127, 128, 129], "pos_label": [30, 31, 84], "http": [30, 31, 38, 57, 81, 87, 110, 124, 127], "juaml": [30, 31, 110], "github": [30, 31, 114, 128], "io": [30, 31], "html": [30, 31, 57, 81, 87, 110, 124, 127, 128], "detail": [30, 31, 110, 124], "interpret": [30, 31, 57, 103, 121], "posit": [30, 31, 38, 80, 84, 116], "element": [30, 31, 57, 79, 82, 92, 129, 130], "convert": [30, 31, 82, 103, 107], "equal": [30, 31, 81, 109], "dictionari": [30, 31, 39, 43, 92, 104, 117, 121, 125, 130], "df_x": 30, "df_y": 30, "df_group": 30, "return_estim": [31, 79, 80, 81, 83, 90, 91, 92, 93, 96, 97, 98, 99, 103, 104, 107, 116, 119, 121, 122, 128], "return_inspector": [31, 93, 121], "return_train_scor": [31, 121, 128], "seed": [31, 84, 87, 92, 98, 99, 103, 121, 122], "n_job": [31, 38, 121, 130], "verbos": [31, 38, 121, 130], "numpi": [31, 40, 44, 79, 80, 81, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 107, 116, 117, 121, 122], "string": [31, 57, 109, 125, 127, 128, 129, 130], "kind": [31, 79, 80, 83, 84, 87, 90, 91, 93, 98, 99, 100, 103, 119, 125, 128], "categor": [31, 97, 104, 109, 123], "multiple_class": 31, "binari": [31, 57, 78, 83, 85, 87, 90, 91, 93, 98, 99, 100, 103, 109, 110, 115, 119, 121, 127], "ordin": 31, "final": [31, 79, 80, 81, 82, 83, 90, 91, 92, 96, 97, 98, 99, 100, 103, 104, 107, 110, 121, 122, 128, 129], "inspector": [31, 93, 121], "strategi": [31, 128], "kfold": [31, 80, 81, 83, 84, 87, 90, 91, 92, 96, 97, 98, 99, 100, 104, 107, 116, 117, 119, 121, 122, 123, 128, 129], "scorerlik": [31, 32, 33, 36], "metric": [31, 67, 79, 80, 82, 84, 87, 97, 103, 107, 114, 124, 126, 127], "org": [31, 38, 57, 81, 87, 124, 127, 128], "stabl": [31, 81, 113, 124], "model_evalu": 31, "comprehens": 31, "scorer": [31, 33, 34, 36, 37, 107, 117, 127, 128, 130], "defin": [31, 42, 79, 80, 81, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 107, 116, 117, 119, 121, 122, 128, 129], "follow": [31, 38, 42, 57, 59, 79, 80, 81, 82, 83, 84, 87, 90, 91, 92, 93, 96, 98, 99, 103, 104, 107, 109, 110, 111, 113, 115, 116, 119, 121, 122, 125, 126, 127, 128, 129], "step__paramet": 31, "sever": [31, 82, 83, 90, 110, 119, 124, 128], "svm__probabl": 31, "go": [31, 79, 80, 81, 82, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 104, 107, 114, 121, 126, 129], "befor": [31, 50, 79, 82, 103, 107, 110, 113, 115, 119, 128, 129, 130], "oper": [31, 79, 104], "level": [31, 57, 79, 80, 81, 82, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 107, 110, 116, 121, 122], "outer": [31, 79, 80, 81, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 104, 107, 116, 117, 119, 121, 122, 123, 127, 128, 129, 130], "joblib": [31, 38], "convernt": 31, "mean": [31, 38, 44, 51, 77, 80, 81, 83, 84, 90, 92, 96, 97, 98, 99, 103, 104, 107, 109, 117, 119, 121, 123, 124, 127, 128, 129], "print": [31, 57, 79, 80, 81, 82, 83, 84, 87, 90, 92, 93, 96, 97, 98, 99, 100, 103, 104, 107, 116, 117, 119, 121, 123, 127, 128, 129], "larger": 31, "50": [31, 79, 80, 81, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 104, 107, 119, 122, 123, 127, 128, 129], "standard": [31, 38, 92, 117, 122, 129], "standrad": 31, "addition": [31, 57, 84, 87, 114, 115, 117, 129], "fit_tim": [31, 79, 80, 93, 96, 97, 104, 107, 117, 123, 128, 129], "And": [31, 83, 90, 103, 119], "final_estim": 31, "multiclass": [31, 57, 78, 85, 109], "forest": [31, 57, 83, 87, 89, 92, 94, 103, 109, 122, 127, 129], "custom": [31, 36, 57, 108, 111, 114, 128, 129], "scalar": [33, 36, 79], "greater": [33, 36, 121], "better": [33, 36, 98, 99, 119, 121, 127], "Will": [33, 36, 127], "y_true": [35, 79, 80, 84, 97, 107], "y_pred": [35, 79, 80, 84, 97, 107], "squar": [35, 107, 109], "pearson": [35, 107, 116], "product": [35, 107], "moment": [35, 107], "correl": [35, 38, 80, 107, 116], "coeffici": [35, 80, 107, 128, 129], "arraylik": 35, "scorer_nam": [36, 107], "access": [36, 82], "want": [36, 44, 79, 82, 83, 84, 90, 92, 103, 104, 107, 110, 112, 113, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129], "userwarn": [36, 81, 84], "significance_threshold": [38, 116], "05": [38, 83, 84, 97, 103, 116, 119, 121], "corr_method": [38, 116], "pearsonr": [38, 107, 128], "agg_method": [38, 116], "sum": [38, 79, 116, 130], "corr_sign": [38, 116], "posneg": [38, 116], "aggreg": [38, 116], "togeth": [38, 44, 80, 81, 96, 97, 104, 107, 109], "significantli": 38, "signific": [38, 87, 116, 121], "neg": [38, 116], "aggregate": 38, "separ": [38, 90, 92, 124, 128, 129], "non": 38, "ones": 38, "choos": [38, 84, 87, 119, 127, 129], "In": [38, 81, 82, 83, 84, 90, 91, 103, 104, 107, 110, 114, 116, 117, 121, 122, 124, 125, 127, 128, 129], "procedur": [38, 124], "describ": [38, 80, 81, 92, 96, 97, 104, 107, 110, 123, 128], "shen": [38, 116], "finn": [38, 116], "scheinost": 38, "d": [38, 79, 82, 83, 90, 98, 99, 109, 115, 116], "et": [38, 109, 116, 117, 129], "al": [38, 116, 117], "2016": [38, 82, 83, 90, 98, 99, 116], "doi": [38, 117], "1038": 38, "nprot": 38, "178": [38, 91, 103], "p": [38, 79, 87, 103, 116, 127], "scipi": [38, 79, 80, 81, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 107, 116, 121, 122], "stat": [38, 87, 107, 116, 127], "convent": [38, 110], "axi": [38, 79, 80, 81, 96, 97, 107, 123], "po": [38, 116], "correlation_valu": 38, "found": [38, 98, 99, 128], "used_corr_sign_": 38, "job": 38, "parallel": [38, 110, 130], "log": [38, 57, 59, 65, 79, 80, 81, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 107, 110, 116, 117, 121, 122, 127], "y_mean_": 38, "show": [38, 78, 87, 95, 102, 106, 112, 119, 127, 128, 130], "wa": [38, 83, 87, 90, 91, 92, 104, 116, 119, 121, 128], "x_y_correlations_": 38, "significant_mask_": 38, "origin": [38, 59, 110, 115], "had": [38, 99, 128, 129, 130], "pos_mask_": 38, "pos_significant_mask_": 38, "neg_significant_mask_": 38, "used_significant_mask_": 38, "threhsold": 38, "mask": [38, 40, 44], "per": [38, 79, 83, 90, 97, 110], "get_feature_names_out": [38, 39, 41, 42, 43, 44], "input_featur": [38, 39, 41, 42, 43, 44], "x_types_renam": 39, "Not": [39, 40, 41, 42, 43, 103], "here": [39, 40, 41, 43, 81, 82, 83, 90, 92, 104, 110, 114, 122, 127, 128, 129], "kept": [39, 41, 42, 43, 44, 104], "get_support": [40, 44], "support": [40, 44, 50, 71, 79, 83, 84, 90, 93, 98, 99, 110, 119, 121, 122, 128, 129, 130], "support_mask": [40, 44], "keep": [41, 82, 84, 87, 91, 93, 97, 100, 103, 104, 110, 113, 114, 119, 122, 129], "junif": 42, "wrapper": [42, 50, 130], "around": 42, "directli": [42, 82, 114, 123], "feature_names_in_": 42, "x0": 42, "x1": 42, "n_features_in_": 42, "model_confound": [44, 51, 117], "keep_confound": [44, 104], "specif": [44, 84, 90, 92, 117, 120, 121, 124, 125, 126], "subtract": [44, 51, 109], "given": [44, 87, 90, 103, 109, 117, 125, 128, 129], "regular": [44, 98, 99, 109, 119, 125], "express": [44, 125], "syntax": 44, "independ": [44, 51, 90, 103, 109], "linearregress": [44, 51, 109, 116, 117], "By": [44, 51, 90, 91, 92, 104, 109, 116, 119, 121, 128], "residu": [44, 51, 117], "fall": [44, 51, 116, 128], "under": [44, 51, 107, 112, 113, 128, 129], "deconfound": [44, 104], "o": 46, "transformer_nam": [47, 55], "transformer_cl": [47, 55], "arg": [49, 52, 61, 62, 63, 64], "_model_": 50, "confoundremov": [51, 104, 109, 117, 130], "notifi": [52, 57], "with_traceback": 52, "except": [52, 59, 110], "tb": 52, "__traceback__": 52, "fname": 57, "output_format": 57, "debug": [57, 124], "info": [57, 58, 79, 80, 81, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 104, 107, 110, 116, 117, 119, 121, 122, 123, 127, 128, 129], "messag": [57, 59, 65, 110, 116, 130], "pathlib": 57, "path": 57, "filenam": [57, 110], "stdout": 57, "file": [57, 82, 85, 88, 94, 101, 105, 108, 110], "statement": 57, "append": [57, 91, 103, 115, 121], "entri": [57, 129], "doc": [57, 81, 110, 115, 130], "python": [57, 79, 80, 81, 82, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 104, 107, 110, 113, 115, 130], "dev": [57, 110, 115], "howto": 57, "asctim": 57, "levelnam": 57, "msg": [59, 65, 79, 80, 81, 83, 84, 87, 90, 91, 92, 93, 96, 98, 99, 103, 107, 116, 117, 121, 122, 127], "klass": 59, "first": [59, 65, 79, 83, 84, 87, 90, 92, 96, 97, 98, 99, 103, 104, 110, 116, 117, 119, 122, 123, 125, 126, 127, 128, 129], "subclass": [59, 65], "categori": [65, 79, 80, 81, 83, 84, 87, 90, 91, 92, 93, 96, 98, 99, 103, 107, 116, 117, 121, 122, 127], "width": [66, 84, 87, 93, 100, 103], "800": [66, 96, 119], "height": 66, "600": [66, 81], "ci": [66, 103, 115], "95": [66, 84, 87, 92, 93, 97, 100, 103], "plot": [66, 79, 80, 81, 87, 90, 91, 92, 97, 103, 114, 127], "panel": [66, 87, 112, 113, 127], "dashboard": 66, "confid": [66, 103, 121], "interv": [66, 103], "dynam": [67, 113, 114], "util": [67, 79, 80, 81, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 107, 110, 114, 116, 117, 121, 122, 127], "prepar": [67, 82, 114, 116, 117, 122], "vizual": [67, 114], "julearn": [69, 71, 73, 75, 76, 77, 79, 80, 81, 82, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 102, 103, 104, 106, 107, 109, 111, 113, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129], "depend": [71, 77, 82, 83, 90, 98, 99, 112, 114, 121, 127], "instal": [71, 77, 110, 112, 114, 115, 127, 130], "extra": [71, 77, 79, 80, 81, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 107, 109, 110, 122, 123, 129], "currentmodul": [73, 75, 76], "protocol": 76, "experiment": 77, "futur": [77, 79], "complet": [77, 110], "particularli": [77, 128], "reli": 77, "beta": 77, "releas": [77, 113, 114, 130], "packag": [77, 81, 84, 110, 112, 113, 122], "viz": [77, 87, 113, 114, 127], "basic": [78, 110, 119, 125, 126, 128, 129], "galleri": [78, 79, 80, 81, 82, 83, 84, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 102, 103, 104, 106, 107, 110], "sphinx": [78, 79, 80, 81, 82, 83, 84, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 102, 103, 104, 106, 107, 110], "end": [79, 80, 81, 82, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 104, 107, 113], "download": [79, 80, 81, 82, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 104, 107], "full": [79, 80, 81, 82, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 104, 107, 110, 121], "code": [79, 80, 81, 82, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 104, 107, 109, 110, 114, 117, 129], "iri": [79, 84, 87, 91, 93, 100, 103, 110, 119, 125, 128, 129], "vector": [79, 83, 84, 90, 93, 98, 99, 110, 119, 121, 122, 128, 129], "machin": [79, 82, 83, 84, 90, 93, 98, 99, 110, 114, 116, 117, 119, 121, 124, 125, 126, 127, 129], "classifi": [79, 83, 84, 90, 91, 93, 98, 99, 100, 103, 110, 121, 128, 129], "heatmap": [79, 80, 97], "accuraci": [79, 84, 99, 103, 117, 127, 128], "confus": [79, 92, 128, 129], "matrix": 79, "author": [79, 80, 81, 82, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 104, 107, 110], "shammi": [79, 80, 81, 83, 90, 92, 97, 103, 107, 117, 130], "fz": [79, 80, 81, 82, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 104, 107], "juelich": [79, 80, 81, 82, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 104, 107], "de": [79, 80, 81, 82, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 104, 107, 117], "federico": [79, 80, 81, 82, 83, 84, 87, 90, 91, 93, 97, 98, 99, 100, 103, 107], "raimondo": [79, 80, 81, 82, 83, 84, 87, 90, 91, 93, 97, 98, 99, 100, 103, 107, 130], "f": [79, 80, 81, 82, 83, 84, 87, 90, 91, 92, 93, 97, 98, 99, 100, 103, 107, 116, 117, 119, 122], "licens": [79, 80, 81, 82, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 104, 107, 110], "agpl": [79, 80, 81, 82, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 104, 107], "seaborn": [79, 80, 81, 82, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 110, 113, 114, 119, 121, 125, 128, 129], "sn": [79, 80, 81, 90, 91, 92, 96, 97, 103, 121], "matplotlib": [79, 80, 81, 90, 91, 92, 96, 97, 103, 114], "pyplot": [79, 80, 81, 90, 91, 92, 96, 97, 103], "plt": [79, 80, 81, 90, 91, 92, 96, 97, 103], "load_dataset": [79, 82, 83, 84, 87, 90, 91, 93, 98, 99, 100, 103, 110, 119, 121, 125, 128, 129], "model_select": [79, 80, 81, 83, 87, 90, 93, 96, 97, 103, 121, 127, 128, 130], "train_test_split": [79, 80, 96, 97], "repeatedkfold": [79, 121], "confusion_matrix": 79, "configure_log": [79, 80, 81, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 107, 110, 121, 122], "2023": [79, 80, 81, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 104, 107, 114, 116, 117, 119, 121, 122, 123, 127, 128, 129], "06": [79, 80, 81, 83, 84, 87, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 103, 104, 107, 114, 116, 117, 119, 121, 122, 123, 127, 128, 129], "26": [79, 80, 81, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 104, 107, 114, 116, 117, 119, 121, 122, 123, 127, 128, 129], "08": [79, 101, 127], "219": 79, "lib": [79, 80, 81, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 107, 121, 122], "25": [79, 80, 81, 82, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 104, 107, 121, 122, 123, 127], "11": [79, 80, 81, 82, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 107, 113, 116, 117, 121, 122, 127, 128], "220": 79, "3": [79, 80, 81, 82, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 104, 107, 110, 113, 114, 116, 117, 119, 121, 122, 123, 125, 127, 128, 129], "dev213": [79, 80, 81, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 107, 114, 121, 122], "load": [79, 80, 81, 96, 97, 98, 99, 103, 104, 107, 110, 119, 123, 125, 128], "df_iri": [79, 84, 87, 91, 93, 100, 103, 110], "sepal_length": [79, 84, 87, 91, 93, 100, 103, 119, 125, 128, 129], "sepal_width": [79, 84, 87, 91, 93, 100, 103, 119, 125, 128, 129], "petal_length": [79, 84, 87, 91, 93, 100, 103, 119, 125, 128, 129], "speci": [79, 84, 87, 91, 93, 100, 103, 110, 119, 121, 125, 128, 129], "train_iri": 79, "test_iri": 79, "200": [79, 92, 93, 103, 116, 119, 121, 122], "we": [79, 80, 81, 82, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 104, 107, 110, 112, 113, 114, 117, 119, 121, 122, 123, 124, 125, 127, 128, 129], "model_iri": [79, 91], "225": 79, "226": [79, 127], "expand": [79, 80, 81, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 104, 107, 116, 117, 119, 121, 122, 123, 127, 128, 129], "treat": [79, 80, 81, 83, 84, 87, 90, 91, 92, 93, 96, 98, 99, 103, 107, 116, 121, 122], "home": [79, 80, 81, 83, 84, 87, 90, 91, 92, 93, 96, 98, 99, 103, 107, 116, 117, 121, 122, 127], "runner": [79, 80, 81, 83, 84, 87, 90, 91, 92, 93, 96, 98, 99, 103, 107, 116, 117, 121, 122, 127], "py": [79, 80, 81, 82, 83, 84, 85, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 103, 104, 105, 107, 108, 110, 116, 117, 121, 122, 127], "238": [79, 80, 81, 83, 84, 87, 90, 91, 92, 93, 96, 98, 99, 103, 107, 116, 117, 121, 122, 127], "227": [79, 80, 85], "__continu": [79, 80, 81, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 103, 104, 107, 116, 119, 121, 123, 127, 128, 129], "228": 79, "229": 79, "120": 79, "230": 79, "231": 79, "versicolor": [79, 84, 87, 91, 93, 100, 103, 110, 119, 128, 129], "40": [79, 80, 81, 117, 127], "virginica": [79, 84, 87, 91, 93, 100, 103, 110, 119, 128, 129], "setosa": [79, 125, 128, 129], "count": [79, 80, 81, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 104, 107, 119, 121, 123, 127, 128, 129], "dtype": [79, 80, 81, 83, 84, 87, 90, 91, 93, 96, 97, 98, 99, 100, 103, 104, 107, 119, 121, 123, 127, 128, 129], "int64": [79, 83, 84, 87, 90, 91, 93, 98, 99, 100, 103, 119, 121, 127, 128, 129], "scheme": [79, 80, 81, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 104, 107, 116, 117, 119, 121, 122, 123, 124, 127, 128, 129, 130], "multi": [79, 82, 127, 128, 129], "detect": [79, 83, 84, 87, 90, 91, 93, 98, 99, 100, 103, 119, 121, 124, 127, 128, 129], "head": [79, 80, 81, 82, 83, 90, 96, 97, 98, 99, 103, 104, 107, 123, 125, 127, 129], "score_tim": [79, 80, 93, 96, 97, 104, 107, 117, 123, 128, 129], "cv_mdsum": [79, 80, 93, 96, 97, 104, 107, 117, 123, 128, 129], "009333": 79, "005376": 79, "fa5ab7a2b930761687a8e82d9971ebca": 79, "008778": 79, "004851": 79, "008498": 79, "004690": 79, "009569": 79, "005393": 79, "4": [79, 80, 81, 82, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 104, 107, 113, 116, 117, 119, 121, 122, 123, 125, 127, 128, 129], "008205": 79, "005206": 79, "8": [79, 80, 82, 83, 90, 93, 96, 97, 100, 104, 107, 113, 117, 123, 124, 127, 128, 129], "now": [79, 80, 81, 82, 84, 87, 90, 91, 93, 96, 97, 98, 99, 103, 104, 107, 110, 115, 117, 119, 121, 122, 125, 127, 128, 129], "df_accuraci": 79, "set_index": [79, 80, 82, 97, 103], "test_accuraci": [79, 84, 103, 127], "unstack": [79, 80, 97], "index": [79, 80, 81, 82, 83, 90, 92, 96, 97, 98, 99, 103, 107, 110, 114, 121], "916667": 79, "833333": 79, "958333": 79, "875000": 79, "750000": 79, "000000": [79, 80, 81, 87, 92, 96, 97, 104, 107, 123, 127], "791667": 79, "over": [79, 80, 84, 87, 92, 97, 116, 117, 121, 122, 127], "font_scal": [79, 80], "fig": [79, 80, 81, 90, 91, 92, 97], "ax": [79, 80, 81, 90, 91, 92, 97], "subplot": [79, 80, 81, 90, 91, 92, 97], "figsiz": [79, 80, 81, 90, 91, 92, 97], "7": [79, 80, 81, 82, 83, 87, 90, 93, 97, 110, 114, 122, 124, 125, 127, 128, 130], "cmap": [79, 80, 97], "ylgnbu": [79, 80, 97], "titl": [79, 80, 97, 110], "text": [79, 80, 90, 92, 97, 110], "our": [79, 82, 83, 84, 90, 92, 100, 104, 110, 114, 117, 119, 121, 122, 124, 125, 127, 128, 129], "annot": [79, 80], "cm": 79, "uniqu": [79, 83, 90, 119, 121], "9": [79, 80, 82, 83, 90, 92, 93, 97, 104, 117, 125, 128, 129], "let": [79, 80, 81, 82, 83, 90, 92, 96, 97, 98, 99, 103, 104, 107, 117, 119, 121, 122, 123, 125, 129], "anoth": [79, 82, 92, 107, 119, 122, 127, 129], "cm_sum": 79, "keepdim": 79, "cm_perc": 79, "astyp": 79, "100": [79, 84, 87, 91, 92, 93, 100, 103, 117, 119, 122], "empty_lik": 79, "nrow": 79, "ncol": 79, "rang": [79, 82, 92, 109, 116, 122], "j": [79, 117], "c": [79, 82, 83, 90, 98, 99, 112, 119, 121, 122, 129], "els": 79, "1f": [79, 80], "00_start": [79, 81], "plot_cm_acc_multiclass": [79, 85], "104": [79, 122], "deprecationwarn": 79, "convers": 79, "ndim": 79, "deprec": [79, 110, 130], "extract": [79, 82, 83, 90, 121], "singl": [79, 121, 127], "your": [79, 82, 110, 113, 114, 116, 117, 121, 126, 129], "fmt": [79, 80], "total": [79, 80, 81, 82, 83, 84, 85, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 103, 104, 105, 107, 108, 116, 117, 119, 121, 122, 123, 125, 127, 128, 129], "script": [79, 80, 81, 82, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 104, 107, 110, 115, 116, 117, 119, 121, 122, 123, 125, 127, 128, 129], "minut": [79, 80, 81, 82, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 104, 107, 116, 117, 119, 121, 122, 123, 125, 127, 128, 129], "965": [79, 85], "second": [79, 80, 81, 82, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 104, 107, 116, 117, 119, 121, 122, 123, 125, 127, 128, 129], "sourc": [79, 80, 81, 82, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 104, 107, 115], "jupyt": [79, 80, 81, 82, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 104, 107, 112, 128], "notebook": [79, 80, 81, 82, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 104, 107, 112, 128], "ipynb": [79, 80, 81, 82, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 103, 104, 107], "diabet": [80, 81, 96, 97, 107, 123], "ridg": [80, 96, 97, 107, 109], "load_diabet": [80, 81, 96, 97, 104, 107, 123], "mean_absolute_error": [80, 97], "932": [80, 128], "return_x_i": [80, 81, 96, 97, 104, 107, 123], "as_fram": [80, 81, 96, 97, 104, 107, 123], "ten": [80, 81, 96, 97, 107], "ag": [80, 81, 82, 96, 97, 104, 107, 123], "sex": [80, 81, 96, 97, 104, 107, 117, 121, 123], "bodi": [80, 81, 96, 97, 107], "mass": [80, 81, 96, 97, 107], "averag": [80, 81, 96, 97, 104, 107, 116, 127], "blood": [80, 81, 96, 97, 104, 107], "pressur": [80, 81, 96, 97, 104, 107], "six": [80, 81, 96, 97, 107], "serum": [80, 81, 96, 97, 107], "measur": [80, 81, 96, 97, 104, 107, 117, 119, 121], "s1": [80, 81, 82, 83, 90, 96, 97, 104, 107, 123], "s6": [80, 81, 82, 83, 90, 96, 97, 104, 107, 123], "patient": [80, 81, 96, 97, 107], "quantit": [80, 81, 96, 97, 107], "diseas": [80, 81, 96, 97, 107], "progress": [80, 81, 96, 97, 107], "year": [80, 81, 96, 97, 107], "baselin": [80, 81, 96, 97, 107], "interest": [80, 81, 84, 96, 97, 103, 107, 126, 128, 129], "bmi": [80, 81, 96, 97, 104, 107, 123], "s4": [80, 81, 82, 83, 90, 96, 97, 104, 107, 123], "s5": [80, 81, 82, 83, 90, 96, 97, 98, 99, 104, 107, 123], "038076": [80, 81, 96, 97, 104, 107, 123], "050680": [80, 81, 96, 97, 104, 107, 123], "061696": [80, 81, 96, 97, 104, 107, 123], "002592": [80, 81, 96, 97, 104, 107, 123], "019907": [80, 81, 96, 97, 104, 107, 123], "017646": [80, 81, 96, 97, 104, 107, 123], "001882": [80, 81, 96, 97, 104, 107, 123], "044642": [80, 81, 96, 97, 104, 107, 123], "051474": [80, 81, 96, 97, 104, 107, 123], "039493": [80, 81, 96, 97, 104, 107, 123], "068332": [80, 81, 96, 97, 104, 107, 123], "092204": [80, 81, 96, 97, 104, 107, 123], "085299": [80, 81, 96, 97, 104, 107, 123], "044451": [80, 81, 96, 97, 104, 107, 123], "002861": [80, 81, 96, 97, 104, 107, 123], "025930": [80, 81, 96, 97, 104, 107, 123], "089063": [80, 81, 96, 97, 104, 107, 123], "011595": [80, 81, 96, 97, 104, 107, 123], "034309": [80, 81, 96, 97, 104, 107, 123], "022688": [80, 81, 96, 97, 104, 107, 123], "009362": [80, 81, 96, 97, 104, 107, 123], "005383": [80, 81, 96, 97, 104, 107, 123], "036385": [80, 81, 96, 97, 104, 107, 123], "031988": [80, 81, 96, 97, 104, 107, 123], "046641": [80, 81, 96, 97, 104, 107, 123], "442": [80, 81, 96, 97, 104, 107, 123], "152": [80, 81, 96, 97, 104, 107, 123, 127, 129, 130], "133484": [80, 81, 96, 97, 104, 107, 123], "std": [80, 81, 92, 96, 97, 104, 107, 117, 123], "77": [80, 81, 96, 97, 104, 107, 123, 127, 130], "093005": [80, 81, 96, 97, 104, 107, 123], "min": [80, 81, 92, 96, 97, 104, 107, 123], "87": [80, 81, 96, 97, 104, 107, 123, 127], "140": [80, 81, 96, 97, 104, 107, 123], "500000": [80, 81, 96, 97, 104, 107, 123], "75": [80, 81, 84, 87, 92, 96, 97, 104, 107, 123], "211": [80, 81, 96, 97, 98, 104, 107, 119, 123], "max": [80, 81, 92, 96, 97, 104, 107, 109, 123], "346": [80, 81, 96, 97, 104, 107, 123], "float64": [80, 81, 84, 87, 92, 96, 97, 100, 104, 107, 116, 117, 122, 123], "combin": [80, 81, 82, 96, 97, 103, 107, 119, 129], "data_diabet": [80, 96, 97, 107, 123], "concat": [80, 81, 91, 96, 97, 103, 107, 123], "bp": [80, 81, 96, 97, 104, 107, 123], "s2": [80, 81, 82, 83, 90, 96, 97, 104, 107, 123], "s3": [80, 81, 82, 83, 90, 96, 97, 104, 107, 123], "calcul": 80, "heat": 80, "corr": [80, 97], "xticklabel": 80, "yticklabel": 80, "train_diabet": [80, 96, 97], "test_diabet": [80, 96, 97], "neg_mean_absolute_error": [80, 81, 92, 96, 107, 128], "392": 80, "393": 80, "394": 80, "395": 80, "396": 80, "309": [80, 96, 97], "009716": 80, "005200": 80, "b10eef89b4192178d482d7a1587a248a": [80, 96, 97, 104, 107, 117, 123, 128, 129], "008672": 80, "004438": 80, "008094": 80, "004546": [80, 128], "008444": 80, "004848": [80, 128], "008225": 80, "004656": 80, "test_scor": [80, 81, 83, 84, 87, 90, 96, 97, 98, 99, 100, 107, 119, 128], "45": [80, 104, 119], "444084441470615": 80, "mae": [80, 97], "df_mae": [80, 97], "48": [80, 82], "783874": 80, "47": [80, 130], "573568": 80, "37": 80, "617474": 80, "686852": 80, "558655": 80, "coef_": [80, 104], "sort_valu": 80, "ascend": 80, "inplac": 80, "barh": 80, "color": [80, 81, 90, 103], "blue": 80, "red": 80, "xlabel": [80, 97], "249999999999986": 80, "scatterplot": [80, 90, 92, 97], "v": [80, 97, 115, 120, 129], "2f": [80, 97], "corrcoef": [80, 97], "set_styl": [80, 81, 97], "darkgrid": [80, 81, 97], "scatter": [80, 92, 97], "xmin": [80, 97], "xmax": [80, 97], "get_xlim": [80, 90, 97], "ymin": [80, 97], "ymax": [80, 97], "get_ylim": [80, 90, 97], "ylabel": [80, 97], "01": [80, 85, 92, 97, 98, 99, 105, 116, 119, 121, 122], "verticalalign": [80, 97], "top": [80, 97, 114, 128], "horizontalalign": [80, 97], "right": [80, 97, 98, 99, 119], "fontsiz": [80, 97], "12": [80, 81, 82, 83, 84, 87, 90, 92, 93, 97, 103, 105, 113, 116, 117, 119], "scale": [80, 97, 98, 99, 109, 119, 121, 129], "649999999999999": 80, "347": [80, 107, 121], "35": [80, 82, 119, 129], "plot_example_regress": [80, 85], "leonard": [81, 92, 103], "sass": [81, 92, 103], "l": [81, 82, 83, 90, 92, 96, 98, 99, 103], "math": 81, "09": 81, "410": [81, 87], "411": [81, 87], "some": [81, 82, 83, 90, 91, 110, 113, 116, 117, 119, 121, 122, 124, 125], "outlier": 81, "data_df": 81, "new_df": 81, "145": [81, 97], "150": [81, 117, 128, 129], "590": 81, "580": [81, 127], "597": 81, "595": 81, "reset_index": [81, 82, 83, 90, 98, 99, 103], "plot_stratified_kfold_reg": [81, 85], "53": [81, 127], "settingwithcopywarn": 81, "try": [81, 83, 84, 87, 90, 93, 99, 100, 119, 128], "slice": 81, "loc": 81, "row_index": 81, "col_index": 81, "caveat": 81, "pydata": 81, "user_guid": 81, "view": [81, 110], "versu": 81, "bin": 81, "idea": [81, 124], "chosen": 81, "coupl": 81, "histrogram": 81, "displot": 81, "60": [81, 127], "20": [81, 84, 87, 91, 93, 103, 116, 117, 122, 127, 129], "axisgrid": 81, "facetgrid": 81, "0x7f1d24de7b80": 81, "histogram": 81, "abov": [81, 103, 117, 119, 121, 128], "uniformli": 81, "skew": 81, "toward": 81, "lower": 81, "even": [81, 104, 119, 128, 129], "low": [81, 92, 109, 116], "give": [81, 109, 117, 119, 126, 127, 128], "good": [81, 84, 99, 113, 126, 127], "granular": 81, "num_bin": 81, "num": 81, "bins_on": 81, "qc": 81, "cut": 81, "tolist": [81, 119, 127], "divid": 81, "linear": [81, 87, 98, 99, 104, 116, 117, 119, 121, 122, 129], "cv_stratifi": [81, 83], "scores_strat": 81, "linreg": [81, 104, 109, 116, 117], "354": [81, 103], "355": [81, 103], "357": [81, 127], "358": 81, "359": 81, "449": [81, 119, 129], "opt": [81, 84], "hostedtoolcach": [81, 84], "x64": [81, 84], "python3": [81, 84], "site": [81, 84], "_split": 81, "700": 81, "popul": [81, 103], "member": 81, "less": [81, 92, 114, 124], "445": [81, 127], "446": [81, 119], "447": [81, 119], "448": [81, 119, 129], "compar": [81, 87, 103, 114, 117, 119, 124, 127, 128], "With": [81, 121, 128], "df_score": 81, "boxplot": [81, 103], "higher": [81, 103], "were": [81, 82, 83, 90, 91, 103, 121, 128], "swarmplot": [81, 91], "381": [81, 85], "fmri": [82, 83, 90, 98, 99], "bse": 82, "waskom": [82, 83, 90, 98, 99], "m": [82, 83, 90, 98, 99, 110, 115, 129], "frank": [82, 83, 90, 98, 99], "wagner": [82, 83, 90, 98, 99], "adapt": [82, 83, 90, 98, 99], "engag": [82, 83, 90, 98, 99], "cognit": [82, 83, 90, 98, 99], "context": [82, 83, 90, 98, 99, 121], "cerebr": [82, 83, 90, 98, 99], "cortex": [82, 83, 90, 98, 99], "known": [82, 125, 129], "excel": 82, "spreadsheet": 82, "csv": 82, "ideal": 82, "everyth": [82, 126], "tabul": 82, "organis": [82, 117], "demograph": [82, 117], "diagnost": 82, "behaviour": [82, 114, 128], "manual": [82, 112, 127, 129], "edit": 82, "sure": [82, 90, 110, 115, 117, 119], "readi": [82, 127, 129], "do": [82, 90, 92, 97, 98, 99, 103, 104, 107, 109, 110, 114, 115, 117, 119, 122, 124, 125, 126, 127, 128, 129], "howev": [82, 87, 90, 91, 92, 104, 112, 113, 117, 119, 122, 123, 124, 127, 128, 129], "prune": 82, "fortun": 82, "tool": [82, 113, 121, 127], "deal": [82, 116, 125], "task": [82, 90, 104, 119, 123], "collect": [82, 103, 121], "start": [82, 110, 111, 114, 119, 121, 122, 123, 126, 127, 129], "df_fmri": [82, 83, 90, 98, 99], "subject": [82, 83, 90, 98, 99], "timepoint": [82, 83, 90, 98, 99], "event": [82, 83, 90, 98, 99], "region": [82, 83, 90, 98, 99], "signal": [82, 83, 90, 98, 99], "s13": [82, 83, 90, 98, 99], "18": [82, 83, 90, 93, 98, 99, 116, 117], "stim": [82, 83, 90, 98, 99], "pariet": [82, 83, 90, 98, 99], "017552": [82, 83, 90, 98, 99], "14": [82, 83, 90, 92, 93, 98, 99, 117, 127], "080883": [82, 83, 90, 98, 99], "s12": [82, 83, 90, 98, 99], "081033": [82, 83, 90, 98, 99], "s11": [82, 83, 90, 98, 99], "046134": [82, 83, 90, 98, 99], "s10": [82, 83, 90, 98, 99], "037970": [82, 83, 90, 98, 99], "seen": [82, 129], "pivot": [82, 83, 90, 98, 99], "tabl": [82, 83, 90], "becom": [82, 124, 129], "identifi": [82, 84, 116, 117, 121, 127], "rule": [82, 109, 129], "t": [82, 87, 90, 119, 127, 128, 129], "duplic": 82, "frontal": [82, 83, 90, 98, 99], "s0": [82, 83, 90, 98, 99], "cue": [82, 83, 90, 98, 99], "007766": [82, 98, 99], "006899": [82, 98, 99], "021452": [82, 98, 99], "039327": [82, 98, 99], "016440": [82, 98, 99], "000300": [82, 98, 99], "021054": [82, 98, 99], "035735": [82, 98, 99], "024296": [82, 98, 99], "033220": [82, 98, 99], "sutil": 82, "For": [82, 84, 87, 92, 97, 104, 109, 110, 112, 113, 116, 119, 121, 122, 123, 125, 128, 129], "place": 82, "scan": 82, "metadata": 82, "23": [82, 90, 117, 127], "31": [82, 119], "29": [82, 127], "43": [82, 97], "28": [82, 98], "34": [82, 127, 128], "scanner": 82, "6": [82, 83, 87, 90, 91, 92, 93, 104, 113, 114, 116, 121, 122, 124, 125, 128], "b": [82, 110, 129], "df_meta": 82, "s7": [82, 83, 90], "s8": [82, 83, 90], "s9": [82, 83, 90], "13": [82, 83, 87, 90, 93, 105, 114, 117], "16": [82, 83, 90, 92, 93, 101, 119, 121, 127], "036739": 82, "131641": 82, "17": [82, 83, 90, 92, 93, 119, 127], "004900": 82, "036362": 82, "030099": 82, "121574": 82, "000643": 82, "051040": 82, "009959": 82, "103513": 82, "532": [82, 83, 90, 98, 99], "suppos": [82, 84, 117], "dure": [82, 83, 90, 113, 116, 117, 119, 121], "There": [82, 124, 126, 129], "009038": 82, "009642": 82, "047859": 82, "026727": 82, "085040": 82, "086399": 82, "069775": 82, "070558": 82, "115321": 82, "154058": 82, "010535": 82, "061817": 82, "034386": 82, "130267": 82, "15": [82, 83, 90, 92, 93, 117, 119, 121], "002170": 82, "048007": 82, "038257": 82, "134828": 82, "004290": 82, "035395": 82, "266": [82, 83, 90, 98, 99], "sinc": [82, 87, 92, 96, 98, 119, 129], "previou": [82, 87, 91, 92, 110, 122, 127, 128, 129], "multiindex": 82, "trick": 82, "underscor": 82, "_": [82, 91, 103, 110, 129], "frontal_cu": 82, "parietal_stim": 82, "530": [82, 85], "run_combine_panda": [82, 85], "groupkfold": 83, "kimia": 83, "nazarzadeh": 83, "necessari": [83, 112, 117, 122], "librari": [83, 112, 114], "260": [83, 127], "261": [83, 127], "infer": [83, 90], "studi": [83, 90, 117], "brain": [83, 90, 114, 116, 117], "condit": [83, 90], "groupbi": [83, 90], "1064": [83, 90], "exactli": [83, 90, 121, 129], "rf": [83, 87, 91, 92, 100, 103, 109, 119, 122, 127], "299": [83, 122], "300": [83, 122], "301": [83, 104, 122], "302": [83, 101, 104, 122], "303": [83, 104, 122], "304": [83, 104, 122], "305": [83, 104, 122], "6841826838300122": 83, "629": 83, "630": 83, "631": 83, "632": 83, "633": 83, "634": 83, "635": 83, "636": 83, "5902255639097744": 83, "07": [83, 85, 88, 114], "365": [83, 128], "366": [83, 128], "368": 83, "369": 83, "370": 83, "371": [83, 116], "372": 83, "6879699248120301": 83, "806": [83, 85, 96, 100], "run_grouped_cv": [83, 85], "04": [84, 101], "325": 84, "three": [84, 87, 91, 93, 100, 103, 110, 114, 119, 127, 128], "isin": [84, 87, 91, 93, 100, 103, 110, 119], "sepal": [84, 87, 93, 100, 103, 125, 129], "length": [84, 87, 93, 100, 103], "petal": [84, 87, 93, 100, 103, 125, 129], "850": 84, "851": 84, "853": 84, "855": [84, 128], "856": 84, "857": 84, "90": [84, 87, 127], "70": [84, 87], "assess": [84, 87, 117, 121], "unbalanc": [84, 87], "df_unbalanc": [84, 87], "value_count": [84, 87], "30": [84, 87, 90, 92, 100, 117, 127], "account": [84, 117], "imbal": 84, "suitabl": [84, 113, 117], "balanced_accuraci": [84, 87, 128], "balanced_accuracy_scor": 84, "42": [84, 87, 90, 98, 99, 103, 121, 127, 128], "test_balanced_accuraci": [84, 87], "939": 84, "940": 84, "941": 84, "942": 84, "943": 84, "80": [84, 87, 127], "944": 84, "945": 84, "_classif": 84, "2184": 84, "8625": 84, "8678571428571429": 84, "u": [84, 91, 103, 104, 113, 117, 121, 127, 128], "correctli": 84, "precis": [84, 128], "ratio": 84, "tp": 84, "precision_scor": 84, "030": 84, "031": 84, "032": 84, "033": [84, 117], "034": 84, "035": 84, "036": 84, "037": 84, "805": [84, 85, 96, 100, 119], "run_simple_binary_classif": [84, 85], "00": [85, 88, 92, 94, 100, 101, 105, 108, 116, 121, 122, 127], "715": 85, "execut": [85, 88, 94, 101, 105, 108, 110], "auto_examples_00_start": 85, "02": [85, 92, 94, 101, 121, 122], "mb": [85, 88, 94, 101, 105, 108], "At": [87, 114, 124, 129], "statist": [87, 92, 103, 114, 126, 128], "repeatedstratifiedkfold": [87, 93, 127, 128], "corrected_ttest": [87, 127], "401": 87, "402": 87, "406": 87, "407": 87, "408": 87, "409": 87, "roc_auc": [87, 103, 127, 128], "scores1": [87, 112, 119, 127], "495": 87, "496": 87, "497": 87, "498": 87, "499": 87, "500": 87, "scores2": [87, 112, 119, 127], "048": 87, "049": 87, "050": 87, "051": 87, "052": 87, "053": [87, 117], "054": 87, "third": [87, 128], "kernel": [87, 98, 99, 117, 119, 121, 122, 129], "scores3": [87, 112, 119, 127], "svm__kernel": [87, 99, 119], "svm_linear": 87, "19": [87, 93, 116, 119, 127], "128": [87, 99], "129": [87, 99], "130": [87, 99, 127], "131": [87, 99], "132": [87, 99, 127], "133": 87, "134": 87, "correct": [87, 122, 127], "stats_df": [87, 127], "model_2": [87, 122, 127], "val": [87, 127], "175075": 87, "062567": 87, "895662": 87, "151390": 87, "782741": 87, "test_roc_auc": [87, 103, 127], "108944": 87, "835331": 87, "236153": 87, "685092": 87, "669010": 87, "324331": 87, "viewer": 87, "plot_scor": [87, 112, 127], "uncom": [87, 127], "line": [87, 110, 127], "read": [87, 91, 110, 114, 115, 124, 126, 127, 129], "holoviz": [87, 127], "getting_start": [87, 127], "build_app": [87, 127], "deploi": [87, 121, 127], "pane": 87, "unknown": 87, "keyword": [87, 92, 116], "argument": [87, 92, 104], "widget": 87, "could": [87, 90, 92, 104, 114, 116, 121, 125, 127, 128, 129], "button_typ": 87, "look": [87, 90, 92, 97, 104, 109, 116, 119, 121, 122, 124, 125, 126, 128, 129], "interact": [87, 90, 114, 121, 127], "zoom": [87, 127], "hover": [87, 127], "button": [87, 127], "514": [87, 88], "plot_simple_model_comparison": [87, 88], "auto_examples_01_model_comparison": 88, "demonstr": [89, 110, 122, 128], "analys": [90, 91, 99, 117], "groupshufflesplit": 90, "695": 90, "731": [90, 91], "732": [90, 91], "733": [90, 91], "734": [90, 91], "735": 90, "736": 90, "737": 90, "7218303650149884": 90, "decod": [90, 117], "claim": [90, 103], "acquir": 90, "randomli": 90, "characterist": 90, "unseen": [90, 124], "whom": 90, "either": [90, 92, 109, 110, 117, 129], "later": [90, 93, 110, 127], "840": 90, "841": 90, "842": 90, "843": 90, "844": 90, "845": 90, "846": 90, "7210526315789474": 90, "visual": [90, 113, 114, 124, 126], "part": [90, 112, 114, 116, 124, 127, 129], "doe": [90, 124, 129], "raw": [90, 92, 129], "hue": [90, 103], "set_titl": [90, 91, 92], "pre_x": 90, "pre_df": 90, "join": 90, "parietal__": 90, "frontal__": 90, "noth": [90, 119, 128], "standardscal": [90, 109, 119, 121, 123, 128, 129], "seem": [90, 98, 99, 103, 119, 126, 127, 128], "quit": [90, 113, 116, 121], "linearli": 90, "clf": 90, "figur": [90, 110], "xlim": 90, "ylim": 90, "xx": 90, "linspac": 90, "yy": 90, "meshgrid": 90, "xy": 90, "vstack": 90, "ravel": 90, "xy_df": 90, "reshap": 90, "contour": 90, "alpha": [90, 116], "linestyl": 90, "boundari": [90, 119], "865": [90, 94], "plot_groupcv_inspect_svm": [90, 94], "720": 91, "728": 91, "729": 91, "730": 91, "intern": [91, 121, 122, 128, 129], "_important_": 91, "caution": 91, "proper": [91, 103, 115, 126], "randomforestclassifi": [91, 109, 119], "understandhow": 91, "to_plot": 91, "feature_importances_": [91, 103], "barplot": 91, "tight_layout": [91, 103], "review": [91, 110], "myself": 91, "wander": 91, "about": [91, 110, 117, 121, 122, 124, 126, 127, 128, 129], "entir": [91, 128, 129], "22": [91, 117, 127], "179": [91, 103], "180": 91, "181": 91, "182": 91, "183": 91, "184": [91, 117, 127], "i_fold": [91, 103], "enumer": [91, 103], "this_import": [91, 103], "828": [91, 94], "plot_inspect_random_forest": [91, 94], "make_regress": [92, 116, 117, 122], "pre": [92, 113, 115, 129, 130], "process": [92, 97, 119, 125, 128, 129], "normal": [92, 104, 109, 110, 117, 129, 130], "reduct": 92, "24": [92, 119, 127, 130], "754": [92, 104], "755": 92, "n_inform": 92, "nois": [92, 117], "first_two": 92, "determin": [92, 119, 129], "belong": [92, 104], "x_to_zscor": 92, "summari": [92, 110], "111790": 92, "141618": 92, "023682": 92, "167718": 92, "686170": 92, "977322": 92, "972988": 92, "087946": 92, "895011": 92, "79": [92, 110], "741431": 92, "069985": 92, "772593": 92, "552990": 92, "659172": 92, "204": [92, 98, 119], "293317": 92, "751257": 92, "484100": 92, "759419": 92, "688891": 92, "64": 92, "724008": 92, "206729": 92, "194442": 92, "028152": 92, "174160": 92, "789944": 92, "421885": 92, "724302": 92, "772156": 92, "408321": 92, "392804": 92, "943621": 92, "256723": 92, "383145": 92, "259309": 92, "216": 92, "221085": 92, "explicitli": [92, 98, 117, 119], "declar": 92, "init": 92, "special": 92, "cannot": [92, 117, 129], "tree": [92, 109], "pipeline_cr": [92, 97, 100, 104, 117, 121, 122], "select_vari": [92, 109], "n_compon": [92, 97, 129], "n_estim": [92, 122], "becaus": [92, 104, 117, 119, 121, 124, 126, 127, 128, 129], "creator": [92, 93, 96, 97, 98, 99, 103, 104, 116, 119, 123, 128, 129], "simpli": [92, 116, 117, 121, 122, 129], "did": [92, 99], "hand": [92, 110, 116, 117, 122, 125], "r2": [92, 97, 117, 128], "x_after_pca": 92, "earlier": 92, "x_after_zscor": 92, "high": [92, 116], "pca__pca0": [92, 104], "pca__pca1": [92, 104], "784": [92, 129], "785": [92, 129], "__x_to_zscor": 92, "786": 92, "787": [92, 129], "788": [92, 129], "790": [92, 129], "791": [92, 129], "792": [92, 119], "725696": 92, "582295": 92, "314458": 92, "942935": 92, "977336": 92, "463217": 92, "525139": 92, "219493": 92, "618559": 92, "908592": 92, "395105": 92, "743192": 92, "96": [92, 93, 130], "328111": 92, "670912": 92, "97": [92, 93, 103], "573900": 92, "401304": 92, "98": [92, 93, 127], "918034": 92, "137435": 92, "99": [92, 93, 127], "894566": 92, "357729": 92, "1__": 92, "4__": 92, "013728": 92, "426259": 92, "364686": 92, "944446": 92, "118838": 92, "931848": 92, "004437": 92, "030684": 92, "309092": 92, "523891": 92, "206189": 92, "157667": 92, "099154": 92, "028182": 92, "335538": 92, "252795": 92, "049139": 92, "133702": 92, "240085": 92, "443863": 92, "deviat": [92, 117], "000000e": 92, "689893e": 92, "387779e": 92, "005038e": 92, "013728e": 92, "010202e": 92, "576015e": 92, "463286e": 92, "763131e": 92, "456486e": 92, "488094e": 92, "018781e": 92, "113700e": 92, "184776e": 92, "819": [92, 94], "plot_preprocess": [92, 94], "shufflesplit": 93, "083": [93, 119], "084": [93, 119], "088": [93, 119], "089": [93, 119], "request": [93, 114], "090": [93, 117, 119], "091": 93, "092": 93, "093": [93, 98], "094": [93, 98], "008862": 93, "004774": 93, "42489ff0163b2f12752440a6b7ef74c7": 93, "008759": 93, "005692": 93, "009249": 93, "005157": 93, "008784": 93, "004968": 93, "008435": 93, "004946": 93, "008432": 93, "005085": 93, "009674": 93, "006552": 93, "007932": 93, "005405": 93, "009311": 93, "004817": [93, 128], "009134": 93, "005025": 93, "008809": [93, 128], "005325": 93, "008106": 93, "005100": 93, "008681": 93, "005167": 93, "010259": 93, "005781": 93, "009474": 93, "004740": 93, "009017": 93, "005480": 93, "008474": [93, 128], "004849": 93, "009067": 93, "005036": 93, "008934": 93, "006186": 93, "008725": [93, 107], "005577": 93, "cv_predict": 93, "repeat0_p0": [93, 121], "repeat1_p0": [93, 121], "repeat2_p0": [93, 121], "repeat3_p0": 93, "_pipelin": 93, "pipelineinspector": 93, "0x7f1d21ca1120": 93, "484": [93, 94], "run_binary_inspect_fold": [93, 94], "996": 94, "auto_examples_02_inspect": 94, "Then": [96, 104, 115, 122, 124, 129], "lya": 96, "paa": 96, "olivero": 96, "sami": [96, 104, 117, 130], "hamdan": [96, 104, 117, 130], "crucial": [96, 117], "27": [96, 117, 127], "771": 96, "772": 96, "target_cr": [96, 123], "target_pipeline_cr": [96, 117], "0x7f1d21ddd390": 96, "801": [96, 119], "802": [96, 100, 119], "803": [96, 100, 119], "008383": 96, "005237": 96, "007774": 96, "006963": 96, "007674": 96, "004252": 96, "007535": 96, "004767": [96, 128], "007555": 96, "004556": 96, "51": [96, 103, 116, 117, 121, 122, 127, 128, 129], "51357151914367": 96, "135": [96, 101, 127, 130], "run_apply_to_target": [96, 101], "reduc": [97, 104, 129], "dimension": [97, 104, 116, 119, 129], "subset": [97, 119, 124], "georgio": 97, "antonopoulo": 97, "kaustubh": [97, 130], "r": [97, 107], "patil": [97, 130], "970": 97, "assign": [97, 110], "pca1": 97, "pca2": 97, "pca_feats1": 97, "pca_feats2": 97, "999": 97, "__pca1": 97, "44": [97, 104, 107, 127], "000": 97, "__pca2": 97, "001": [97, 98, 99, 119, 121], "__categor": [97, 123], "0x7f1d221d74c0": 97, "002": 97, "003": 97, "005": 97, "007": 97, "008": [97, 125], "026569": 97, "011151": 97, "025497": 97, "011901": 97, "023939": 97, "012536": 97, "027425": 97, "011586": 97, "025100": 97, "012207": 97, "3107976743678922": 97, "untouch": 97, "data_processed1": 97, "data_processed2": 97, "pca_feats1__pca0": 97, "161": 97, "063175": 97, "133274": 97, "108111": 97, "075741": 97, "085907": 97, "054779": 97, "030464": 97, "033246": 97, "015491": 97, "098172": 97, "033216": 97, "015999": 97, "050783": 97, "032289": 97, "012577": 97, "067737": 97, "013504": 97, "315": 97, "045025": 97, "031454": 97, "010903": 97, "001078": 97, "pca_feats2__pca0": 97, "234716": 97, "012141": 97, "078784": 97, "006290": 97, "026190": 97, "341472": 97, "348168": 97, "269257": 97, "286067": 97, "309025": 97, "362": [97, 128], "706": [97, 101, 128], "run_example_pca_featset": [97, 101], "061": 98, "062": 98, "attempt": [98, 99], "095": 98, "096": 98, "097": 98, "098": 98, "099": 98, "5939164168576971": [98, 99], "gamma": [98, 99, 119, 121], "But": [98, 103, 104, 119, 121, 126, 128, 129], "rbf": [98, 99, 119], "auto": [98, 119], "1e": [98, 99, 119, 121, 122], "speed": [98, 99], "205": 98, "206": [98, 117, 119], "207": [98, 119], "208": [98, 119], "svm__c": [98, 99, 119, 121, 122], "209": [98, 119], "inner": [98, 99, 119, 121, 122, 130], "210": [98, 119], "svm__gamma": [98, 99, 119], "212": [98, 119, 127], "set_column_typ": [98, 119, 121, 128], "setcolumntyp": [98, 119, 121, 128], "svc": [98, 109, 119, 121, 128, 129], "213": [98, 119], "214": [98, 119], "215": 98, "7087109857168048": [98, 99], "best_params_": [98, 99, 119], "best_estimator_": [98, 99], "_gamma": [98, 99], "592": [98, 101], "run_hyperparameter_multiple_grid": [98, 101], "38": [99, 127], "984": 99, "985": 99, "39": [99, 127], "011": [99, 117], "012": 99, "013": 99, "014": 99, "015": 99, "016": 99, "017": 99, "optim": [99, 119, 121, 129], "find": [99, 119, 126], "best": [99, 119, 129], "126": 99, "127": 99, "588308940222183": 99, "much": [99, 119, 121, 124], "explor": [99, 104, 121, 122], "too": [99, 119], "poli": 99, "672": 99, "673": 99, "674": 99, "675": 99, "676": 99, "677": 99, "678": 99, "679": 99, "680": 99, "lest": 99, "41": [99, 117, 122, 127], "109": [99, 119], "110": [99, 122], "111": [99, 119], "112": [99, 119, 122], "113": [99, 119, 122], "114": [99, 119, 122], "115": [99, 119, 122], "116": [99, 119, 122], "5188855581026275": 99, "happen": [99, 121, 122], "192": 99, "193": 99, "194": 99, "196": [99, 116], "197": [99, 116], "198": [99, 116, 119], "199": [99, 119], "202": [99, 116, 119, 121], "203": [99, 116, 119], "826": [99, 101], "run_hyperparameter_tun": [99, 101], "logist": [100, 109, 127, 129], "796": [100, 119, 129], "797": [100, 119, 129], "petal_width": [100, 103, 119, 125, 128, 129], "model_sep": 100, "model_pet": 100, "__sepal": [100, 129], "804": [100, 119], "__petal": [100, 129], "0x7f1d247e0d00": 100, "0x7f1d247e1a50": 100, "807": 100, "809": 100, "811": 100, "992": [100, 117], "993": [100, 117], "994": [100, 117], "995": 100, "85": 100, "042": [100, 101], "run_stacked_model": [100, 101], "auto_examples_03_complex_model": 101, "relat": [102, 117, 125], "stratifiedbootstrap": 103, "46": 103, "343": [103, 107, 121], "344": [103, 107, 121], "hypothesi": 103, "ml": [103, 114], "classic": 103, "frequentist": 103, "altern": 103, "contrast": 103, "gap": 103, "approach": [103, 116, 119, 124, 129], "below": [103, 113, 116], "2000": 103, "n_bootstrap": 103, "n_element": 103, "len": [103, 104, 117], "scores_ncr": 103, "350": 103, "351": 103, "352": 103, "353": 103, "356": 103, "next": [103, 113, 115, 123, 125, 129], "again": [103, 117, 119, 121, 124, 129], "tell": [103, 117, 128], "confound_remov": [103, 104, 109, 117], "scores_cr": 103, "171": 103, "__featur": [103, 117], "__confound": [103, 117], "172": 103, "173": 103, "174": 103, "177": 103, "easier": [103, 110, 129], "long": 103, "df_ncr_metric": 103, "df_cr_metric": 103, "df_metric": 103, "catplot": 103, "col": 103, "swarm": 103, "them": [103, 110, 112, 113, 116, 119, 127, 128, 129], "pair": 103, "systemat": 103, "differec": 103, "df_diff_metr": 103, "whisker": 103, "box": [103, 114], "whi": 103, "axhlin": 103, "roc": 103, "auc": 103, "term": [103, 125, 129], "mayb": [103, 127], "percentil": [103, 109], "amount": [103, 114, 121], "ncr_fi": 103, "cr_fi": 103, "feature_import": 103, "dodg": 103, "diff_fi": 103, "axvlin": 103, "638": [103, 105], "plot_confound_removal_classif": [103, 105], "most": [104, 113, 116, 117, 121, 124, 129], "remove_confound": 104, "sometim": [104, 117, 121, 122, 123], "discuss": 104, "df_featur": 104, "furthermor": 104, "put": [104, 117], "901": 104, "902": 104, "0x7f1d24de6f80": 104, "feature_nam": [104, 127], "904": 104, "905": [104, 123], "906": [104, 123], "908": [104, 123], "909": [104, 123], "df_deconfound": 104, "assum": 104, "closer": [104, 109, 128], "understand": [104, 114, 117, 121, 126, 127, 129], "achiev": [104, 117, 123, 128, 129], "autoclass": 104, "029271": 104, "057228": 104, "009658": 104, "019424": 104, "012310": 104, "028194": 104, "005874": 104, "047538": 104, "015568": 104, "024667": 104, "061639": 104, "082913": 104, "076494": 104, "039983": 104, "017885": 104, "004736": 104, "036479": 104, "081307": 104, "007659": 104, "025897": 104, "049135": 104, "029380": 104, "000071": 104, "013139": 104, "032449": 104, "032631": 104, "012234": 104, "025295": 104, "037349": 104, "0x7f1d224c0b50": 104, "307": [104, 122], "308": [104, 122], "df_transform": 104, "pca__pca2": 104, "pca__pca7": 104, "pca__pca8": 104, "014051": 104, "075715": 104, "017395": 104, "008604": 104, "002330": 104, "099883": 104, "062829": 104, "014516": 104, "024022": 104, "002075": 104, "029015": 104, "053253": 104, "032477": 104, "001197": 104, "002579": 104, "035162": 104, "001324": 104, "106807": 104, "006566": 104, "003545": 104, "003951": 104, "025445": 104, "000421": 104, "002095": 104, "000517": 104, "lastli": [104, 117], "752": 104, "753": 104, "756": 104, "758": 104, "759": 104, "042650": 104, "017522": 104, "049460": 104, "016129": 104, "044574": 104, "015947": 104, "054302": 104, "019153": 104, "047747": 104, "016018": 104, "280": [104, 105, 119], "run_return_confound": [104, 105], "918": 105, "auto_examples_04_confound": 105, "extend": [106, 128], "variou": 106, "aspect": [106, 129], "make_scor": 107, "register_scor": 107, "59": [107, 119, 123], "240": 107, "241": 107, "242": 107, "243": 107, "244": 107, "245": 107, "010484": 107, "004939": 107, "009098": 107, "004563": 107, "008420": 107, "004853": 107, "005106": 107, "009235": 107, "004794": 107, "264653948271885": 107, "thing": [107, 124, 129], "r2_corr": [107, 128], "345": [107, 121], "348": 107, "test_neg_mean_absolute_error": 107, "test_r2_corr": 107, "264654": 107, "486498": 107, "take": [107, 121, 129], "def": 107, "pearson_scor": 107, "squeez": 107, "437": 107, "438": [107, 127], "439": 107, "440": 107, "441": 107, "330": [107, 108], "run_custom_scorers_regress": [107, 108], "auto_examples_05_custom": 108, "descript": [109, 110, 129], "short": [109, 110, 117], "underli": [109, 117, 121], "link": [109, 110, 126, 129], "unit": [109, 114], "scaler_robust": 109, "median": 109, "iqr": 109, "robustscal": [109, 119], "scaler_minmax": 109, "minmaxscal": 109, "scaler_maxab": 109, "maxabsscal": 109, "scaler_norm": 109, "norm": 109, "scaler_quantil": 109, "uniform": [109, 130], "robust": [109, 112], "quantiletransform": 109, "scaler_pow": 109, "gaussianis": 109, "powertransform": 109, "select_univari": 109, "genericunivariateselect": 109, "select_percentil": 109, "rank": 109, "selectpercentil": 109, "select_k": [109, 119], "selectkbest": [109, 119], "select_fdr": 109, "fdr": 109, "selectfdr": 109, "select_fpr": 109, "fpr": 109, "selectfpr": 109, "select_fw": 109, "fwe": 109, "selectfw": 109, "variancethreshold": 109, "drop_column": 109, "dropcolumn": 109, "change_column_typ": 109, "changecolumntyp": 109, "filtercolumn": 109, "princip": [109, 129], "svr": [109, 122, 123], "randomforestregressor": 109, "extratreesclassifi": 109, "extratreesregressor": 109, "adaboost": 109, "adaboostclassifi": 109, "adaboostregressor": 109, "bag": 109, "baggingclassifi": 109, "baggingregressor": 109, "gradientboost": 109, "gradient": 109, "boost": 109, "gradientboostingclassifi": 109, "gradientboostingregressor": 109, "stackingclassifi": [109, 122], "stackingregressor": [109, 122], "gauss": 109, "gaussianprocessclassifi": 109, "gaussianprocessregressor": 109, "logit": [109, 119, 127], "aka": 109, "maxent": 109, "logisticregress": [109, 119], "logitcv": 109, "logisticregressioncv": 109, "l2": [109, 119], "ridgeclassifi": 109, "ridgecv": 109, "built": [109, 114, 122, 127, 128, 129], "ridgeclassifiercv": 109, "sgd": 109, "minim": 109, "empir": 109, "loss": [109, 117], "sgdclassifi": 109, "sgdregressor": 109, "nb_bernoulli": 109, "multivari": 109, "bernoulli": 109, "bernoullinb": 109, "nb_categor": 109, "categoricalnb": 109, "nb_complement": 109, "complementnb": 109, "nb_gaussian": 109, "gaussiannb": 109, "nb_multinomi": 109, "multinomi": 109, "multinomialnb": 109, "dynamicselect": [109, 130], "dummyclassifi": 109, "dummyregressor": 109, "fork": 110, "com": [110, 124], "repositori": 110, "never": [110, 129], "offici": [110, 113], "guid": 110, "clone": 110, "virtual": [110, 113], "pip": [110, 112, 113], "branch": [110, 115], "fix": [110, 130], "refactor": [110, 130], "feat": 110, "prefix": 110, "git": [110, 115], "checkout": [110, 115], "help": [110, 113, 114, 117, 121, 127, 129], "commit": [110, 115], "regularli": 110, "On": [110, 117, 128], "save": [110, 129], "smaller": 110, "semant": 110, "suit": [110, 121], "tox": 110, "push": [110, 115], "open": 110, "displai": [110, 121, 127], "submit": 110, "templat": 110, "web": 110, "interfac": [110, 122], "meet": 110, "directori": 110, "rare": 110, "circumst": 110, "coverag": 110, "decreas": 110, "report": 110, "codecov": 110, "usag": [110, 113, 124, 129], "draft": [110, 115], "id": 110, "liner": [110, 127], "newsfrag": 110, "bug": [110, 130], "bugfix": 110, "enhanc": 110, "enh": 110, "improv": [110, 113], "miscellan": 110, "misc": 110, "record": 110, "101": [110, 122], "content": 110, "typo": 110, "intro": 110, "biggest": 110, "fan": 110, "yourself": 110, "contributor": 110, "inc": 110, "against": 110, "someon": 110, "core": [110, 124, 127], "team": 110, "success": [110, 119, 124], "pytest": 110, "come": [110, 121, 125, 129], "intend": 110, "cd": 110, "_build": 110, "situat": 110, "clean": [110, 113], "rest": 110, "rst": [110, 115], "plot_": 110, "run_": 110, "dependend": 110, "block": 110, "comment": 110, "render": [110, 128], "emb": 110, "within": [110, 116, 117, 122, 124, 125, 128], "shall": 110, "preced": 110, "issu": [112, 115, 121, 130], "bokeh": [112, 113], "These": [112, 113, 116, 128], "develop": [112, 113, 114, 115, 130], "usual": [112, 119, 129], "through": [112, 129], "manag": 112, "conda": [112, 113], "forg": 112, "standalon": 112, "applic": [112, 116, 117, 121], "browser": 112, "jupyter_bokeh": 112, "servabl": 112, "0rc1": 113, "0b1": 113, "nevertheless": [113, 129], "although": 113, "strongli": 113, "recommend": [113, 125], "environ": [113, 114, 128], "promin": 113, "venv": 113, "env": 113, "latest": [113, 115, 130], "therefor": [113, 116, 117, 128, 129], "oftentim": 113, "newest": 113, "sens": [113, 119], "aim": [113, 114, 129], "pypi": [113, 115], "relas": 113, "yet": [113, 125], "insal": 113, "mod": 113, "orient": 114, "aml": 114, "institut": 114, "neurosci": [114, 116], "medicin": 114, "inm": 114, "thought": [114, 129], "research": [114, 116, 117], "simpler": 114, "abstract": 114, "power": [114, 121, 122], "minor": [114, 115], "flexibilii": 114, "video": 114, "tutori": 114, "offer": [114, 125], "essenti": [114, 121], "benefit": 114, "therebi": 114, "avoid": [114, 117, 119], "nice": [114, 125, 128, 129], "system": [114, 115], "accord": [114, 116, 122, 130], "setup": [114, 126], "suggest": 114, "deeper": [114, 121, 126, 127], "topic": [114, 126, 127], "overview": [114, 121, 127, 129], "contribut": 114, "local": 114, "pull": [114, 115], "guidelin": 114, "write": [114, 129], "maintain": 114, "frequenli": 114, "ask": 114, "question": [114, 117], "dev150": 114, "2022": [114, 117], "major": 115, "micro": 115, "devn": 115, "distanc": 115, "setuptools_scm": 115, "plugin": 115, "tag": 115, "increment": [115, 129], "segment": 115, "publish": 115, "testpypi": 115, "onc": [115, 121, 124, 126, 129], "mileston": 115, "reach": 115, "close": 115, "towncrier": 115, "proceed": [115, 129], "sync": 115, "rebas": 115, "changelog": 115, "properli": 115, "reflect": 115, "whats_new": 115, "chage": 115, "pr": 115, "merg": 115, "via": [115, 126], "vx": 115, "setuptools_scm_debug": 115, "dir": 115, "dist": 115, "bump": [115, 130], "vd": 115, "neuroimag": [116, 117], "typic": 116, "problemat": 116, "due": 116, "curs": 116, "especi": 116, "recent": 116, "propos": 116, "fluid": 116, "intellig": 116, "sustain": 116, "attent": 116, "connect": [116, 117], "nutshel": 116, "summar": 116, "subsequ": 116, "commonli": [116, 129], "principl": 116, "leverag": [116, 121], "workflow": [116, 121, 126, 129], "x_name": [116, 122], "feature_": [116, 117, 122], "cbpm_pipeline_cr": 116, "final_model": [116, 121], "feature_1": [116, 117, 122], "feature_2": [116, 117, 122], "feature_3": [116, 117, 122], "feature_4": [116, 117, 122], "feature_5": [116, 117, 122], "feature_6": [116, 117, 122], "feature_7": [116, 117, 122], "feature_8": [116, 117, 122], "feature_9": [116, 117, 122], "feature_10": [116, 117, 122], "feature_11": [116, 117, 122], "feature_12": [116, 117, 122], "feature_13": [116, 117, 122], "feature_14": [116, 117, 122], "feature_15": [116, 117, 122], "feature_16": [116, 117, 122], "feature_17": [116, 117, 122], "feature_18": [116, 117, 122], "feature_19": [116, 117, 122], "feature_20": [116, 122], "No": 116, "rid": 116, "284": [116, 119], "329": 116, "413": 116, "454": [116, 128], "customis": [116, 122], "increas": 116, "459": 116, "460": 116, "461": 116, "462": 116, "cbpm__significance_threshold": 116, "noteworthi": 116, "sign": 116, "spearmanr": 116, "463": 116, "464": 116, "0x7f1d290c6c20": 116, "0x7f1d3a1777f0": 116, "0x7f1d3a187b30": 116, "guess": 116, "spearman": 116, "xilin": 116, "individu": [116, 121, 128], "behavior": [116, 117, 121, 130], "nat": 116, "protoc": 116, "2017": [116, 117], "mar": [116, 117], "506": 116, "518": 116, "emili": 116, "fingerprint": 116, "2015": 116, "nov": 116, "1664": 116, "71": 116, "rosenberg": 116, "monica": 116, "neuromark": 116, "whole": 116, "jan": [116, 117], "165": 116, "271": [116, 121], "ultim": 117, "real": [117, 121], "world": [117, 121], "scenario": [117, 128, 129], "relationship": 117, "un": 117, "observ": 117, "effect": [117, 121], "potenti": [117, 121], "often": [117, 124, 129], "similarli": [117, 121], "rather": 117, "jointli": 117, "prevent": [117, 119], "laid": 117, "rel": [117, 122], "littl": 117, "involv": 117, "simul": 117, "artifici": [117, 122, 129], "normal_dist_conf_on": 117, "normal_dist_conf_two": 117, "noise_conf_on": 117, "rand": 117, "noise_conf_two": 117, "multipli": 117, "factor": 117, "confound_on": 117, "confound_two": 117, "prefer": 117, "human": 117, "readabl": 117, "confound_1": 117, "confound_2": 117, "my_target": 117, "distinguish": [117, 122, 129], "predictor": 117, "accordingli": [117, 124], "think": 117, "parametris": 117, "initialis": [117, 122], "605": 117, "606": 117, "608": 117, "609": 117, "feature_0": 117, "610": 117, "613": 117, "615": 117, "616": 117, "055405": 117, "013107": 117, "054287": 117, "012623": 117, "053797": 117, "012990": 117, "055390": 117, "012812": 117, "063970": 117, "013138": 117, "slightli": 117, "target_confound_remov": 117, "0x7f1d220023b0": 117, "insert": 117, "importantli": [117, 121, 124, 125, 129], "986": 117, "0x7f1d220033d0": 117, "988": 117, "989": 117, "990": 117, "space": 117, "transformedtargetwarn": 117, "072": [117, 119], "011864": 117, "004760": 117, "014585": 117, "006007": 117, "013347": 117, "004823": 117, "012528": 117, "004612": 117, "012166": 117, "004943": 117, "fashion": 117, "reason": 117, "further": [117, 124], "consider": 117, "why": [117, 119, 126], "mitig": 117, "bia": 117, "accur": 117, "argu": 117, "appropri": 117, "valuabl": [117, 121, 124], "difficult": [117, 119], "challeng": 117, "ineffect": 117, "fact": [117, 121], "collid": 117, "spuriou": 117, "evid": 117, "leak": [117, 124], "bias": 117, "care": [117, 129], "thorough": 117, "strength": 117, "limit": 117, "techniqu": [117, 119, 121], "rao": 117, "anil": 117, "presenc": 117, "volum": 117, "april": 117, "49": 117, "snoek": 117, "luka": 117, "januari": 117, "2019": [117, 127], "741": 117, "760": 117, "he": 117, "tong": 117, "neural": [117, 129], "network": [117, 129], "februari": 117, "2020": 117, "116276": 117, "practic": 117, "knowledg": [117, 121], "discoveri": 117, "databas": 117, "scienc": [117, 124], "demo": 117, "track": 117, "2021": 117, "12461": 117, "chyzhyk": 117, "darya": 117, "biomark": 117, "gigasci": 117, "holmberg": 117, "mathia": 117, "jama": 117, "327": 117, "1282": 117, "1283": 117, "1001": [117, 127], "1820": 117, "arxiv": 117, "2210": 117, "09232": 117, "revis": 117, "oct": 117, "503": 117, "flower": 119, "pprint": [119, 121, 128], "pretti": 119, "58": [119, 127], "who": 119, "common": [119, 124], "creator2": [119, 127], "8099999999999999": 119, "201": 119, "etc": 119, "optimist": 119, "loop": 119, "278": 119, "279": 119, "scores_tun": 119, "model_tun": 119, "281": 119, "282": 119, "283": 119, "285": 119, "286": 119, "9100000000000001": 119, "tri": 119, "conclud": 119, "277": 119, "mixtur": 119, "word": 119, "0001": 119, "450": [119, 129], "451": [119, 129], "452": [119, 129], "453": [119, 128, 129], "select_k__k": 119, "concept": [119, 124], "receiv": 119, "gridsearchcv": 119, "veri": [119, 121, 122, 124, 125], "construct": 119, "diment": 119, "randomizedsearchcv": 119, "similar": [119, 122, 128, 129], "lot": [119, 121], "consum": 119, "would": [119, 125, 127, 129], "465": 119, "466": 119, "don": 119, "those": [119, 124], "unnecessari": 119, "model1": 119, "468": 119, "469": 119, "470": 119, "471": 119, "472": 119, "473": 119, "474": 119, "475": 119, "476": 119, "477": 119, "478": 119, "479": 119, "480": 119, "93": 119, "forc": 119, "repat": 119, "creator1": [119, 127], "model2": 119, "793": 119, "794": [119, 129], "795": [119, 129], "798": 119, "799": 119, "inde": [119, 128], "equival": 119, "param_grid": [119, 121], "stop": 119, "creator3": [119, 127], "max_depth": [119, 122], "creator4": 119, "penalti": 119, "l1": 119, "dual": 119, "solver": 119, "liblinear": 119, "model3": 119, "068": 119, "069": 119, "070": 119, "071": 119, "073": 119, "074": 119, "075": 119, "model__c": 119, "model__gamma": 119, "076": 119, "077": 119, "078": 119, "079": 119, "model__max_depth": 119, "080": 119, "model__penalti": 119, "081": 119, "082": 119, "085": 119, "086": 119, "087": 119, "9200000000000002": 119, "beat": 119, "713": 119, "gain": 121, "insight": 121, "impact": 121, "analyz": 121, "abil": 121, "critic": 121, "influenc": 121, "deploy": 121, "intuit": [121, 127], "focu": [121, 125], "anomali": 121, "affect": 121, "logger": [121, 122], "toi": [121, 122], "plai": 121, "penguin": 121, "penguins_df": 121, "island": 121, "queri": 121, "chinstrap": 121, "dropna": 121, "adeli": 121, "gentoo": 121, "621": 121, "622": 121, "fairli": 121, "geomspac": [121, 122], "1e2": [121, 122], "335": 121, "336": 121, "337": 121, "notic": [121, 129], "relev": 121, "nformat": 121, "few": [121, 124], "338": 121, "339": 121, "bill_length_mm": 121, "bill_depth_mm": 121, "flipper_length_mm": 121, "body_mass_g": 121, "341": 121, "274": 121, "151": [121, 130], "123": 121, "quick": 121, "rememb": [121, 128], "error_scor": 121, "nan": 121, "jucolumntransform": 121, "with_mean": [121, 129], "with_std": 121, "wrapmodel": 121, "break_ti": 121, "cache_s": 121, "class_weight": 121, "coef0": 121, "decision_function_shap": 121, "ovr": 121, "degre": 121, "max_it": 121, "shrink": 121, "tol": 121, "estimator__memori": 121, "estimator__set_column_typ": 121, "estimator__set_column_types__x_typ": 121, "estimator__set_column_types__row_select_col_typ": 121, "estimator__set_column_types__row_select_v": 121, "estimator__step": 121, "estimator__svm": 121, "estimator__svm__c": 121, "estimator__svm__apply_to": 121, "estimator__svm__break_ti": 121, "estimator__svm__cache_s": 121, "estimator__svm__class_weight": 121, "estimator__svm__coef0": 121, "estimator__svm__decision_function_shap": 121, "estimator__svm__degre": 121, "estimator__svm__gamma": 121, "estimator__svm__kernel": 121, "estimator__svm__max_it": 121, "estimator__svm__model": 121, "estimator__svm__needed_typ": 121, "estimator__svm__prob": 121, "estimator__svm__random_st": 121, "estimator__svm__shrink": 121, "estimator__svm__tol": 121, "estimator__svm__verbos": 121, "estimator__verbos": 121, "estimator__zscor": 121, "estimator__zscore__apply_to": 121, "estimator__zscore__copi": 121, "estimator__zscore__nam": 121, "estimator__zscore__needed_typ": 121, "estimator__zscore__row_select_col_typ": 121, "estimator__zscore__row_select_v": 121, "estimator__zscore__transform": 121, "estimator__zscore__with_mean": 121, "estimator__zscore__with_std": 121, "pre_dispatch": 121, "refit": 121, "get_fitted_param": 121, "set_column_types__column_mapper_": 121, "bill_depth_mm__": 121, "bill_length_mm__": 121, "body_mass_g__": 121, "flipper_length_mm__": 121, "set_column_types__feature_names_in_": 121, "svm__model_": 121, "zscore__column_transformer_": 121, "remaind": 121, "passthrough": 121, "make_type_selector": 121, "0x7f1d21ef03d0": 121, "verbose_feature_names_out": 121, "zscore__feature_names_in_": 121, "zscore__mean_": 121, "70291971": 121, "83613139": 121, "17883212": 121, "4318": 121, "06569343": 121, "zscore__n_features_in_": 121, "zscore__n_samples_seen_": 121, "zscore__scale_": 121, "18607683": 121, "00973207": 121, "02045287": 121, "834": 121, "40628575": 121, "zscore__var_": 121, "68953929e": 121, "03902299e": 121, "25614004e": 121, "96233850e": 121, "somewhat": [121, 122], "structur": [121, 125], "made": [121, 126, 127], "handi": [121, 125, 129], "fold_predict": 121, "repeat7_p0": 121, "repeat8_p0": 121, "repeat9_p0": 121, "269": 121, "270": 121, "272": 121, "273": 121, "foldsinspector": 121, "_c_": 121, "c_valu": 121, "fold_inspector": 121, "fold_model": 121, "realis": 121, "ever": 121, "address": 121, "aris": 121, "serv": 121, "asset": 121, "transpar": [121, 124], "reliabl": 121, "capabl": [121, 122, 130], "navig": 121, "har": 121, "33": [121, 122, 127], "553": 121, "flexibl": 122, "cours": 122, "294": 122, "295": 122, "mind": 122, "arbitrari": [122, 128], "model_1": [122, 127], "298": 122, "00000000e": 122, "78255940e": 122, "74263683e": 122, "15443469e": 122, "99484250e": 122, "66810054e": 122, "64158883e": 122, "29154967e": 122, "59381366e": 122, "0x7f1d21dc3760": 122, "min_samples_leaf": 122, "min_samples_split": 122, "0x7f1d21dc0460": 122, "0x7f1d21dc3160": 122, "310": 122, "rf__max_depth": 122, "rf__min_samples_leaf": 122, "rf__min_samples_split": 122, "311": 122, "561": 122, "562": 122, "563": 122, "desir": [122, 129], "type1": 122, "type2": 122, "type1_": 122, "type2_": 122, "55": 122, "__type1": 122, "102": 122, "0x7f1d24de6cb0": 122, "103": 122, "__type2": 122, "0x7f1d21dc04c0": 122, "105": [122, 130], "type1_1": 122, "type1_2": 122, "type1_3": 122, "type1_4": 122, "type1_5": 122, "type1_6": 122, "type1_7": 122, "type1_8": 122, "type1_9": 122, "type1_10": 122, "type2_1": 122, "type2_2": 122, "type2_3": 122, "type2_4": 122, "type2_5": 122, "type2_6": 122, "type2_7": 122, "type2_8": 122, "type2_9": 122, "type2_10": 122, "108": [122, 130], "419": 122, "420": 122, "flexibli": 122, "Of": 122, "628": 122, "cover": [123, 125, 129], "far": [123, 125, 128, 129], "conist": 123, "manner": [123, 124, 125, 127, 129], "clear": 123, "target_jutargetpipelin": 123, "0x7f1d21dc1f30": 123, "907": 123, "911": 123, "912": 123, "016943": 123, "005807": 123, "015118": 123, "005907": 123, "015403": 123, "005642": 123, "015733": 123, "005982": 123, "015717": 123, "005941": 123, "overal": 123, "163": 123, "goal": 124, "beyond": 124, "matter": [124, 127], "exact": 124, "domingo": 124, "2012": 124, "ressourc": 124, "efficeint": 124, "solv": 124, "disadvantag": 124, "small": 124, "unstabl": 124, "overcom": 124, "resourc": 124, "accident": 124, "quickli": 124, "obviou": 124, "straightforward": [124, 129], "prone": [124, 127], "mistak": 124, "mechan": 124, "www": 124, "sciencedirect": 124, "articl": 124, "pii": 124, "s105381191630595x": 124, "natur": 124, "s41746": 124, "022": 124, "00592": 124, "s1053811917305311": 124, "cross_valid": [124, 126], "commun": 125, "capac": 125, "colum": 125, "manipul": 125, "anyth": [125, 128], "meaning": 125, "_sepal_": 125, "_petal_": 125, "hundr": 125, "thousand": 125, "saw": [125, 127, 128, 129], "parametr": [125, 129], "advanc": 125, "backbon": 126, "magic": 126, "goe": 126, "utmost": 126, "glanc": [126, 128], "sub": 126, "chapter": 126, "ist": 126, "familiar": 126, "along": 126, "fundament": 126, "essenc": 126, "click": 126, "fanci": 126, "stuff": 126, "decent": 127, "benchmark": 127, "enough": 127, "tediou": 127, "sound": 127, "switch": 127, "breast": 127, "cancer": 127, "malign": 127, "benign": 127, "load_breast_canc": 127, "radiu": 127, "textur": 127, "perimet": 127, "area": 127, "smooth": 127, "compact": 127, "concav": 127, "symmetri": 127, "fractal": 127, "dimens": 127, "worst": 127, "122": [127, 130], "11840": 127, "27760": 127, "3001": 127, "14710": 127, "2419": 127, "07871": 127, "0950": 127, "9053": 127, "589": 127, "153": 127, "006399": 127, "04904": 127, "05373": 127, "01587": 127, "03003": 127, "006193": 127, "1622": 127, "6656": 127, "7119": 127, "2654": 127, "4601": 127, "11890": 127, "57": 127, "1326": 127, "08474": 127, "07864": 127, "0869": 127, "07017": 127, "1812": 127, "05667": 127, "5435": 127, "7339": 127, "398": 127, "74": 127, "005225": 127, "01308": 127, "01860": 127, "01340": 127, "01389": 127, "003532": 127, "158": 127, "1956": 127, "1238": 127, "1866": 127, "2416": 127, "1860": 127, "2750": 127, "08902": 127, "69": 127, "1203": 127, "10960": 127, "15990": 127, "1974": 127, "12790": 127, "2069": 127, "05999": 127, "7456": 127, "7869": 127, "585": 127, "94": [127, 130], "03": 127, "006150": 127, "04006": 127, "03832": 127, "02058": 127, "02250": 127, "004571": 127, "1709": 127, "1444": 127, "4245": 127, "4504": 127, "2430": 127, "3613": 127, "08758": 127, "386": [127, 129], "14250": 127, "28390": 127, "2414": 127, "10520": 127, "2597": 127, "09744": 127, "4956": 127, "1560": 127, "009110": 127, "07458": 127, "05661": 127, "01867": 127, "05963": 127, "009208": 127, "91": 127, "567": 127, "2098": 127, "8663": 127, "6869": 127, "2575": 127, "6638": 127, "17300": 127, "1297": 127, "10030": 127, "13280": 127, "1980": 127, "10430": 127, "1809": 127, "05883": 127, "7572": 127, "7813": 127, "011490": 127, "02461": 127, "05688": 127, "01885": 127, "01756": 127, "005115": 127, "54": 127, "67": 127, "1575": 127, "1374": 127, "2050": 127, "4000": 127, "1625": 127, "2364": 127, "07678": 127, "cv_splitter": [127, 128], "36": 127, "253": 127, "254": 127, "259": 127, "569": 127, "262": 127, "263": 127, "573": [127, 128], "574": [127, 128], "576": [127, 128], "577": 127, "578": 127, "579": 127, "867": 127, "868": 127, "871": 127, "872": 127, "873": 127, "874": 127, "875": 127, "876": 127, "877": 127, "232": 127, "233": 127, "239": 127, "pairwis": 127, "neither": 127, "nor": 127, "946304": 127, "083461": 127, "250382": 127, "140882": 127, "891066": 127, "285373": 127, "048138": 127, "144413": 127, "361847": 127, "206356": 127, "619069": 127, "014156": 127, "989015": 127, "093249": 127, "302681": 127, "908044": 127, "dive": 127, "curiou": 127, "175": 127, "_iris_": 128, "363": 128, "364": 128, "367": 128, "009486": 128, "004744": [128, 129], "008653": 128, "004624": 128, "008224": 128, "004895": 128, "004967": 128, "008238": 128, "005119": 128, "933": 128, "overfit": 128, "455": 128, "456": 128, "457": 128, "458": 128, "008867": 128, "004896": 128, "008764": 128, "004636": 128, "009196": 128, "008404": 128, "004745": 128, "008364": 128, "004483": 128, "train_scor": 128, "cryptic": 128, "verifi": 128, "worri": 128, "doesn": 128, "570": 128, "571": 128, "572": 128, "575": 128, "010000": 128, "008563": 128, "005002": 128, "007827": 128, "004785": 128, "009570": 128, "006945": 128, "008909": 128, "004870": 128, "x27": 128, "rerun": 128, "cell": 128, "represent": 128, "trust": 128, "unabl": 128, "nbviewer": 128, "pipelinepipelin": 128, "setcolumntypessetcolumntyp": 128, "standardscalerstandardscal": 128, "svcsvc": 128, "weather": 128, "didn": 128, "got": 128, "five": 128, "back": 128, "stratifiedkfold": 128, "ourselv": 128, "fourth": 128, "704": 128, "705": 128, "707": 128, "708": 128, "709": 128, "010251": 128, "004826": 128, "7449876d309382acfef94df9d102aa76": 128, "008754": 128, "004972": 128, "008228": 128, "004961": 128, "004679": 128, "008766": 128, "004653": 128, "008567": 128, "005611": 128, "009055": 128, "005138": 128, "008507": 128, "004634": 128, "008794": 128, "009303": 128, "assumpt": 128, "list_scor": 128, "explained_vari": 128, "max_error": 128, "matthews_corrcoef": 128, "neg_median_absolute_error": 128, "neg_mean_absolute_percentage_error": 128, "neg_mean_squared_error": 128, "neg_mean_squared_log_error": 128, "neg_root_mean_squared_error": 128, "neg_mean_poisson_devi": 128, "neg_mean_gamma_devi": 128, "top_k_accuraci": 128, "roc_auc_ovr": 128, "roc_auc_ovo": 128, "roc_auc_ovr_weight": 128, "roc_auc_ovo_weight": 128, "average_precis": 128, "neg_log_loss": 128, "neg_brier_scor": 128, "positive_likelihood_ratio": 128, "neg_negative_likelihood_ratio": 128, "adjusted_rand_scor": 128, "rand_scor": 128, "homogeneity_scor": 128, "completeness_scor": 128, "v_measure_scor": 128, "mutual_info_scor": 128, "adjusted_mutual_info_scor": 128, "normalized_mutual_info_scor": 128, "fowlkes_mallows_scor": 128, "precision_macro": 128, "precision_micro": 128, "precision_sampl": 128, "precision_weight": 128, "recal": 128, "recall_macro": 128, "recall_micro": 128, "recall_sampl": 128, "recall_weight": 128, "f1": 128, "f1_macro": 128, "f1_micro": 128, "f1_sampl": 128, "f1_weight": 128, "jaccard": 128, "jaccard_macro": 128, "jaccard_micro": 128, "jaccard_sampl": 128, "jaccard_weight": 128, "930": 128, "931": 128, "934": 128, "935": 128, "009832": 128, "008529": 128, "009219": 128, "007440": 128, "009693": 128, "009129": 128, "008825": 128, "007847": 128, "010186": 128, "007938": 128, "009422": 128, "006951": 128, "008777": 128, "007577": 128, "008776": 128, "008142": 128, "009349": 128, "007488": 128, "009169": 128, "006972": 128, "autom": 129, "pipe": 129, "fed": 129, "modifi": 129, "friendli": 129, "safe": 129, "383": 129, "384": 129, "385": 129, "387": 129, "388": 129, "389": 129, "005411": 129, "003126": 129, "005224": 129, "003116": 129, "004783": 129, "003262": 129, "004884": 129, "003111": 129, "003268": 129, "discret": 129, "voil\u00e0": 129, "resembl": 129, "scaler": 129, "wish": 129, "009013": 129, "005066": 129, "008667": 129, "005015": 129, "008571": 129, "005208": 129, "008557": 129, "005109": 129, "009291": 129, "005059": 129, "decomposit": 129, "previous": 129, "543": 129, "544": 129, "546": 129, "547": 129, "548": 129, "549": 129, "550": 129, "551": 129, "011402": 129, "006349": 129, "011633": 129, "006414": 129, "010816": 129, "006706": 129, "010653": 129, "007013": 129, "010823": 129, "006713": 129, "intranspar": 129, "simplifi": 129, "neat": 129, "functiona": 129, "660": 129, "662": 129, "663": 129, "664": 129, "665": 129, "666": 129, "667": 129, "010900": 129, "006484": 129, "010670": 129, "006773": 129, "010362": 129, "006693": 129, "010778": 129, "008350": 129, "012344": 129, "009763": 129, "awesom": 129, "jump": 129, "aren": 129, "shouldn": 129, "ye": 129, "turn": 129, "_configur": 129, "learnt": 129, "experi": 129, "heurist": 129, "thumb": 129, "_tuned_": 129, "rate": 129, "sigma": 129, "sai": 129, "780": 129, "781": 129, "basi": 129, "comma": 129, "783": 129, "wonder": 129, "besid": 129, "definit": 129, "ref": 129, "data_usag": 129, "featuer": 129, "pca_1": 129, "_pca_": 129, "789": 129, "033719": 129, "014473": 129, "031786": 129, "014447": 129, "031750": 129, "014893": 129, "032284": 129, "015074": 129, "033049": 129, "015576": 129, "boser": 129, "guyon": 129, "vapnik": 129, "margin": 129, "colt": 129, "92": 129, "fifth": 129, "annual": 129, "workshop": 129, "theori": 129, "1992": 129, "jul": 129, "144": 129, "686": 129, "170": 130, "fede": 130, "surround": 130, "146": 130, "instruct": 130, "multiprocess": 130, "nos": 130, "extendeddataframepipelin": 130, "miss": 130, "tranform_until": 130, "63": 130, "minimum": 130, "face": 130, "create_pipelin": 130, "repeatedstratifiedgroupskfold": 130, "register_model": 130}, "objects": {"julearn": [[1, 0, 1, "", "PipelineCreator"], [2, 0, 1, "", "TargetPipelineCreator"], [69, 3, 0, "-", "api"], [0, 3, 0, "-", "base"], [68, 3, 0, "-", "inspect"], [70, 3, 0, "-", "model_selection"], [71, 3, 0, "-", "models"], [72, 3, 0, "-", "pipeline"], [73, 3, 0, "-", "prepare"], [31, 5, 1, "", "run_cross_validation"], [74, 3, 0, "-", "scoring"], [75, 3, 0, "-", "transformers"], [76, 3, 0, "-", "utils"], [77, 3, 0, "-", "viz"]], "julearn.PipelineCreator": [[1, 1, 1, "", "__init__"], [1, 1, 1, "", "add"], [1, 1, 1, "", "copy"], [1, 1, 1, "", "from_list"], [1, 1, 1, "", "has_model"], [1, 1, 1, "", "split"], [1, 2, 1, "", "steps"], [1, 1, 1, "", "to_pipeline"]], "julearn.TargetPipelineCreator": [[2, 1, 1, "", "__init__"], [2, 1, 1, "", "add"], [2, 1, 1, "", "to_pipeline"]], "julearn.base": [[3, 0, 1, "", "ColumnTypes"], [4, 4, 1, "", "ColumnTypesLike"], [5, 0, 1, "", "JuBaseEstimator"], [6, 0, 1, "", "JuTransformer"], [7, 0, 1, "", "WrapModel"], [8, 5, 1, "", "change_column_type"], [9, 5, 1, "", "ensure_column_types"], [10, 5, 1, "", "get_column_type"], [11, 5, 1, "", "make_type_selector"]], "julearn.base.ColumnTypes": [[3, 1, 1, "", "__init__"], [3, 1, 1, "", "add"], [3, 1, 1, "", "copy"], [3, 2, 1, "", "pattern"], [3, 1, 1, "", "to_type_selector"]], "julearn.base.JuBaseEstimator": [[5, 1, 1, "", "__init__"], [5, 1, 1, "", "filter_columns"], [5, 1, 1, "", "get_apply_to"], [5, 1, 1, "", "get_needed_types"], [5, 1, 1, "", "get_params"], [5, 1, 1, "", "set_params"]], "julearn.base.JuTransformer": [[6, 1, 1, "", "__init__"], [6, 1, 1, "", "filter_columns"], [6, 1, 1, "", "fit"], [6, 1, 1, "", "fit_transform"], [6, 1, 1, "", "get_apply_to"], [6, 1, 1, "", "get_needed_types"], [6, 1, 1, "", "get_params"], [6, 1, 1, "", "set_output"], [6, 1, 1, "", "set_params"]], "julearn.base.WrapModel": [[7, 1, 1, "", "__init__"], [7, 2, 1, "", "classes_"], [7, 1, 1, "", "decision_function"], [7, 1, 1, "", "filter_columns"], [7, 1, 1, "", "fit"], [7, 1, 1, "", "get_apply_to"], [7, 1, 1, "", "get_needed_types"], [7, 1, 1, "", "get_params"], [7, 1, 1, "", "predict"], [7, 1, 1, "", "predict_log_proba"], [7, 1, 1, "", "predict_proba"], [7, 1, 1, "", "score"], [7, 1, 1, "", "set_params"]], "julearn.inspect": [[12, 0, 1, "", "FoldsInspector"], [13, 0, 1, "", "Inspector"], [14, 5, 1, "", "preprocess"]], "julearn.inspect.FoldsInspector": [[12, 1, 1, "", "__init__"], [12, 1, 1, "", "decision_function"], [12, 1, 1, "", "predict"], [12, 1, 1, "", "predict_log_proba"], [12, 1, 1, "", "predict_proba"]], "julearn.inspect.Inspector": [[13, 1, 1, "", "__init__"], [13, 2, 1, "", "folds"], [13, 2, 1, "", "model"]], "julearn.model_selection": [[15, 0, 1, "", "RepeatedStratifiedGroupsKFold"], [16, 0, 1, "", "StratifiedBootstrap"], [17, 0, 1, "", "StratifiedGroupsKFold"], [18, 5, 1, "", "get_searcher"], [19, 5, 1, "", "list_searchers"], [20, 5, 1, "", "register_searcher"], [21, 5, 1, "", "reset_searcher_register"]], "julearn.model_selection.RepeatedStratifiedGroupsKFold": [[15, 1, 1, "", "__init__"], [15, 1, 1, "", "get_n_splits"], [15, 1, 1, "", "split"]], "julearn.model_selection.StratifiedBootstrap": [[16, 1, 1, "", "__init__"], [16, 1, 1, "", "get_n_splits"], [16, 1, 1, "", "split"]], "julearn.model_selection.StratifiedGroupsKFold": [[17, 1, 1, "", "__init__"], [17, 1, 1, "", "get_n_splits"], [17, 1, 1, "", "split"]], "julearn.models": [[71, 3, 0, "-", "dynamic"], [23, 5, 1, "", "get_model"], [24, 5, 1, "", "list_models"], [25, 5, 1, "", "register_model"], [26, 5, 1, "", "reset_model_register"]], "julearn.models.dynamic": [[22, 0, 1, "", "DynamicSelection"]], "julearn.models.dynamic.DynamicSelection": [[22, 1, 1, "", "__init__"], [22, 1, 1, "", "fit"], [22, 1, 1, "", "get_params"], [22, 1, 1, "", "predict"], [22, 1, 1, "", "predict_proba"], [22, 1, 1, "", "score"], [22, 1, 1, "", "set_params"]], "julearn.pipeline": [[27, 0, 1, "", "JuTargetPipeline"]], "julearn.pipeline.JuTargetPipeline": [[27, 1, 1, "", "__init__"], [27, 1, 1, "", "can_inverse_transform"], [27, 1, 1, "", "fit"], [27, 1, 1, "", "fit_transform"], [27, 1, 1, "", "inverse_transform"], [27, 2, 1, "", "needed_types"], [27, 1, 1, "", "transform"]], "julearn.pipeline.pipeline_creator": [[28, 0, 1, "", "Step"]], "julearn.pipeline.pipeline_creator.Step": [[28, 1, 1, "", "__init__"], [28, 4, 1, "", "apply_to"], [28, 4, 1, "", "estimator"], [28, 4, 1, "", "name"], [28, 4, 1, "", "needed_types"], [28, 4, 1, "", "params_to_tune"], [28, 4, 1, "", "row_select_col_type"], [28, 4, 1, "", "row_select_vals"]], "julearn.prepare": [[29, 5, 1, "", "check_consistency"], [30, 5, 1, "", "prepare_input_data"]], "julearn.scoring": [[32, 5, 1, "", "check_scoring"], [33, 5, 1, "", "get_scorer"], [34, 5, 1, "", "list_scorers"], [74, 3, 0, "-", "metrics"], [36, 5, 1, "", "register_scorer"], [37, 5, 1, "", "reset_scorer_register"]], "julearn.scoring.metrics": [[35, 5, 1, "", "r2_corr"]], "julearn.transformers": [[38, 0, 1, "", "CBPM"], [39, 0, 1, "", "ChangeColumnTypes"], [40, 0, 1, "", "DropColumns"], [41, 0, 1, "", "FilterColumns"], [42, 0, 1, "", "JuColumnTransformer"], [43, 0, 1, "", "SetColumnTypes"], [45, 5, 1, "", "get_transformer"], [46, 5, 1, "", "list_transformers"], [47, 5, 1, "", "register_transformer"], [48, 5, 1, "", "reset_transformer_register"], [75, 3, 0, "-", "target"]], "julearn.transformers.CBPM": [[38, 1, 1, "", "__init__"], [38, 1, 1, "", "aggregate"], [38, 1, 1, "", "fit"], [38, 1, 1, "", "fit_transform"], [38, 1, 1, "", "get_feature_names_out"], [38, 1, 1, "", "get_params"], [38, 1, 1, "", "set_output"], [38, 1, 1, "", "set_params"], [38, 1, 1, "", "transform"]], "julearn.transformers.ChangeColumnTypes": [[39, 1, 1, "", "__init__"], [39, 1, 1, "", "filter_columns"], [39, 1, 1, "", "fit"], [39, 1, 1, "", "fit_transform"], [39, 1, 1, "", "get_apply_to"], [39, 1, 1, "", "get_feature_names_out"], [39, 1, 1, "", "get_needed_types"], [39, 1, 1, "", "get_params"], [39, 1, 1, "", "set_output"], [39, 1, 1, "", "set_params"], [39, 1, 1, "", "transform"]], "julearn.transformers.DropColumns": [[40, 1, 1, "", "__init__"], [40, 1, 1, "", "filter_columns"], [40, 1, 1, "", "fit"], [40, 1, 1, "", "fit_transform"], [40, 1, 1, "", "get_apply_to"], [40, 1, 1, "", "get_needed_types"], [40, 1, 1, "", "get_params"], [40, 1, 1, "", "get_support"], [40, 1, 1, "", "set_output"], [40, 1, 1, "", "set_params"], [40, 1, 1, "", "transform"]], "julearn.transformers.FilterColumns": [[41, 1, 1, "", "__init__"], [41, 1, 1, "", "filter_columns"], [41, 1, 1, "", "fit"], [41, 1, 1, "", "fit_transform"], [41, 1, 1, "", "get_apply_to"], [41, 1, 1, "", "get_feature_names_out"], [41, 1, 1, "", "get_needed_types"], [41, 1, 1, "", "get_params"], [41, 1, 1, "", "set_output"], [41, 1, 1, "", "set_params"], [41, 1, 1, "", "transform"]], "julearn.transformers.JuColumnTransformer": [[42, 1, 1, "", "__init__"], [42, 1, 1, "", "filter_columns"], [42, 1, 1, "", "fit"], [42, 1, 1, "", "fit_transform"], [42, 1, 1, "", "get_apply_to"], [42, 1, 1, "", "get_feature_names_out"], [42, 1, 1, "", "get_needed_types"], [42, 1, 1, "", "get_params"], [42, 1, 1, "", "set_output"], [42, 1, 1, "", "set_params"], [42, 1, 1, "", "transform"]], "julearn.transformers.SetColumnTypes": [[43, 1, 1, "", "__init__"], [43, 1, 1, "", "filter_columns"], [43, 1, 1, "", "fit"], [43, 1, 1, "", "fit_transform"], [43, 1, 1, "", "get_apply_to"], [43, 1, 1, "", "get_feature_names_out"], [43, 1, 1, "", "get_needed_types"], [43, 1, 1, "", "get_params"], [43, 1, 1, "", "set_output"], [43, 1, 1, "", "set_params"], [43, 1, 1, "", "transform"]], "julearn.transformers.confound_remover": [[44, 0, 1, "", "ConfoundRemover"]], "julearn.transformers.confound_remover.ConfoundRemover": [[44, 1, 1, "", "__init__"], [44, 1, 1, "", "filter_columns"], [44, 1, 1, "", "fit"], [44, 1, 1, "", "fit_transform"], [44, 1, 1, "", "get_apply_to"], [44, 1, 1, "", "get_feature_names_out"], [44, 1, 1, "", "get_needed_types"], [44, 1, 1, "", "get_params"], [44, 1, 1, "", "get_support"], [44, 1, 1, "", "set_output"], [44, 1, 1, "", "set_params"], [44, 1, 1, "", "transform"]], "julearn.transformers.target": [[49, 0, 1, "", "JuTargetTransformer"], [50, 0, 1, "", "JuTransformedTargetModel"], [51, 0, 1, "", "TargetConfoundRemover"], [52, 0, 1, "", "TransformedTargetWarning"], [53, 5, 1, "", "get_target_transformer"], [54, 5, 1, "", "list_target_transformers"], [55, 5, 1, "", "register_target_transformer"], [56, 5, 1, "", "reset_target_transformer_register"]], "julearn.transformers.target.JuTargetTransformer": [[49, 1, 1, "", "__init__"], [49, 1, 1, "", "fit"], [49, 1, 1, "", "fit_transform"], [49, 1, 1, "", "transform"]], "julearn.transformers.target.JuTransformedTargetModel": [[50, 1, 1, "", "__init__"], [50, 2, 1, "", "classes_"], [50, 1, 1, "", "decision_function"], [50, 1, 1, "", "filter_columns"], [50, 1, 1, "", "fit"], [50, 1, 1, "", "get_apply_to"], [50, 1, 1, "", "get_needed_types"], [50, 1, 1, "", "get_params"], [50, 1, 1, "", "predict"], [50, 1, 1, "", "predict_proba"], [50, 1, 1, "", "score"], [50, 1, 1, "", "set_params"]], "julearn.transformers.target.TargetConfoundRemover": [[51, 1, 1, "", "__init__"], [51, 1, 1, "", "fit"], [51, 1, 1, "", "fit_transform"], [51, 2, 1, "", "needed_types"], [51, 1, 1, "", "transform"]], "julearn.transformers.target.TransformedTargetWarning": [[52, 1, 1, "", "__init__"], [52, 4, 1, "", "args"], [52, 1, 1, "", "with_traceback"]], "julearn.utils": [[57, 5, 1, "", "configure_logging"], [58, 4, 1, "", "logger"], [59, 5, 1, "", "raise_error"], [76, 3, 0, "-", "typing"], [65, 5, 1, "", "warn_with_log"]], "julearn.utils.typing": [[60, 4, 1, "", "EstimatorLike"], [61, 0, 1, "", "EstimatorLikeFit1"], [62, 0, 1, "", "EstimatorLikeFit2"], [63, 0, 1, "", "EstimatorLikeFity"], [64, 0, 1, "", "JuEstimatorLike"]], "julearn.utils.typing.EstimatorLikeFit1": [[61, 1, 1, "", "__init__"], [61, 1, 1, "", "fit"], [61, 1, 1, "", "get_params"], [61, 1, 1, "", "set_params"]], "julearn.utils.typing.EstimatorLikeFit2": [[62, 1, 1, "", "__init__"], [62, 1, 1, "", "fit"], [62, 1, 1, "", "get_params"], [62, 1, 1, "", "set_params"]], "julearn.utils.typing.EstimatorLikeFity": [[63, 1, 1, "", "__init__"], [63, 1, 1, "", "fit"], [63, 1, 1, "", "get_params"], [63, 1, 1, "", "set_params"]], "julearn.utils.typing.JuEstimatorLike": [[64, 1, 1, "", "__init__"], [64, 1, 1, "", "fit"], [64, 1, 1, "", "get_apply_to"], [64, 1, 1, "", "get_needed_types"], [64, 1, 1, "", "get_params"], [64, 1, 1, "", "set_params"]], "julearn.viz": [[66, 5, 1, "", "plot_scores"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:module", "4": "py:attribute", "5": "py:function"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "module", "Python module"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "function", "Python function"]}, "titleterms": {"base": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 116], "julearn": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 78, 110, 112, 114, 116, 117, 130], "pipelinecr": [1, 129], "exampl": [1, 2, 13, 14, 16, 17, 31, 34, 36, 57, 66, 110, 111], "us": [1, 2, 13, 14, 16, 17, 31, 34, 36, 57, 66, 104, 112, 117, 129], "targetpipelinecr": 2, "columntyp": 3, "columntypeslik": 4, "jubaseestim": 5, "jutransform": 6, "wrapmodel": 7, "change_column_typ": 8, "ensure_column_typ": 9, "get_column_typ": 10, "make_type_selector": 11, "inspect": [12, 13, 14, 68, 89, 90, 91, 93, 121], "foldsinspector": 12, "inspector": 13, "preprocess": [14, 92, 123, 129], "model_select": [15, 16, 17, 18, 19, 20, 21], "repeatedstratifiedgroupskfold": 15, "stratifiedbootstrap": 16, "stratifiedgroupskfold": 17, "get_search": 18, "list_search": 19, "register_search": 20, "reset_searcher_regist": 21, "model": [22, 23, 24, 25, 26, 70, 71, 86, 87, 90, 91, 95, 103, 109, 116, 119, 121, 122, 127, 128, 129], "dynam": [22, 71, 109], "dynamicselect": 22, "get_model": 23, "list_model": 24, "register_model": 25, "reset_model_regist": 26, "pipelin": [27, 28, 72, 109, 129], "jutargetpipelin": 27, "pipeline_cr": 28, "step": [28, 109], "prepar": [29, 30, 73], "check_consist": 29, "prepare_input_data": 30, "run_cross_valid": [31, 124, 125, 128, 129], "score": [32, 33, 34, 35, 36, 37, 74, 96, 107, 127, 128], "check_scor": 32, "get_scor": 33, "list_scor": 34, "metric": [35, 74, 128], "r2_corr": 35, "register_scor": 36, "reset_scorer_regist": 37, "transform": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 75, 96, 109], "cbpm": [38, 116], "changecolumntyp": 39, "dropcolumn": 40, "filtercolumn": 41, "jucolumntransform": 42, "setcolumntyp": 43, "confound_remov": 44, "confoundremov": 44, "get_transform": 45, "list_transform": 46, "register_transform": 47, "reset_transformer_regist": 48, "target": [49, 50, 51, 52, 53, 54, 55, 56, 75, 96, 117, 123], "jutargettransform": 49, "jutransformedtargetmodel": 50, "targetconfoundremov": 51, "transformedtargetwarn": 52, "get_target_transform": 53, "list_target_transform": 54, "register_target_transform": 55, "reset_target_transformer_regist": 56, "util": [57, 58, 59, 60, 61, 62, 63, 64, 65, 76], "configure_log": 57, "logger": 58, "raise_error": 59, "type": [60, 61, 62, 63, 64, 76, 122, 125, 129], "estimatorlik": 60, "estimatorlikefit1": 61, "estimatorlikefit2": 62, "estimatorlikef": 63, "juestimatorlik": 64, "warn_with_log": 65, "viz": [66, 112], "plot_scor": 66, "refer": [67, 82, 83, 90, 98, 99, 116, 117, 124, 129], "main": 69, "api": [69, 130], "select": [70, 71, 109, 120, 129], "deslib": 71, "vizual": 77, "start": [78, 113], "multiclass": 79, "classif": [79, 84, 100], "regress": [80, 81, 97, 107, 117], "analysi": [80, 81, 97], "stratifi": 81, "k": 81, "fold": [81, 93], "cv": [81, 83], "work": 82, "panda": 82, "from": [82, 117], "long": 82, "wide": 82, "format": 82, "merg": 82, "join": 82, "data": [82, 125], "frame": 82, "reshap": 82, "more": [82, 119], "complex": [82, 95], "group": 83, "deal": [83, 90], "cross": [83, 90, 117, 118, 124, 128], "valid": [83, 90, 117, 118, 124, 128], "techniqu": [83, 90], "simpl": [84, 87], "binari": 84, "comput": [85, 88, 94, 101, 105, 108], "time": [85, 88, 94, 101, 105, 108], "comparison": [86, 87, 103, 127], "svm": 90, "random": 91, "forest": 91, "variabl": [91, 96], "import": 91, "varianc": 92, "threshold": 92, "zscore": 92, "pca": 92, "wise": 93, "predict": [93, 116], "z": 96, "tune": [98, 99, 119], "multipl": 98, "hyperparamet": [98, 99, 119, 129], "grid": [98, 119], "stack": [100, 122], "confound": [102, 103, 104, 117], "remov": [103, 104, 117], "return": [104, 128], "typic": 104, "case": 104, "custom": [106, 107, 109], "function": 107, "overview": 109, "avail": 109, "scaler": 109, "featur": [109, 117, 122, 125, 129, 130], "datafram": 109, "oper": 109, "decomposit": 109, "estim": [109, 122, 128], "support": 109, "vector": 109, "machin": 109, "ensembl": 109, "gaussian": 109, "process": 109, "linear": 109, "naiv": 109, "bay": 109, "dummi": 109, "contribut": 110, "set": [110, 129], "up": 110, "local": 110, "develop": 110, "environ": 110, "github": 110, "pull": 110, "request": 110, "guidelin": 110, "run": 110, "unit": 110, "test": 110, "ad": 110, "build": [110, 129], "document": [110, 114, 130], "write": 110, "content": [111, 114, 120], "frequenli": 112, "ask": 112, "question": 112, "2": [112, 130], "how": 112, "do": 112, "i": [112, 114, 117], "interact": 112, "plot": 112, "get": 113, "requir": 113, "setup": 113, "suggest": 113, "instal": 113, "option": 113, "depend": 113, "welcom": 114, "": [114, 130], "what": [114, 126, 130], "why": [114, 124], "tabl": [114, 120], "indic": 114, "maintain": 115, "version": 115, "releas": 115, "new": [115, 130], "connectom": 116, "consist": 117, "should": 117, "splitter": [118, 128], "paramet": 119, "v": 119, "searcher": 119, "than": 119, "one": 119, "deeper": 120, "topic": 120, "fit": 122, "each": 122, "all": 122, "specif": [122, 129], "appli": 123, "The": [124, 128], "fundament": 124, "essenc": 124, "input": 125, "give": 125, "you": 126, "realli": 126, "need": 126, "know": 126, "statist": 127, "visual": 127, "evalu": 128, "output": 128, "made": 129, "easi": 129, "0": 130, "3": 130, "dev213": 130, "2023": 130, "06": 130, "26": 130, "bugfix": 130, "enhanc": 130, "6": 130, "dev150": 130, "13": 130, "5": 130, "2022": 130, "07": 130, "21": 130, "chang": 130, "improv": 130}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"Base": [[0, "module-julearn.base"]], "julearn.PipelineCreator": [[1, "julearn-pipelinecreator"]], "Examples using julearn.PipelineCreator": [[1, "examples-using-julearn-pipelinecreator"]], "julearn.TargetPipelineCreator": [[2, "julearn-targetpipelinecreator"]], "Examples using julearn.TargetPipelineCreator": [[2, "examples-using-julearn-targetpipelinecreator"]], "julearn.base.ColumnTypes": [[3, "julearn-base-columntypes"]], "julearn.base.ColumnTypesLike": [[4, "julearn-base-columntypeslike"]], "julearn.base.JuBaseEstimator": [[5, "julearn-base-jubaseestimator"]], "julearn.base.JuTransformer": [[6, "julearn-base-jutransformer"]], "julearn.base.WrapModel": [[7, "julearn-base-wrapmodel"]], "julearn.base.change_column_type": [[8, "julearn-base-change-column-type"]], "julearn.base.ensure_column_types": [[9, "julearn-base-ensure-column-types"]], "julearn.base.get_column_type": [[10, "julearn-base-get-column-type"]], "julearn.base.make_type_selector": [[11, "julearn-base-make-type-selector"]], "julearn.inspect.FoldsInspector": [[12, "julearn-inspect-foldsinspector"]], "julearn.inspect.Inspector": [[13, "julearn-inspect-inspector"]], "Examples using julearn.inspect.Inspector": [[13, "examples-using-julearn-inspect-inspector"]], "julearn.inspect.preprocess": [[14, "julearn-inspect-preprocess"]], "Examples using julearn.inspect.preprocess": [[14, "examples-using-julearn-inspect-preprocess"]], "julearn.model_selection.RepeatedStratifiedGroupsKFold": [[15, "julearn-model-selection-repeatedstratifiedgroupskfold"]], "julearn.model_selection.StratifiedBootstrap": [[16, "julearn-model-selection-stratifiedbootstrap"]], "Examples using julearn.model_selection.StratifiedBootstrap": [[16, "examples-using-julearn-model-selection-stratifiedbootstrap"]], "julearn.model_selection.StratifiedGroupsKFold": [[17, "julearn-model-selection-stratifiedgroupskfold"]], "Examples using julearn.model_selection.StratifiedGroupsKFold": [[17, "examples-using-julearn-model-selection-stratifiedgroupskfold"]], "julearn.model_selection.get_searcher": [[18, "julearn-model-selection-get-searcher"]], "julearn.model_selection.list_searchers": [[19, "julearn-model-selection-list-searchers"]], "julearn.model_selection.register_searcher": [[20, "julearn-model-selection-register-searcher"]], "julearn.model_selection.reset_searcher_register": [[21, "julearn-model-selection-reset-searcher-register"]], "julearn.models.dynamic.DynamicSelection": [[22, "julearn-models-dynamic-dynamicselection"]], "julearn.models.get_model": [[23, "julearn-models-get-model"]], "julearn.models.list_models": [[24, "julearn-models-list-models"]], "julearn.models.register_model": [[25, "julearn-models-register-model"]], "julearn.models.reset_model_register": [[26, "julearn-models-reset-model-register"]], "julearn.pipeline.JuTargetPipeline": [[27, "julearn-pipeline-jutargetpipeline"]], "julearn.pipeline.pipeline_creator.Step": [[28, "julearn-pipeline-pipeline-creator-step"]], "julearn.prepare.check_consistency": [[29, "julearn-prepare-check-consistency"]], "julearn.prepare.prepare_input_data": [[30, "julearn-prepare-prepare-input-data"]], "julearn.run_cross_validation": [[31, "julearn-run-cross-validation"]], "Examples using julearn.run_cross_validation": [[31, "examples-using-julearn-run-cross-validation"]], "julearn.scoring.check_scoring": [[32, "julearn-scoring-check-scoring"]], "julearn.scoring.get_scorer": [[33, "julearn-scoring-get-scorer"]], "julearn.scoring.list_scorers": [[34, "julearn-scoring-list-scorers"]], "Examples using julearn.scoring.list_scorers": [[34, "examples-using-julearn-scoring-list-scorers"]], "julearn.scoring.metrics.r2_corr": [[35, "julearn-scoring-metrics-r2-corr"]], "julearn.scoring.register_scorer": [[36, "julearn-scoring-register-scorer"]], "Examples using julearn.scoring.register_scorer": [[36, "examples-using-julearn-scoring-register-scorer"]], "julearn.scoring.reset_scorer_register": [[37, "julearn-scoring-reset-scorer-register"]], "julearn.transformers.CBPM": [[38, "julearn-transformers-cbpm"]], "julearn.transformers.ChangeColumnTypes": [[39, "julearn-transformers-changecolumntypes"]], "julearn.transformers.DropColumns": [[40, "julearn-transformers-dropcolumns"]], "julearn.transformers.FilterColumns": [[41, "julearn-transformers-filtercolumns"]], "julearn.transformers.JuColumnTransformer": [[42, "julearn-transformers-jucolumntransformer"]], "julearn.transformers.SetColumnTypes": [[43, "julearn-transformers-setcolumntypes"]], "julearn.transformers.confound_remover.ConfoundRemover": [[44, "julearn-transformers-confound-remover-confoundremover"]], "julearn.transformers.get_transformer": [[45, "julearn-transformers-get-transformer"]], "julearn.transformers.list_transformers": [[46, "julearn-transformers-list-transformers"]], "julearn.transformers.register_transformer": [[47, "julearn-transformers-register-transformer"]], "julearn.transformers.reset_transformer_register": [[48, "julearn-transformers-reset-transformer-register"]], "julearn.transformers.target.JuTargetTransformer": [[49, "julearn-transformers-target-jutargettransformer"]], "julearn.transformers.target.JuTransformedTargetModel": [[50, "julearn-transformers-target-jutransformedtargetmodel"]], "julearn.transformers.target.TargetConfoundRemover": [[51, "julearn-transformers-target-targetconfoundremover"]], "julearn.transformers.target.TransformedTargetWarning": [[52, "julearn-transformers-target-transformedtargetwarning"]], "julearn.transformers.target.get_target_transformer": [[53, "julearn-transformers-target-get-target-transformer"]], "julearn.transformers.target.list_target_transformers": [[54, "julearn-transformers-target-list-target-transformers"]], "julearn.transformers.target.register_target_transformer": [[55, "julearn-transformers-target-register-target-transformer"]], "julearn.transformers.target.reset_target_transformer_register": [[56, "julearn-transformers-target-reset-target-transformer-register"]], "julearn.utils.configure_logging": [[57, "julearn-utils-configure-logging"]], "Examples using julearn.utils.configure_logging": [[57, "examples-using-julearn-utils-configure-logging"]], "julearn.utils.logger": [[58, "julearn-utils-logger"]], "julearn.utils.raise_error": [[59, "julearn-utils-raise-error"]], "julearn.utils.typing.EstimatorLike": [[60, "julearn-utils-typing-estimatorlike"]], "julearn.utils.typing.EstimatorLikeFit1": [[61, "julearn-utils-typing-estimatorlikefit1"]], "julearn.utils.typing.EstimatorLikeFit2": [[62, "julearn-utils-typing-estimatorlikefit2"]], "julearn.utils.typing.EstimatorLikeFity": [[63, "julearn-utils-typing-estimatorlikefity"]], "julearn.utils.typing.JuEstimatorLike": [[64, "julearn-utils-typing-juestimatorlike"]], "julearn.utils.warn_with_log": [[65, "julearn-utils-warn-with-log"]], "julearn.viz.plot_scores": [[66, "julearn-viz-plot-scores"]], "Examples using julearn.viz.plot_scores": [[66, "examples-using-julearn-viz-plot-scores"]], "Reference": [[67, "reference"]], "Inspect": [[68, "module-julearn.inspect"]], "Main API": [[69, "module-julearn.api"]], "Model Selection": [[70, "module-julearn.model_selection"]], "Models": [[71, "module-julearn.models"]], "Dynamic Selection (DESLib)": [[71, "dynamic-selection-deslib"]], "Pipeline": [[72, "module-julearn.pipeline"]], "Prepare": [[73, "module-julearn.prepare"]], "Scoring": [[74, "module-julearn.scoring"]], "Scoring Metrics": [[74, "module-julearn.scoring.metrics"]], "Transformers": [[75, "module-julearn.transformers"], [109, "transformers"]], "Target Transformers": [[75, "module-julearn.transformers.target"]], "Utils": [[76, "module-julearn.utils"]], "Typing": [[76, "module-julearn.utils.typing"]], "Vizualization": [[77, "vizualization"]], "Starting with julearn": [[78, "starting-with-julearn"]], "Multiclass Classification.": [[79, "multiclass-classification"]], "Regression Analysis": [[80, "regression-analysis"], [97, "regression-analysis"]], "Stratified K-fold CV for regression analysis": [[81, "stratified-k-fold-cv-for-regression-analysis"]], "Working with pandas": [[82, "working-with-pandas"]], "References": [[82, "references"], [83, "references"], [90, "references"], [98, "references"], [99, "references"]], "From long to wide format": [[82, "from-long-to-wide-format"]], "Merging or joining data frames": [[82, "merging-or-joining-data-frames"]], "Reshaping data frames (more complex)": [[82, "reshaping-data-frames-more-complex"]], "Grouped CV.": [[83, "grouped-cv"]], "Dealing with Cross-Validation techniques": [[83, "dealing-with-cross-validation-techniques"], [90, "dealing-with-cross-validation-techniques"]], "Simple Binary Classification": [[84, "simple-binary-classification"]], "Computation times": [[85, "computation-times"], [88, "computation-times"], [94, "computation-times"], [101, "computation-times"], [105, "computation-times"], [108, "computation-times"]], "Model Comparison": [[86, "model-comparison"]], "Simple Model Comparison": [[87, "simple-model-comparison"]], "Inspection": [[89, "inspection"]], "Inspecting SVM models.": [[90, "inspecting-svm-models"]], "Inspecting Random Forest models": [[91, "inspecting-random-forest-models"]], "Random Forest variable importance": [[91, "random-forest-variable-importance"]], "Preprocessing with variance threshold, zscore and PCA": [[92, "preprocessing-with-variance-threshold-zscore-and-pca"]], "Inspecting the fold-wise predictions": [[93, "inspecting-the-fold-wise-predictions"]], "Complex Models": [[95, "complex-models"]], "Transforming target variable with z-score.": [[96, "transforming-target-variable-with-z-score"]], "Tuning Multiple Hyperparameters Grids": [[98, "tuning-multiple-hyperparameters-grids"]], "Tuning Hyperparameters": [[99, "tuning-hyperparameters"]], "Stacking Classification": [[100, "stacking-classification"]], "Confounds": [[102, "confounds"]], "Confound Removal (model comparison)": [[103, "confound-removal-model-comparison"]], "Return Confounds in Confound Removal": [[104, "return-confounds-in-confound-removal"]], "Confound Removal Typical Use Case": [[104, "confound-removal-typical-use-case"]], "Customization": [[106, "customization"]], "Custom Scoring Function for Regression": [[107, "custom-scoring-function-for-regression"]], "Overview of available Pipeline Steps": [[109, "overview-of-available-pipeline-steps"]], "Scalers": [[109, "scalers"]], "Feature Selection": [[109, "feature-selection"]], "DataFrame operations": [[109, "dataframe-operations"]], "Decomposition": [[109, "decomposition"]], "Custom": [[109, "custom"]], "Models (Estimators)": [[109, "models-estimators"]], "Support Vector Machines": [[109, "support-vector-machines"]], "Ensemble": [[109, "ensemble"]], "Gaussian Processes": [[109, "gaussian-processes"]], "Linear Models": [[109, "linear-models"]], "Naive Bayes": [[109, "naive-bayes"]], "Dynamic Selection": [[109, "dynamic-selection"]], "Dummy": [[109, "dummy"]], "Contributing to julearn": [[110, "contributing-to-julearn"]], "Setting up the local development environment": [[110, "setting-up-the-local-development-environment"]], "GitHub Pull Request guidelines": [[110, "github-pull-request-guidelines"]], "Running unit tests": [[110, "running-unit-tests"]], "Adding and building documentation": [[110, "adding-and-building-documentation"]], "Writing Examples": [[110, "writing-examples"]], "Examples": [[111, "examples"]], "Contents:": [[111, null]], "Frequenly Asked Questions": [[112, "frequenly-asked-questions"]], "2. How do I use the julearn viz interactive plots?": [[112, "how-do-i-use-the-julearn-viz-interactive-plots"]], "Getting started": [[113, "getting-started"]], "Requirements": [[113, "requirements"]], "Setup suggestion": [[113, "setup-suggestion"]], "Installing": [[113, "installing"]], "Optional Dependencies": [[113, "optional-dependencies"]], "Welcome to julearn\u2019s documentation!": [[114, "welcome-to-julearn-s-documentation"]], "What is Julearn?": [[114, "what-is-julearn"]], "Why Julearn?": [[114, "why-julearn"]], "Table of Contents": [[114, "table-of-contents"], [120, null]], "Indices and tables": [[114, "indices-and-tables"]], "Maintaining": [[115, "maintaining"]], "Versioning": [[115, "versioning"]], "Releasing a new version": [[115, "releasing-a-new-version"]], "Connectome-based Predictive Modeling (CBPM)": [[116, "connectome-based-predictive-modeling-cbpm"]], "CBPM in Julearn": [[116, "cbpm-in-julearn"]], "References:": [[116, null], [117, null], [124, null], [129, null]], "Cross-validation consistent Confound Removal": [[117, "cross-validation-consistent-confound-removal"]], "Confound Removal in Julearn": [[117, "confound-removal-in-julearn"]], "Removing Confounds from the Features": [[117, "removing-confounds-from-the-features"]], "Removing Confounds from the Target": [[117, "removing-confounds-from-the-target"]], "Should I use Confound Regression?": [[117, "should-i-use-confound-regression"]], "Cross-validation splitter": [[118, "cross-validation-splitter"]], "Hyperparameter Tuning": [[119, "hyperparameter-tuning"], [119, "id1"]], "Parameters vs Hyperparameters": [[119, "parameters-vs-hyperparameters"]], "Searchers": [[119, "searchers"]], "Tuning more than one grid": [[119, "tuning-more-than-one-grid"]], "Models as hyperparameters": [[119, "models-as-hyperparameters"]], "Selected deeper topics": [[120, "selected-deeper-topics"]], "Inspecting Models": [[121, "inspecting-models"]], "Stacking Models": [[122, "stacking-models"]], "Fitting each estimator on all of the features": [[122, "fitting-each-estimator-on-all-of-the-features"]], "Fitting each estimator on a specific feature type": [[122, "fitting-each-estimator-on-a-specific-feature-type"]], "Applying preprocessing to the target": [[123, "applying-preprocessing-to-the-target"]], "Why cross validation?": [[124, "why-cross-validation"]], "Cross-validation - The fundamentals": [[124, "cross-validation-the-fundamentals"]], "The essence of run_cross_validation()": [[124, "the-essence-of-run-cross-validation"]], "Data": [[125, "data"]], "Data input to run_cross_validation()": [[125, "data-input-to-run-cross-validation"]], "Giving types to features": [[125, "giving-types-to-features"]], "What you really need to know": [[126, "what-you-really-need-to-know"]], "Model comparison": [[127, "model-comparison"]], "Statistical comparisons": [[127, "statistical-comparisons"]], "Score visualizations": [[127, "score-visualizations"]], "Model evaluation": [[128, "model-evaluation"]], "The output of run_cross_validation()": [[128, "the-output-of-run-cross-validation"]], "Cross-validation scores": [[128, "cross-validation-scores"]], "Returning a model (estimator)": [[128, "returning-a-model-estimator"]], "Cross-validation splitters": [[128, "cross-validation-splitters"]], "Scoring metrics": [[128, "scoring-metrics"]], "Model Building": [[129, "model-building"]], "Pipeline specification in run_cross_validation()": [[129, "pipeline-specification-in-run-cross-validation"]], "Feature preprocessing": [[129, "feature-preprocessing"]], "Pipeline specification made easy with the PipelineCreator": [[129, "pipeline-specification-made-easy-with-the-pipelinecreator"]], "Setting hyperparameters": [[129, "setting-hyperparameters"]], "Selective preprocessing using feature types": [[129, "selective-preprocessing-using-feature-types"]], "What\u2019s new": [[130, "what-s-new"]], "Julearn 0.3.0.dev213 (2023-06-26)": [[130, "julearn-0-3-0-dev213-2023-06-26"]], "Bugfixes": [[130, "bugfixes"], [130, "id1"], [130, "id4"]], "Enhancements": [[130, "enhancements"], [130, "id2"], [130, "id5"]], "Features": [[130, "features"], [130, "id3"], [130, "id6"]], "Julearn 0.2.6.dev150 (2023-06-13)": [[130, "julearn-0-2-6-dev150-2023-06-13"]], "Julearn 0.2.5 (2022-07-21)": [[130, "julearn-0-2-5-2022-07-21"]], "API Changes": [[130, "api-changes"]], "Improved Documentation": [[130, "improved-documentation"]]}, "indexentries": {"julearn.base": [[0, "module-julearn.base"]], "module": [[0, "module-julearn.base"], [68, "module-julearn.inspect"], [69, "module-julearn.api"], [70, "module-julearn.model_selection"], [71, "module-julearn.models"], [71, "module-julearn.models.dynamic"], [72, "module-julearn.pipeline"], [73, "module-julearn.prepare"], [74, "module-julearn.scoring"], [74, "module-julearn.scoring.metrics"], [75, "module-julearn.transformers"], [75, "module-julearn.transformers.target"], [76, "module-julearn.utils"], [76, "module-julearn.utils.typing"], [77, "module-julearn.viz"]], "pipelinecreator (class in julearn)": [[1, "julearn.PipelineCreator"]], "__init__() (julearn.pipelinecreator method)": [[1, "julearn.PipelineCreator.__init__"]], "add() (julearn.pipelinecreator method)": [[1, "julearn.PipelineCreator.add"]], "copy() (julearn.pipelinecreator method)": [[1, "julearn.PipelineCreator.copy"]], "from_list() (julearn.pipelinecreator class method)": [[1, "julearn.PipelineCreator.from_list"]], "has_model() (julearn.pipelinecreator method)": [[1, "julearn.PipelineCreator.has_model"]], "split() (julearn.pipelinecreator method)": [[1, "julearn.PipelineCreator.split"]], "steps (julearn.pipelinecreator property)": [[1, "julearn.PipelineCreator.steps"]], "to_pipeline() (julearn.pipelinecreator method)": [[1, "julearn.PipelineCreator.to_pipeline"]], "targetpipelinecreator (class in julearn)": [[2, "julearn.TargetPipelineCreator"]], "__init__() (julearn.targetpipelinecreator method)": [[2, "julearn.TargetPipelineCreator.__init__"]], "add() (julearn.targetpipelinecreator method)": [[2, "julearn.TargetPipelineCreator.add"]], "to_pipeline() (julearn.targetpipelinecreator method)": [[2, "julearn.TargetPipelineCreator.to_pipeline"]], "columntypes (class in julearn.base)": [[3, "julearn.base.ColumnTypes"]], "__init__() (julearn.base.columntypes method)": [[3, "julearn.base.ColumnTypes.__init__"]], "add() (julearn.base.columntypes method)": [[3, "julearn.base.ColumnTypes.add"]], "copy() (julearn.base.columntypes method)": [[3, "julearn.base.ColumnTypes.copy"]], "pattern (julearn.base.columntypes property)": [[3, "julearn.base.ColumnTypes.pattern"]], "to_type_selector() (julearn.base.columntypes method)": [[3, "julearn.base.ColumnTypes.to_type_selector"]], "columntypeslike (in module julearn.base)": [[4, "julearn.base.ColumnTypesLike"]], "jubaseestimator (class in julearn.base)": [[5, "julearn.base.JuBaseEstimator"]], "__init__() (julearn.base.jubaseestimator method)": [[5, "julearn.base.JuBaseEstimator.__init__"]], "filter_columns() (julearn.base.jubaseestimator method)": [[5, "julearn.base.JuBaseEstimator.filter_columns"]], "get_apply_to() (julearn.base.jubaseestimator method)": [[5, "julearn.base.JuBaseEstimator.get_apply_to"]], "get_needed_types() (julearn.base.jubaseestimator method)": [[5, "julearn.base.JuBaseEstimator.get_needed_types"]], "get_params() (julearn.base.jubaseestimator method)": [[5, "julearn.base.JuBaseEstimator.get_params"]], "set_params() (julearn.base.jubaseestimator method)": [[5, "julearn.base.JuBaseEstimator.set_params"]], "jutransformer (class in julearn.base)": [[6, "julearn.base.JuTransformer"]], "__init__() (julearn.base.jutransformer method)": [[6, "julearn.base.JuTransformer.__init__"]], "filter_columns() (julearn.base.jutransformer method)": [[6, "julearn.base.JuTransformer.filter_columns"]], "fit() (julearn.base.jutransformer method)": [[6, "julearn.base.JuTransformer.fit"]], "fit_transform() (julearn.base.jutransformer method)": [[6, "julearn.base.JuTransformer.fit_transform"]], "get_apply_to() (julearn.base.jutransformer method)": [[6, "julearn.base.JuTransformer.get_apply_to"]], "get_needed_types() (julearn.base.jutransformer method)": [[6, "julearn.base.JuTransformer.get_needed_types"]], "get_params() (julearn.base.jutransformer method)": [[6, "julearn.base.JuTransformer.get_params"]], "set_output() (julearn.base.jutransformer method)": [[6, "julearn.base.JuTransformer.set_output"]], "set_params() (julearn.base.jutransformer method)": [[6, "julearn.base.JuTransformer.set_params"]], "wrapmodel (class in julearn.base)": [[7, "julearn.base.WrapModel"]], "__init__() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.__init__"]], "classes_ (julearn.base.wrapmodel property)": [[7, "julearn.base.WrapModel.classes_"]], "decision_function() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.decision_function"]], "filter_columns() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.filter_columns"]], "fit() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.fit"]], "get_apply_to() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.get_apply_to"]], "get_needed_types() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.get_needed_types"]], "get_params() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.get_params"]], "predict() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.predict"]], "predict_log_proba() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.predict_log_proba"]], "predict_proba() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.predict_proba"]], "score() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.score"]], "set_params() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.set_params"]], "change_column_type() (in module julearn.base)": [[8, "julearn.base.change_column_type"]], "ensure_column_types() (in module julearn.base)": [[9, "julearn.base.ensure_column_types"]], "get_column_type() (in module julearn.base)": [[10, "julearn.base.get_column_type"]], "make_type_selector() (in module julearn.base)": [[11, "julearn.base.make_type_selector"]], "foldsinspector (class in julearn.inspect)": [[12, "julearn.inspect.FoldsInspector"]], "__init__() (julearn.inspect.foldsinspector method)": [[12, "julearn.inspect.FoldsInspector.__init__"]], "decision_function() (julearn.inspect.foldsinspector method)": [[12, "julearn.inspect.FoldsInspector.decision_function"]], "predict() (julearn.inspect.foldsinspector method)": [[12, "julearn.inspect.FoldsInspector.predict"]], "predict_log_proba() (julearn.inspect.foldsinspector method)": [[12, "julearn.inspect.FoldsInspector.predict_log_proba"]], "predict_proba() (julearn.inspect.foldsinspector method)": [[12, "julearn.inspect.FoldsInspector.predict_proba"]], "inspector (class in julearn.inspect)": [[13, "julearn.inspect.Inspector"]], "__init__() (julearn.inspect.inspector method)": [[13, "julearn.inspect.Inspector.__init__"]], "folds (julearn.inspect.inspector property)": [[13, "julearn.inspect.Inspector.folds"]], "model (julearn.inspect.inspector property)": [[13, "julearn.inspect.Inspector.model"]], "preprocess() (in module julearn.inspect)": [[14, "julearn.inspect.preprocess"]], "repeatedstratifiedgroupskfold (class in julearn.model_selection)": [[15, "julearn.model_selection.RepeatedStratifiedGroupsKFold"]], "__init__() (julearn.model_selection.repeatedstratifiedgroupskfold method)": [[15, "julearn.model_selection.RepeatedStratifiedGroupsKFold.__init__"]], "get_n_splits() (julearn.model_selection.repeatedstratifiedgroupskfold method)": [[15, "julearn.model_selection.RepeatedStratifiedGroupsKFold.get_n_splits"]], "split() (julearn.model_selection.repeatedstratifiedgroupskfold method)": [[15, "julearn.model_selection.RepeatedStratifiedGroupsKFold.split"]], "stratifiedbootstrap (class in julearn.model_selection)": [[16, "julearn.model_selection.StratifiedBootstrap"]], "__init__() (julearn.model_selection.stratifiedbootstrap method)": [[16, "julearn.model_selection.StratifiedBootstrap.__init__"]], "get_n_splits() (julearn.model_selection.stratifiedbootstrap method)": [[16, "julearn.model_selection.StratifiedBootstrap.get_n_splits"]], "split() (julearn.model_selection.stratifiedbootstrap method)": [[16, "julearn.model_selection.StratifiedBootstrap.split"]], "stratifiedgroupskfold (class in julearn.model_selection)": [[17, "julearn.model_selection.StratifiedGroupsKFold"]], "__init__() (julearn.model_selection.stratifiedgroupskfold method)": [[17, "julearn.model_selection.StratifiedGroupsKFold.__init__"]], "get_n_splits() (julearn.model_selection.stratifiedgroupskfold method)": [[17, "julearn.model_selection.StratifiedGroupsKFold.get_n_splits"]], "split() (julearn.model_selection.stratifiedgroupskfold method)": [[17, "julearn.model_selection.StratifiedGroupsKFold.split"]], "get_searcher() (in module julearn.model_selection)": [[18, "julearn.model_selection.get_searcher"]], "list_searchers() (in module julearn.model_selection)": [[19, "julearn.model_selection.list_searchers"]], "register_searcher() (in module julearn.model_selection)": [[20, "julearn.model_selection.register_searcher"]], "reset_searcher_register() (in module julearn.model_selection)": [[21, "julearn.model_selection.reset_searcher_register"]], "dynamicselection (class in julearn.models.dynamic)": [[22, "julearn.models.dynamic.DynamicSelection"]], "__init__() (julearn.models.dynamic.dynamicselection method)": [[22, "julearn.models.dynamic.DynamicSelection.__init__"]], "fit() (julearn.models.dynamic.dynamicselection method)": [[22, "julearn.models.dynamic.DynamicSelection.fit"]], "get_params() (julearn.models.dynamic.dynamicselection method)": [[22, "julearn.models.dynamic.DynamicSelection.get_params"]], "predict() (julearn.models.dynamic.dynamicselection method)": [[22, "julearn.models.dynamic.DynamicSelection.predict"]], "predict_proba() (julearn.models.dynamic.dynamicselection method)": [[22, "julearn.models.dynamic.DynamicSelection.predict_proba"]], "score() (julearn.models.dynamic.dynamicselection method)": [[22, "julearn.models.dynamic.DynamicSelection.score"]], "set_params() (julearn.models.dynamic.dynamicselection method)": [[22, "julearn.models.dynamic.DynamicSelection.set_params"]], "get_model() (in module julearn.models)": [[23, "julearn.models.get_model"]], "list_models() (in module julearn.models)": [[24, "julearn.models.list_models"]], "register_model() (in module julearn.models)": [[25, "julearn.models.register_model"]], "reset_model_register() (in module julearn.models)": [[26, "julearn.models.reset_model_register"]], "jutargetpipeline (class in julearn.pipeline)": [[27, "julearn.pipeline.JuTargetPipeline"]], "__init__() (julearn.pipeline.jutargetpipeline method)": [[27, "julearn.pipeline.JuTargetPipeline.__init__"]], "can_inverse_transform() (julearn.pipeline.jutargetpipeline method)": [[27, "julearn.pipeline.JuTargetPipeline.can_inverse_transform"]], "fit() (julearn.pipeline.jutargetpipeline method)": [[27, "julearn.pipeline.JuTargetPipeline.fit"]], "fit_transform() (julearn.pipeline.jutargetpipeline method)": [[27, "julearn.pipeline.JuTargetPipeline.fit_transform"]], "inverse_transform() (julearn.pipeline.jutargetpipeline method)": [[27, "julearn.pipeline.JuTargetPipeline.inverse_transform"]], "needed_types (julearn.pipeline.jutargetpipeline property)": [[27, "julearn.pipeline.JuTargetPipeline.needed_types"]], "transform() (julearn.pipeline.jutargetpipeline method)": [[27, "julearn.pipeline.JuTargetPipeline.transform"]], "step (class in julearn.pipeline.pipeline_creator)": [[28, "julearn.pipeline.pipeline_creator.Step"]], "__init__() (julearn.pipeline.pipeline_creator.step method)": [[28, "julearn.pipeline.pipeline_creator.Step.__init__"]], "apply_to (julearn.pipeline.pipeline_creator.step attribute)": [[28, "julearn.pipeline.pipeline_creator.Step.apply_to"]], "estimator (julearn.pipeline.pipeline_creator.step attribute)": [[28, "julearn.pipeline.pipeline_creator.Step.estimator"]], "name (julearn.pipeline.pipeline_creator.step attribute)": [[28, "julearn.pipeline.pipeline_creator.Step.name"]], "needed_types (julearn.pipeline.pipeline_creator.step attribute)": [[28, "julearn.pipeline.pipeline_creator.Step.needed_types"]], "params_to_tune (julearn.pipeline.pipeline_creator.step attribute)": [[28, "julearn.pipeline.pipeline_creator.Step.params_to_tune"]], "row_select_col_type (julearn.pipeline.pipeline_creator.step attribute)": [[28, "julearn.pipeline.pipeline_creator.Step.row_select_col_type"]], "row_select_vals (julearn.pipeline.pipeline_creator.step attribute)": [[28, "julearn.pipeline.pipeline_creator.Step.row_select_vals"]], "check_consistency() (in module julearn.prepare)": [[29, "julearn.prepare.check_consistency"]], "prepare_input_data() (in module julearn.prepare)": [[30, "julearn.prepare.prepare_input_data"]], "run_cross_validation() (in module julearn)": [[31, "julearn.run_cross_validation"]], "check_scoring() (in module julearn.scoring)": [[32, "julearn.scoring.check_scoring"]], "get_scorer() (in module julearn.scoring)": [[33, "julearn.scoring.get_scorer"]], "list_scorers() (in module julearn.scoring)": [[34, "julearn.scoring.list_scorers"]], "r2_corr() (in module julearn.scoring.metrics)": [[35, "julearn.scoring.metrics.r2_corr"]], "register_scorer() (in module julearn.scoring)": [[36, "julearn.scoring.register_scorer"]], "reset_scorer_register() (in module julearn.scoring)": [[37, "julearn.scoring.reset_scorer_register"]], "cbpm (class in julearn.transformers)": [[38, "julearn.transformers.CBPM"]], "__init__() (julearn.transformers.cbpm method)": [[38, "julearn.transformers.CBPM.__init__"]], "aggregate() (julearn.transformers.cbpm method)": [[38, "julearn.transformers.CBPM.aggregate"]], "fit() (julearn.transformers.cbpm method)": [[38, "julearn.transformers.CBPM.fit"]], "fit_transform() (julearn.transformers.cbpm method)": [[38, "julearn.transformers.CBPM.fit_transform"]], "get_feature_names_out() (julearn.transformers.cbpm method)": [[38, "julearn.transformers.CBPM.get_feature_names_out"]], "get_params() (julearn.transformers.cbpm method)": [[38, "julearn.transformers.CBPM.get_params"]], "set_output() (julearn.transformers.cbpm method)": [[38, "julearn.transformers.CBPM.set_output"]], "set_params() (julearn.transformers.cbpm method)": [[38, "julearn.transformers.CBPM.set_params"]], "transform() (julearn.transformers.cbpm method)": [[38, "julearn.transformers.CBPM.transform"]], "changecolumntypes (class in julearn.transformers)": [[39, "julearn.transformers.ChangeColumnTypes"]], "__init__() (julearn.transformers.changecolumntypes method)": [[39, "julearn.transformers.ChangeColumnTypes.__init__"]], "filter_columns() (julearn.transformers.changecolumntypes method)": [[39, "julearn.transformers.ChangeColumnTypes.filter_columns"]], "fit() (julearn.transformers.changecolumntypes method)": [[39, "julearn.transformers.ChangeColumnTypes.fit"]], "fit_transform() (julearn.transformers.changecolumntypes method)": [[39, "julearn.transformers.ChangeColumnTypes.fit_transform"]], "get_apply_to() (julearn.transformers.changecolumntypes method)": [[39, "julearn.transformers.ChangeColumnTypes.get_apply_to"]], "get_feature_names_out() (julearn.transformers.changecolumntypes method)": [[39, "julearn.transformers.ChangeColumnTypes.get_feature_names_out"]], "get_needed_types() (julearn.transformers.changecolumntypes method)": [[39, "julearn.transformers.ChangeColumnTypes.get_needed_types"]], "get_params() (julearn.transformers.changecolumntypes method)": [[39, "julearn.transformers.ChangeColumnTypes.get_params"]], "set_output() (julearn.transformers.changecolumntypes method)": [[39, "julearn.transformers.ChangeColumnTypes.set_output"]], "set_params() (julearn.transformers.changecolumntypes method)": [[39, "julearn.transformers.ChangeColumnTypes.set_params"]], "transform() (julearn.transformers.changecolumntypes method)": [[39, "julearn.transformers.ChangeColumnTypes.transform"]], "dropcolumns (class in julearn.transformers)": [[40, "julearn.transformers.DropColumns"]], "__init__() (julearn.transformers.dropcolumns method)": [[40, "julearn.transformers.DropColumns.__init__"]], "filter_columns() (julearn.transformers.dropcolumns method)": [[40, "julearn.transformers.DropColumns.filter_columns"]], "fit() (julearn.transformers.dropcolumns method)": [[40, "julearn.transformers.DropColumns.fit"]], "fit_transform() (julearn.transformers.dropcolumns method)": [[40, "julearn.transformers.DropColumns.fit_transform"]], "get_apply_to() (julearn.transformers.dropcolumns method)": [[40, "julearn.transformers.DropColumns.get_apply_to"]], "get_needed_types() (julearn.transformers.dropcolumns method)": [[40, "julearn.transformers.DropColumns.get_needed_types"]], "get_params() (julearn.transformers.dropcolumns method)": [[40, "julearn.transformers.DropColumns.get_params"]], "get_support() (julearn.transformers.dropcolumns method)": [[40, "julearn.transformers.DropColumns.get_support"]], "set_output() (julearn.transformers.dropcolumns method)": [[40, "julearn.transformers.DropColumns.set_output"]], "set_params() (julearn.transformers.dropcolumns method)": [[40, "julearn.transformers.DropColumns.set_params"]], "transform() (julearn.transformers.dropcolumns method)": [[40, "julearn.transformers.DropColumns.transform"]], "filtercolumns (class in julearn.transformers)": [[41, "julearn.transformers.FilterColumns"]], "__init__() (julearn.transformers.filtercolumns method)": [[41, "julearn.transformers.FilterColumns.__init__"]], "filter_columns() (julearn.transformers.filtercolumns method)": [[41, "julearn.transformers.FilterColumns.filter_columns"]], "fit() (julearn.transformers.filtercolumns method)": [[41, "julearn.transformers.FilterColumns.fit"]], "fit_transform() (julearn.transformers.filtercolumns method)": [[41, "julearn.transformers.FilterColumns.fit_transform"]], "get_apply_to() (julearn.transformers.filtercolumns method)": [[41, "julearn.transformers.FilterColumns.get_apply_to"]], "get_feature_names_out() (julearn.transformers.filtercolumns method)": [[41, "julearn.transformers.FilterColumns.get_feature_names_out"]], "get_needed_types() (julearn.transformers.filtercolumns method)": [[41, "julearn.transformers.FilterColumns.get_needed_types"]], "get_params() (julearn.transformers.filtercolumns method)": [[41, "julearn.transformers.FilterColumns.get_params"]], "set_output() (julearn.transformers.filtercolumns method)": [[41, "julearn.transformers.FilterColumns.set_output"]], "set_params() (julearn.transformers.filtercolumns method)": [[41, "julearn.transformers.FilterColumns.set_params"]], "transform() (julearn.transformers.filtercolumns method)": [[41, "julearn.transformers.FilterColumns.transform"]], "jucolumntransformer (class in julearn.transformers)": [[42, "julearn.transformers.JuColumnTransformer"]], "__init__() (julearn.transformers.jucolumntransformer method)": [[42, "julearn.transformers.JuColumnTransformer.__init__"]], "filter_columns() (julearn.transformers.jucolumntransformer method)": [[42, "julearn.transformers.JuColumnTransformer.filter_columns"]], "fit() (julearn.transformers.jucolumntransformer method)": [[42, "julearn.transformers.JuColumnTransformer.fit"]], "fit_transform() (julearn.transformers.jucolumntransformer method)": [[42, "julearn.transformers.JuColumnTransformer.fit_transform"]], "get_apply_to() (julearn.transformers.jucolumntransformer method)": [[42, "julearn.transformers.JuColumnTransformer.get_apply_to"]], "get_feature_names_out() (julearn.transformers.jucolumntransformer method)": [[42, "julearn.transformers.JuColumnTransformer.get_feature_names_out"]], "get_needed_types() (julearn.transformers.jucolumntransformer method)": [[42, "julearn.transformers.JuColumnTransformer.get_needed_types"]], "get_params() (julearn.transformers.jucolumntransformer method)": [[42, "julearn.transformers.JuColumnTransformer.get_params"]], "set_output() (julearn.transformers.jucolumntransformer method)": [[42, "julearn.transformers.JuColumnTransformer.set_output"]], "set_params() (julearn.transformers.jucolumntransformer method)": [[42, "julearn.transformers.JuColumnTransformer.set_params"]], "transform() (julearn.transformers.jucolumntransformer method)": [[42, "julearn.transformers.JuColumnTransformer.transform"]], "setcolumntypes (class in julearn.transformers)": [[43, "julearn.transformers.SetColumnTypes"]], "__init__() (julearn.transformers.setcolumntypes method)": [[43, "julearn.transformers.SetColumnTypes.__init__"]], "filter_columns() (julearn.transformers.setcolumntypes method)": [[43, "julearn.transformers.SetColumnTypes.filter_columns"]], "fit() (julearn.transformers.setcolumntypes method)": [[43, "julearn.transformers.SetColumnTypes.fit"]], "fit_transform() (julearn.transformers.setcolumntypes method)": [[43, "julearn.transformers.SetColumnTypes.fit_transform"]], "get_apply_to() (julearn.transformers.setcolumntypes method)": [[43, "julearn.transformers.SetColumnTypes.get_apply_to"]], "get_feature_names_out() (julearn.transformers.setcolumntypes method)": [[43, "julearn.transformers.SetColumnTypes.get_feature_names_out"]], "get_needed_types() (julearn.transformers.setcolumntypes method)": [[43, "julearn.transformers.SetColumnTypes.get_needed_types"]], "get_params() (julearn.transformers.setcolumntypes method)": [[43, "julearn.transformers.SetColumnTypes.get_params"]], "set_output() (julearn.transformers.setcolumntypes method)": [[43, "julearn.transformers.SetColumnTypes.set_output"]], "set_params() (julearn.transformers.setcolumntypes method)": [[43, "julearn.transformers.SetColumnTypes.set_params"]], "transform() (julearn.transformers.setcolumntypes method)": [[43, "julearn.transformers.SetColumnTypes.transform"]], "confoundremover (class in julearn.transformers.confound_remover)": [[44, "julearn.transformers.confound_remover.ConfoundRemover"]], "__init__() (julearn.transformers.confound_remover.confoundremover method)": [[44, "julearn.transformers.confound_remover.ConfoundRemover.__init__"]], "filter_columns() (julearn.transformers.confound_remover.confoundremover method)": [[44, "julearn.transformers.confound_remover.ConfoundRemover.filter_columns"]], "fit() (julearn.transformers.confound_remover.confoundremover method)": [[44, "julearn.transformers.confound_remover.ConfoundRemover.fit"]], "fit_transform() (julearn.transformers.confound_remover.confoundremover method)": [[44, "julearn.transformers.confound_remover.ConfoundRemover.fit_transform"]], "get_apply_to() (julearn.transformers.confound_remover.confoundremover method)": [[44, "julearn.transformers.confound_remover.ConfoundRemover.get_apply_to"]], "get_feature_names_out() (julearn.transformers.confound_remover.confoundremover method)": [[44, "julearn.transformers.confound_remover.ConfoundRemover.get_feature_names_out"]], "get_needed_types() (julearn.transformers.confound_remover.confoundremover method)": [[44, "julearn.transformers.confound_remover.ConfoundRemover.get_needed_types"]], "get_params() (julearn.transformers.confound_remover.confoundremover method)": [[44, "julearn.transformers.confound_remover.ConfoundRemover.get_params"]], "get_support() (julearn.transformers.confound_remover.confoundremover method)": [[44, "julearn.transformers.confound_remover.ConfoundRemover.get_support"]], "set_output() (julearn.transformers.confound_remover.confoundremover method)": [[44, "julearn.transformers.confound_remover.ConfoundRemover.set_output"]], "set_params() (julearn.transformers.confound_remover.confoundremover method)": [[44, "julearn.transformers.confound_remover.ConfoundRemover.set_params"]], "transform() (julearn.transformers.confound_remover.confoundremover method)": [[44, "julearn.transformers.confound_remover.ConfoundRemover.transform"]], "get_transformer() (in module julearn.transformers)": [[45, "julearn.transformers.get_transformer"]], "list_transformers() (in module julearn.transformers)": [[46, "julearn.transformers.list_transformers"]], "register_transformer() (in module julearn.transformers)": [[47, "julearn.transformers.register_transformer"]], "reset_transformer_register() (in module julearn.transformers)": [[48, "julearn.transformers.reset_transformer_register"]], "jutargettransformer (class in julearn.transformers.target)": [[49, "julearn.transformers.target.JuTargetTransformer"]], "__init__() (julearn.transformers.target.jutargettransformer method)": [[49, "julearn.transformers.target.JuTargetTransformer.__init__"]], "fit() (julearn.transformers.target.jutargettransformer method)": [[49, "julearn.transformers.target.JuTargetTransformer.fit"]], "fit_transform() (julearn.transformers.target.jutargettransformer method)": [[49, "julearn.transformers.target.JuTargetTransformer.fit_transform"]], "transform() (julearn.transformers.target.jutargettransformer method)": [[49, "julearn.transformers.target.JuTargetTransformer.transform"]], "jutransformedtargetmodel (class in julearn.transformers.target)": [[50, "julearn.transformers.target.JuTransformedTargetModel"]], "__init__() (julearn.transformers.target.jutransformedtargetmodel method)": [[50, "julearn.transformers.target.JuTransformedTargetModel.__init__"]], "classes_ (julearn.transformers.target.jutransformedtargetmodel property)": [[50, "julearn.transformers.target.JuTransformedTargetModel.classes_"]], "decision_function() (julearn.transformers.target.jutransformedtargetmodel method)": [[50, "julearn.transformers.target.JuTransformedTargetModel.decision_function"]], "filter_columns() (julearn.transformers.target.jutransformedtargetmodel method)": [[50, "julearn.transformers.target.JuTransformedTargetModel.filter_columns"]], "fit() (julearn.transformers.target.jutransformedtargetmodel method)": [[50, "julearn.transformers.target.JuTransformedTargetModel.fit"]], "get_apply_to() (julearn.transformers.target.jutransformedtargetmodel method)": [[50, "julearn.transformers.target.JuTransformedTargetModel.get_apply_to"]], "get_needed_types() (julearn.transformers.target.jutransformedtargetmodel method)": [[50, "julearn.transformers.target.JuTransformedTargetModel.get_needed_types"]], "get_params() (julearn.transformers.target.jutransformedtargetmodel method)": [[50, "julearn.transformers.target.JuTransformedTargetModel.get_params"]], "predict() (julearn.transformers.target.jutransformedtargetmodel method)": [[50, "julearn.transformers.target.JuTransformedTargetModel.predict"]], "predict_proba() (julearn.transformers.target.jutransformedtargetmodel method)": [[50, "julearn.transformers.target.JuTransformedTargetModel.predict_proba"]], "score() (julearn.transformers.target.jutransformedtargetmodel method)": [[50, "julearn.transformers.target.JuTransformedTargetModel.score"]], "set_params() (julearn.transformers.target.jutransformedtargetmodel method)": [[50, "julearn.transformers.target.JuTransformedTargetModel.set_params"]], "targetconfoundremover (class in julearn.transformers.target)": [[51, "julearn.transformers.target.TargetConfoundRemover"]], "__init__() (julearn.transformers.target.targetconfoundremover method)": [[51, "julearn.transformers.target.TargetConfoundRemover.__init__"]], "fit() (julearn.transformers.target.targetconfoundremover method)": [[51, "julearn.transformers.target.TargetConfoundRemover.fit"]], "fit_transform() (julearn.transformers.target.targetconfoundremover method)": [[51, "julearn.transformers.target.TargetConfoundRemover.fit_transform"]], "needed_types (julearn.transformers.target.targetconfoundremover property)": [[51, "julearn.transformers.target.TargetConfoundRemover.needed_types"]], "transform() (julearn.transformers.target.targetconfoundremover method)": [[51, "julearn.transformers.target.TargetConfoundRemover.transform"]], "transformedtargetwarning (class in julearn.transformers.target)": [[52, "julearn.transformers.target.TransformedTargetWarning"]], "__init__() (julearn.transformers.target.transformedtargetwarning method)": [[52, "julearn.transformers.target.TransformedTargetWarning.__init__"]], "args (julearn.transformers.target.transformedtargetwarning attribute)": [[52, "julearn.transformers.target.TransformedTargetWarning.args"]], "with_traceback() (julearn.transformers.target.transformedtargetwarning method)": [[52, "julearn.transformers.target.TransformedTargetWarning.with_traceback"]], "get_target_transformer() (in module julearn.transformers.target)": [[53, "julearn.transformers.target.get_target_transformer"]], "list_target_transformers() (in module julearn.transformers.target)": [[54, "julearn.transformers.target.list_target_transformers"]], "register_target_transformer() (in module julearn.transformers.target)": [[55, "julearn.transformers.target.register_target_transformer"]], "reset_target_transformer_register() (in module julearn.transformers.target)": [[56, "julearn.transformers.target.reset_target_transformer_register"]], "configure_logging() (in module julearn.utils)": [[57, "julearn.utils.configure_logging"]], "logger (in module julearn.utils)": [[58, "julearn.utils.logger"]], "raise_error() (in module julearn.utils)": [[59, "julearn.utils.raise_error"]], "estimatorlike (in module julearn.utils.typing)": [[60, "julearn.utils.typing.EstimatorLike"]], "estimatorlikefit1 (class in julearn.utils.typing)": [[61, "julearn.utils.typing.EstimatorLikeFit1"]], "__init__() (julearn.utils.typing.estimatorlikefit1 method)": [[61, "julearn.utils.typing.EstimatorLikeFit1.__init__"]], "fit() (julearn.utils.typing.estimatorlikefit1 method)": [[61, "julearn.utils.typing.EstimatorLikeFit1.fit"]], "get_params() (julearn.utils.typing.estimatorlikefit1 method)": [[61, "julearn.utils.typing.EstimatorLikeFit1.get_params"]], "set_params() (julearn.utils.typing.estimatorlikefit1 method)": [[61, "julearn.utils.typing.EstimatorLikeFit1.set_params"]], "estimatorlikefit2 (class in julearn.utils.typing)": [[62, "julearn.utils.typing.EstimatorLikeFit2"]], "__init__() (julearn.utils.typing.estimatorlikefit2 method)": [[62, "julearn.utils.typing.EstimatorLikeFit2.__init__"]], "fit() (julearn.utils.typing.estimatorlikefit2 method)": [[62, "julearn.utils.typing.EstimatorLikeFit2.fit"]], "get_params() (julearn.utils.typing.estimatorlikefit2 method)": [[62, "julearn.utils.typing.EstimatorLikeFit2.get_params"]], "set_params() (julearn.utils.typing.estimatorlikefit2 method)": [[62, "julearn.utils.typing.EstimatorLikeFit2.set_params"]], "estimatorlikefity (class in julearn.utils.typing)": [[63, "julearn.utils.typing.EstimatorLikeFity"]], "__init__() (julearn.utils.typing.estimatorlikefity method)": [[63, "julearn.utils.typing.EstimatorLikeFity.__init__"]], "fit() (julearn.utils.typing.estimatorlikefity method)": [[63, "julearn.utils.typing.EstimatorLikeFity.fit"]], "get_params() (julearn.utils.typing.estimatorlikefity method)": [[63, "julearn.utils.typing.EstimatorLikeFity.get_params"]], "set_params() (julearn.utils.typing.estimatorlikefity method)": [[63, "julearn.utils.typing.EstimatorLikeFity.set_params"]], "juestimatorlike (class in julearn.utils.typing)": [[64, "julearn.utils.typing.JuEstimatorLike"]], "__init__() (julearn.utils.typing.juestimatorlike method)": [[64, "julearn.utils.typing.JuEstimatorLike.__init__"]], "fit() (julearn.utils.typing.juestimatorlike method)": [[64, "julearn.utils.typing.JuEstimatorLike.fit"]], "get_apply_to() (julearn.utils.typing.juestimatorlike method)": [[64, "julearn.utils.typing.JuEstimatorLike.get_apply_to"]], "get_needed_types() (julearn.utils.typing.juestimatorlike method)": [[64, "julearn.utils.typing.JuEstimatorLike.get_needed_types"]], "get_params() (julearn.utils.typing.juestimatorlike method)": [[64, "julearn.utils.typing.JuEstimatorLike.get_params"]], "set_params() (julearn.utils.typing.juestimatorlike method)": [[64, "julearn.utils.typing.JuEstimatorLike.set_params"]], "warn_with_log() (in module julearn.utils)": [[65, "julearn.utils.warn_with_log"]], "plot_scores() (in module julearn.viz)": [[66, "julearn.viz.plot_scores"]], "julearn.inspect": [[68, "module-julearn.inspect"]], "julearn.api": [[69, "module-julearn.api"]], "julearn.model_selection": [[70, "module-julearn.model_selection"]], "julearn.models": [[71, "module-julearn.models"]], "julearn.models.dynamic": [[71, "module-julearn.models.dynamic"]], "julearn.pipeline": [[72, "module-julearn.pipeline"]], "julearn.prepare": [[73, "module-julearn.prepare"]], "julearn.scoring": [[74, "module-julearn.scoring"]], "julearn.scoring.metrics": [[74, "module-julearn.scoring.metrics"]], "julearn.transformers": [[75, "module-julearn.transformers"]], "julearn.transformers.target": [[75, "module-julearn.transformers.target"]], "julearn.utils": [[76, "module-julearn.utils"]], "julearn.utils.typing": [[76, "module-julearn.utils.typing"]], "julearn.viz": [[77, "module-julearn.viz"]]}})