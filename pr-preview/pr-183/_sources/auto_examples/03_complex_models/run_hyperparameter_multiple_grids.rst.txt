
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/03_complex_models/run_hyperparameter_multiple_grids.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_03_complex_models_run_hyperparameter_multiple_grids.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_03_complex_models_run_hyperparameter_multiple_grids.py:


Tuning Multiple Hyperparameters Grids
=====================================

This example uses the 'fmri' dataset, performs simple binary classification
using a Support Vector Machine classifier while tuning multiple hyperparameters
grids at the same time.


References
----------
Waskom, M.L., Frank, M.C., Wagner, A.D. (2016). Adaptive engagement of
cognitive control in context-dependent decision-making. Cerebral Cortex.


.. include:: ../../links.inc

.. GENERATED FROM PYTHON SOURCE LINES 18-28

.. code-block:: default

    # Authors: Federico Raimondo <f.raimondo@fz-juelich.de>
    #
    # License: AGPL
    import numpy as np
    from seaborn import load_dataset

    from julearn import run_cross_validation
    from julearn.utils import configure_logging
    from julearn.pipeline import PipelineCreator








.. GENERATED FROM PYTHON SOURCE LINES 29-30

Set the logging level to info to see extra information

.. GENERATED FROM PYTHON SOURCE LINES 30-32

.. code-block:: default

    configure_logging(level="INFO")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    2023-06-23 08:33:13,377 - julearn - INFO - ===== Lib Versions =====
    2023-06-23 08:33:13,377 - julearn - INFO - numpy: 1.25.0
    2023-06-23 08:33:13,377 - julearn - INFO - scipy: 1.10.1
    2023-06-23 08:33:13,377 - julearn - INFO - sklearn: 1.2.2
    2023-06-23 08:33:13,377 - julearn - INFO - pandas: 2.0.2
    2023-06-23 08:33:13,378 - julearn - INFO - julearn: 0.3.0.dev211
    2023-06-23 08:33:13,378 - julearn - INFO - ========================




.. GENERATED FROM PYTHON SOURCE LINES 33-34

Set the random seed to always have the same example

.. GENERATED FROM PYTHON SOURCE LINES 34-36

.. code-block:: default

    np.random.seed(42)








.. GENERATED FROM PYTHON SOURCE LINES 37-38

Load the dataset

.. GENERATED FROM PYTHON SOURCE LINES 38-41

.. code-block:: default

    df_fmri = load_dataset("fmri")
    print(df_fmri.head())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      subject  timepoint event    region    signal
    0     s13         18  stim  parietal -0.017552
    1      s5         14  stim  parietal -0.080883
    2     s12         18  stim  parietal -0.081033
    3     s11         18  stim  parietal -0.046134
    4     s10         18  stim  parietal -0.037970




.. GENERATED FROM PYTHON SOURCE LINES 42-43

Set the dataframe in the right format

.. GENERATED FROM PYTHON SOURCE LINES 43-53

.. code-block:: default

    df_fmri = df_fmri.pivot(
        index=["subject", "timepoint", "event"], columns="region", values="signal"
    )

    df_fmri = df_fmri.reset_index()
    print(df_fmri.head())

    X = ["frontal", "parietal"]
    y = "event"





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    region subject  timepoint event   frontal  parietal
    0           s0          0   cue  0.007766 -0.006899
    1           s0          0  stim -0.021452 -0.039327
    2           s0          1   cue  0.016440  0.000300
    3           s0          1  stim -0.021054 -0.035735
    4           s0          2   cue  0.024296  0.033220




.. GENERATED FROM PYTHON SOURCE LINES 54-55

Lets do a first attempt and use a linear SVM with the default parameters.

.. GENERATED FROM PYTHON SOURCE LINES 55-64

.. code-block:: default


    creator = PipelineCreator(problem_type="classification")
    creator.add("zscore")
    creator.add("svm", kernel="linear")

    scores = run_cross_validation(X=X, y=y, data=df_fmri, model=creator)

    print(scores["test_score"].mean())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    2023-06-23 08:33:13,400 - julearn - INFO - Adding step zscore that applies to ColumnTypes<types={'continuous'}; pattern=(?:__:type:__continuous)>
    2023-06-23 08:33:13,400 - julearn - INFO - Step added
    2023-06-23 08:33:13,400 - julearn - INFO - Adding step svm that applies to ColumnTypes<types={'continuous'}; pattern=(?:__:type:__continuous)>
    2023-06-23 08:33:13,400 - julearn - INFO - Setting hyperparameter kernel = linear
    2023-06-23 08:33:13,401 - julearn - INFO - Step added
    2023-06-23 08:33:13,401 - julearn - INFO - ==== Input Data ====
    2023-06-23 08:33:13,401 - julearn - INFO - Using dataframe as input
    2023-06-23 08:33:13,401 - julearn - INFO -      Features: ['frontal', 'parietal']
    2023-06-23 08:33:13,401 - julearn - INFO -      Target: event
    2023-06-23 08:33:13,401 - julearn - INFO -      Expanded features: ['frontal', 'parietal']
    2023-06-23 08:33:13,401 - julearn - INFO -      X_types:{}
    2023-06-23 08:33:13,401 - julearn - WARNING - The following columns are not defined in X_types: ['frontal', 'parietal']. They will be treated as continuous.
    /home/runner/work/julearn/julearn/julearn/utils/logging.py:238: RuntimeWarning: The following columns are not defined in X_types: ['frontal', 'parietal']. They will be treated as continuous.
      warn(msg, category=category)
    2023-06-23 08:33:13,402 - julearn - INFO - ====================
    2023-06-23 08:33:13,402 - julearn - INFO - 
    2023-06-23 08:33:13,403 - julearn - INFO - = Model Parameters =
    2023-06-23 08:33:13,403 - julearn - INFO - ====================
    2023-06-23 08:33:13,403 - julearn - INFO - 
    2023-06-23 08:33:13,403 - julearn - INFO - = Data Information =
    2023-06-23 08:33:13,403 - julearn - INFO -      Problem type: classification
    2023-06-23 08:33:13,404 - julearn - INFO -      Number of samples: 532
    2023-06-23 08:33:13,404 - julearn - INFO -      Number of features: 2
    2023-06-23 08:33:13,404 - julearn - INFO - ====================
    2023-06-23 08:33:13,404 - julearn - INFO - 
    2023-06-23 08:33:13,404 - julearn - INFO -      Number of classes: 2
    2023-06-23 08:33:13,404 - julearn - INFO -      Target type: object
    2023-06-23 08:33:13,405 - julearn - INFO -      Class distributions: event
    cue     266
    stim    266
    Name: count, dtype: int64
    2023-06-23 08:33:13,405 - julearn - INFO - Using outer CV scheme KFold(n_splits=5, random_state=None, shuffle=False)
    2023-06-23 08:33:13,405 - julearn - INFO - Binary classification problem detected.
    0.5939164168576971




.. GENERATED FROM PYTHON SOURCE LINES 65-73

Now lets tune a bit this SVM. We will use a grid search to tune the
regularization parameter C and the kernel. We will also tune the gamma.
But since the gamma is only used for the rbf kernel, we will use a
different grid for the rbf kernel.

To specify two different sets of parameters for the same step, we can
explicitly specify the name of the step. This is done by passing the
``name`` parameter to the ``add`` method.

.. GENERATED FROM PYTHON SOURCE LINES 73-99

.. code-block:: default

    creator = PipelineCreator(problem_type="classification")
    creator.add("zscore")
    creator.add("svm", kernel="linear", C=[0.01, 0.1], name="svm")
    creator.add(
        "svm",
        kernel="rbf",
        C=[0.01, 0.1],
        gamma=["scale", "auto", 1e-2, 1e-3],
        name="svm",
    )

    search_params = {
        "kind": "grid",
        "cv": 2,  # to speed up the example
    }

    scores, estimator = run_cross_validation(
        X=X,
        y=y,
        data=df_fmri,
        model=creator,
        search_params=search_params,
        return_estimator="final",
    )

    print(scores["test_score"].mean())




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    2023-06-23 08:33:13,498 - julearn - INFO - Adding step zscore that applies to ColumnTypes<types={'continuous'}; pattern=(?:__:type:__continuous)>
    2023-06-23 08:33:13,499 - julearn - INFO - Step added
    2023-06-23 08:33:13,499 - julearn - INFO - Adding step svm that applies to ColumnTypes<types={'continuous'}; pattern=(?:__:type:__continuous)>
    2023-06-23 08:33:13,499 - julearn - INFO - Setting hyperparameter kernel = linear
    2023-06-23 08:33:13,499 - julearn - INFO - Tuning hyperparameter C = [0.01, 0.1]
    2023-06-23 08:33:13,499 - julearn - INFO - Step added
    2023-06-23 08:33:13,499 - julearn - INFO - Adding step svm that applies to ColumnTypes<types={'continuous'}; pattern=(?:__:type:__continuous)>
    2023-06-23 08:33:13,499 - julearn - INFO - Setting hyperparameter kernel = rbf
    2023-06-23 08:33:13,499 - julearn - INFO - Tuning hyperparameter C = [0.01, 0.1]
    2023-06-23 08:33:13,499 - julearn - INFO - Tuning hyperparameter gamma = ['scale', 'auto', 0.01, 0.001]
    2023-06-23 08:33:13,500 - julearn - INFO - Step added
    2023-06-23 08:33:13,500 - julearn - INFO - ==== Input Data ====
    2023-06-23 08:33:13,500 - julearn - INFO - Using dataframe as input
    2023-06-23 08:33:13,500 - julearn - INFO -      Features: ['frontal', 'parietal']
    2023-06-23 08:33:13,500 - julearn - INFO -      Target: event
    2023-06-23 08:33:13,500 - julearn - INFO -      Expanded features: ['frontal', 'parietal']
    2023-06-23 08:33:13,500 - julearn - INFO -      X_types:{}
    2023-06-23 08:33:13,500 - julearn - WARNING - The following columns are not defined in X_types: ['frontal', 'parietal']. They will be treated as continuous.
    /home/runner/work/julearn/julearn/julearn/utils/logging.py:238: RuntimeWarning: The following columns are not defined in X_types: ['frontal', 'parietal']. They will be treated as continuous.
      warn(msg, category=category)
    2023-06-23 08:33:13,501 - julearn - INFO - ====================
    2023-06-23 08:33:13,501 - julearn - INFO - 
    2023-06-23 08:33:13,502 - julearn - INFO - = Model Parameters =
    2023-06-23 08:33:13,502 - julearn - INFO - Tuning hyperparameters using grid
    2023-06-23 08:33:13,502 - julearn - INFO - Hyperparameters:
    2023-06-23 08:33:13,502 - julearn - INFO -      svm__C: [0.01, 0.1]
    2023-06-23 08:33:13,502 - julearn - INFO - Using inner CV scheme KFold(n_splits=2, random_state=None, shuffle=False)
    2023-06-23 08:33:13,502 - julearn - INFO - Search Parameters:
    2023-06-23 08:33:13,503 - julearn - INFO -      cv: KFold(n_splits=2, random_state=None, shuffle=False)
    2023-06-23 08:33:13,503 - julearn - INFO - ====================
    2023-06-23 08:33:13,503 - julearn - INFO - 
    2023-06-23 08:33:13,503 - julearn - INFO - = Model Parameters =
    2023-06-23 08:33:13,504 - julearn - INFO - Tuning hyperparameters using grid
    2023-06-23 08:33:13,504 - julearn - INFO - Hyperparameters:
    2023-06-23 08:33:13,504 - julearn - INFO -      svm__C: [0.01, 0.1]
    2023-06-23 08:33:13,504 - julearn - INFO -      svm__gamma: ['scale', 'auto', 0.01, 0.001]
    2023-06-23 08:33:13,504 - julearn - INFO - Using inner CV scheme KFold(n_splits=2, random_state=None, shuffle=False)
    2023-06-23 08:33:13,504 - julearn - INFO - Search Parameters:
    2023-06-23 08:33:13,504 - julearn - INFO -      cv: KFold(n_splits=2, random_state=None, shuffle=False)
    2023-06-23 08:33:13,504 - julearn - INFO - ====================
    2023-06-23 08:33:13,504 - julearn - INFO - 
    2023-06-23 08:33:13,504 - julearn - INFO - = Model Parameters =
    2023-06-23 08:33:13,504 - julearn - INFO - Tuning hyperparameters using grid
    2023-06-23 08:33:13,504 - julearn - INFO - Hyperparameters list:
    2023-06-23 08:33:13,505 - julearn - INFO -      Set 0
    2023-06-23 08:33:13,505 - julearn - INFO -              svm__C: [0.01, 0.1]
    2023-06-23 08:33:13,505 - julearn - INFO -              set_column_types: [SetColumnTypes(X_types={})]
    2023-06-23 08:33:13,505 - julearn - INFO -              svm: [SVC(kernel='linear')]
    2023-06-23 08:33:13,505 - julearn - INFO -      Set 1
    2023-06-23 08:33:13,505 - julearn - INFO -              svm__C: [0.01, 0.1]
    2023-06-23 08:33:13,505 - julearn - INFO -              svm__gamma: ['scale', 'auto', 0.01, 0.001]
    2023-06-23 08:33:13,505 - julearn - INFO -              set_column_types: [SetColumnTypes(X_types={})]
    2023-06-23 08:33:13,506 - julearn - INFO -              svm: [SVC()]
    2023-06-23 08:33:13,506 - julearn - INFO - Using inner CV scheme KFold(n_splits=2, random_state=None, shuffle=False)
    2023-06-23 08:33:13,506 - julearn - INFO - Search Parameters:
    2023-06-23 08:33:13,506 - julearn - INFO -      cv: KFold(n_splits=2, random_state=None, shuffle=False)
    2023-06-23 08:33:13,506 - julearn - INFO - ====================
    2023-06-23 08:33:13,506 - julearn - INFO - 
    2023-06-23 08:33:13,506 - julearn - INFO - = Data Information =
    2023-06-23 08:33:13,506 - julearn - INFO -      Problem type: classification
    2023-06-23 08:33:13,506 - julearn - INFO -      Number of samples: 532
    2023-06-23 08:33:13,507 - julearn - INFO -      Number of features: 2
    2023-06-23 08:33:13,507 - julearn - INFO - ====================
    2023-06-23 08:33:13,507 - julearn - INFO - 
    2023-06-23 08:33:13,507 - julearn - INFO -      Number of classes: 2
    2023-06-23 08:33:13,507 - julearn - INFO -      Target type: object
    2023-06-23 08:33:13,508 - julearn - INFO -      Class distributions: event
    cue     266
    stim    266
    Name: count, dtype: int64
    2023-06-23 08:33:13,508 - julearn - INFO - Using outer CV scheme KFold(n_splits=5, random_state=None, shuffle=False)
    2023-06-23 08:33:13,508 - julearn - INFO - Binary classification problem detected.
    0.7087109857168048




.. GENERATED FROM PYTHON SOURCE LINES 100-101

It seems that we might have found a better model, but which one is it?

.. GENERATED FROM PYTHON SOURCE LINES 101-103

.. code-block:: default

    print(estimator.best_params_)
    print(estimator.best_estimator_["svm"]._gamma)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    {'set_column_types': SetColumnTypes(X_types={}), 'svm': SVC(C=0.1), 'svm__C': 0.1, 'svm__gamma': 'scale'}
    0.5





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  2.188 seconds)


.. _sphx_glr_download_auto_examples_03_complex_models_run_hyperparameter_multiple_grids.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: run_hyperparameter_multiple_grids.py <run_hyperparameter_multiple_grids.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: run_hyperparameter_multiple_grids.ipynb <run_hyperparameter_multiple_grids.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
