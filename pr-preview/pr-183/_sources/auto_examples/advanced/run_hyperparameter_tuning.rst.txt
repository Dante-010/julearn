
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/advanced/run_hyperparameter_tuning.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_advanced_run_hyperparameter_tuning.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_advanced_run_hyperparameter_tuning.py:


Tuning Hyperparameters
=======================

This example uses the 'fmri' dataset, performs simple binary classification
using a Support Vector Machine classifier and analyse the model.


References
----------
Waskom, M.L., Frank, M.C., Wagner, A.D. (2016). Adaptive engagement of
cognitive control in context-dependent decision-making. Cerebral Cortex.


.. include:: ../../links.inc

.. GENERATED FROM PYTHON SOURCE LINES 17-27

.. code-block:: default

    # Authors: Federico Raimondo <f.raimondo@fz-juelich.de>
    #
    # License: AGPL
    import numpy as np
    from seaborn import load_dataset

    from julearn import run_cross_validation
    from julearn.utils import configure_logging
    from julearn.pipeline import PipelineCreator








.. GENERATED FROM PYTHON SOURCE LINES 28-29

Set the logging level to info to see extra information

.. GENERATED FROM PYTHON SOURCE LINES 29-31

.. code-block:: default

    configure_logging(level="INFO")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    2023-03-14 15:49:23,432 - julearn - INFO - ===== Lib Versions =====
    2023-03-14 15:49:23,432 - julearn - INFO - numpy: 1.23.5
    2023-03-14 15:49:23,432 - julearn - INFO - scipy: 1.10.1
    2023-03-14 15:49:23,432 - julearn - INFO - sklearn: 1.2.0rc1
    2023-03-14 15:49:23,432 - julearn - INFO - pandas: 1.5.3
    2023-03-14 15:49:23,432 - julearn - INFO - julearn: 0.1.dev1
    2023-03-14 15:49:23,432 - julearn - INFO - ========================




.. GENERATED FROM PYTHON SOURCE LINES 32-33

Set the random seed to always have the same example

.. GENERATED FROM PYTHON SOURCE LINES 33-36

.. code-block:: default

    np.random.seed(42)









.. GENERATED FROM PYTHON SOURCE LINES 37-38

Load the dataset

.. GENERATED FROM PYTHON SOURCE LINES 38-41

.. code-block:: default

    df_fmri = load_dataset("fmri")
    print(df_fmri.head())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      subject  timepoint event    region    signal
    0     s13         18  stim  parietal -0.017552
    1      s5         14  stim  parietal -0.080883
    2     s12         18  stim  parietal -0.081033
    3     s11         18  stim  parietal -0.046134
    4     s10         18  stim  parietal -0.037970




.. GENERATED FROM PYTHON SOURCE LINES 42-43

Set the dataframe in the right format

.. GENERATED FROM PYTHON SOURCE LINES 43-53

.. code-block:: default

    df_fmri = df_fmri.pivot(
        index=["subject", "timepoint", "event"], columns="region", values="signal"
    )

    df_fmri = df_fmri.reset_index()
    print(df_fmri.head())

    X = ["frontal", "parietal"]
    y = "event"





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    region subject  timepoint event   frontal  parietal
    0           s0          0   cue  0.007766 -0.006899
    1           s0          0  stim -0.021452 -0.039327
    2           s0          1   cue  0.016440  0.000300
    3           s0          1  stim -0.021054 -0.035735
    4           s0          2   cue  0.024296  0.033220




.. GENERATED FROM PYTHON SOURCE LINES 54-55

Lets do a first attempt and use a linear SVM with the default parameters.

.. GENERATED FROM PYTHON SOURCE LINES 55-64

.. code-block:: default


    creator = PipelineCreator(problem_type="classification")
    creator.add("zscore")
    creator.add("svm", kernel="linear")

    scores = run_cross_validation(X=X, y=y, data=df_fmri, model=creator)

    print(scores["test_score"].mean())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    2023-03-14 15:49:23,453 - julearn - INFO - Adding step zscore that applies to ColumnTypes<types={'continuous'}; pattern=(?:__:type:__continuous)>
    2023-03-14 15:49:23,454 - julearn - INFO - Step added
    2023-03-14 15:49:23,454 - julearn - INFO - Adding step svm that applies to ColumnTypes<types={'continuous'}; pattern=(?:__:type:__continuous)>
    2023-03-14 15:49:23,454 - julearn - INFO - Setting hyperparameter kernel = linear
    2023-03-14 15:49:23,454 - julearn - INFO - Step added
    2023-03-14 15:49:23,454 - julearn - INFO - ==== Input Data ====
    2023-03-14 15:49:23,454 - julearn - INFO - Using dataframe as input
    2023-03-14 15:49:23,454 - julearn - INFO -      Features: ['frontal', 'parietal']
    2023-03-14 15:49:23,454 - julearn - INFO -      Target: event
    2023-03-14 15:49:23,455 - julearn - INFO - ====================
    2023-03-14 15:49:23,455 - julearn - INFO - 
    2023-03-14 15:49:23,455 - julearn - WARNING - The following columns are not defined in X_types: ['frontal', 'parietal']. They will be treated as continuous.
    /home/runner/work/julearn/julearn/julearn/utils/logging.py:238: RuntimeWarning: The following columns are not defined in X_types: ['frontal', 'parietal']. They will be treated as continuous.
      warn(msg, category=category)
    2023-03-14 15:49:23,456 - julearn - INFO - = Model Parameters =
    2023-03-14 15:49:23,456 - julearn - INFO - ====================
    2023-03-14 15:49:23,456 - julearn - INFO - 
    2023-03-14 15:49:23,457 - julearn - INFO - Using outer CV scheme KFold(n_splits=5, random_state=None, shuffle=False)
    2023-03-14 15:49:23,457 - julearn - INFO - Binary classification problem detected.
    0.5939164168576971




.. GENERATED FROM PYTHON SOURCE LINES 65-68

The score is not so good. Lets try to see if there is an optimal
regularization parameter (C) for the linear SVM.
We will use a grid search to find the best C.

.. GENERATED FROM PYTHON SOURCE LINES 68-89

.. code-block:: default


    creator = PipelineCreator(problem_type="classification")
    creator.add("zscore")
    creator.add("svm", kernel="linear", C=[0.01, 0.1])

    search_params = {
        "kind": "grid",
        "cv": 2,  # to speed up the example
    }

    scores, estimator = run_cross_validation(
        X=X,
        y=y,
        data=df_fmri,
        model=creator,
        search_params=search_params,
        return_estimator="final",
    )

    print(scores["test_score"].mean())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    2023-03-14 15:49:23,552 - julearn - INFO - Adding step zscore that applies to ColumnTypes<types={'continuous'}; pattern=(?:__:type:__continuous)>
    2023-03-14 15:49:23,553 - julearn - INFO - Step added
    2023-03-14 15:49:23,553 - julearn - INFO - Adding step svm that applies to ColumnTypes<types={'continuous'}; pattern=(?:__:type:__continuous)>
    2023-03-14 15:49:23,553 - julearn - INFO - Setting hyperparameter kernel = linear
    2023-03-14 15:49:23,553 - julearn - INFO - Tuning hyperparameter C = [0.01, 0.1]
    2023-03-14 15:49:23,553 - julearn - INFO - Step added
    2023-03-14 15:49:23,553 - julearn - INFO - ==== Input Data ====
    2023-03-14 15:49:23,553 - julearn - INFO - Using dataframe as input
    2023-03-14 15:49:23,553 - julearn - INFO -      Features: ['frontal', 'parietal']
    2023-03-14 15:49:23,553 - julearn - INFO -      Target: event
    2023-03-14 15:49:23,554 - julearn - INFO - ====================
    2023-03-14 15:49:23,554 - julearn - INFO - 
    2023-03-14 15:49:23,554 - julearn - WARNING - The following columns are not defined in X_types: ['frontal', 'parietal']. They will be treated as continuous.
    /home/runner/work/julearn/julearn/julearn/utils/logging.py:238: RuntimeWarning: The following columns are not defined in X_types: ['frontal', 'parietal']. They will be treated as continuous.
      warn(msg, category=category)
    2023-03-14 15:49:23,555 - julearn - INFO - = Model Parameters =
    2023-03-14 15:49:23,555 - julearn - INFO - Tuning hyperparameters using grid
    2023-03-14 15:49:23,555 - julearn - INFO - Hyperparameters:
    2023-03-14 15:49:23,555 - julearn - INFO -      svm__C: [0.01, 0.1]
    2023-03-14 15:49:23,556 - julearn - INFO - Using inner CV scheme KFold(n_splits=2, random_state=None, shuffle=False)
    2023-03-14 15:49:23,556 - julearn - INFO - Search Parameters:
    2023-03-14 15:49:23,556 - julearn - INFO -      cv: KFold(n_splits=2, random_state=None, shuffle=False)
    2023-03-14 15:49:23,556 - julearn - INFO - ====================
    2023-03-14 15:49:23,556 - julearn - INFO - 
    2023-03-14 15:49:23,556 - julearn - INFO - Using outer CV scheme KFold(n_splits=5, random_state=None, shuffle=False)
    2023-03-14 15:49:23,556 - julearn - INFO - Binary classification problem detected.
    0.588308940222183




.. GENERATED FROM PYTHON SOURCE LINES 90-91

This did not change much, lets explore other kernels too.

.. GENERATED FROM PYTHON SOURCE LINES 91-106

.. code-block:: default


    creator = PipelineCreator(problem_type="classification")
    creator.add("zscore")
    creator.add("svm", kernel=["linear", "rbf", "poly"], C=[0.01, 0.1])

    scores, estimator = run_cross_validation(
        X=X,
        y=y,
        data=df_fmri,
        model=creator,
        search_params=search_params,
        return_estimator="final",
    )

    print(scores["test_score"].mean())




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    2023-03-14 15:49:24,035 - julearn - INFO - Adding step zscore that applies to ColumnTypes<types={'continuous'}; pattern=(?:__:type:__continuous)>
    2023-03-14 15:49:24,036 - julearn - INFO - Step added
    2023-03-14 15:49:24,036 - julearn - INFO - Adding step svm that applies to ColumnTypes<types={'continuous'}; pattern=(?:__:type:__continuous)>
    2023-03-14 15:49:24,036 - julearn - INFO - Tuning hyperparameter kernel = ['linear', 'rbf', 'poly']
    2023-03-14 15:49:24,036 - julearn - INFO - Tuning hyperparameter C = [0.01, 0.1]
    2023-03-14 15:49:24,036 - julearn - INFO - Step added
    2023-03-14 15:49:24,036 - julearn - INFO - ==== Input Data ====
    2023-03-14 15:49:24,036 - julearn - INFO - Using dataframe as input
    2023-03-14 15:49:24,036 - julearn - INFO -      Features: ['frontal', 'parietal']
    2023-03-14 15:49:24,036 - julearn - INFO -      Target: event
    2023-03-14 15:49:24,037 - julearn - INFO - ====================
    2023-03-14 15:49:24,037 - julearn - INFO - 
    2023-03-14 15:49:24,038 - julearn - WARNING - The following columns are not defined in X_types: ['frontal', 'parietal']. They will be treated as continuous.
    /home/runner/work/julearn/julearn/julearn/utils/logging.py:238: RuntimeWarning: The following columns are not defined in X_types: ['frontal', 'parietal']. They will be treated as continuous.
      warn(msg, category=category)
    2023-03-14 15:49:24,038 - julearn - INFO - = Model Parameters =
    2023-03-14 15:49:24,038 - julearn - INFO - Tuning hyperparameters using grid
    2023-03-14 15:49:24,038 - julearn - INFO - Hyperparameters:
    2023-03-14 15:49:24,039 - julearn - INFO -      svm__kernel: ['linear', 'rbf', 'poly']
    2023-03-14 15:49:24,039 - julearn - INFO -      svm__C: [0.01, 0.1]
    2023-03-14 15:49:24,039 - julearn - INFO - Using inner CV scheme KFold(n_splits=2, random_state=None, shuffle=False)
    2023-03-14 15:49:24,039 - julearn - INFO - Search Parameters:
    2023-03-14 15:49:24,039 - julearn - INFO -      cv: KFold(n_splits=2, random_state=None, shuffle=False)
    2023-03-14 15:49:24,039 - julearn - INFO - ====================
    2023-03-14 15:49:24,039 - julearn - INFO - 
    2023-03-14 15:49:24,039 - julearn - INFO - Using outer CV scheme KFold(n_splits=5, random_state=None, shuffle=False)
    2023-03-14 15:49:24,040 - julearn - INFO - Binary classification problem detected.
    0.7087109857168048




.. GENERATED FROM PYTHON SOURCE LINES 107-108

It seems that we might have found a better model, but which one is it?

.. GENERATED FROM PYTHON SOURCE LINES 108-110

.. code-block:: default

    print(estimator.best_params_)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    {'svm__C': 0.1, 'svm__kernel': 'rbf'}




.. GENERATED FROM PYTHON SOURCE LINES 111-113

Now that we know that a RBF kernel is better, lest test different *gamma*
parameters.

.. GENERATED FROM PYTHON SOURCE LINES 113-132

.. code-block:: default


    creator = PipelineCreator(problem_type="classification")
    creator.add("zscore")
    creator.add(
        "svm", kernel="rbf", C=[0.01, 0.1], gamma=[1e-2, 1e-3]
    )

    scores, estimator = run_cross_validation(
        X=X,
        y=y,
        data=df_fmri,
        model=creator,
        search_params=search_params,
        return_estimator="final",
    )

    print(scores["test_score"].mean())
    print(estimator.best_params_)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    2023-03-14 15:49:25,275 - julearn - INFO - Adding step zscore that applies to ColumnTypes<types={'continuous'}; pattern=(?:__:type:__continuous)>
    2023-03-14 15:49:25,275 - julearn - INFO - Step added
    2023-03-14 15:49:25,275 - julearn - INFO - Adding step svm that applies to ColumnTypes<types={'continuous'}; pattern=(?:__:type:__continuous)>
    2023-03-14 15:49:25,275 - julearn - INFO - Setting hyperparameter kernel = rbf
    2023-03-14 15:49:25,275 - julearn - INFO - Tuning hyperparameter C = [0.01, 0.1]
    2023-03-14 15:49:25,276 - julearn - INFO - Tuning hyperparameter gamma = [0.01, 0.001]
    2023-03-14 15:49:25,276 - julearn - INFO - Step added
    2023-03-14 15:49:25,276 - julearn - INFO - ==== Input Data ====
    2023-03-14 15:49:25,276 - julearn - INFO - Using dataframe as input
    2023-03-14 15:49:25,276 - julearn - INFO -      Features: ['frontal', 'parietal']
    2023-03-14 15:49:25,276 - julearn - INFO -      Target: event
    2023-03-14 15:49:25,277 - julearn - INFO - ====================
    2023-03-14 15:49:25,277 - julearn - INFO - 
    2023-03-14 15:49:25,277 - julearn - WARNING - The following columns are not defined in X_types: ['frontal', 'parietal']. They will be treated as continuous.
    /home/runner/work/julearn/julearn/julearn/utils/logging.py:238: RuntimeWarning: The following columns are not defined in X_types: ['frontal', 'parietal']. They will be treated as continuous.
      warn(msg, category=category)
    2023-03-14 15:49:25,278 - julearn - INFO - = Model Parameters =
    2023-03-14 15:49:25,278 - julearn - INFO - Tuning hyperparameters using grid
    2023-03-14 15:49:25,278 - julearn - INFO - Hyperparameters:
    2023-03-14 15:49:25,278 - julearn - INFO -      svm__C: [0.01, 0.1]
    2023-03-14 15:49:25,278 - julearn - INFO -      svm__gamma: [0.01, 0.001]
    2023-03-14 15:49:25,278 - julearn - INFO - Using inner CV scheme KFold(n_splits=2, random_state=None, shuffle=False)
    2023-03-14 15:49:25,278 - julearn - INFO - Search Parameters:
    2023-03-14 15:49:25,279 - julearn - INFO -      cv: KFold(n_splits=2, random_state=None, shuffle=False)
    2023-03-14 15:49:25,279 - julearn - INFO - ====================
    2023-03-14 15:49:25,279 - julearn - INFO - 
    2023-03-14 15:49:25,279 - julearn - INFO - Using outer CV scheme KFold(n_splits=5, random_state=None, shuffle=False)
    2023-03-14 15:49:25,279 - julearn - INFO - Binary classification problem detected.
    0.5188855581026275
    {'svm__C': 0.01, 'svm__gamma': 0.001}




.. GENERATED FROM PYTHON SOURCE LINES 133-135

It seems that without tuning the gamma parameter we had a better accuracy.
Let's add the default value and see what happens.

.. GENERATED FROM PYTHON SOURCE LINES 135-158

.. code-block:: default


    creator = PipelineCreator(problem_type="classification")
    creator.add("zscore")
    creator.add(
        "svm", kernel="rbf", C=[0.01, 0.1], gamma=[1e-2, 1e-3, "scale"]
    )
    X = ["frontal", "parietal"]
    y = "event"

    search_params = {"cv": 2}

    scores, estimator = run_cross_validation(
        X=X,
        y=y,
        data=df_fmri,
        model=creator,
        return_estimator="final",
        search_params=search_params,
    )

    print(scores["test_score"].mean())
    print(estimator.best_params_)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    2023-03-14 15:49:26,219 - julearn - INFO - Adding step zscore that applies to ColumnTypes<types={'continuous'}; pattern=(?:__:type:__continuous)>
    2023-03-14 15:49:26,219 - julearn - INFO - Step added
    2023-03-14 15:49:26,219 - julearn - INFO - Adding step svm that applies to ColumnTypes<types={'continuous'}; pattern=(?:__:type:__continuous)>
    2023-03-14 15:49:26,219 - julearn - INFO - Setting hyperparameter kernel = rbf
    2023-03-14 15:49:26,219 - julearn - INFO - Tuning hyperparameter C = [0.01, 0.1]
    2023-03-14 15:49:26,220 - julearn - INFO - Tuning hyperparameter gamma = [0.01, 0.001, 'scale']
    2023-03-14 15:49:26,220 - julearn - INFO - Step added
    2023-03-14 15:49:26,220 - julearn - INFO - ==== Input Data ====
    2023-03-14 15:49:26,220 - julearn - INFO - Using dataframe as input
    2023-03-14 15:49:26,220 - julearn - INFO -      Features: ['frontal', 'parietal']
    2023-03-14 15:49:26,220 - julearn - INFO -      Target: event
    2023-03-14 15:49:26,221 - julearn - INFO - ====================
    2023-03-14 15:49:26,221 - julearn - INFO - 
    2023-03-14 15:49:26,221 - julearn - WARNING - The following columns are not defined in X_types: ['frontal', 'parietal']. They will be treated as continuous.
    /home/runner/work/julearn/julearn/julearn/utils/logging.py:238: RuntimeWarning: The following columns are not defined in X_types: ['frontal', 'parietal']. They will be treated as continuous.
      warn(msg, category=category)
    2023-03-14 15:49:26,222 - julearn - INFO - = Model Parameters =
    2023-03-14 15:49:26,222 - julearn - INFO - Tuning hyperparameters using grid
    2023-03-14 15:49:26,222 - julearn - INFO - Hyperparameters:
    2023-03-14 15:49:26,222 - julearn - INFO -      svm__C: [0.01, 0.1]
    2023-03-14 15:49:26,222 - julearn - INFO -      svm__gamma: [0.01, 0.001, 'scale']
    2023-03-14 15:49:26,222 - julearn - INFO - Using inner CV scheme KFold(n_splits=2, random_state=None, shuffle=False)
    2023-03-14 15:49:26,222 - julearn - INFO - Search Parameters:
    2023-03-14 15:49:26,223 - julearn - INFO -      cv: KFold(n_splits=2, random_state=None, shuffle=False)
    2023-03-14 15:49:26,223 - julearn - INFO - ====================
    2023-03-14 15:49:26,223 - julearn - INFO - 
    2023-03-14 15:49:26,223 - julearn - INFO - Using outer CV scheme KFold(n_splits=5, random_state=None, shuffle=False)
    2023-03-14 15:49:26,223 - julearn - INFO - Binary classification problem detected.
    0.7087109857168048
    {'svm__C': 0.1, 'svm__gamma': 'scale'}




.. GENERATED FROM PYTHON SOURCE LINES 159-160

.. code-block:: default

    print(estimator.best_estimator_["svm"]._gamma)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    0.5





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.124 seconds)


.. _sphx_glr_download_auto_examples_advanced_run_hyperparameter_tuning.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: run_hyperparameter_tuning.py <run_hyperparameter_tuning.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: run_hyperparameter_tuning.ipynb <run_hyperparameter_tuning.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
