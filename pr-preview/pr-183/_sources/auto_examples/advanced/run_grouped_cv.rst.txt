
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/advanced/run_grouped_cv.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_advanced_run_grouped_cv.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_advanced_run_grouped_cv.py:


Grouped CV.
===========

This example uses the 'fMRI' dataset and performs GroupKFold
Cross-Validation for classification using Random Forest Classifier.

References
----------
Waskom, M.L., Frank, M.C., Wagner, A.D. (2016). Adaptive engagement of
cognitive control in context-dependent decision-making. Cerebral Cortex.


.. include:: ../../links.inc

.. GENERATED FROM PYTHON SOURCE LINES 17-35

.. code-block:: default


    # Authors: Federico Raimondo <f.raimondo@fz-juelich.de>
    #          Shammi More <s.more@fz-juelich.de>
    #          Kimia Nazarzadeh <k.nazarzadeh@fz-juelich.de>


    #
    # License: AGPL
    # Importing the necessary Python libraries
    import numpy as np

    from seaborn import load_dataset
    from sklearn.model_selection import GroupKFold

    from julearn.utils import configure_logging
    from julearn import run_cross_validation
    from julearn.model_selection import StratifiedGroupsKFold








.. GENERATED FROM PYTHON SOURCE LINES 36-37

Set the logging level to info to see extra information

.. GENERATED FROM PYTHON SOURCE LINES 37-39

.. code-block:: default

    configure_logging(level="INFO")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    2023-03-14 15:46:06,696 - julearn - INFO - ===== Lib Versions =====
    2023-03-14 15:46:06,696 - julearn - INFO - numpy: 1.23.5
    2023-03-14 15:46:06,696 - julearn - INFO - scipy: 1.10.1
    2023-03-14 15:46:06,696 - julearn - INFO - sklearn: 1.2.0rc1
    2023-03-14 15:46:06,696 - julearn - INFO - pandas: 1.5.3
    2023-03-14 15:46:06,696 - julearn - INFO - julearn: 0.1.dev1
    2023-03-14 15:46:06,696 - julearn - INFO - ========================




.. GENERATED FROM PYTHON SOURCE LINES 40-43

Dealing with Cross-Validation techniques
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


.. GENERATED FROM PYTHON SOURCE LINES 43-46

.. code-block:: default


    df_fmri = load_dataset("fmri")








.. GENERATED FROM PYTHON SOURCE LINES 47-49

First, lets get some information on what the dataset has:


.. GENERATED FROM PYTHON SOURCE LINES 49-52

.. code-block:: default


    print(df_fmri.head())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      subject  timepoint event    region    signal
    0     s13         18  stim  parietal -0.017552
    1      s5         14  stim  parietal -0.080883
    2     s12         18  stim  parietal -0.081033
    3     s11         18  stim  parietal -0.046134
    4     s10         18  stim  parietal -0.037970




.. GENERATED FROM PYTHON SOURCE LINES 53-58

From this information, we can infer that it is an fMRI study in which there
were several subjects, timepoints, events and signal extracted from several
brain regions.

Lets check how many kinds of each we have.

.. GENERATED FROM PYTHON SOURCE LINES 58-63

.. code-block:: default

    print(df_fmri["event"].unique())
    print(df_fmri["region"].unique())
    print(sorted(df_fmri["timepoint"].unique()))
    print(df_fmri["subject"].unique())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ['stim' 'cue']
    ['parietal' 'frontal']
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
    ['s13' 's5' 's12' 's11' 's10' 's9' 's8' 's7' 's6' 's4' 's3' 's2' 's1' 's0']




.. GENERATED FROM PYTHON SOURCE LINES 64-67

We have data from parietal and frontal regions during 2 types of events
(*cue* and *stim*) during 18 timepoints and for 14 subjects.
Lets see how many samples we have for each condition

.. GENERATED FROM PYTHON SOURCE LINES 67-77

.. code-block:: default


    print(df_fmri.groupby(["subject", "timepoint", "event", "region"]).count())
    print(
        np.unique(
            df_fmri.groupby(["subject", "timepoint", "event", "region"])
            .count()
            .values
        )
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

                                      signal
    subject timepoint event region          
    s0      0         cue   frontal        1
                            parietal       1
                      stim  frontal        1
                            parietal       1
            1         cue   frontal        1
    ...                                  ...
    s9      17        stim  parietal       1
            18        cue   frontal        1
                            parietal       1
                      stim  frontal        1
                            parietal       1

    [1064 rows x 1 columns]
    [1]




.. GENERATED FROM PYTHON SOURCE LINES 78-84

We have exactly one value per condition.

Lets try to build a model, that uses parietal and frontal signal to predicts
whether the event was a *cue* or a *stim*.

First we define our X and y variables.

.. GENERATED FROM PYTHON SOURCE LINES 84-87

.. code-block:: default

    X = ["parietal", "frontal"]
    y = "event"








.. GENERATED FROM PYTHON SOURCE LINES 88-93

In order for this to work, both *parietal* and *frontal* must be columns.
We need to *pivot* the table.

The values of *region* will be the columns. The column *signal* will be the
values. And the columns *subject*, *timepoint* and *event* will be the index

.. GENERATED FROM PYTHON SOURCE LINES 93-99

.. code-block:: default

    df_fmri = df_fmri.pivot(
        index=["subject", "timepoint", "event"], columns="region", values="signal"
    )

    df_fmri = df_fmri.reset_index()








.. GENERATED FROM PYTHON SOURCE LINES 100-102

Here we want to zscore all the features and then train a Support Vector
Machine classifier.

.. GENERATED FROM PYTHON SOURCE LINES 102-114

.. code-block:: default


    scores = run_cross_validation(
        X=X,
        y=y,
        data=df_fmri,
        preprocess="zscore",
        model="rf",
        problem_type="classification",
    )

    print(scores["test_score"].mean())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    2023-03-14 15:46:06,722 - julearn - INFO - ==== Input Data ====
    2023-03-14 15:46:06,723 - julearn - INFO - Using dataframe as input
    2023-03-14 15:46:06,723 - julearn - INFO -      Features: ['parietal', 'frontal']
    2023-03-14 15:46:06,723 - julearn - INFO -      Target: event
    2023-03-14 15:46:06,724 - julearn - INFO - ====================
    2023-03-14 15:46:06,724 - julearn - INFO - 
    2023-03-14 15:46:06,724 - julearn - WARNING - The following columns are not defined in X_types: ['parietal', 'frontal']. They will be treated as continuous.
    /home/runner/work/julearn/julearn/julearn/utils/logging.py:238: RuntimeWarning: The following columns are not defined in X_types: ['parietal', 'frontal']. They will be treated as continuous.
      warn(msg, category=category)
    2023-03-14 15:46:06,724 - julearn - INFO - Adding step zscore that applies to ColumnTypes<types={'continuous'}; pattern=(?:__:type:__continuous)>
    2023-03-14 15:46:06,724 - julearn - INFO - Step added
    2023-03-14 15:46:06,724 - julearn - INFO - Adding step rf that applies to ColumnTypes<types={'continuous'}; pattern=(?:__:type:__continuous)>
    2023-03-14 15:46:06,724 - julearn - INFO - Step added
    2023-03-14 15:46:06,725 - julearn - INFO - = Model Parameters =
    2023-03-14 15:46:06,725 - julearn - INFO - ====================
    2023-03-14 15:46:06,725 - julearn - INFO - 
    2023-03-14 15:46:06,725 - julearn - INFO - Using outer CV scheme KFold(n_splits=5, random_state=None, shuffle=False)
    2023-03-14 15:46:06,725 - julearn - INFO - Binary classification problem detected.
    0.6879739023099982




.. GENERATED FROM PYTHON SOURCE LINES 115-116

Train classification model with stratification on data

.. GENERATED FROM PYTHON SOURCE LINES 116-130

.. code-block:: default

    cv_stratified = StratifiedGroupsKFold(n_splits=2)
    scores, model = run_cross_validation(
        X=X,
        y=y,
        data=df_fmri,
        groups="subject",
        model="rf",
        problem_type="classification",
        cv=cv_stratified,
        return_estimator="final",
    )

    print(scores["test_score"].mean())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    2023-03-14 15:46:07,618 - julearn - INFO - ==== Input Data ====
    2023-03-14 15:46:07,618 - julearn - INFO - Using dataframe as input
    2023-03-14 15:46:07,618 - julearn - INFO -      Features: ['parietal', 'frontal']
    2023-03-14 15:46:07,618 - julearn - INFO -      Target: event
    2023-03-14 15:46:07,619 - julearn - INFO - Using subject as groups
    2023-03-14 15:46:07,620 - julearn - INFO - ====================
    2023-03-14 15:46:07,620 - julearn - INFO - 
    2023-03-14 15:46:07,620 - julearn - WARNING - The following columns are not defined in X_types: ['parietal', 'frontal']. They will be treated as continuous.
    /home/runner/work/julearn/julearn/julearn/utils/logging.py:238: RuntimeWarning: The following columns are not defined in X_types: ['parietal', 'frontal']. They will be treated as continuous.
      warn(msg, category=category)
    2023-03-14 15:46:07,620 - julearn - INFO - Adding step rf that applies to ColumnTypes<types={'continuous'}; pattern=(?:__:type:__continuous)>
    2023-03-14 15:46:07,620 - julearn - INFO - Step added
    2023-03-14 15:46:07,621 - julearn - INFO - = Model Parameters =
    2023-03-14 15:46:07,621 - julearn - INFO - ====================
    2023-03-14 15:46:07,621 - julearn - INFO - 
    2023-03-14 15:46:07,621 - julearn - INFO - Using outer CV scheme StratifiedGroupsKFold(n_splits=2, random_state=None, shuffle=False)
    2023-03-14 15:46:07,621 - julearn - INFO - Binary classification problem detected.
    0.6015037593984962




.. GENERATED FROM PYTHON SOURCE LINES 131-132

Train classification model without stratification on data

.. GENERATED FROM PYTHON SOURCE LINES 132-145

.. code-block:: default

    cv = GroupKFold(n_splits=2)
    scores, model = run_cross_validation(
        X=X,
        y=y,
        data=df_fmri,
        groups="subject",
        model="rf",
        problem_type="classification",
        cv=cv,
        return_estimator="final",
    )

    print(scores["test_score"].mean())




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    2023-03-14 15:46:08,116 - julearn - INFO - ==== Input Data ====
    2023-03-14 15:46:08,116 - julearn - INFO - Using dataframe as input
    2023-03-14 15:46:08,116 - julearn - INFO -      Features: ['parietal', 'frontal']
    2023-03-14 15:46:08,116 - julearn - INFO -      Target: event
    2023-03-14 15:46:08,117 - julearn - INFO - Using subject as groups
    2023-03-14 15:46:08,117 - julearn - INFO - ====================
    2023-03-14 15:46:08,118 - julearn - INFO - 
    2023-03-14 15:46:08,118 - julearn - WARNING - The following columns are not defined in X_types: ['parietal', 'frontal']. They will be treated as continuous.
    /home/runner/work/julearn/julearn/julearn/utils/logging.py:238: RuntimeWarning: The following columns are not defined in X_types: ['parietal', 'frontal']. They will be treated as continuous.
      warn(msg, category=category)
    2023-03-14 15:46:08,118 - julearn - INFO - Adding step rf that applies to ColumnTypes<types={'continuous'}; pattern=(?:__:type:__continuous)>
    2023-03-14 15:46:08,118 - julearn - INFO - Step added
    2023-03-14 15:46:08,118 - julearn - INFO - = Model Parameters =
    2023-03-14 15:46:08,119 - julearn - INFO - ====================
    2023-03-14 15:46:08,119 - julearn - INFO - 
    2023-03-14 15:46:08,119 - julearn - INFO - Using outer CV scheme GroupKFold(n_splits=2)
    2023-03-14 15:46:08,119 - julearn - INFO - Binary classification problem detected.
    0.6710526315789473





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.924 seconds)


.. _sphx_glr_download_auto_examples_advanced_run_grouped_cv.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: run_grouped_cv.py <run_grouped_cv.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: run_grouped_cv.ipynb <run_grouped_cv.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
