
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/basic/run_simple_binary_classification.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_basic_run_simple_binary_classification.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_basic_run_simple_binary_classification.py:


Simple Binary Classification
============================

This example uses the 'iris' dataset and performs a simple binary
classification using a Support Vector Machine classifier.

.. include:: ../../links.inc

.. GENERATED FROM PYTHON SOURCE LINES 10-17

.. code-block:: default

    # Authors: Federico Raimondo <f.raimondo@fz-juelich.de>
    #
    # License: AGPL
    from seaborn import load_dataset
    from julearn import run_cross_validation
    from julearn.utils import configure_logging








.. GENERATED FROM PYTHON SOURCE LINES 18-19

Set the logging level to info to see extra information

.. GENERATED FROM PYTHON SOURCE LINES 19-21

.. code-block:: default

    configure_logging(level='INFO')





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    2022-12-07 14:00:48,175 - julearn - INFO - ===== Lib Versions =====
    2022-12-07 14:00:48,175 - julearn - INFO - numpy: 1.23.5
    2022-12-07 14:00:48,175 - julearn - INFO - scipy: 1.9.3
    2022-12-07 14:00:48,175 - julearn - INFO - sklearn: 1.2.0rc1
    2022-12-07 14:00:48,175 - julearn - INFO - pandas: 1.5.2
    2022-12-07 14:00:48,176 - julearn - INFO - julearn: 0.0.1.dev1
    2022-12-07 14:00:48,176 - julearn - INFO - ========================




.. GENERATED FROM PYTHON SOURCE LINES 22-24

.. code-block:: default

    df_iris = load_dataset('iris')








.. GENERATED FROM PYTHON SOURCE LINES 25-27

The dataset has three kind of species. We will keep two to perform a binary
classification.

.. GENERATED FROM PYTHON SOURCE LINES 27-29

.. code-block:: default

    df_iris = df_iris[df_iris['species'].isin(['versicolor', 'virginica'])]








.. GENERATED FROM PYTHON SOURCE LINES 30-32

As features, we will use the sepal length, width and petal length.
We will try to predict the species.

.. GENERATED FROM PYTHON SOURCE LINES 32-41

.. code-block:: default


    X = ['sepal_length', 'sepal_width', 'petal_length']
    y = 'species'
    scores = run_cross_validation(
        X=X, y=y, data=df_iris, model='svm',
        preprocess='zscore')

    print(scores['test_score'])





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    2022-12-07 14:00:48,587 - julearn - INFO - ==== Input Data ====
    2022-12-07 14:00:48,587 - julearn - INFO - Using dataframe as input
    2022-12-07 14:00:48,587 - julearn - INFO -      Features: ['sepal_length', 'sepal_width', 'petal_length']
    2022-12-07 14:00:48,587 - julearn - INFO -      Target: species
    2022-12-07 14:00:48,588 - julearn - INFO - ====================
    2022-12-07 14:00:48,588 - julearn - INFO - 
    2022-12-07 14:00:48,588 - julearn - INFO - Adding step zscore that applies to <julearn.base.column_types.ColumnTypes object at 0x7f72c5e0f070>
    2022-12-07 14:00:48,588 - julearn - INFO - Step added
    2022-12-07 14:00:48,588 - julearn - INFO - Adding step svm that applies to <julearn.base.column_types.ColumnTypes object at 0x7f72c5e0eef0>
    2022-12-07 14:00:48,589 - julearn - INFO - Step added
    2022-12-07 14:00:48,590 - julearn - INFO - = Model Parameters =
    2022-12-07 14:00:48,590 - julearn - INFO - ====================
    2022-12-07 14:00:48,590 - julearn - INFO - 
    2022-12-07 14:00:48,590 - julearn - INFO - Using outer CV scheme KFold(n_splits=5, random_state=None, shuffle=False)
    2022-12-07 14:00:48,590 - julearn - INFO - Binary classification problem detected.
    0    0.90
    1    0.75
    2    0.95
    3    0.70
    4    0.90
    Name: test_score, dtype: float64




.. GENERATED FROM PYTHON SOURCE LINES 42-46

Additionally, we can choose to assess the performance of the model using
different scoring functions.

For example, we might have an unbalanced dataset:

.. GENERATED FROM PYTHON SOURCE LINES 46-50

.. code-block:: default


    df_unbalanced = df_iris[20:]  # drop the first 20 versicolor samples
    print(df_unbalanced['species'].value_counts())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    virginica     50
    versicolor    30
    Name: species, dtype: int64




.. GENERATED FROM PYTHON SOURCE LINES 51-56

If we compute the `accuracy`, we might not account for this imbalance. A more
suitable metric is the `balanced_accuracy`. More information in scikit-learn:
`Balanced Accuracy`_

We will also set the random seed so we always split the data in the same way.

.. GENERATED FROM PYTHON SOURCE LINES 56-64

.. code-block:: default

    scores = run_cross_validation(
        X=X, y=y, data=df_unbalanced, model='svm', seed=42, preprocess='zscore',
        scoring=['accuracy', 'balanced_accuracy'])

    print(scores['test_accuracy'].mean())
    print(scores['test_balanced_accuracy'].mean())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    2022-12-07 14:00:48,653 - julearn - INFO - Setting random seed to 42
    2022-12-07 14:00:48,653 - julearn - INFO - ==== Input Data ====
    2022-12-07 14:00:48,653 - julearn - INFO - Using dataframe as input
    2022-12-07 14:00:48,653 - julearn - INFO -      Features: ['sepal_length', 'sepal_width', 'petal_length']
    2022-12-07 14:00:48,653 - julearn - INFO -      Target: species
    2022-12-07 14:00:48,654 - julearn - INFO - ====================
    2022-12-07 14:00:48,654 - julearn - INFO - 
    2022-12-07 14:00:48,654 - julearn - INFO - Adding step zscore that applies to <julearn.base.column_types.ColumnTypes object at 0x7f72c5e4cc40>
    2022-12-07 14:00:48,654 - julearn - INFO - Step added
    2022-12-07 14:00:48,654 - julearn - INFO - Adding step svm that applies to <julearn.base.column_types.ColumnTypes object at 0x7f72c5e0f400>
    2022-12-07 14:00:48,655 - julearn - INFO - Step added
    2022-12-07 14:00:48,655 - julearn - INFO - = Model Parameters =
    2022-12-07 14:00:48,655 - julearn - INFO - ====================
    2022-12-07 14:00:48,655 - julearn - INFO - 
    2022-12-07 14:00:48,655 - julearn - INFO - Using outer CV scheme KFold(n_splits=5, random_state=None, shuffle=False)
    2022-12-07 14:00:48,655 - julearn - INFO - Binary classification problem detected.
    /opt/hostedtoolcache/Python/3.10.8/x64/lib/python3.10/site-packages/sklearn/metrics/_classification.py:2184: UserWarning: y_pred contains classes not in y_true
      warnings.warn("y_pred contains classes not in y_true")
    /opt/hostedtoolcache/Python/3.10.8/x64/lib/python3.10/site-packages/sklearn/metrics/_classification.py:2184: UserWarning: y_pred contains classes not in y_true
      warnings.warn("y_pred contains classes not in y_true")
    /opt/hostedtoolcache/Python/3.10.8/x64/lib/python3.10/site-packages/sklearn/metrics/_classification.py:2184: UserWarning: y_pred contains classes not in y_true
      warnings.warn("y_pred contains classes not in y_true")
    /opt/hostedtoolcache/Python/3.10.8/x64/lib/python3.10/site-packages/sklearn/metrics/_classification.py:2184: UserWarning: y_pred contains classes not in y_true
      warnings.warn("y_pred contains classes not in y_true")
    0.8625
    0.8678571428571429




.. GENERATED FROM PYTHON SOURCE LINES 65-75

Other kind of metrics allows us to evaluate how good our model is to detect
specific targets. Suppose we want to create a model that correctly identifies
the `versicolor` samples.

Now we might want to evaluate the precision score, or the ratio of true
positives (tp) over all positives (true and false positives). More
information in scikit-learn: `Precision`_

For this metric to work, we need to define which are our `positive` values.
In this example, we are interested in detecting `versicolor`.

.. GENERATED FROM PYTHON SOURCE LINES 75-79

.. code-block:: default

    precision_scores = run_cross_validation(
        X=X, y=y, data=df_unbalanced, model='svm', preprocess='zscore', seed=42,
        scoring='precision', pos_labels='versicolor')
    print(precision_scores['test_score'].mean())




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    2022-12-07 14:00:48,719 - julearn - INFO - Setting random seed to 42
    2022-12-07 14:00:48,719 - julearn - INFO - ==== Input Data ====
    2022-12-07 14:00:48,719 - julearn - INFO - Using dataframe as input
    2022-12-07 14:00:48,719 - julearn - INFO -      Features: ['sepal_length', 'sepal_width', 'petal_length']
    2022-12-07 14:00:48,719 - julearn - INFO -      Target: species
    2022-12-07 14:00:48,720 - julearn - INFO - Setting the following as positive labels ['versicolor']
    2022-12-07 14:00:48,721 - julearn - INFO - ====================
    2022-12-07 14:00:48,721 - julearn - INFO - 
    2022-12-07 14:00:48,721 - julearn - INFO - Adding step zscore that applies to <julearn.base.column_types.ColumnTypes object at 0x7f72c5e0f070>
    2022-12-07 14:00:48,721 - julearn - INFO - Step added
    2022-12-07 14:00:48,721 - julearn - INFO - Adding step svm that applies to <julearn.base.column_types.ColumnTypes object at 0x7f72c639a4a0>
    2022-12-07 14:00:48,721 - julearn - INFO - Step added
    2022-12-07 14:00:48,722 - julearn - INFO - = Model Parameters =
    2022-12-07 14:00:48,722 - julearn - INFO - ====================
    2022-12-07 14:00:48,722 - julearn - INFO - 
    2022-12-07 14:00:48,722 - julearn - INFO - Using outer CV scheme KFold(n_splits=5, random_state=None, shuffle=False)
    2022-12-07 14:00:48,722 - julearn - INFO - Binary classification problem detected.
    0.4





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.613 seconds)


.. _sphx_glr_download_auto_examples_basic_run_simple_binary_classification.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: run_simple_binary_classification.py <run_simple_binary_classification.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: run_simple_binary_classification.ipynb <run_simple_binary_classification.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
