
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/basic/run_plot_example_regression.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_basic_run_plot_example_regression.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_basic_run_plot_example_regression.py:


Regression Analysis
============================

This example uses the 'diabetes' data from sklearn datasets and performs
a regression analysis using a Ridge Regression model.

.. GENERATED FROM PYTHON SOURCE LINES 9-25

.. code-block:: default

    # Authors: Shammi More <s.more@fz-juelich.de>
    #          Federico Raimondo <f.raimondo@fz-juelich.de>
    #
    # License: AGPL

    import pandas as pd
    import seaborn as sns
    import numpy as np
    import matplotlib.pyplot as plt
    from sklearn.datasets import load_diabetes
    from sklearn.metrics import mean_absolute_error
    from sklearn.model_selection import train_test_split

    from julearn import run_cross_validation
    from julearn.utils import configure_logging








.. GENERATED FROM PYTHON SOURCE LINES 26-27

Set the logging level to info to see extra information

.. GENERATED FROM PYTHON SOURCE LINES 27-29

.. code-block:: default

    configure_logging(level="INFO")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    2023-03-31 12:59:45,220 - julearn - INFO - ===== Lib Versions =====
    2023-03-31 12:59:45,220 - julearn - INFO - numpy: 1.23.5
    2023-03-31 12:59:45,220 - julearn - INFO - scipy: 1.10.1
    2023-03-31 12:59:45,220 - julearn - INFO - sklearn: 1.2.2
    2023-03-31 12:59:45,220 - julearn - INFO - pandas: 1.5.3
    2023-03-31 12:59:45,220 - julearn - INFO - julearn: 0.1.dev1
    2023-03-31 12:59:45,220 - julearn - INFO - ========================




.. GENERATED FROM PYTHON SOURCE LINES 30-31

load the diabetes data from sklearn as a pandas dataframe

.. GENERATED FROM PYTHON SOURCE LINES 31-33

.. code-block:: default

    features, target = load_diabetes(return_X_y=True, as_frame=True)








.. GENERATED FROM PYTHON SOURCE LINES 34-38

Dataset contains ten variables age, sex, body mass index, average  blood
pressure, and six blood serum measurements (s1-s6) diabetes patients and
a quantitative measure of disease progression one year after baseline which
is the target we are interested in predicting.

.. GENERATED FROM PYTHON SOURCE LINES 38-42

.. code-block:: default


    print("Features: \n", features.head())
    print("Target: \n", target.describe())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Features: 
             age       sex       bmi  ...        s4        s5        s6
    0  0.038076  0.050680  0.061696  ... -0.002592  0.019907 -0.017646
    1 -0.001882 -0.044642 -0.051474  ... -0.039493 -0.068332 -0.092204
    2  0.085299  0.050680  0.044451  ... -0.002592  0.002861 -0.025930
    3 -0.089063 -0.044642 -0.011595  ...  0.034309  0.022688 -0.009362
    4  0.005383 -0.044642 -0.036385  ... -0.002592 -0.031988 -0.046641

    [5 rows x 10 columns]
    Target: 
     count    442.000000
    mean     152.133484
    std       77.093005
    min       25.000000
    25%       87.000000
    50%      140.500000
    75%      211.500000
    max      346.000000
    Name: target, dtype: float64




.. GENERATED FROM PYTHON SOURCE LINES 43-45

Let's combine features and target together in one dataframe and define X
and y

.. GENERATED FROM PYTHON SOURCE LINES 45-50

.. code-block:: default

    data_diabetes = pd.concat([features, target], axis=1)

    X = ["age", "sex", "bmi", "bp", "s1", "s2", "s3", "s4", "s5", "s6"]
    y = "target"








.. GENERATED FROM PYTHON SOURCE LINES 51-52

calculate correlations between the features/variables and plot it as heat map

.. GENERATED FROM PYTHON SOURCE LINES 52-64

.. code-block:: default

    corr = data_diabetes.corr()
    fig, ax = plt.subplots(1, 1, figsize=(10, 7))
    sns.set(font_scale=1.2)
    sns.heatmap(
        corr,
        xticklabels=corr.columns,
        yticklabels=corr.columns,
        annot=True,
        fmt="0.1f",
    )





.. image-sg:: /auto_examples/basic/images/sphx_glr_run_plot_example_regression_001.png
   :alt: run plot example regression
   :srcset: /auto_examples/basic/images/sphx_glr_run_plot_example_regression_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Axes: >



.. GENERATED FROM PYTHON SOURCE LINES 65-66

Split the dataset into train and test

.. GENERATED FROM PYTHON SOURCE LINES 66-68

.. code-block:: default

    train_diabetes, test_diabetes = train_test_split(data_diabetes, test_size=0.3)








.. GENERATED FROM PYTHON SOURCE LINES 69-71

Train a ridge regression model on train dataset and use mean absolute error
for scoring

.. GENERATED FROM PYTHON SOURCE LINES 71-82

.. code-block:: default

    scores, model = run_cross_validation(
        X=X,
        y=y,
        data=train_diabetes,
        preprocess="zscore",
        problem_type="regression",
        model="ridge",
        return_estimator="final",
        scoring="neg_mean_absolute_error",
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    2023-03-31 12:59:45,494 - julearn - INFO - ==== Input Data ====
    2023-03-31 12:59:45,494 - julearn - INFO - Using dataframe as input
    2023-03-31 12:59:45,494 - julearn - INFO -      Features: ['age', 'sex', 'bmi', 'bp', 's1', 's2', 's3', 's4', 's5', 's6']
    2023-03-31 12:59:45,494 - julearn - INFO -      Target: target
    2023-03-31 12:59:45,494 - julearn - INFO -      Expanded features: ['age', 'sex', 'bmi', 'bp', 's1', 's2', 's3', 's4', 's5', 's6']
    2023-03-31 12:59:45,494 - julearn - INFO -      X_types:{}
    2023-03-31 12:59:45,495 - julearn - WARNING - The following columns are not defined in X_types: ['age', 'sex', 'bmi', 'bp', 's1', 's2', 's3', 's4', 's5', 's6']. They will be treated as continuous.
    /home/runner/work/julearn/julearn/julearn/utils/logging.py:238: RuntimeWarning: The following columns are not defined in X_types: ['age', 'sex', 'bmi', 'bp', 's1', 's2', 's3', 's4', 's5', 's6']. They will be treated as continuous.
      warn(msg, category=category)
    2023-03-31 12:59:45,496 - julearn - INFO - ====================
    2023-03-31 12:59:45,496 - julearn - INFO - 
    2023-03-31 12:59:45,496 - julearn - INFO - Adding step zscore that applies to ColumnTypes<types={'continuous'}; pattern=(?:__:type:__continuous)>
    2023-03-31 12:59:45,496 - julearn - INFO - Step added
    2023-03-31 12:59:45,496 - julearn - INFO - Adding step ridge that applies to ColumnTypes<types={'continuous'}; pattern=(?:__:type:__continuous)>
    2023-03-31 12:59:45,496 - julearn - INFO - Step added
    2023-03-31 12:59:45,497 - julearn - INFO - = Model Parameters =
    2023-03-31 12:59:45,497 - julearn - INFO - ====================
    2023-03-31 12:59:45,497 - julearn - INFO - 
    2023-03-31 12:59:45,497 - julearn - INFO - = Data Information =
    2023-03-31 12:59:45,497 - julearn - INFO -      Problem type: regression
    2023-03-31 12:59:45,497 - julearn - INFO -      Number of samples: 309
    2023-03-31 12:59:45,497 - julearn - INFO -      Number of features: 10
    2023-03-31 12:59:45,497 - julearn - INFO - ====================
    2023-03-31 12:59:45,497 - julearn - INFO - 
    2023-03-31 12:59:45,497 - julearn - INFO -      Target type: float64
    2023-03-31 12:59:45,497 - julearn - INFO - Using outer CV scheme KFold(n_splits=5, random_state=None, shuffle=False)




.. GENERATED FROM PYTHON SOURCE LINES 83-84

The scores dataframe has all the values for each CV split.

.. GENERATED FROM PYTHON SOURCE LINES 84-87

.. code-block:: default


    print(scores.head())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

       fit_time  score_time  ...  fold                          cv_mdsum
    0  0.005767    0.002843  ...     0  b10eef89b4192178d482d7a1587a248a
    1  0.005349    0.002826  ...     1  b10eef89b4192178d482d7a1587a248a
    2  0.005312    0.002823  ...     2  b10eef89b4192178d482d7a1587a248a
    3  0.005301    0.002815  ...     3  b10eef89b4192178d482d7a1587a248a
    4  0.005287    0.002794  ...     4  b10eef89b4192178d482d7a1587a248a

    [5 rows x 8 columns]




.. GENERATED FROM PYTHON SOURCE LINES 88-89

Mean value of mean absolute error across CV

.. GENERATED FROM PYTHON SOURCE LINES 89-91

.. code-block:: default

    print(scores["test_score"].mean() * -1)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    46.02379674814803




.. GENERATED FROM PYTHON SOURCE LINES 92-93

Now we can get the MAE fold and repetition:

.. GENERATED FROM PYTHON SOURCE LINES 93-100

.. code-block:: default


    df_mae = scores.set_index(["repeat", "fold"])["test_score"].unstack() * -1
    df_mae.index.name = "Repeats"
    df_mae.columns.name = "K-fold splits"

    print(df_mae)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    K-fold splits          0          1          2          3          4
    Repeats                                                             
    0              47.671971  45.494698  52.198902  39.140389  45.613024




.. GENERATED FROM PYTHON SOURCE LINES 101-102

Plot heatmap of mean absolute error (MAE) over all repeats and CV splits

.. GENERATED FROM PYTHON SOURCE LINES 102-106

.. code-block:: default

    fig, ax = plt.subplots(1, 1, figsize=(10, 7))
    sns.heatmap(df_mae, cmap="YlGnBu")
    plt.title("Cross-validation MAE")




.. image-sg:: /auto_examples/basic/images/sphx_glr_run_plot_example_regression_002.png
   :alt: Cross-validation MAE
   :srcset: /auto_examples/basic/images/sphx_glr_run_plot_example_regression_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Text(0.5, 1.0, 'Cross-validation MAE')



.. GENERATED FROM PYTHON SOURCE LINES 107-108

Let's plot the feature importance using the coefficients of the trained model

.. GENERATED FROM PYTHON SOURCE LINES 108-121

.. code-block:: default


    features = pd.DataFrame({"Features": X, "importance": model["ridge"].coef_})
    features.sort_values(by=["importance"], ascending=True, inplace=True)
    features["positive"] = features["importance"] > 0

    fig, ax = plt.subplots(1, 1, figsize=(10, 7))
    features.set_index("Features", inplace=True)
    features.importance.plot(
        kind="barh", color=features.positive.map({True: "blue", False: "red"})
    )
    ax.set(xlabel="Importance", title="Variable importance for Ridge Regression")





.. image-sg:: /auto_examples/basic/images/sphx_glr_run_plot_example_regression_003.png
   :alt: Variable importance for Ridge Regression
   :srcset: /auto_examples/basic/images/sphx_glr_run_plot_example_regression_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    [Text(0.5, 40.249999999999986, 'Importance'), Text(0.5, 1.0, 'Variable importance for Ridge Regression')]



.. GENERATED FROM PYTHON SOURCE LINES 122-124

Use the final model to make predictions on test data and plot scatterplot
of true values vs predicted values

.. GENERATED FROM PYTHON SOURCE LINES 124-148

.. code-block:: default


    y_true = test_diabetes[y]
    y_pred = model.predict(test_diabetes[X])
    mae = format(mean_absolute_error(y_true, y_pred), ".2f")
    corr = format(np.corrcoef(y_pred, y_true)[1, 0], ".2f")

    fig, ax = plt.subplots(1, 1, figsize=(10, 7))
    sns.set_style("darkgrid")
    plt.scatter(y_true, y_pred)
    plt.plot(y_true, y_true)
    xmin, xmax = ax.get_xlim()
    ymin, ymax = ax.get_ylim()
    text = "MAE: " + str(mae) + "   CORR: " + str(corr)
    ax.set(xlabel="True values", ylabel="Predicted values")
    plt.title("Actual vs Predicted")
    plt.text(
        xmax - 0.01 * xmax,
        ymax - 0.01 * ymax,
        text,
        verticalalignment="top",
        horizontalalignment="right",
        fontsize=12,
    )
    plt.axis("scaled")



.. image-sg:: /auto_examples/basic/images/sphx_glr_run_plot_example_regression_004.png
   :alt: Actual vs Predicted
   :srcset: /auto_examples/basic/images/sphx_glr_run_plot_example_regression_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (15.5, 356.5, 15.5, 356.5)




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.748 seconds)


.. _sphx_glr_download_auto_examples_basic_run_plot_example_regression.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: run_plot_example_regression.py <run_plot_example_regression.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: run_plot_example_regression.ipynb <run_plot_example_regression.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
