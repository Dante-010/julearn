
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/basic/run_apply_to_target.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_basic_run_apply_to_target.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_basic_run_apply_to_target.py:


Transforming target variable with z-score.
===========================================

This example uses the sklearn "diabetes" regression dataset, and transforms the
target variable, in this case, using z-score. Then, we perform a regression
analysis using Ridge Regression model.

.. GENERATED FROM PYTHON SOURCE LINES 10-28

.. code-block:: default

    # Authors: Lya K. Paas Oliveros <l.paas.oliveros@fz-juelich.de>
    #          Sami Hamdan <s.hamdan@fz-juelich.de>
    #
    # License: AGPL

    import pandas as pd
    import seaborn as sns
    import matplotlib.pyplot as plt
    from sklearn.datasets import load_diabetes
    from sklearn.model_selection import train_test_split

    from julearn import run_cross_validation
    from julearn.utils import configure_logging

    # this is crucial for creating the model in the new version
    from julearn.pipeline import PipelineCreator, TargetPipelineCreator









.. GENERATED FROM PYTHON SOURCE LINES 29-30

Set the logging level to info to see extra information

.. GENERATED FROM PYTHON SOURCE LINES 30-33

.. code-block:: default

    configure_logging(level="INFO")






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    2023-04-06 09:53:40,163 - julearn - INFO - ===== Lib Versions =====
    2023-04-06 09:53:40,164 - julearn - INFO - numpy: 1.23.5
    2023-04-06 09:53:40,164 - julearn - INFO - scipy: 1.10.1
    2023-04-06 09:53:40,164 - julearn - INFO - sklearn: 1.2.2
    2023-04-06 09:53:40,164 - julearn - INFO - pandas: 1.5.3
    2023-04-06 09:53:40,164 - julearn - INFO - julearn: 0.2.6.dev146
    2023-04-06 09:53:40,164 - julearn - INFO - ========================




.. GENERATED FROM PYTHON SOURCE LINES 34-35

Load the diabetes dataset from sklearn as a pandas dataframe

.. GENERATED FROM PYTHON SOURCE LINES 35-38

.. code-block:: default

    features, target = load_diabetes(return_X_y=True, as_frame=True)









.. GENERATED FROM PYTHON SOURCE LINES 39-43

Dataset contains ten variables age, sex, body mass index, average  blood
pressure, and six blood serum measurements (s1-s6) diabetes patients and
a quantitative measure of disease progression one year after baseline which
is the target we are interested in predicting.

.. GENERATED FROM PYTHON SOURCE LINES 43-47

.. code-block:: default

    print("Features: \n", features.head())
    print("Target: \n", target.describe())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Features: 
             age       sex       bmi  ...        s4        s5        s6
    0  0.038076  0.050680  0.061696  ... -0.002592  0.019907 -0.017646
    1 -0.001882 -0.044642 -0.051474  ... -0.039493 -0.068332 -0.092204
    2  0.085299  0.050680  0.044451  ... -0.002592  0.002861 -0.025930
    3 -0.089063 -0.044642 -0.011595  ...  0.034309  0.022688 -0.009362
    4  0.005383 -0.044642 -0.036385  ... -0.002592 -0.031988 -0.046641

    [5 rows x 10 columns]
    Target: 
     count    442.000000
    mean     152.133484
    std       77.093005
    min       25.000000
    25%       87.000000
    50%      140.500000
    75%      211.500000
    max      346.000000
    Name: target, dtype: float64




.. GENERATED FROM PYTHON SOURCE LINES 48-50

Let's combine features and target together in one dataframe and define X
and y

.. GENERATED FROM PYTHON SOURCE LINES 50-55

.. code-block:: default

    data_diabetes = pd.concat([features, target], axis=1)

    X = ["age", "sex", "bmi", "bp", "s1", "s2", "s3", "s4", "s5", "s6"]
    y = "target"








.. GENERATED FROM PYTHON SOURCE LINES 56-57

Split the dataset into train and test

.. GENERATED FROM PYTHON SOURCE LINES 57-60

.. code-block:: default

    train_diabetes, test_diabetes = train_test_split(data_diabetes, test_size=0.3)









.. GENERATED FROM PYTHON SOURCE LINES 61-63

Let's create the model. Since we will be transforming the target variable
we will first need to create a TargetPipelineCreator for this.

.. GENERATED FROM PYTHON SOURCE LINES 63-68

.. code-block:: default


    target_creator = TargetPipelineCreator()
    target_creator.add("zscore")






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <julearn.pipeline.target_pipeline_creator.TargetPipelineCreator object at 0x7f00522a4430>



.. GENERATED FROM PYTHON SOURCE LINES 69-70

Now we can create the pipeline using a PipelineCreator.

.. GENERATED FROM PYTHON SOURCE LINES 70-85

.. code-block:: default

    creator = PipelineCreator(problem_type="regression")
    creator.add(target_creator, apply_to="target")
    creator.add("ridge")

    scores, model = run_cross_validation(
        X=X,
        y=y,
        data=train_diabetes,
        model=creator,
        return_estimator="final",
        scoring="neg_mean_absolute_error",
    )

    print(scores.head(5))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    2023-04-06 09:53:40,184 - julearn - INFO - Adding step jutargetpipeline that applies to ColumnTypes<types={'target'}; pattern=(?:target)>
    2023-04-06 09:53:40,184 - julearn - INFO - Step added
    2023-04-06 09:53:40,184 - julearn - INFO - Adding step ridge that applies to ColumnTypes<types={'continuous'}; pattern=(?:__:type:__continuous)>
    2023-04-06 09:53:40,185 - julearn - INFO - Step added
    2023-04-06 09:53:40,185 - julearn - INFO - ==== Input Data ====
    2023-04-06 09:53:40,185 - julearn - INFO - Using dataframe as input
    2023-04-06 09:53:40,185 - julearn - INFO -      Features: ['age', 'sex', 'bmi', 'bp', 's1', 's2', 's3', 's4', 's5', 's6']
    2023-04-06 09:53:40,185 - julearn - INFO -      Target: target
    2023-04-06 09:53:40,185 - julearn - INFO -      Expanded features: ['age', 'sex', 'bmi', 'bp', 's1', 's2', 's3', 's4', 's5', 's6']
    2023-04-06 09:53:40,186 - julearn - INFO -      X_types:{}
    2023-04-06 09:53:40,186 - julearn - WARNING - The following columns are not defined in X_types: ['age', 'sex', 'bmi', 'bp', 's1', 's2', 's3', 's4', 's5', 's6']. They will be treated as continuous.
    /home/runner/work/julearn/julearn/julearn/utils/logging.py:238: RuntimeWarning: The following columns are not defined in X_types: ['age', 'sex', 'bmi', 'bp', 's1', 's2', 's3', 's4', 's5', 's6']. They will be treated as continuous.
      warn(msg, category=category)
    2023-04-06 09:53:40,186 - julearn - INFO - ====================
    2023-04-06 09:53:40,186 - julearn - INFO - 
    2023-04-06 09:53:40,188 - julearn - INFO - = Model Parameters =
    2023-04-06 09:53:40,188 - julearn - INFO - ====================
    2023-04-06 09:53:40,188 - julearn - INFO - 
    2023-04-06 09:53:40,188 - julearn - INFO - = Data Information =
    2023-04-06 09:53:40,188 - julearn - INFO -      Problem type: regression
    2023-04-06 09:53:40,188 - julearn - INFO -      Number of samples: 309
    2023-04-06 09:53:40,188 - julearn - INFO -      Number of features: 10
    2023-04-06 09:53:40,188 - julearn - INFO - ====================
    2023-04-06 09:53:40,188 - julearn - INFO - 
    2023-04-06 09:53:40,188 - julearn - INFO -      Target type: float64
    2023-04-06 09:53:40,188 - julearn - INFO - Using outer CV scheme KFold(n_splits=5, random_state=None, shuffle=False)
       fit_time  score_time  ...  fold                          cv_mdsum
    0  0.006277    0.002849  ...     0  b10eef89b4192178d482d7a1587a248a
    1  0.005044    0.002768  ...     1  b10eef89b4192178d482d7a1587a248a
    2  0.004887    0.002730  ...     2  b10eef89b4192178d482d7a1587a248a
    3  0.004900    0.002688  ...     3  b10eef89b4192178d482d7a1587a248a
    4  0.004885    0.002710  ...     4  b10eef89b4192178d482d7a1587a248a

    [5 rows x 8 columns]




.. GENERATED FROM PYTHON SOURCE LINES 86-87

Mean value of mean absolute error across CV

.. GENERATED FROM PYTHON SOURCE LINES 87-88

.. code-block:: default

    print(scores["test_score"].mean() * -1)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    50.935042203523196





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.116 seconds)


.. _sphx_glr_download_auto_examples_basic_run_apply_to_target.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: run_apply_to_target.py <run_apply_to_target.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: run_apply_to_target.ipynb <run_apply_to_target.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
