
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/05_customization/run_custom_scorers_regression.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_05_customization_run_custom_scorers_regression.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_05_customization_run_custom_scorers_regression.py:


Custom Scoring Function for Regression
======================================

This example uses the 'diabetes' data from sklearn datasets and performs
a regression analysis using a Ridge Regression model. As scorers, it uses
scikit-learn, julearn and a custom metric defined by the user.

.. GENERATED FROM PYTHON SOURCE LINES 10-25

.. code-block:: default

    # Authors: Shammi More <s.more@fz-juelich.de>
    #          Federico Raimondo <f.raimondo@fz-juelich.de>
    #
    # License: AGPL

    import pandas as pd
    import scipy
    from sklearn.datasets import load_diabetes

    from sklearn.metrics import make_scorer
    from julearn.scoring import register_scorer

    from julearn import run_cross_validation
    from julearn.utils import configure_logging








.. GENERATED FROM PYTHON SOURCE LINES 26-27

Set the logging level to info to see extra information

.. GENERATED FROM PYTHON SOURCE LINES 27-29

.. code-block:: default

    configure_logging(level="INFO")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    2023-08-07 09:48:22,605 - julearn - INFO - ===== Lib Versions =====
    2023-08-07 09:48:22,605 - julearn - INFO - numpy: 1.25.2
    2023-08-07 09:48:22,605 - julearn - INFO - scipy: 1.11.1
    2023-08-07 09:48:22,605 - julearn - INFO - sklearn: 1.3.0
    2023-08-07 09:48:22,605 - julearn - INFO - pandas: 2.0.3
    2023-08-07 09:48:22,605 - julearn - INFO - julearn: 0.3.1.dev16
    2023-08-07 09:48:22,605 - julearn - INFO - ========================




.. GENERATED FROM PYTHON SOURCE LINES 30-31

load the diabetes data from sklearn as a pandas dataframe

.. GENERATED FROM PYTHON SOURCE LINES 31-33

.. code-block:: default

    features, target = load_diabetes(return_X_y=True, as_frame=True)








.. GENERATED FROM PYTHON SOURCE LINES 34-38

Dataset contains ten variables age, sex, body mass index, average  blood
pressure, and six blood serum measurements (s1-s6) diabetes patients and
a quantitative measure of disease progression one year after baseline which
is the target we are interested in predicting.

.. GENERATED FROM PYTHON SOURCE LINES 38-42

.. code-block:: default


    print("Features: \n", features.head())  # type: ignore
    print("Target: \n", target.describe())  # type: ignore





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Features: 
             age       sex       bmi  ...        s4        s5        s6
    0  0.038076  0.050680  0.061696  ... -0.002592  0.019907 -0.017646
    1 -0.001882 -0.044642 -0.051474  ... -0.039493 -0.068332 -0.092204
    2  0.085299  0.050680  0.044451  ... -0.002592  0.002861 -0.025930
    3 -0.089063 -0.044642 -0.011595  ...  0.034309  0.022688 -0.009362
    4  0.005383 -0.044642 -0.036385  ... -0.002592 -0.031988 -0.046641

    [5 rows x 10 columns]
    Target: 
     count    442.000000
    mean     152.133484
    std       77.093005
    min       25.000000
    25%       87.000000
    50%      140.500000
    75%      211.500000
    max      346.000000
    Name: target, dtype: float64




.. GENERATED FROM PYTHON SOURCE LINES 43-45

Let's combine features and target together in one dataframe and define X
and y

.. GENERATED FROM PYTHON SOURCE LINES 45-51

.. code-block:: default

    data_diabetes = pd.concat([features, target], axis=1)  # type: ignore

    X = ["age", "sex", "bmi", "bp", "s1", "s2", "s3", "s4", "s5", "s6"]
    y = "target"









.. GENERATED FROM PYTHON SOURCE LINES 52-54

Train a ridge regression model on train dataset and use mean absolute error
for scoring

.. GENERATED FROM PYTHON SOURCE LINES 54-65

.. code-block:: default

    scores, model = run_cross_validation(
        X=X,
        y=y,
        data=data_diabetes,
        preprocess="zscore",
        problem_type="regression",
        model="ridge",
        return_estimator="final",
        scoring="neg_mean_absolute_error",
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    2023-08-07 09:48:22,633 - julearn - INFO - ==== Input Data ====
    2023-08-07 09:48:22,633 - julearn - INFO - Using dataframe as input
    2023-08-07 09:48:22,633 - julearn - INFO -      Features: ['age', 'sex', 'bmi', 'bp', 's1', 's2', 's3', 's4', 's5', 's6']
    2023-08-07 09:48:22,633 - julearn - INFO -      Target: target
    2023-08-07 09:48:22,633 - julearn - INFO -      Expanded features: ['age', 'sex', 'bmi', 'bp', 's1', 's2', 's3', 's4', 's5', 's6']
    2023-08-07 09:48:22,634 - julearn - INFO -      X_types:{}
    2023-08-07 09:48:22,634 - julearn - WARNING - The following columns are not defined in X_types: ['age', 'sex', 'bmi', 'bp', 's1', 's2', 's3', 's4', 's5', 's6']. They will be treated as continuous.
    /home/runner/work/julearn/julearn/julearn/utils/logging.py:238: RuntimeWarning: The following columns are not defined in X_types: ['age', 'sex', 'bmi', 'bp', 's1', 's2', 's3', 's4', 's5', 's6']. They will be treated as continuous.
      warn(msg, category=category)
    2023-08-07 09:48:22,635 - julearn - INFO - ====================
    2023-08-07 09:48:22,635 - julearn - INFO - 
    2023-08-07 09:48:22,635 - julearn - INFO - Adding step zscore that applies to ColumnTypes<types={'continuous'}; pattern=(?:__:type:__continuous)>
    2023-08-07 09:48:22,636 - julearn - INFO - Step added
    2023-08-07 09:48:22,636 - julearn - INFO - Adding step ridge that applies to ColumnTypes<types={'continuous'}; pattern=(?:__:type:__continuous)>
    2023-08-07 09:48:22,636 - julearn - INFO - Step added
    2023-08-07 09:48:22,637 - julearn - INFO - = Model Parameters =
    2023-08-07 09:48:22,637 - julearn - INFO - ====================
    2023-08-07 09:48:22,637 - julearn - INFO - 
    2023-08-07 09:48:22,637 - julearn - INFO - = Data Information =
    2023-08-07 09:48:22,637 - julearn - INFO -      Problem type: regression
    2023-08-07 09:48:22,637 - julearn - INFO -      Number of samples: 442
    2023-08-07 09:48:22,637 - julearn - INFO -      Number of features: 10
    2023-08-07 09:48:22,637 - julearn - INFO - ====================
    2023-08-07 09:48:22,637 - julearn - INFO - 
    2023-08-07 09:48:22,637 - julearn - INFO -      Target type: float64
    2023-08-07 09:48:22,638 - julearn - INFO - Using outer CV scheme KFold(n_splits=5, random_state=None, shuffle=False)




.. GENERATED FROM PYTHON SOURCE LINES 66-67

The scores dataframe has all the values for each CV split.

.. GENERATED FROM PYTHON SOURCE LINES 67-70

.. code-block:: default


    print(scores.head())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

       fit_time  score_time  ...  fold                          cv_mdsum
    0  0.009389    0.004961  ...     0  b10eef89b4192178d482d7a1587a248a
    1  0.008522    0.004766  ...     1  b10eef89b4192178d482d7a1587a248a
    2  0.008660    0.004810  ...     2  b10eef89b4192178d482d7a1587a248a
    3  0.008745    0.006752  ...     3  b10eef89b4192178d482d7a1587a248a
    4  0.009201    0.005129  ...     4  b10eef89b4192178d482d7a1587a248a

    [5 rows x 8 columns]




.. GENERATED FROM PYTHON SOURCE LINES 71-72

Mean value of mean absolute error across CV

.. GENERATED FROM PYTHON SOURCE LINES 72-74

.. code-block:: default

    print(scores["test_score"].mean() * -1)  # type: ignore





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    44.264653948271885




.. GENERATED FROM PYTHON SOURCE LINES 75-77

Now do the same thing, but use mean absolute error and Pearson product-moment
correlation coefficient (squared) as scoring functions

.. GENERATED FROM PYTHON SOURCE LINES 77-88

.. code-block:: default

    scores, model = run_cross_validation(
        X=X,
        y=y,
        data=data_diabetes,
        preprocess="zscore",
        problem_type="regression",
        model="ridge",
        return_estimator="final",
        scoring=["neg_mean_absolute_error", "r2_corr"],
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    2023-08-07 09:48:22,738 - julearn - INFO - ==== Input Data ====
    2023-08-07 09:48:22,738 - julearn - INFO - Using dataframe as input
    2023-08-07 09:48:22,738 - julearn - INFO -      Features: ['age', 'sex', 'bmi', 'bp', 's1', 's2', 's3', 's4', 's5', 's6']
    2023-08-07 09:48:22,738 - julearn - INFO -      Target: target
    2023-08-07 09:48:22,739 - julearn - INFO -      Expanded features: ['age', 'sex', 'bmi', 'bp', 's1', 's2', 's3', 's4', 's5', 's6']
    2023-08-07 09:48:22,739 - julearn - INFO -      X_types:{}
    2023-08-07 09:48:22,739 - julearn - WARNING - The following columns are not defined in X_types: ['age', 'sex', 'bmi', 'bp', 's1', 's2', 's3', 's4', 's5', 's6']. They will be treated as continuous.
    /home/runner/work/julearn/julearn/julearn/utils/logging.py:238: RuntimeWarning: The following columns are not defined in X_types: ['age', 'sex', 'bmi', 'bp', 's1', 's2', 's3', 's4', 's5', 's6']. They will be treated as continuous.
      warn(msg, category=category)
    2023-08-07 09:48:22,740 - julearn - INFO - ====================
    2023-08-07 09:48:22,740 - julearn - INFO - 
    2023-08-07 09:48:22,740 - julearn - INFO - Adding step zscore that applies to ColumnTypes<types={'continuous'}; pattern=(?:__:type:__continuous)>
    2023-08-07 09:48:22,741 - julearn - INFO - Step added
    2023-08-07 09:48:22,741 - julearn - INFO - Adding step ridge that applies to ColumnTypes<types={'continuous'}; pattern=(?:__:type:__continuous)>
    2023-08-07 09:48:22,741 - julearn - INFO - Step added
    2023-08-07 09:48:22,742 - julearn - INFO - = Model Parameters =
    2023-08-07 09:48:22,742 - julearn - INFO - ====================
    2023-08-07 09:48:22,742 - julearn - INFO - 
    2023-08-07 09:48:22,742 - julearn - INFO - = Data Information =
    2023-08-07 09:48:22,742 - julearn - INFO -      Problem type: regression
    2023-08-07 09:48:22,742 - julearn - INFO -      Number of samples: 442
    2023-08-07 09:48:22,742 - julearn - INFO -      Number of features: 10
    2023-08-07 09:48:22,742 - julearn - INFO - ====================
    2023-08-07 09:48:22,742 - julearn - INFO - 
    2023-08-07 09:48:22,742 - julearn - INFO -      Target type: float64
    2023-08-07 09:48:22,743 - julearn - INFO - Using outer CV scheme KFold(n_splits=5, random_state=None, shuffle=False)




.. GENERATED FROM PYTHON SOURCE LINES 89-92

Now the scores dataframe has all the values for each CV split, but two scores
unders the column names 'test_neg_mean_absolute_error' and
'test_r2_corr'.

.. GENERATED FROM PYTHON SOURCE LINES 92-95

.. code-block:: default

    print(scores[["test_neg_mean_absolute_error", "test_r2_corr"]].mean())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    test_neg_mean_absolute_error   -44.264654
    test_r2_corr                     0.486498
    dtype: float64




.. GENERATED FROM PYTHON SOURCE LINES 96-99

If we want to define a custom scoring metric, we need to define a function
that takes the predicted and the actual values as input and returns a value.
In this case, we want to compute Pearson correlation coefficient (r).

.. GENERATED FROM PYTHON SOURCE LINES 99-107

.. code-block:: default



    def pearson_scorer(y_true, y_pred):
        return scipy.stats.pearsonr(  # type: ignore
            y_true.squeeze(), y_pred.squeeze()
        )[0]









.. GENERATED FROM PYTHON SOURCE LINES 108-110

Before using it, we need to convert it to a sklearn scorer and register it
with julearn.

.. GENERATED FROM PYTHON SOURCE LINES 110-112

.. code-block:: default

    register_scorer(scorer_name="pearsonr", scorer=make_scorer(pearson_scorer))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    2023-08-07 09:48:22,834 - julearn - INFO - registering scorer named pearsonr




.. GENERATED FROM PYTHON SOURCE LINES 113-114

Now we can use it as another scoring metric.

.. GENERATED FROM PYTHON SOURCE LINES 114-124

.. code-block:: default

    scores, model = run_cross_validation(
        X=X,
        y=y,
        data=data_diabetes,
        preprocess="zscore",
        problem_type="regression",
        model="ridge",
        return_estimator="final",
        scoring=["neg_mean_absolute_error", "r2_corr", "pearsonr"],
    )




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    2023-08-07 09:48:22,834 - julearn - INFO - ==== Input Data ====
    2023-08-07 09:48:22,835 - julearn - INFO - Using dataframe as input
    2023-08-07 09:48:22,835 - julearn - INFO -      Features: ['age', 'sex', 'bmi', 'bp', 's1', 's2', 's3', 's4', 's5', 's6']
    2023-08-07 09:48:22,835 - julearn - INFO -      Target: target
    2023-08-07 09:48:22,835 - julearn - INFO -      Expanded features: ['age', 'sex', 'bmi', 'bp', 's1', 's2', 's3', 's4', 's5', 's6']
    2023-08-07 09:48:22,835 - julearn - INFO -      X_types:{}
    2023-08-07 09:48:22,835 - julearn - WARNING - The following columns are not defined in X_types: ['age', 'sex', 'bmi', 'bp', 's1', 's2', 's3', 's4', 's5', 's6']. They will be treated as continuous.
    /home/runner/work/julearn/julearn/julearn/utils/logging.py:238: RuntimeWarning: The following columns are not defined in X_types: ['age', 'sex', 'bmi', 'bp', 's1', 's2', 's3', 's4', 's5', 's6']. They will be treated as continuous.
      warn(msg, category=category)
    2023-08-07 09:48:22,836 - julearn - INFO - ====================
    2023-08-07 09:48:22,836 - julearn - INFO - 
    2023-08-07 09:48:22,837 - julearn - INFO - Adding step zscore that applies to ColumnTypes<types={'continuous'}; pattern=(?:__:type:__continuous)>
    2023-08-07 09:48:22,837 - julearn - INFO - Step added
    2023-08-07 09:48:22,837 - julearn - INFO - Adding step ridge that applies to ColumnTypes<types={'continuous'}; pattern=(?:__:type:__continuous)>
    2023-08-07 09:48:22,837 - julearn - INFO - Step added
    2023-08-07 09:48:22,838 - julearn - INFO - = Model Parameters =
    2023-08-07 09:48:22,838 - julearn - INFO - ====================
    2023-08-07 09:48:22,838 - julearn - INFO - 
    2023-08-07 09:48:22,838 - julearn - INFO - = Data Information =
    2023-08-07 09:48:22,838 - julearn - INFO -      Problem type: regression
    2023-08-07 09:48:22,838 - julearn - INFO -      Number of samples: 442
    2023-08-07 09:48:22,838 - julearn - INFO -      Number of features: 10
    2023-08-07 09:48:22,838 - julearn - INFO - ====================
    2023-08-07 09:48:22,838 - julearn - INFO - 
    2023-08-07 09:48:22,839 - julearn - INFO -      Target type: float64
    2023-08-07 09:48:22,839 - julearn - INFO - Using outer CV scheme KFold(n_splits=5, random_state=None, shuffle=False)





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.336 seconds)


.. _sphx_glr_download_auto_examples_05_customization_run_custom_scorers_regression.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: run_custom_scorers_regression.py <run_custom_scorers_regression.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: run_custom_scorers_regression.ipynb <run_custom_scorers_regression.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
