Search.setIndex({"docnames": ["api/base", "api/generated/julearn.PipelineCreator", "api/generated/julearn.TargetPipelineCreator", "api/generated/julearn.base.ColumnTypes", "api/generated/julearn.base.ColumnTypesLike", "api/generated/julearn.base.JuBaseEstimator", "api/generated/julearn.base.JuTransformer", "api/generated/julearn.base.WrapModel", "api/generated/julearn.base.change_column_type", "api/generated/julearn.base.ensure_column_types", "api/generated/julearn.base.get_column_type", "api/generated/julearn.base.make_type_selector", "api/generated/julearn.inspect.FoldsInspector", "api/generated/julearn.inspect.Inspector", "api/generated/julearn.inspect.preprocess", "api/generated/julearn.model_selection.ContinuousStratifiedGroupKFold", "api/generated/julearn.model_selection.ContinuousStratifiedKFold", "api/generated/julearn.model_selection.RepeatedContinuousStratifiedGroupKFold", "api/generated/julearn.model_selection.RepeatedContinuousStratifiedKFold", "api/generated/julearn.model_selection.StratifiedBootstrap", "api/generated/julearn.model_selection.get_searcher", "api/generated/julearn.model_selection.list_searchers", "api/generated/julearn.model_selection.register_searcher", "api/generated/julearn.model_selection.reset_searcher_register", "api/generated/julearn.models.dynamic.DynamicSelection", "api/generated/julearn.models.get_model", "api/generated/julearn.models.list_models", "api/generated/julearn.models.register_model", "api/generated/julearn.models.reset_model_register", "api/generated/julearn.pipeline.JuTargetPipeline", "api/generated/julearn.pipeline.pipeline_creator.Step", "api/generated/julearn.prepare.check_consistency", "api/generated/julearn.prepare.prepare_input_data", "api/generated/julearn.run_cross_validation", "api/generated/julearn.scoring.check_scoring", "api/generated/julearn.scoring.get_scorer", "api/generated/julearn.scoring.list_scorers", "api/generated/julearn.scoring.metrics.r2_corr", "api/generated/julearn.scoring.metrics.r_corr", "api/generated/julearn.scoring.register_scorer", "api/generated/julearn.scoring.reset_scorer_register", "api/generated/julearn.stats.corrected_ttest", "api/generated/julearn.transformers.CBPM", "api/generated/julearn.transformers.ChangeColumnTypes", "api/generated/julearn.transformers.DropColumns", "api/generated/julearn.transformers.FilterColumns", "api/generated/julearn.transformers.JuColumnTransformer", "api/generated/julearn.transformers.SetColumnTypes", "api/generated/julearn.transformers.confound_remover.ConfoundRemover", "api/generated/julearn.transformers.get_transformer", "api/generated/julearn.transformers.list_transformers", "api/generated/julearn.transformers.register_transformer", "api/generated/julearn.transformers.reset_transformer_register", "api/generated/julearn.transformers.target.JuTargetTransformer", "api/generated/julearn.transformers.target.JuTransformedTargetModel", "api/generated/julearn.transformers.target.TargetConfoundRemover", "api/generated/julearn.transformers.target.TransformedTargetWarning", "api/generated/julearn.transformers.target.get_target_transformer", "api/generated/julearn.transformers.target.list_target_transformers", "api/generated/julearn.transformers.target.register_target_transformer", "api/generated/julearn.transformers.target.reset_target_transformer_register", "api/generated/julearn.utils.configure_logging", "api/generated/julearn.utils.logger", "api/generated/julearn.utils.raise_error", "api/generated/julearn.utils.typing.EstimatorLike", "api/generated/julearn.utils.typing.EstimatorLikeFit1", "api/generated/julearn.utils.typing.EstimatorLikeFit2", "api/generated/julearn.utils.typing.EstimatorLikeFity", "api/generated/julearn.utils.typing.JuEstimatorLike", "api/generated/julearn.utils.warn_with_log", "api/generated/julearn.viz.plot_scores", "api/index", "api/inspect", "api/main", "api/model_selection", "api/models", "api/pipeline", "api/prepare", "api/scoring", "api/stats", "api/transformers", "api/utils", "api/viz", "auto_examples/00_starting/index", "auto_examples/00_starting/plot_cm_acc_multiclass", "auto_examples/00_starting/plot_example_regression", "auto_examples/00_starting/plot_stratified_kfold_reg", "auto_examples/00_starting/run_combine_pandas", "auto_examples/00_starting/run_grouped_cv", "auto_examples/00_starting/run_simple_binary_classification", "auto_examples/00_starting/sg_execution_times", "auto_examples/01_model_comparison/index", "auto_examples/01_model_comparison/plot_simple_model_comparison", "auto_examples/01_model_comparison/sg_execution_times", "auto_examples/02_inspection/index", "auto_examples/02_inspection/plot_groupcv_inspect_svm", "auto_examples/02_inspection/plot_inspect_random_forest", "auto_examples/02_inspection/plot_preprocess", "auto_examples/02_inspection/run_binary_inspect_folds", "auto_examples/02_inspection/sg_execution_times", "auto_examples/03_complex_models/index", "auto_examples/03_complex_models/run_apply_to_target", "auto_examples/03_complex_models/run_example_pca_featsets", "auto_examples/03_complex_models/run_hyperparameter_multiple_grids", "auto_examples/03_complex_models/run_hyperparameter_tuning", "auto_examples/03_complex_models/run_stacked_models", "auto_examples/03_complex_models/sg_execution_times", "auto_examples/04_confounds/index", "auto_examples/04_confounds/plot_confound_removal_classification", "auto_examples/04_confounds/run_return_confounds", "auto_examples/04_confounds/sg_execution_times", "auto_examples/05_customization/index", "auto_examples/05_customization/run_custom_scorers_regression", "auto_examples/05_customization/sg_execution_times", "available_pipeline_steps", "configuration", "contributing", "examples", "faq", "getting_started", "index", "maintaining", "selected_deeper_topics/CBPM", "selected_deeper_topics/confound_removal", "selected_deeper_topics/cross_validation_splitter", "selected_deeper_topics/hyperparameter_tuning", "selected_deeper_topics/index", "selected_deeper_topics/model_inspect", "selected_deeper_topics/stacked_models", "selected_deeper_topics/target_transformers", "what_really_need_know/cross_validation", "what_really_need_know/data", "what_really_need_know/index", "what_really_need_know/model_comparison", "what_really_need_know/model_evaluation", "what_really_need_know/pipeline", "whats_new"], "filenames": ["api/base.rst", "api/generated/julearn.PipelineCreator.rst", "api/generated/julearn.TargetPipelineCreator.rst", "api/generated/julearn.base.ColumnTypes.rst", "api/generated/julearn.base.ColumnTypesLike.rst", "api/generated/julearn.base.JuBaseEstimator.rst", "api/generated/julearn.base.JuTransformer.rst", "api/generated/julearn.base.WrapModel.rst", "api/generated/julearn.base.change_column_type.rst", "api/generated/julearn.base.ensure_column_types.rst", "api/generated/julearn.base.get_column_type.rst", "api/generated/julearn.base.make_type_selector.rst", "api/generated/julearn.inspect.FoldsInspector.rst", "api/generated/julearn.inspect.Inspector.rst", "api/generated/julearn.inspect.preprocess.rst", "api/generated/julearn.model_selection.ContinuousStratifiedGroupKFold.rst", "api/generated/julearn.model_selection.ContinuousStratifiedKFold.rst", "api/generated/julearn.model_selection.RepeatedContinuousStratifiedGroupKFold.rst", "api/generated/julearn.model_selection.RepeatedContinuousStratifiedKFold.rst", "api/generated/julearn.model_selection.StratifiedBootstrap.rst", "api/generated/julearn.model_selection.get_searcher.rst", "api/generated/julearn.model_selection.list_searchers.rst", "api/generated/julearn.model_selection.register_searcher.rst", "api/generated/julearn.model_selection.reset_searcher_register.rst", "api/generated/julearn.models.dynamic.DynamicSelection.rst", "api/generated/julearn.models.get_model.rst", "api/generated/julearn.models.list_models.rst", "api/generated/julearn.models.register_model.rst", "api/generated/julearn.models.reset_model_register.rst", "api/generated/julearn.pipeline.JuTargetPipeline.rst", "api/generated/julearn.pipeline.pipeline_creator.Step.rst", "api/generated/julearn.prepare.check_consistency.rst", "api/generated/julearn.prepare.prepare_input_data.rst", "api/generated/julearn.run_cross_validation.rst", "api/generated/julearn.scoring.check_scoring.rst", "api/generated/julearn.scoring.get_scorer.rst", "api/generated/julearn.scoring.list_scorers.rst", "api/generated/julearn.scoring.metrics.r2_corr.rst", "api/generated/julearn.scoring.metrics.r_corr.rst", "api/generated/julearn.scoring.register_scorer.rst", "api/generated/julearn.scoring.reset_scorer_register.rst", "api/generated/julearn.stats.corrected_ttest.rst", "api/generated/julearn.transformers.CBPM.rst", "api/generated/julearn.transformers.ChangeColumnTypes.rst", "api/generated/julearn.transformers.DropColumns.rst", "api/generated/julearn.transformers.FilterColumns.rst", "api/generated/julearn.transformers.JuColumnTransformer.rst", "api/generated/julearn.transformers.SetColumnTypes.rst", "api/generated/julearn.transformers.confound_remover.ConfoundRemover.rst", "api/generated/julearn.transformers.get_transformer.rst", "api/generated/julearn.transformers.list_transformers.rst", "api/generated/julearn.transformers.register_transformer.rst", "api/generated/julearn.transformers.reset_transformer_register.rst", "api/generated/julearn.transformers.target.JuTargetTransformer.rst", "api/generated/julearn.transformers.target.JuTransformedTargetModel.rst", "api/generated/julearn.transformers.target.TargetConfoundRemover.rst", "api/generated/julearn.transformers.target.TransformedTargetWarning.rst", "api/generated/julearn.transformers.target.get_target_transformer.rst", "api/generated/julearn.transformers.target.list_target_transformers.rst", "api/generated/julearn.transformers.target.register_target_transformer.rst", "api/generated/julearn.transformers.target.reset_target_transformer_register.rst", "api/generated/julearn.utils.configure_logging.rst", "api/generated/julearn.utils.logger.rst", "api/generated/julearn.utils.raise_error.rst", "api/generated/julearn.utils.typing.EstimatorLike.rst", "api/generated/julearn.utils.typing.EstimatorLikeFit1.rst", "api/generated/julearn.utils.typing.EstimatorLikeFit2.rst", "api/generated/julearn.utils.typing.EstimatorLikeFity.rst", "api/generated/julearn.utils.typing.JuEstimatorLike.rst", "api/generated/julearn.utils.warn_with_log.rst", "api/generated/julearn.viz.plot_scores.rst", "api/index.rst", "api/inspect.rst", "api/main.rst", "api/model_selection.rst", "api/models.rst", "api/pipeline.rst", "api/prepare.rst", "api/scoring.rst", "api/stats.rst", "api/transformers.rst", "api/utils.rst", "api/viz.rst", "auto_examples/00_starting/index.rst", "auto_examples/00_starting/plot_cm_acc_multiclass.rst", "auto_examples/00_starting/plot_example_regression.rst", "auto_examples/00_starting/plot_stratified_kfold_reg.rst", "auto_examples/00_starting/run_combine_pandas.rst", "auto_examples/00_starting/run_grouped_cv.rst", "auto_examples/00_starting/run_simple_binary_classification.rst", "auto_examples/00_starting/sg_execution_times.rst", "auto_examples/01_model_comparison/index.rst", "auto_examples/01_model_comparison/plot_simple_model_comparison.rst", "auto_examples/01_model_comparison/sg_execution_times.rst", "auto_examples/02_inspection/index.rst", "auto_examples/02_inspection/plot_groupcv_inspect_svm.rst", "auto_examples/02_inspection/plot_inspect_random_forest.rst", "auto_examples/02_inspection/plot_preprocess.rst", "auto_examples/02_inspection/run_binary_inspect_folds.rst", "auto_examples/02_inspection/sg_execution_times.rst", "auto_examples/03_complex_models/index.rst", "auto_examples/03_complex_models/run_apply_to_target.rst", "auto_examples/03_complex_models/run_example_pca_featsets.rst", "auto_examples/03_complex_models/run_hyperparameter_multiple_grids.rst", "auto_examples/03_complex_models/run_hyperparameter_tuning.rst", "auto_examples/03_complex_models/run_stacked_models.rst", "auto_examples/03_complex_models/sg_execution_times.rst", "auto_examples/04_confounds/index.rst", "auto_examples/04_confounds/plot_confound_removal_classification.rst", "auto_examples/04_confounds/run_return_confounds.rst", "auto_examples/04_confounds/sg_execution_times.rst", "auto_examples/05_customization/index.rst", "auto_examples/05_customization/run_custom_scorers_regression.rst", "auto_examples/05_customization/sg_execution_times.rst", "available_pipeline_steps.rst", "configuration.rst", "contributing.rst", "examples.rst", "faq.rst", "getting_started.rst", "index.rst", "maintaining.rst", "selected_deeper_topics/CBPM.rst", "selected_deeper_topics/confound_removal.rst", "selected_deeper_topics/cross_validation_splitter.rst", "selected_deeper_topics/hyperparameter_tuning.rst", "selected_deeper_topics/index.rst", "selected_deeper_topics/model_inspect.rst", "selected_deeper_topics/stacked_models.rst", "selected_deeper_topics/target_transformers.rst", "what_really_need_know/cross_validation.rst", "what_really_need_know/data.rst", "what_really_need_know/index.rst", "what_really_need_know/model_comparison.rst", "what_really_need_know/model_evaluation.rst", "what_really_need_know/pipeline.rst", "whats_new.rst"], "titles": ["<span class=\"section-number\">9.4. </span>Base", "julearn.PipelineCreator", "julearn.TargetPipelineCreator", "julearn.base.ColumnTypes", "julearn.base.ColumnTypesLike", "julearn.base.JuBaseEstimator", "julearn.base.JuTransformer", "julearn.base.WrapModel", "julearn.base.change_column_type", "julearn.base.ensure_column_types", "julearn.base.get_column_type", "julearn.base.make_type_selector", "julearn.inspect.FoldsInspector", "julearn.inspect.Inspector", "julearn.inspect.preprocess", "julearn.model_selection.ContinuousStratifiedGroupKFold", "julearn.model_selection.ContinuousStratifiedKFold", "julearn.model_selection.RepeatedContinuousStratifiedGroupKFold", "julearn.model_selection.RepeatedContinuousStratifiedKFold", "julearn.model_selection.StratifiedBootstrap", "julearn.model_selection.get_searcher", "julearn.model_selection.list_searchers", "julearn.model_selection.register_searcher", "julearn.model_selection.reset_searcher_register", "julearn.models.dynamic.DynamicSelection", "julearn.models.get_model", "julearn.models.list_models", "julearn.models.register_model", "julearn.models.reset_model_register", "julearn.pipeline.JuTargetPipeline", "julearn.pipeline.pipeline_creator.Step", "julearn.prepare.check_consistency", "julearn.prepare.prepare_input_data", "julearn.run_cross_validation", "julearn.scoring.check_scoring", "julearn.scoring.get_scorer", "julearn.scoring.list_scorers", "julearn.scoring.metrics.r2_corr", "julearn.scoring.metrics.r_corr", "julearn.scoring.register_scorer", "julearn.scoring.reset_scorer_register", "julearn.stats.corrected_ttest", "julearn.transformers.CBPM", "julearn.transformers.ChangeColumnTypes", "julearn.transformers.DropColumns", "julearn.transformers.FilterColumns", "julearn.transformers.JuColumnTransformer", "julearn.transformers.SetColumnTypes", "julearn.transformers.confound_remover.ConfoundRemover", "julearn.transformers.get_transformer", "julearn.transformers.list_transformers", "julearn.transformers.register_transformer", "julearn.transformers.reset_transformer_register", "julearn.transformers.target.JuTargetTransformer", "julearn.transformers.target.JuTransformedTargetModel", "julearn.transformers.target.TargetConfoundRemover", "julearn.transformers.target.TransformedTargetWarning", "julearn.transformers.target.get_target_transformer", "julearn.transformers.target.list_target_transformers", "julearn.transformers.target.register_target_transformer", "julearn.transformers.target.reset_target_transformer_register", "julearn.utils.configure_logging", "julearn.utils.logger", "julearn.utils.raise_error", "julearn.utils.typing.EstimatorLike", "julearn.utils.typing.EstimatorLikeFit1", "julearn.utils.typing.EstimatorLikeFit2", "julearn.utils.typing.EstimatorLikeFity", "julearn.utils.typing.JuEstimatorLike", "julearn.utils.warn_with_log", "julearn.viz.plot_scores", "<span class=\"section-number\">9. </span>API Reference", "<span class=\"section-number\">9.5. </span>Inspect", "<span class=\"section-number\">9.1. </span>Main API", "<span class=\"section-number\">9.3. </span>Model Selection", "<span class=\"section-number\">9.6. </span>Models", "<span class=\"section-number\">9.2. </span>Pipeline", "<span class=\"section-number\">9.14. </span>Prepare", "<span class=\"section-number\">9.8. </span>Scoring", "<span class=\"section-number\">9.15. </span>Stats", "<span class=\"section-number\">9.10. </span>Transformers", "<span class=\"section-number\">9.12. </span>Utils", "<span class=\"section-number\">9.16. </span>Visualization", "<span class=\"section-number\">8.1. </span>Starting with julearn", "Multiclass Classification", "Regression Analysis", "Stratified K-fold CV for regression analysis", "Working with pandas", "Grouped CV", "Simple Binary Classification", "Computation times", "<span class=\"section-number\">8.2. </span>Model Comparison", "Simple Model Comparison", "Computation times", "<span class=\"section-number\">8.3. </span>Inspection", "Inspecting SVM models", "Inspecting Random Forest models", "Preprocessing with variance threshold, zscore and PCA", "Inspecting the fold-wise predictions", "Computation times", "<span class=\"section-number\">8.4. </span>Complex Models", "Transforming target variable with z-score", "Regression Analysis", "Tuning Multiple Hyperparameters Grids", "Tuning Hyperparameters", "Stacking Classification", "Computation times", "<span class=\"section-number\">8.5. </span>Confounds", "Confound Removal (model comparison)", "Return Confounds in Confound Removal", "Computation times", "<span class=\"section-number\">8.6. </span>Customization", "Custom Scoring Function for Regression", "Computation times", "<span class=\"section-number\">7. </span>Overview of available Pipeline Steps", "<span class=\"section-number\">10. </span>Configuring julearn", "<span class=\"section-number\">11. </span>Contributing to julearn", "<span class=\"section-number\">8. </span>Examples", "<span class=\"section-number\">13. </span>FAQs", "<span class=\"section-number\">1. </span>Getting started", "Welcome to julearn\u2019s documentation!", "<span class=\"section-number\">12. </span>Maintaining", "<span class=\"section-number\">6.7. </span>Connectome-based Predictive Modeling (CBPM)", "<span class=\"section-number\">6.2. </span>Cross-validation consistent Confound Removal", "<span class=\"section-number\">6.5. </span>Cross-validation splitters", "<span class=\"section-number\">6.3. </span>Hyperparameter Tuning", "<span class=\"section-number\">6. </span>Selected deeper topics", "<span class=\"section-number\">6.4. </span>Inspecting Models", "<span class=\"section-number\">6.6. </span>Stacking Models", "<span class=\"section-number\">6.1. </span>Applying preprocessing to the target", "<span class=\"section-number\">5.1. </span>Why cross validation?", "<span class=\"section-number\">5.2. </span>Data", "<span class=\"section-number\">5. </span>What you really need to know", "<span class=\"section-number\">5.5. </span>Model comparison", "<span class=\"section-number\">5.4. </span>Model Evaluation", "<span class=\"section-number\">5.3. </span>Model Building", "<span class=\"section-number\">14. </span>What\u2019s new"], "terms": {"julearn": [73, 75, 82, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 107, 108, 109, 111, 112, 114, 117, 118, 119, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135], "create_pipelin": 136, "confound": [1, 2, 14, 19, 33, 43, 48, 55, 61, 87, 110, 114, 117, 120, 126, 133, 136], "none": [1, 2, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 22, 24, 27, 29, 30, 31, 32, 33, 39, 41, 42, 43, 44, 45, 46, 47, 48, 51, 55, 59, 61, 63, 85, 86, 87, 88, 89, 92, 95, 96, 97, 101, 102, 103, 104, 105, 108, 109, 112, 122, 123, 125, 127, 128, 129, 133, 134, 135], "problem_typ": [1, 25, 31, 33, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 122, 123, 125, 127, 128, 129, 133, 134, 135], "binary_classif": [], "preprocess_x": [], "preprocess_i": [], "preprocess_confound": [], "model_param": [1, 33, 92, 136], "creat": [1, 2, 3, 42, 84, 86, 87, 89, 95, 97, 101, 102, 105, 114, 116, 118, 121, 122, 123, 124, 125, 127, 128, 129, 133, 134, 135], "fit": [6, 7, 24, 29, 33, 42, 43, 44, 45, 46, 47, 48, 53, 54, 55, 65, 66, 67, 68, 95, 96, 102, 109, 114, 122, 123, 126, 127, 130, 135], "pipelin": [1, 2, 5, 6, 7, 14, 15, 24, 31, 32, 33, 34, 42, 43, 44, 45, 46, 47, 48, 53, 54, 71, 77, 95, 97, 98, 101, 102, 103, 104, 105, 108, 109, 120, 122, 123, 125, 127, 128, 129, 130, 131, 132, 133, 134], "paramet": [1, 2, 3, 5, 6, 7, 8, 9, 10, 14, 15, 16, 17, 18, 19, 20, 22, 24, 25, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 53, 54, 55, 57, 59, 61, 63, 69, 70, 77, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 114, 115, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136], "str": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 15, 16, 17, 18, 20, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 55, 57, 58, 59, 61, 63, 69, 84, 85, 102, 114, 134, 135], "scikit": [20, 22, 33, 42, 43, 45, 46, 47, 48, 49, 53, 89, 95, 96, 112, 114, 119, 120, 122, 123, 124, 125, 128, 130, 133, 134, 135, 136], "learn": [15, 16, 17, 18, 19, 20, 22, 33, 42, 43, 45, 46, 47, 48, 49, 53, 87, 89, 95, 96, 112, 114, 116, 119, 120, 122, 123, 124, 125, 127, 128, 130, 131, 132, 133, 134, 135, 136], "compat": [1, 15, 16, 17, 18, 19, 20, 22, 24, 33, 43, 44, 45, 46, 47, 48, 49, 55, 122, 134, 135, 136], "If": [1, 2, 5, 6, 7, 14, 19, 20, 22, 24, 27, 31, 32, 33, 42, 43, 44, 45, 46, 47, 48, 51, 54, 57, 59, 61, 87, 89, 95, 97, 108, 112, 115, 116, 119, 123, 124, 125, 131, 132, 134, 135], "string": [33, 61, 114, 131, 133, 134, 135, 136], "us": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 37, 38, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 75, 82, 83, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 112, 114, 115, 116, 117, 119, 120, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136], "one": [1, 29, 33, 41, 43, 44, 45, 47, 53, 85, 86, 87, 88, 95, 97, 101, 102, 103, 104, 105, 109, 112, 114, 116, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136], "avail": [20, 21, 22, 26, 33, 35, 36, 41, 50, 57, 58, 119, 120, 134, 135], "see": [6, 15, 16, 17, 24, 25, 32, 33, 42, 43, 44, 45, 46, 47, 48, 61, 75, 82, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 114, 115, 116, 118, 123, 124, 125, 127, 128, 130, 131, 132, 133, 134, 135], "available_model": 1, "list": [1, 3, 4, 5, 6, 7, 14, 21, 26, 29, 30, 32, 33, 36, 43, 44, 45, 46, 47, 48, 50, 55, 58, 103, 109, 114, 115, 125, 127, 131, 134, 135], "numpi": [33, 44, 48, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 112, 122, 123, 124, 127, 128], "arrai": [6, 7, 15, 16, 17, 18, 19, 33, 42, 43, 44, 45, 46, 47, 48, 54, 84, 127], "The": [1, 2, 3, 5, 6, 7, 8, 9, 10, 14, 15, 16, 17, 18, 19, 20, 22, 24, 25, 27, 29, 30, 31, 32, 33, 37, 38, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 53, 54, 55, 57, 59, 61, 63, 69, 70, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 127, 128, 131, 132, 133, 135], "http": [33, 42, 61, 86, 92, 116, 124, 130, 133], "juaml": 116, "github": [120, 134], "io": [], "input": [6, 29, 31, 32, 42, 43, 44, 45, 46, 47, 48, 53, 54, 55, 77, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 122, 123, 125, 127, 128, 129, 132, 133, 134, 135], "html": [33, 61, 86, 92, 116, 130, 133, 134], "detail": [32, 33, 116, 130], "kind": [33, 84, 85, 88, 89, 92, 95, 96, 98, 103, 104, 105, 108, 125, 131, 134], "problem": [1, 15, 16, 17, 18, 19, 25, 27, 31, 33, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 115, 122, 123, 124, 125, 127, 128, 129, 130, 133, 134, 135, 136], "option": [1, 2, 6, 7, 14, 15, 22, 24, 27, 30, 33, 39, 41, 42, 43, 44, 45, 46, 47, 48, 51, 55, 59, 61, 63, 69, 70, 75, 82, 87, 109, 118, 120, 121, 131, 134], "ar": [5, 6, 7, 15, 16, 17, 18, 22, 24, 27, 29, 33, 39, 41, 42, 43, 44, 45, 46, 47, 48, 51, 53, 54, 55, 59, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 108, 109, 112, 116, 117, 118, 119, 121, 122, 123, 124, 125, 127, 128, 130, 131, 132, 133, 134, 135, 136], "perform": [15, 16, 29, 33, 41, 84, 85, 86, 88, 89, 91, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 112, 116, 122, 123, 124, 125, 127, 130, 132, 133, 134, 135], "binari": [33, 61, 83, 88, 90, 92, 95, 96, 98, 103, 104, 105, 108, 114, 116, 121, 124, 125, 127, 133], "classif": [1, 27, 31, 33, 61, 83, 88, 90, 92, 95, 96, 98, 100, 103, 104, 106, 108, 116, 124, 125, 127, 128, 133, 134, 135], "which": [1, 5, 6, 15, 16, 22, 27, 30, 33, 42, 43, 44, 45, 46, 47, 48, 51, 55, 59, 82, 85, 86, 88, 89, 95, 97, 101, 102, 103, 104, 108, 109, 112, 116, 122, 123, 124, 125, 127, 128, 129, 130, 132, 134, 135], "target": [1, 2, 6, 7, 15, 16, 17, 18, 19, 24, 29, 31, 32, 33, 34, 42, 43, 44, 45, 46, 47, 48, 61, 71, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 100, 102, 103, 104, 105, 106, 108, 109, 112, 114, 120, 122, 124, 125, 126, 127, 128, 131, 133, 134, 135, 136], "y": [6, 7, 12, 13, 15, 16, 17, 18, 19, 24, 29, 31, 32, 33, 35, 39, 42, 43, 44, 45, 46, 47, 48, 53, 54, 55, 65, 66, 67, 68, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 114, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 133, 134, 135], "ha": [1, 15, 24, 33, 42, 56, 84, 85, 86, 87, 88, 89, 92, 95, 96, 98, 102, 105, 108, 112, 115, 116, 122, 123, 124, 125, 127, 130, 134, 135], "onli": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 86, 95, 97, 103, 108, 109, 122, 123, 124, 125, 127, 128, 129, 130, 131, 133, 134, 135, 136], "two": [1, 41, 86, 87, 89, 92, 95, 96, 97, 98, 102, 103, 105, 108, 109, 112, 116, 119, 122, 123, 124, 125, 128, 130, 133, 135], "possibl": [5, 6, 7, 22, 24, 27, 39, 42, 43, 44, 45, 46, 47, 48, 51, 54, 59, 87, 120, 124, 125, 130, 134, 135], "default": [1, 2, 5, 6, 7, 14, 15, 16, 17, 18, 19, 22, 24, 27, 28, 30, 33, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 51, 54, 55, 59, 61, 63, 69, 70, 92, 95, 97, 103, 104, 105, 108, 109, 114, 118, 119, 122, 123, 125, 133, 134, 135, 136], "pos_label": [32, 33, 89], "can": [1, 3, 15, 16, 17, 18, 19, 22, 24, 27, 29, 31, 33, 39, 41, 42, 46, 48, 51, 54, 59, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 108, 109, 112, 114, 115, 116, 118, 120, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135], "convert": [32, 33, 87, 108, 112], "multiple_class": 33, "multiclass_classif": [], "multiclass": [33, 61, 83, 90, 114], "more": [1, 3, 33, 41, 84, 85, 86, 87, 88, 89, 92, 95, 97, 102, 108, 112, 116, 119, 123, 124, 126, 127, 128, 130, 132, 133, 134, 135, 136], "than": [1, 33, 41, 86, 87, 95, 120, 123, 124, 126, 135], "valu": [1, 5, 6, 7, 19, 24, 30, 33, 37, 38, 42, 43, 44, 45, 46, 47, 48, 54, 55, 84, 85, 86, 87, 88, 89, 95, 97, 101, 102, 103, 104, 108, 112, 114, 115, 122, 125, 127, 131, 134, 135], "regress": [1, 14, 15, 16, 27, 31, 33, 39, 61, 83, 90, 97, 100, 101, 105, 106, 109, 111, 113, 114, 122, 125, 126, 128, 129, 133, 134, 135, 136], "ordin": 33, "least": [1, 15, 16, 17, 18, 33, 86, 108, 114, 124], "appli": [1, 2, 5, 6, 7, 30, 33, 42, 43, 44, 45, 46, 47, 48, 54, 55, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 120, 122, 123, 125, 126, 127, 128, 133, 134, 135], "featur": [14, 15, 16, 17, 18, 19, 29, 32, 33, 42, 43, 44, 45, 46, 47, 48, 53, 55, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 115, 116, 119, 120, 122, 125, 126, 127, 129, 130, 132, 133, 134], "x": [5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 24, 29, 32, 33, 35, 39, 42, 43, 44, 45, 46, 47, 48, 53, 54, 55, 65, 66, 68, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 115, 121, 122, 123, 124, 125, 127, 128, 129, 131, 133, 134, 135], "each": [1, 5, 6, 7, 15, 16, 17, 18, 19, 24, 32, 33, 42, 43, 44, 45, 46, 47, 48, 54, 55, 84, 85, 86, 87, 88, 95, 96, 97, 98, 102, 108, 112, 114, 116, 122, 123, 124, 125, 126, 127, 130, 133, 134, 135], "element": [32, 33, 61, 84, 87, 97, 115, 135, 136], "i": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 82, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 101, 102, 103, 104, 108, 109, 112, 114, 115, 116, 119, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135], "document": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 82, 86, 92, 96, 114, 124, 125, 133, 134, 135], "dict": [1, 5, 6, 7, 24, 30, 32, 33, 42, 43, 44, 45, 46, 47, 48, 54], "thi": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 75, 82, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 114, 115, 116, 118, 119, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135], "dictionari": [32, 33, 43, 47, 97, 109, 123, 127, 131, 136], "specifi": [1, 19, 20, 22, 32, 33, 45, 48, 55, 57, 87, 95, 96, 102, 103, 109, 114, 119, 120, 122, 123, 125, 128, 129, 130, 131, 132, 134, 135], "defin": [33, 41, 46, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 112, 122, 123, 124, 125, 127, 128, 134, 135], "follow": [33, 41, 42, 46, 61, 63, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 103, 104, 108, 109, 112, 114, 116, 117, 119, 121, 122, 125, 127, 128, 131, 132, 133, 134, 135], "kei": [1, 32, 33, 43, 47, 87, 97, 131], "step__paramet": 33, "A": [1, 5, 6, 7, 15, 16, 17, 18, 19, 21, 24, 26, 32, 33, 42, 43, 44, 45, 46, 47, 48, 50, 54, 58, 86, 87, 88, 89, 95, 103, 104, 105, 122, 123, 124, 125, 130, 131, 135], "sever": [33, 87, 88, 95, 115, 116, 124, 125, 130, 134], "step": [1, 2, 14, 29, 33, 41, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 116, 120, 122, 123, 125, 127, 128, 129, 130, 131, 133, 134, 135], "exampl": [6, 42, 43, 44, 45, 46, 47, 48, 83, 84, 85, 86, 87, 88, 89, 91, 92, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 107, 108, 109, 111, 112, 115, 118, 119, 120, 122, 123, 124, 125, 127, 128, 129, 130, 131, 133, 134, 135, 136], "svm__probabl": 33, "true": [5, 6, 7, 15, 16, 22, 24, 27, 29, 33, 37, 38, 39, 42, 43, 44, 45, 46, 47, 48, 51, 54, 59, 65, 66, 67, 68, 84, 85, 86, 89, 95, 98, 101, 102, 108, 109, 112, 115, 123, 124, 127, 129, 130, 134, 135], "set": [1, 3, 4, 5, 6, 7, 15, 16, 17, 18, 19, 22, 24, 29, 30, 33, 39, 42, 43, 44, 45, 46, 47, 48, 54, 55, 56, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 115, 117, 120, 121, 122, 123, 124, 125, 127, 128, 130, 132, 133, 134, 136], "probabl": [7, 24, 33, 54, 127], "svm": [14, 33, 61, 84, 89, 92, 94, 98, 99, 103, 104, 105, 114, 125, 127, 128, 129, 133, 134, 135], "provid": [0, 1, 3, 5, 15, 16, 19, 24, 33, 54, 75, 87, 109, 115, 120, 123, 124, 125, 127, 128, 130, 131, 133, 134, 135, 136], "hyperparamet": [1, 2, 33, 61, 92, 97, 100, 102, 105, 106, 108, 109, 120, 122, 123, 126, 127, 128, 132, 133, 136], "search": [1, 21, 22, 33, 97, 103, 104, 120, 125, 127, 128], "algorithm": [21, 22, 24, 33, 96, 130, 133, 135, 136], "e": [15, 24, 27, 33, 42, 48, 55, 61, 114, 116, 119, 121, 122, 123, 124, 125, 127, 134, 135], "g": [15, 24, 27, 33, 61, 102, 114, 119, 124, 125, 134], "grid": [1, 33, 61, 95, 100, 104, 106, 126, 127, 128], "random": [15, 16, 17, 18, 19, 24, 33, 61, 88, 89, 92, 94, 97, 99, 103, 104, 108, 114, 123, 124, 125, 127, 128, 133, 135], "ani": [1, 2, 7, 22, 24, 27, 29, 30, 31, 32, 33, 39, 51, 53, 54, 59, 86, 115, 122, 124, 127, 135], "searcher": [20, 21, 22, 23, 33, 126, 136], "name": [1, 2, 5, 6, 7, 8, 14, 15, 20, 21, 22, 24, 25, 26, 27, 30, 33, 35, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 54, 55, 57, 58, 59, 61, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 114, 115, 116, 123, 125, 127, 128, 129, 130, 131, 133, 134, 135], "cv": [12, 13, 15, 16, 17, 18, 19, 24, 31, 32, 33, 61, 83, 84, 85, 89, 90, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 114, 122, 123, 124, 125, 127, 128, 129, 133, 134, 135, 136], "go": [33, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 120, 127, 132, 135], "split": [1, 15, 16, 17, 18, 19, 24, 33, 84, 85, 86, 89, 92, 95, 101, 102, 112, 123, 124, 125, 127, 130, 134], "strategi": [33, 134], "same": [1, 15, 16, 33, 47, 61, 89, 92, 95, 103, 104, 108, 112, 116, 120, 122, 123, 124, 125, 128, 130, 133, 134, 135], "evalu": [1, 7, 33, 36, 54, 78, 89, 95, 120, 124, 127, 130, 131, 132, 133, 135], "score": [1, 2, 7, 12, 13, 24, 33, 41, 54, 61, 70, 71, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 100, 102, 103, 104, 105, 106, 108, 109, 111, 113, 120, 122, 123, 125, 127, 128, 129, 132, 135, 136], "metric": [33, 71, 84, 85, 87, 89, 92, 102, 108, 112, 120, 130, 132, 133], "search_param": [1, 33, 103, 104, 136], "addit": [6, 7, 24, 33, 42, 43, 44, 45, 46, 47, 48, 54, 119, 120, 122, 127, 128, 130, 133, 134, 135], "method": [1, 5, 6, 7, 15, 16, 17, 18, 24, 41, 42, 43, 44, 45, 46, 47, 48, 54, 86, 87, 97, 103, 109, 115, 119, 122, 124, 127, 135], "return": [1, 2, 3, 5, 6, 7, 8, 9, 10, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, 29, 32, 33, 35, 36, 37, 38, 39, 42, 43, 44, 45, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 86, 95, 96, 107, 110, 112, 135], "obj": [20, 22], "Not": [43, 44, 45, 46, 47, 108], "wrappen": [], "run_cross_valid": [25, 27, 41, 70, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 115, 116, 122, 123, 125, 127, 128, 129, 132, 133, 136], "data": [1, 5, 6, 7, 14, 15, 16, 17, 18, 19, 24, 29, 31, 32, 33, 42, 43, 44, 45, 46, 47, 48, 53, 54, 55, 77, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 114, 120, 122, 123, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135], "return_estim": [33, 84, 85, 86, 88, 95, 96, 97, 98, 101, 102, 103, 104, 108, 109, 112, 122, 125, 127, 128, 134], "fals": [14, 15, 16, 22, 24, 27, 33, 39, 44, 48, 51, 59, 61, 85, 86, 88, 89, 92, 95, 96, 97, 101, 102, 103, 104, 105, 109, 112, 122, 123, 125, 127, 128, 129, 134, 135], "return_train_scor": [33, 127, 134], "group": [12, 13, 15, 16, 17, 18, 19, 31, 32, 33, 61, 83, 86, 90, 95, 102, 120, 122, 126, 134], "seed": [33, 89, 92, 97, 103, 104, 108, 127, 128], "n_job": [33, 42, 127, 136], "verbos": [33, 42, 127, 136], "0": [19, 24, 32, 33, 42, 48, 55, 70, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 109, 110, 112, 113, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 131, 133, 134, 135], "run": [31, 33, 42, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 131, 133, 134, 135], "predict": [1, 7, 12, 13, 24, 32, 33, 37, 38, 48, 54, 55, 61, 84, 85, 86, 87, 88, 89, 92, 94, 95, 99, 101, 102, 105, 109, 112, 114, 120, 123, 124, 126, 127, 128, 129, 130, 133, 134, 135], "panda": [5, 6, 7, 31, 32, 33, 42, 43, 44, 45, 46, 47, 48, 54, 83, 84, 85, 86, 88, 89, 90, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 112, 119, 120, 122, 123, 127, 128, 129, 131, 133, 134], "datafram": [3, 5, 6, 7, 14, 24, 29, 32, 33, 41, 42, 43, 44, 45, 46, 47, 48, 53, 54, 55, 70, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 115, 120, 122, 123, 125, 127, 128, 129, 130, 131, 133, 134, 135, 136], "estim": [5, 6, 7, 15, 24, 30, 33, 34, 35, 39, 42, 43, 44, 45, 46, 47, 48, 54, 95, 96, 97, 103, 104, 105, 108, 109, 120, 122, 123, 124, 125, 126, 127, 129, 130, 132, 133, 135], "": [1, 5, 6, 7, 15, 16, 24, 30, 33, 42, 43, 44, 45, 46, 47, 48, 54, 55, 61, 84, 85, 86, 87, 88, 92, 95, 97, 101, 102, 104, 108, 109, 112, 114, 115, 116, 121, 122, 123, 124, 125, 127, 128, 130, 131, 132, 133, 134, 135], "final": [33, 84, 85, 86, 87, 88, 95, 96, 97, 101, 102, 103, 104, 105, 108, 109, 112, 116, 124, 127, 128, 134, 135], "all": [1, 3, 14, 21, 22, 26, 33, 36, 42, 43, 47, 48, 50, 55, 58, 84, 85, 88, 89, 95, 96, 97, 98, 102, 108, 109, 112, 114, 116, 121, 122, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135], "from": [1, 2, 3, 5, 24, 29, 32, 33, 43, 48, 51, 53, 55, 59, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 114, 116, 119, 120, 121, 122, 124, 125, 127, 128, 129, 131, 133, 134, 135], "train": [1, 6, 15, 16, 17, 18, 19, 24, 30, 33, 42, 43, 44, 45, 46, 47, 48, 55, 84, 85, 86, 88, 95, 97, 101, 102, 108, 112, 123, 124, 125, 127, 129, 130, 133, 134, 135], "bool": [1, 5, 6, 7, 14, 15, 16, 22, 24, 27, 29, 30, 33, 34, 39, 42, 43, 44, 45, 46, 47, 48, 51, 54, 59, 61], "whether": [1, 14, 15, 16, 22, 27, 33, 39, 42, 48, 51, 59, 88, 92, 95, 116, 123], "test": [15, 16, 17, 18, 19, 24, 33, 41, 55, 84, 85, 86, 92, 95, 101, 102, 104, 108, 120, 123, 124, 125, 127, 130, 133, 134, 136], "int": [1, 6, 15, 16, 17, 18, 19, 24, 30, 31, 32, 33, 41, 42, 43, 44, 45, 46, 47, 48, 61, 70, 134], "gener": [15, 16, 17, 18, 19, 33, 46, 83, 84, 85, 86, 87, 88, 89, 91, 92, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 107, 108, 109, 111, 112, 116, 121, 124, 129, 130, 134, 135], "5": [15, 16, 17, 18, 19, 33, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 120, 122, 123, 124, 125, 127, 128, 129, 130, 131, 133, 134, 135], "fold": [1, 13, 15, 16, 17, 18, 33, 61, 83, 84, 85, 90, 94, 95, 96, 99, 101, 102, 108, 109, 112, 123, 124, 127, 129, 130, 134, 135], "repeat": [1, 17, 18, 84, 85, 102, 124, 125, 127, 130, 134], "time": [17, 18, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 133, 134, 135], "number": [15, 16, 17, 18, 19, 33, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 121, 122, 123, 124, 125, 127, 128, 129, 130, 133, 134, 135], "stratifi": [15, 16, 17, 18, 19, 33, 61, 83, 84, 90, 124, 134, 136], "kfold": [33, 85, 86, 88, 89, 92, 95, 96, 97, 101, 102, 103, 104, 105, 109, 112, 122, 123, 124, 125, 127, 128, 129, 134, 135], "splitter": [15, 16, 17, 18, 19, 24, 33, 120, 126, 132, 133], "an": [1, 2, 6, 15, 16, 17, 18, 19, 24, 31, 33, 35, 42, 43, 44, 45, 46, 47, 48, 84, 87, 88, 89, 92, 95, 96, 97, 104, 108, 115, 116, 120, 122, 123, 124, 125, 127, 128, 129, 130, 131, 133, 134, 135, 136], "iter": [15, 16, 17, 18, 19, 33, 97, 108, 122, 127, 134, 136], "yield": [15, 16, 17, 18, 19, 33, 115, 127, 134], "indic": [15, 16, 17, 18, 19, 33, 44, 48, 95, 114, 116, 124, 127, 134, 135], "label": [15, 16, 17, 18, 19, 32, 33, 84, 89, 130, 131, 134, 135], "case": [15, 16, 17, 18, 24, 32, 33, 42, 86, 87, 95, 101, 112, 116, 122, 123, 124, 131, 134, 135], "org": [33, 42, 61, 86, 92, 130, 133, 134], "stabl": [33, 86, 119, 130], "modul": [0, 33, 75, 82, 109, 115, 119, 120, 129, 130], "model_evalu": 33, "comprehens": [33, 115], "scorer": [33, 35, 36, 39, 40, 112, 123, 133, 134, 136], "float": [7, 19, 24, 32, 33, 37, 38, 42, 48, 55, 70, 84], "interpret": [32, 33, 61, 108, 127], "posit": [32, 33, 42, 85, 89, 122], "everi": [5, 27, 32, 33, 51, 121, 127, 131, 135], "1": [7, 15, 19, 24, 32, 33, 46, 54, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 119, 121, 122, 123, 124, 125, 127, 128, 129, 131, 133, 134, 135], "equal": [32, 33, 86, 114, 124], "befor": [15, 16, 33, 54, 84, 87, 108, 112, 116, 119, 121, 125, 134, 135, 136], "oper": [33, 84, 109], "reproduc": [15, 16, 17, 18, 19, 24, 33, 134], "pd": [3, 5, 6, 7, 14, 24, 29, 33, 41, 43, 44, 45, 46, 47, 48, 53, 54, 55, 70, 84, 85, 86, 87, 95, 96, 97, 101, 102, 108, 112, 122, 123, 128, 129, 133], "result": [15, 16, 17, 18, 19, 29, 33, 53, 87, 95, 108, 109, 115, 123, 124, 127, 130, 131, 133, 134], "column": [1, 3, 5, 6, 7, 8, 10, 14, 24, 30, 32, 33, 43, 44, 45, 46, 47, 48, 54, 55, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 108, 109, 112, 114, 115, 122, 123, 125, 127, 128, 129, 131, 133, 134, 135, 136], "addition": [33, 61, 89, 92, 120, 121, 123, 135], "fit_tim": [33, 84, 85, 98, 101, 102, 109, 112, 123, 129, 134, 135], "ad": [1, 33, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 120, 122, 123, 125, 127, 128, 129, 131, 133, 134, 135], "And": [33, 88, 95, 108, 124, 125], "correspond": [7, 24, 33, 54, 127], "final_estim": 33, "object": [1, 2, 5, 6, 7, 15, 16, 17, 18, 19, 24, 25, 31, 33, 35, 39, 42, 43, 44, 45, 46, 47, 48, 49, 51, 54, 57, 84, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 118, 123, 125, 127, 128, 129, 134, 135], "parallel": [42, 116, 136], "job": 42, "outer": [33, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 122, 123, 125, 127, 128, 129, 133, 134, 135, 136], "joblib": [33, 42], "convent": [42, 116], "unless": [], "you": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 84, 87, 92, 97, 109, 115, 116, 118, 119, 120, 121, 122, 123, 124, 127, 128, 130, 131, 133, 134, 135], "parallel_backend": [], "mean": [33, 41, 42, 48, 55, 82, 85, 86, 88, 89, 95, 97, 101, 102, 103, 104, 108, 109, 112, 114, 123, 124, 125, 127, 129, 130, 133, 134, 135], "process": [97, 102, 125, 131, 134, 135], "parallelis": [], "level": [33, 61, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 112, 116, 122, 127, 128], "convernt": 33, "inform": [5, 6, 7, 15, 16, 17, 18, 19, 24, 29, 33, 42, 43, 44, 45, 46, 47, 48, 53, 54, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 115, 116, 122, 123, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136], "print": [33, 61, 84, 85, 86, 87, 88, 89, 92, 95, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 115, 122, 123, 125, 127, 129, 133, 134, 135], "larger": 33, "note": [15, 16, 17, 18, 19, 24, 33, 97, 108, 116, 123, 125, 128], "up": [19, 33, 41, 63, 97, 103, 104, 109, 120, 122, 127, 131, 132, 135], "50": [33, 85, 86, 89, 92, 96, 97, 98, 101, 102, 105, 108, 109, 112, 125, 128, 129, 133, 134, 135], "standard": [33, 42, 97, 123, 128, 135], "error": [15, 22, 24, 27, 32, 33, 39, 51, 59, 61, 63, 84, 85, 87, 101, 102, 112, 115, 116, 124, 130, 133, 136], "while": [15, 16, 17, 18, 19, 33, 96, 103, 108, 115, 120, 123, 124, 128, 129, 130, 135], "standrad": 33, "output": [6, 14, 15, 16, 17, 18, 19, 33, 41, 42, 43, 44, 45, 46, 47, 48, 61, 70, 86, 108, 116, 123, 127, 130, 131, 132, 135], "list_model": [], "out": [2, 21, 46, 48, 49, 58, 92, 109, 114, 120, 121, 123, 124, 125, 127, 128, 132, 133, 134, 135], "get_model": [], "kwarg": [7, 24, 25, 46, 53, 56, 65, 66, 67, 68, 86, 108], "get": [1, 3, 5, 6, 7, 10, 15, 16, 17, 18, 19, 20, 24, 25, 29, 35, 42, 43, 44, 45, 46, 47, 48, 49, 54, 55, 57, 84, 85, 88, 95, 96, 97, 102, 109, 120, 122, 127, 128, 133, 134], "type": [1, 3, 5, 6, 7, 8, 10, 14, 25, 27, 29, 30, 31, 32, 33, 43, 44, 45, 46, 47, 48, 54, 55, 71, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 114, 115, 116, 120, 122, 123, 125, 126, 127, 129, 130, 132, 133, 134], "list_transform": [], "tranform": [], "get_transform": [], "param": [1, 2, 5, 6, 7, 24, 42, 43, 44, 45, 46, 47, 48, 49, 54, 57, 65, 66, 67, 68, 92, 119, 122, 123, 125, 127, 129, 135], "util": [15, 24, 71, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 112, 116, 120, 122, 127, 128, 133], "configure_log": [84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 112, 116, 127, 128], "warn": [22, 27, 31, 32, 39, 51, 56, 59, 61, 69, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 103, 104, 108, 112, 122, 123, 124, 127, 128, 131, 133, 136], "fname": 61, "overwrit": [22, 27, 39, 51, 59, 61, 136], "output_format": 61, "configur": [1, 6, 42, 43, 44, 45, 46, 47, 48, 61, 120, 123, 127, 128], "messag": [61, 63, 69, 116, 122, 136], "debug": [61, 130], "info": [61, 62, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 116, 122, 123, 125, 127, 128, 129, 133, 134, 135], "path": 61, "filenam": [61, 116], "stdout": 61, "file": [61, 87, 90, 93, 99, 106, 110, 113, 116], "exist": [15, 16, 17, 18, 19, 24, 39, 61], "otherwis": [15, 16, 19, 24, 61], "statement": 61, "append": [61, 96, 108, 121, 124, 127], "rais": [1, 15, 20, 22, 24, 27, 31, 32, 39, 51, 57, 59, 61, 63, 131, 136], "notifi": [56, 61], "user": [1, 5, 6, 7, 15, 16, 17, 18, 19, 22, 24, 27, 39, 42, 43, 44, 45, 46, 47, 48, 51, 54, 56, 59, 61, 97, 112, 115, 119, 120, 123, 125, 130, 135, 136], "entri": [61, 135], "format": [6, 42, 43, 44, 45, 46, 47, 48, 61, 85, 87, 102, 103, 104, 108, 116, 121, 123], "doc": [61, 86, 116, 121, 136], "python": [61, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 116, 119, 121, 124, 136], "dev": [61, 116, 121], "howto": 61, "asctim": 61, "levelnam": 61, "msg": [63, 69, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 103, 104, 108, 112, 122, 127, 128, 133], "categori": [69, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 103, 104, 108, 112, 122, 127, 128, 133], "runtimewarn": [27, 31, 32, 51, 59, 69, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 103, 104, 108, 112, 122, 127, 128, 133], "first": [15, 16, 17, 18, 41, 63, 69, 84, 88, 89, 92, 95, 97, 101, 102, 103, 104, 108, 109, 116, 122, 123, 125, 128, 129, 131, 132, 133, 134, 135], "instanc": [5, 6, 7, 15, 16, 17, 18, 19, 24, 42, 43, 44, 45, 46, 47, 48, 54, 123, 127, 135], "raise_error": [], "klass": 63, "valueerror": [1, 20, 22, 27, 31, 32, 39, 51, 57, 59, 63], "model_select": [84, 85, 86, 88, 92, 95, 98, 101, 102, 108, 124, 127, 133, 134, 136], "stratifiedbootstrap": 108, "n_split": [15, 16, 17, 18, 19, 24, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 122, 123, 124, 125, 127, 128, 129, 133, 134, 135], "test_siz": [19, 84, 85, 95, 101, 102, 108], "train_siz": [19, 95, 98, 108], "random_st": [15, 16, 17, 18, 19, 24, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 122, 123, 124, 125, 127, 128, 129, 133, 134, 135], "bootstrap": [19, 108, 124], "resampl": 19, "replac": [19, 42, 96, 108, 121, 127], "respect": [19, 42, 114, 116, 131, 133, 134, 135], "distribut": [15, 16, 19, 41, 84, 86, 88, 89, 92, 95, 96, 98, 103, 104, 105, 108, 114, 123, 124, 125, 127, 133, 134, 135], "sampl": [6, 7, 15, 16, 17, 18, 19, 24, 32, 41, 42, 43, 44, 45, 46, 47, 48, 54, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 122, 123, 124, 125, 127, 128, 129, 133, 134, 135], "re": [19, 116, 135], "shuffl": [15, 16, 19, 85, 86, 88, 89, 92, 95, 96, 97, 101, 102, 103, 104, 105, 109, 112, 122, 123, 124, 125, 127, 128, 129, 134, 135], "2": [7, 15, 16, 17, 18, 19, 24, 54, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 119, 120, 123, 124, 125, 127, 128, 129, 131, 133, 134, 135], "should": [1, 5, 6, 15, 19, 22, 24, 27, 30, 39, 42, 43, 44, 45, 46, 47, 48, 51, 59, 86, 97, 102, 108, 114, 116, 121, 122, 124, 125, 126, 129, 130, 134, 135], "between": [5, 19, 31, 85, 108, 116, 122, 123, 124, 128, 130, 133, 135], "repres": [1, 3, 19, 30, 48, 55, 86, 124, 134], "proport": 19, "includ": [1, 2, 14, 19, 96, 97, 109, 115, 116, 119, 130], "round": [19, 133], "absolut": [19, 85, 101, 102, 112, 114], "complement": [19, 114], "size": [19, 122, 123, 124, 133], "chang": [8, 15, 19, 24, 43, 82, 86, 104, 108, 114, 116, 119, 121, 124, 134], "version": [6, 15, 19, 24, 42, 43, 44, 45, 46, 47, 48, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 112, 116, 119, 120, 124, 127, 128, 136], "21": [19, 87, 120, 122, 128, 133], "It": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 95, 103, 104, 119, 120, 122, 124, 125, 127, 134, 135], "remain": [19, 124, 130], "unspecifi": 19, "automat": [19, 116, 119, 121, 135], "randomst": [15, 16, 17, 18, 19], "control": [15, 16, 17, 18, 19, 87, 88, 95, 103, 104, 111, 123, 128, 130], "produc": [19, 125], "pass": [7, 15, 16, 17, 18, 19, 24, 54, 103, 114, 116, 129, 134, 135], "across": [15, 16, 17, 18, 19, 85, 96, 101, 102, 112, 124, 127, 134], "multipl": [1, 15, 16, 17, 18, 19, 33, 61, 97, 100, 106, 124, 125, 134, 135], "call": [15, 16, 17, 18, 19, 22, 35, 39, 115, 118, 123, 124, 125, 127, 128, 131, 135], "like": [6, 7, 15, 16, 17, 18, 19, 27, 42, 43, 44, 45, 46, 47, 48, 51, 54, 92, 102, 116, 119, 124, 125, 127, 130, 131, 134, 135], "shape": [6, 7, 15, 16, 17, 18, 19, 42, 43, 44, 45, 46, 47, 48, 54, 84, 95], "n_sampl": [6, 7, 15, 16, 17, 18, 19, 42, 43, 44, 45, 46, 47, 48, 54, 97, 122, 128], "n_featur": [6, 15, 16, 17, 18, 19, 42, 43, 44, 45, 46, 47, 48, 97, 122, 123, 128], "where": [15, 16, 17, 18, 19, 87, 121, 124, 127, 135, 136], "suffici": [15, 16, 19, 86], "henc": [15, 16, 19], "np": [7, 15, 16, 17, 18, 19, 24, 42, 54, 84, 85, 88, 95, 102, 103, 104, 122, 123, 124, 127, 128], "zero": [15, 16, 17, 18, 19, 97], "mai": [15, 16, 17, 18, 19, 82, 122, 123, 127, 128], "placehold": [15, 16, 17, 18, 19], "instead": [3, 15, 16, 19, 22, 24, 27, 39, 42, 51, 59, 86, 123, 124, 125, 128, 136], "actual": [15, 16, 19, 42, 48, 84, 85, 102, 109, 112, 127], "n_label": 19, "variabl": [1, 2, 15, 16, 17, 18, 19, 31, 32, 33, 61, 85, 86, 88, 95, 100, 102, 106, 109, 112, 123, 124, 125, 127, 129, 134, 135, 136], "supervis": [15, 16, 17, 18, 19, 135], "stratif": [15, 16, 19, 86, 88, 126], "done": [15, 16, 19, 103, 116, 119, 121, 127, 128, 133, 134, 135], "base": [1, 15, 16, 19, 29, 33, 41, 53, 71, 114, 118, 120, 123, 126, 127, 130, 131, 132, 135], "alwai": [15, 16, 17, 18, 19, 89, 103, 104, 108, 116, 123, 125, 128, 133, 134, 135], "ignor": [15, 16, 17, 18, 19, 24, 109, 112], "ndarrai": [6, 7, 15, 16, 17, 18, 19, 24, 42, 43, 44, 45, 46, 47, 48, 54], "differ": [5, 15, 16, 17, 18, 19, 27, 86, 87, 89, 92, 97, 102, 103, 104, 105, 108, 109, 118, 119, 122, 123, 124, 125, 127, 128, 130, 131, 133, 134, 135], "make": [7, 15, 16, 17, 18, 19, 24, 85, 87, 88, 95, 97, 102, 103, 104, 108, 116, 119, 121, 122, 123, 124, 125, 127, 128, 129, 131, 133, 134, 135, 136], "ident": [15, 16, 17, 18, 19, 124], "integ": [15, 16, 17, 18, 19, 134], "stratifiedgroupskfold": [], "repeatedstratifiedgroupskfold": [], "n_repeat": [17, 18, 84, 92, 98, 127, 133, 134], "10": [17, 18, 42, 84, 85, 86, 87, 88, 89, 95, 98, 101, 102, 108, 109, 112, 123, 124, 125, 127, 128, 129, 133, 134], "k": [15, 16, 17, 18, 33, 61, 83, 84, 85, 88, 90, 95, 101, 102, 108, 114, 124, 125, 130, 134], "n": [17, 18, 84, 85, 86, 97, 101, 102, 112, 114, 121, 124, 129, 135], "repetit": [17, 18, 84, 85, 102], "must": [15, 16, 17, 18, 41, 46, 70, 87, 88, 95, 102, 116, 124, 125, 131, 135], "need": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 87, 88, 89, 92, 95, 101, 108, 109, 112, 116, 118, 119, 120, 122, 123, 124, 125, 127, 129, 130, 133, 134, 135, 136], "state": [17, 18, 23, 24, 28, 40, 52, 60, 123], "glossari": [16, 17], "dataframeconfoundremov": [], "model_confound": [48, 55, 123], "confounds_match": [], "__": [5, 6, 7, 24, 42, 43, 44, 45, 46, 47, 48, 54, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 122, 123, 125, 128, 129, 133, 134, 135], "__confound": [108, 123], "threshold": [1, 14, 33, 42, 48, 55, 61, 94, 99, 114, 122], "keep_confound": [48, 109], "remov": [1, 2, 14, 19, 33, 43, 48, 55, 61, 97, 107, 110, 114, 116, 120, 126, 133, 136], "subtract": [48, 55, 114], "given": [15, 24, 48, 92, 95, 108, 114, 115, 123, 131, 134, 135], "sklearn": [1, 3, 5, 7, 15, 24, 29, 46, 48, 55, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 122, 123, 124, 127, 128, 129, 133, 134], "independ": [41, 48, 55, 95, 108, 114, 124], "linearregress": [48, 55, 114, 122, 123], "regular": [48, 103, 104, 114, 125, 131], "express": [48, 131], "detect": [84, 88, 89, 92, 95, 96, 98, 103, 104, 105, 108, 115, 125, 127, 130, 133, 134, 135], "exact": 130, "anoth": [84, 87, 97, 112, 124, 125, 128, 133, 135], "regex": 3, "insid": [15, 24, 27, 135], "residu": [48, 55, 123], "after": [22, 29, 48, 53, 55, 85, 86, 95, 97, 101, 102, 108, 109, 112, 116, 127], "fall": [48, 55, 122, 134], "under": [48, 55, 112, 118, 119, 134, 135], "want": [39, 48, 84, 87, 88, 89, 95, 97, 108, 109, 112, 116, 118, 119, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135], "togeth": [42, 48, 85, 86, 101, 102, 109, 112, 114], "seri": [31, 32, 55], "self": [3, 5, 6, 15, 24, 29, 42, 43, 44, 45, 46, 47, 48, 53, 54, 56, 86, 108], "get_support": [44, 48], "support": [44, 48, 54, 75, 84, 88, 89, 95, 98, 103, 104, 116, 124, 125, 127, 128, 134, 135], "mask": [42, 44, 48], "index": [84, 85, 86, 87, 88, 95, 97, 101, 102, 103, 104, 108, 112, 116, 120, 127], "support_mask": [44, 48], "deconfound": [48, 109], "without": [1, 22, 27, 39, 51, 59, 86, 88, 104, 108, 109, 114, 130], "targetconfoundremov": [29, 53, 123], "attribut": [1, 5, 7, 9, 24, 42, 54, 127], "fit_transform": [6, 29, 42, 43, 44, 45, 46, 47, 48, 53, 55], "fit_param": [6, 7, 42, 43, 44, 45, 46, 47, 48, 54], "n_output": [6, 42, 43, 44, 45, 46, 47, 48], "unsupervis": [6, 42, 43, 44, 45, 46, 47, 48], "x_new": [6, 42, 43, 44, 45, 46, 47, 48], "n_features_new": [6, 42, 43, 44, 45, 46, 47, 48], "extendeddataframepipelin": 136, "dataframe_pipelin": [], "y_transform": [], "confound_dataframe_pipelin": [], "categorical_featur": [], "custom": [33, 39, 61, 113, 117, 120, 134, 135], "metamodel": [], "In": [15, 16, 17, 18, 42, 86, 87, 88, 89, 95, 96, 108, 109, 112, 116, 120, 122, 123, 124, 127, 128, 130, 131, 133, 134, 135], "practic": [123, 124], "ref": 135, "_create_extended_pipelin": [], "There": [87, 124, 130, 132, 135], "caveat": 86, "piplin": [], "compar": [86, 92, 108, 120, 123, 125, 130, 133, 134], "usual": [118, 125, 135], "have": [1, 5, 6, 7, 15, 16, 24, 32, 42, 43, 44, 45, 46, 47, 48, 54, 84, 87, 88, 89, 92, 95, 97, 103, 104, 108, 109, 114, 115, 116, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135], "handl": 34, "importantli": [123, 124, 127, 130, 131, 135], "consid": [1, 109, 115, 116, 121, 123, 125, 131, 134], "ground": [], "truth": [], "against": 116, "extern": [], "exteded_scor": [], "add": [1, 2, 3, 22, 27, 51, 97, 98, 101, 102, 103, 104, 105, 108, 109, 116, 122, 123, 124, 125, 127, 128, 129, 131, 133, 134, 135, 136], "allow": [2, 15, 22, 24, 27, 39, 51, 59, 89, 108, 115, 118, 122, 123, 125, 131, 132, 135, 136], "dataframewraptransform": [], "properli": 121, "categor": [33, 102, 109, 114, 129], "so": [1, 5, 6, 7, 24, 39, 42, 43, 44, 45, 46, 47, 48, 54, 86, 87, 89, 92, 97, 104, 114, 116, 118, 124, 125, 129, 131, 134, 135], "dataframe_piplin": [], "column_typ": [3, 127], "separ": [42, 95, 97, 130, 134, 135], "ag": [85, 86, 87, 101, 102, 109, 112, 129], "becom": [87, 130, 135], "age__": [], "work": [5, 6, 7, 15, 16, 17, 18, 19, 24, 29, 42, 43, 44, 45, 46, 47, 48, 53, 54, 83, 84, 85, 86, 88, 89, 90, 92, 95, 96, 97, 98, 101, 103, 104, 108, 109, 112, 116, 122, 123, 124, 125, 127, 128, 133, 136], "being": [1, 116, 119, 134, 135], "abl": [5, 115, 130, 133], "create_dataframe_pipelin": [], "take": [112, 124, 127, 135], "targettransfromerwrapp": [], "most": [109, 119, 122, 123, 124, 127, 130, 135], "target_transform": [], "similar": [125, 128, 134, 135], "get_param": [5, 6, 7, 24, 42, 43, 44, 45, 46, 47, 48, 54, 65, 66, 67, 68, 127], "deep": [5, 6, 7, 24, 42, 43, 44, 45, 46, 47, 48, 54, 65, 66, 67, 68, 123], "contain": [5, 6, 7, 24, 32, 33, 36, 41, 42, 43, 44, 45, 46, 47, 48, 54, 70, 84, 85, 86, 89, 101, 102, 112, 124, 127, 131, 134], "subobject": [5, 6, 7, 24, 42, 43, 44, 45, 47, 48, 54], "map": [5, 6, 7, 24, 42, 43, 44, 45, 46, 47, 48, 54, 85, 109], "preprocess": [1, 2, 33, 61, 84, 85, 86, 88, 89, 92, 94, 95, 96, 99, 102, 108, 109, 112, 120, 122, 126, 131, 132, 134], "until": [14, 95, 97, 102, 109, 119, 133], "return_trans_column_typ": [], "associ": [], "tupl": [29, 42], "set_param": [5, 6, 7, 24, 42, 43, 44, 45, 46, 47, 48, 54, 65, 66, 67, 68], "simpl": [5, 6, 7, 24, 33, 41, 42, 43, 44, 45, 46, 47, 48, 54, 61, 70, 83, 90, 91, 93, 95, 96, 97, 98, 103, 104, 108, 109, 114, 116, 120, 122, 124, 125, 127, 128, 130, 135], "well": [5, 6, 7, 24, 42, 43, 44, 45, 46, 47, 48, 54, 115, 122, 123, 124, 125, 127, 128, 130, 131, 132, 133, 135], "nest": [5, 6, 7, 24, 42, 43, 44, 45, 46, 47, 48, 54, 122, 125, 127, 130], "latter": [5, 6, 7, 24, 42, 43, 44, 45, 46, 47, 48, 54], "form": [5, 6, 7, 24, 42, 43, 44, 45, 46, 47, 48, 54, 131, 135], "compon": [5, 6, 7, 24, 42, 43, 44, 45, 46, 47, 48, 54, 97, 102, 114, 135], "updat": [3, 5, 6, 7, 15, 24, 42, 43, 44, 45, 46, 47, 48, 54, 116, 119, 136], "function": [1, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 49, 50, 51, 52, 54, 57, 58, 59, 60, 61, 63, 69, 70, 83, 89, 92, 95, 96, 97, 107, 109, 111, 113, 115, 116, 118, 119, 120, 122, 123, 130, 131, 132, 133, 134, 135, 136], "tune": [1, 30, 33, 61, 100, 106, 120, 122, 123, 126, 127, 128, 129, 135], "download": [84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112], "sourc": [84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 121], "code": [84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 114, 116, 120, 123, 135], "advanced_python": [], "zip": [], "jupyt": [84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 118, 134], "notebook": [84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 118, 134], "advanced_jupyt": [], "galleri": [83, 84, 85, 86, 87, 88, 89, 91, 92, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 107, 108, 109, 111, 112, 116], "sphinx": [83, 84, 85, 86, 87, 88, 89, 91, 92, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 107, 108, 109, 111, 112, 116], "click": 132, "here": [43, 44, 45, 47, 86, 87, 88, 95, 97, 109, 115, 116, 120, 128, 133, 134, 135], "full": [41, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 116, 127], "fmri": [87, 88, 95, 103, 104], "dataset": [15, 16, 17, 18, 19, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 116, 122, 123, 124, 125, 127, 128, 129, 130, 131, 133, 134, 135], "transform": [1, 2, 6, 29, 33, 34, 61, 71, 87, 97, 100, 106, 109, 120, 122, 123, 127, 129, 130, 135, 136], "combin": [85, 86, 87, 101, 102, 108, 112, 125, 135], "order": [7, 15, 16, 24, 54, 87, 88, 95, 108, 109, 115, 116, 123, 125, 128, 130, 135], "prepar": [71, 87, 120, 122, 123, 128], "bse": 87, "waskom": [87, 88, 95, 103, 104], "m": [87, 88, 95, 103, 104, 116, 121, 135], "l": [86, 87, 88, 95, 97, 101, 103, 104, 108], "frank": [87, 88, 95, 103, 104], "c": [84, 87, 88, 95, 103, 104, 118, 125, 127, 128, 135], "wagner": [87, 88, 95, 103, 104], "d": [42, 84, 87, 88, 95, 103, 104, 114, 121, 122, 124], "2016": [42, 87, 88, 95, 103, 104, 122], "adapt": [87, 88, 95, 103, 104], "engag": [87, 88, 95, 103, 104], "cognit": [87, 88, 95, 103, 104], "context": [87, 88, 95, 103, 104, 127], "depend": [75, 82, 87, 88, 95, 103, 104, 120, 124, 127, 133], "decis": [7, 54, 87, 88, 95, 103, 104, 123, 127], "cerebr": [87, 88, 95, 103, 104], "cortex": [87, 88, 95, 103, 104], "author": [84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 116], "federico": [84, 85, 86, 87, 88, 89, 92, 95, 96, 98, 102, 103, 104, 105, 108, 112], "raimondo": [84, 85, 86, 87, 88, 89, 92, 95, 96, 98, 102, 103, 104, 105, 108, 112, 136], "f": [84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 102, 103, 104, 105, 108, 112, 122, 123, 125, 128], "fz": [84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112], "juelich": [84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112], "de": [84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 123], "licens": [84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 116], "agpl": [84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112], "seaborn": [84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 116, 119, 120, 124, 125, 127, 131, 134, 135], "import": [0, 29, 53, 84, 85, 86, 87, 88, 89, 92, 95, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 116, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135], "load_dataset": [84, 87, 88, 89, 92, 95, 96, 98, 103, 104, 105, 108, 116, 125, 127, 131, 134, 135], "One": [3, 24, 87, 123, 125, 128, 135], "easi": [2, 87, 120, 123, 125, 127, 128, 132, 133], "directli": [46, 87, 120, 129], "also": [3, 84, 86, 87, 89, 92, 97, 102, 103, 109, 115, 116, 118, 122, 123, 125, 127, 128, 130, 131, 133, 134, 135], "known": [87, 131, 135], "excel": [87, 124], "spreadsheet": 87, "csv": 87, "ideal": 87, "we": [84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 115, 116, 118, 119, 120, 123, 124, 125, 127, 128, 129, 130, 131, 133, 134, 135], "everyth": [87, 132], "tabul": 87, "organis": [87, 123], "might": [31, 32, 82, 87, 89, 92, 96, 103, 104, 115, 118, 119, 123, 124, 127, 129, 132, 134, 135], "your": [84, 87, 116, 119, 120, 122, 123, 124, 127, 132, 135], "some": [15, 24, 86, 87, 88, 95, 96, 116, 119, 122, 123, 124, 125, 127, 128, 130, 131], "other": [1, 2, 15, 22, 24, 27, 51, 82, 87, 89, 102, 104, 109, 116, 118, 122, 123, 124, 132, 133, 135], "demograph": [87, 123], "diagnost": 87, "behaviour": [87, 120, 134], "manual": [87, 118, 133, 135], "edit": 87, "sure": [87, 95, 116, 121, 123, 124, 125], "readi": [87, 133, 135], "do": [87, 95, 97, 102, 103, 104, 108, 109, 112, 114, 116, 120, 121, 123, 124, 125, 128, 130, 131, 132, 133, 134, 135], "machin": [84, 87, 88, 89, 95, 98, 103, 104, 116, 120, 122, 123, 125, 127, 130, 131, 132, 133, 135], "howev": [87, 92, 95, 96, 97, 109, 115, 118, 119, 123, 124, 125, 128, 129, 130, 133, 134, 135], "prune": 87, "introduc": [6, 42, 43, 44, 45, 46, 47, 48, 87, 123], "fortun": [87, 124], "tool": [87, 115, 119, 127, 133], "deal": [87, 122, 131], "task": [87, 95, 109, 125, 129], "collect": [87, 108, 127], "let": [84, 85, 86, 87, 88, 95, 97, 101, 102, 103, 104, 108, 109, 112, 123, 124, 125, 127, 128, 129, 131, 135], "start": [87, 116, 117, 120, 124, 125, 127, 128, 129, 132, 133, 135], "df_fmri": [87, 88, 95, 103, 104], "what": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 87, 88, 95, 102, 104, 109, 114, 123, 124, 125, 127, 128, 129, 131, 134, 135], "head": [84, 85, 86, 87, 88, 95, 101, 102, 103, 104, 108, 109, 112, 129, 131, 133, 135], "subject": [87, 88, 95, 103, 104, 124], "timepoint": [87, 88, 95, 103, 104], "event": [87, 88, 95, 103, 104], "region": [87, 88, 95, 103, 104], "signal": [87, 88, 95, 103, 104], "s13": [87, 88, 95, 103, 104], "18": [87, 88, 95, 98, 103, 104, 122, 123], "stim": [87, 88, 95, 103, 104], "pariet": [87, 88, 95, 103, 104], "017552": [87, 88, 95, 103, 104], "s5": [85, 86, 87, 88, 95, 101, 102, 103, 104, 109, 112, 129], "14": [87, 88, 95, 97, 98, 103, 104, 123, 125, 128, 133], "080883": [87, 88, 95, 103, 104], "s12": [87, 88, 95, 103, 104], "081033": [87, 88, 95, 103, 104], "3": [15, 24, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 116, 119, 122, 123, 124, 125, 127, 128, 129, 131, 133, 134, 135, 136], "s11": [87, 88, 95, 103, 104], "046134": [87, 88, 95, 103, 104], "4": [84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 119, 122, 123, 124, 125, 127, 128, 129, 131, 133, 134, 135], "s10": [87, 88, 95, 103, 104], "037970": [87, 88, 95, 103, 104], "seen": [87, 135], "pivot": [87, 88, 95, 103, 104], "tabl": [87, 88, 95], "keep": [45, 87, 89, 92, 96, 98, 102, 105, 108, 109, 116, 119, 120, 125, 128, 135], "our": [84, 87, 88, 89, 95, 97, 105, 109, 116, 120, 123, 124, 125, 127, 128, 130, 131, 133, 134, 135], "extract": [84, 87, 88, 95, 127], "identifi": [87, 89, 122, 123, 127, 133], "As": [1, 87, 89, 92, 98, 105, 108, 109, 112, 116, 118, 122, 123, 124, 125, 127, 128, 133, 134, 135], "rule": [87, 114, 124, 135], "t": [41, 87, 92, 95, 124, 125, 133, 134, 135], "duplic": [87, 115], "frontal": [87, 88, 95, 103, 104], "s0": [87, 88, 95, 103, 104], "cue": [87, 88, 95, 103, 104], "007766": [87, 103, 104], "006899": [87, 103, 104], "021452": [87, 103, 104], "039327": [87, 103, 104], "016440": [87, 103, 104], "000300": [87, 103, 104], "021054": [87, 103, 104], "035735": [87, 103, 104], "024296": [87, 103, 104], "033220": [87, 103, 104], "now": [84, 85, 86, 87, 89, 92, 95, 96, 98, 101, 102, 103, 104, 108, 109, 112, 116, 121, 123, 124, 125, 127, 128, 131, 133, 134, 135], "access": [39, 87], "reset": [23, 28, 40, 52, 60, 87], "check": [5, 6, 7, 9, 15, 16, 17, 18, 19, 24, 29, 31, 34, 42, 43, 44, 45, 46, 47, 48, 54, 81, 87, 88, 95, 97, 108, 115, 116, 120, 121, 125, 134, 136], "sutil": 87, "reset_index": [86, 87, 88, 95, 103, 104, 108], "For": [87, 89, 92, 97, 102, 109, 114, 115, 116, 118, 119, 122, 124, 125, 127, 128, 129, 131, 134, 135], "place": 87, "thei": [5, 7, 24, 54, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 103, 104, 108, 112, 118, 122, 125, 127, 128, 134, 135], "were": [86, 87, 88, 95, 96, 108, 127, 134], "scan": 87, "purpos": [5, 86, 87, 134], "metadata": [5, 6, 7, 15, 16, 17, 18, 19, 24, 42, 43, 44, 45, 46, 47, 48, 54, 87], "rang": [84, 87, 97, 114, 122, 128], "23": [87, 123, 133], "31": 87, "29": [87, 133], "43": 87, "28": [87, 125, 127], "48": [85, 87, 88], "35": [85, 87], "34": [87, 133], "25": [84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 127, 128, 129, 133], "scanner": 87, "6": [87, 88, 92, 95, 96, 97, 98, 109, 119, 122, 124, 127, 130, 131, 134], "b": [87, 116, 135], "8": [84, 85, 87, 88, 95, 98, 101, 102, 108, 109, 112, 119, 123, 124, 129, 130, 133, 134, 135], "df_meta": 87, "s1": [85, 86, 87, 88, 95, 101, 102, 109, 112, 129], "s2": [85, 86, 87, 88, 95, 101, 102, 109, 112, 129], "s3": [85, 86, 87, 88, 95, 101, 102, 109, 112, 129], "s4": [85, 86, 87, 88, 95, 101, 102, 109, 112, 129], "s6": [85, 86, 87, 88, 95, 101, 102, 109, 112, 129], "7": [84, 85, 86, 87, 88, 95, 98, 102, 116, 120, 124, 128, 130, 131, 133, 134, 136], "s7": [87, 88, 95], "s8": [87, 88, 95], "9": [84, 85, 87, 88, 95, 97, 98, 102, 109, 123, 131, 134, 135], "s9": [87, 88, 95], "11": [84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 108, 112, 119, 122, 123, 127, 128, 133, 134], "12": [85, 86, 87, 88, 89, 95, 97, 98, 102, 104, 108, 119, 122, 123, 124], "13": [87, 88, 95, 98, 104, 123], "match": [3, 46, 87], "set_index": [84, 85, 87, 102, 108], "16": [87, 88, 95, 97, 98, 109, 125, 127, 133], "036739": 87, "131641": 87, "17": [87, 88, 95, 97, 98, 108, 133], "004900": 87, "036362": 87, "030099": 87, "121574": 87, "000643": 87, "051040": 87, "009959": 87, "103513": 87, "532": [87, 88, 95, 103, 104], "row": [1, 6, 30, 43, 44, 45, 46, 47, 48, 84, 85, 86, 87, 88, 92, 95, 97, 98, 101, 102, 109, 112, 123, 127, 129, 134, 135], "suppos": [87, 89, 123], "dure": [87, 88, 95, 119, 122, 123, 125, 127], "still": [31, 87, 109, 119, 123, 124, 134], "009038": 87, "009642": 87, "047859": 87, "026727": 87, "085040": 87, "086399": 87, "069775": 87, "070558": 87, "115321": 87, "154058": 87, "010535": 87, "061817": 87, "034386": 87, "130267": 87, "15": [87, 88, 95, 97, 98, 102, 123, 125, 127], "002170": 87, "048007": 87, "038257": 87, "134828": 87, "004290": 87, "035395": 87, "266": [87, 88, 95, 103, 104, 128, 135], "sinc": [87, 92, 97, 101, 103, 125, 135], "previou": [87, 92, 96, 97, 116, 128, 133, 134, 135], "multi": [84, 87, 133, 134, 135], "multiindex": 87, "trick": 87, "underscor": 87, "_": [87, 96, 108, 116, 135], "frontal_cu": 87, "parietal_stim": 87, "total": [84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 109, 110, 112, 113, 122, 123, 124, 125, 127, 128, 129, 131, 133, 134, 135], "script": [84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 116, 121, 122, 123, 124, 125, 127, 128, 129, 131, 133, 134, 135], "minut": [84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 122, 123, 124, 125, 127, 128, 129, 131, 133, 134, 135], "065": 86, "second": [15, 16, 17, 18, 41, 84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 122, 123, 124, 125, 127, 128, 129, 131, 133, 134, 135], "run_combine_panda": [87, 90], "py": [84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 109, 110, 112, 113, 116, 122, 124, 127, 128, 133], "ipynb": [84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112], "diabet": [85, 86, 101, 102, 112, 129], "analysi": [1, 14, 16, 33, 61, 83, 90, 95, 100, 101, 106, 112, 114, 124, 135], "ridg": [85, 101, 102, 112, 114], "model": [1, 7, 13, 14, 19, 33, 36, 41, 48, 54, 55, 61, 70, 71, 78, 84, 85, 86, 88, 89, 93, 94, 97, 98, 99, 101, 102, 103, 104, 105, 107, 109, 110, 112, 115, 117, 120, 123, 124, 126, 129, 130, 132], "shammi": [84, 85, 86, 88, 95, 97, 102, 108, 112, 123, 136], "scipi": [42, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 112, 122, 127, 128], "load_diabet": [85, 86, 101, 102, 109, 112, 129], "make_scor": 112, "register_scor": 112, "log": [42, 61, 63, 69, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 112, 116, 122, 127, 128, 133], "extra": [75, 82, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 112, 114, 115, 116, 128, 129, 135], "2022": [120, 123], "38": [95, 97, 101, 102, 103, 104, 105, 108, 109, 112, 122, 123, 127, 128, 129, 133, 134, 135], "088": [88, 92], "lib": [84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 112, 124, 127, 128], "dev3": [], "load": [84, 85, 86, 101, 102, 103, 104, 108, 109, 112, 116, 125, 129, 131, 134], "return_x_i": [85, 86, 101, 102, 109, 112, 129], "as_fram": [85, 86, 101, 102, 109, 112, 129], "ten": [85, 86, 101, 102, 112], "sex": [85, 86, 101, 102, 109, 112, 123, 127, 129], "bodi": [85, 86, 101, 102, 112], "mass": [85, 86, 101, 102, 112], "averag": [85, 86, 101, 102, 109, 112, 122, 124, 133], "blood": [85, 86, 101, 102, 109, 112], "pressur": [85, 86, 101, 102, 109, 112], "six": [85, 86, 101, 102, 112], "serum": [85, 86, 101, 102, 112], "measur": [85, 86, 101, 102, 109, 112, 123, 124, 125, 127], "patient": [85, 86, 101, 102, 112], "quantit": [85, 86, 101, 102, 112], "diseas": [85, 86, 101, 102, 112], "progress": [85, 86, 101, 102, 112, 116], "year": [85, 86, 101, 102, 112], "baselin": [85, 86, 101, 102, 112], "interest": [85, 86, 89, 101, 102, 108, 112, 132, 134, 135], "describ": [42, 85, 86, 97, 101, 102, 109, 112, 116, 129, 134], "bmi": [85, 86, 101, 102, 109, 112, 129], "038076": [85, 86, 101, 102, 109, 112, 129], "050680": [85, 86, 101, 102, 109, 112, 129], "061696": [85, 86, 101, 102, 109, 112, 129], "002592": [85, 86, 101, 102, 109, 112, 129], "019908": [], "017646": [85, 86, 101, 102, 109, 112, 129], "001882": [85, 86, 101, 102, 109, 112, 129], "044642": [85, 86, 101, 102, 109, 112, 129], "051474": [85, 86, 101, 102, 109, 112, 129], "039493": [85, 86, 101, 102, 109, 112, 129], "068330": [], "092204": [85, 86, 101, 102, 109, 112, 129], "085299": [85, 86, 101, 102, 109, 112, 129], "044451": [85, 86, 101, 102, 109, 112, 129], "002864": [], "025930": [85, 86, 101, 102, 109, 112, 129], "089063": [85, 86, 101, 102, 109, 112, 129], "011595": [85, 86, 101, 102, 109, 112, 129], "034309": [85, 86, 101, 102, 109, 112, 129], "022692": [], "009362": [85, 86, 101, 102, 109, 112, 129], "005383": [85, 86, 101, 102, 109, 112, 129], "036385": [85, 86, 101, 102, 109, 112, 129], "031991": [], "046641": [85, 86, 101, 102, 109, 112, 129], "count": [84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 124, 125, 127, 129, 133, 134, 135], "442": [85, 86, 101, 102, 109, 112, 129], "000000": [84, 85, 86, 92, 97, 101, 102, 109, 112, 129, 133], "152": [85, 86, 101, 102, 109, 112, 129, 133, 135, 136], "133484": [85, 86, 101, 102, 109, 112, 129], "std": [85, 86, 97, 101, 102, 109, 112, 123, 129], "77": [85, 86, 101, 102, 109, 112, 129, 133, 136], "093005": [85, 86, 101, 102, 109, 112, 129], "min": [85, 86, 97, 101, 102, 109, 112, 129], "87": [85, 86, 101, 102, 109, 112, 129, 133], "140": [85, 86, 101, 102, 109, 112, 129], "500000": [85, 86, 101, 102, 109, 112, 129], "75": [85, 86, 89, 92, 97, 101, 102, 109, 112, 129], "211": [85, 86, 101, 102, 109, 112, 129], "max": [85, 86, 97, 101, 102, 109, 112, 114, 129], "346": [85, 86, 101, 102, 109, 112, 129], "dtype": [84, 85, 86, 88, 89, 92, 95, 96, 98, 101, 102, 103, 104, 105, 108, 109, 112, 125, 127, 129, 133, 134, 135], "float64": [85, 86, 89, 92, 97, 101, 102, 105, 109, 112, 122, 123, 128, 129], "data_diabet": [85, 101, 102, 112, 129], "concat": [85, 86, 96, 101, 102, 108, 112, 129], "axi": [42, 84, 85, 86, 101, 102, 112, 124, 129], "bp": [85, 86, 101, 102, 109, 112, 129], "zscore": [1, 14, 33, 61, 84, 85, 86, 88, 89, 92, 94, 95, 96, 98, 99, 101, 103, 104, 105, 108, 112, 114, 125, 127, 129, 133, 134, 135], "neg_mean_absolute_error": [85, 86, 97, 101, 112, 134], "108": [125, 136], "expand": [84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 115, 122, 123, 125, 127, 128, 129, 133, 134, 135], "109": [], "obtain": [1, 2, 7, 54, 96, 123, 130], "repeatedkfold": [84, 127], "score_tim": [84, 85, 98, 101, 102, 109, 112, 123, 129, 134, 135], "test_scor": [85, 86, 88, 89, 92, 95, 101, 102, 103, 104, 105, 112, 125, 134], "009320": [], "005859": [], "44": [112, 125, 133], "386924": [], "008725": [], "005802": [], "45": [85, 125], "094063": [], "008667": [], "005820": [], "188016": [], "008729": [], "005827": [], "41": 133, "591935": [], "008672": [], "005804": [], "49": [84, 123], "226121": [], "56947555620945": [], "thing": [112, 130, 135], "pearson": [37, 38, 112, 122], "product": [37, 38, 112], "moment": [37, 38, 112], "correl": [37, 38, 42, 85, 112, 122], "coeffici": [37, 38, 85, 112, 134, 135], "squar": [37, 112, 114], "r2_corr": [112, 134], "508": [], "509": [], "510": [], "test_neg_mean_absolute_error": 112, "test_r2_corr": 112, "257386": [], "502022": [], "comput": [7, 24, 37, 38, 42, 54, 89, 102, 112, 115, 130, 135], "r": [102, 112], "def": 112, "pearson_scor": 112, "y_true": [37, 38, 84, 85, 89, 102, 112], "y_pred": [37, 38, 84, 85, 89, 102, 112], "stat": [42, 71, 92, 112, 120, 122, 124, 133], "pearsonr": [42, 112, 134], "squeez": 112, "regist": [22, 23, 27, 28, 39, 40, 51, 52, 59, 60, 112, 136], "scorer_nam": [39, 112], "39": [], "049": [], "050": [], "051": [], "644": [], "run_custom_scorers_regress": [112, 113], "vector": [84, 88, 89, 95, 98, 103, 104, 116, 125, 127, 128, 134, 135], "classifi": [84, 88, 89, 95, 96, 98, 103, 104, 105, 108, 116, 127, 134, 135], "analys": [95, 96, 104, 123], "827": [], "828": [], "42": [89, 92, 95, 103, 104, 108, 124, 127, 128, 133, 134], "right": [85, 102, 103, 104, 124, 125], "attempt": [103, 104], "linear": [86, 92, 103, 104, 109, 122, 123, 125, 127, 128, 135], "svm__kernel": [92, 104, 125], "846": [], "847": [], "848": [], "5765508728619291": [], "good": [86, 89, 104, 119, 124, 132, 133], "try": [86, 88, 89, 92, 95, 98, 104, 105, 124, 125, 134], "optim": [104, 125, 127, 135], "svm__c": [103, 104, 125, 127, 128], "01": [85, 90, 97, 99, 102, 103, 104, 122, 125, 127, 128], "too": [104, 125], "speed": [103, 104], "40": [84, 85, 86, 133], "359": [], "360": [], "361": [], "362": 102, "anymor": [], "willb": [], "next": [108, 119, 121, 129, 131, 135], "pleas": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 75, 82, 97, 116, 134, 135], "tun": [], "scheme": [84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 122, 123, 125, 127, 128, 129, 130, 133, 134, 135, 136], "575591606418621": [], "did": [97, 104], "much": [104, 124, 125, 127, 130], "explor": [104, 109, 127, 128], "kernel": [92, 103, 104, 123, 125, 127, 128, 135], "rbf": [103, 104, 125], "poli": 104, "776": 103, "777": [103, 122], "778": 103, "7116487391994357": [], "seem": [95, 103, 104, 108, 125, 132, 133, 134], "found": [42, 103, 104, 134], "better": [35, 39, 103, 104, 125, 127, 133], "best_params_": [103, 104, 125], "know": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 102, 104, 120, 124, 127, 130, 133, 135], "lest": 104, "gamma": [103, 104, 125, 127], "svm__gamma": [103, 104, 125], "1e": [103, 104, 125, 127, 128], "024": [104, 135], "025": [103, 104, 106, 135], "026": [104, 135], "027": [104, 135], "001": [86, 103, 104, 125, 127], "47479104214424267": [], "had": [42, 104, 134, 135, 136], "accuraci": [84, 89, 104, 108, 123, 124, 133, 134], "happen": [104, 127, 128], "scale": [85, 102, 103, 104, 114, 125, 127, 135], "53": [86, 92, 133, 135], "635": [88, 125], "636": [88, 128], "637": [88, 128], "638": [104, 106, 128], "7074977958032092": [], "wa": [42, 88, 92, 95, 96, 97, 109, 122, 124, 125, 127, 134], "best": [104, 125, 135], "end": [84, 85, 86, 87, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 119], "best_estimator_": [103, 104], "_gamma": [103, 104], "20": [86, 89, 92, 98, 108, 122, 123, 124, 125, 128, 133, 135], "348": [], "run_hyperparameter_tun": [104, 106], "continu": [1, 7, 30, 43, 45, 47, 48, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 108, 109, 112, 122, 124, 125, 127, 128, 129, 131, 133, 134, 135, 136], "new": [8, 15, 24, 95, 101, 109, 116, 120, 130, 135], "remove_confound": 109, "But": [103, 108, 109, 124, 125, 127, 132, 134, 135], "sometim": [109, 123, 127, 128, 129], "even": [86, 109, 125, 134, 135], "discuss": 109, "sami": [101, 109, 123, 136], "hamdan": [101, 109, 123, 136], "changecolumntyp": 114, "df_featur": 109, "look": [92, 95, 97, 102, 109, 114, 122, 124, 125, 127, 128, 130, 131, 132, 134, 135], "furthermor": 109, "put": [109, 123], "both": [29, 42, 53, 86, 88, 95, 108, 109, 123, 124, 125, 128, 129, 134, 135], "copi": [1, 3, 86, 109, 116, 127], "last": [1, 97, 102, 109, 121, 123, 135], "afterward": [27, 51, 128], "pca": [1, 14, 33, 61, 94, 99, 102, 109, 114, 125, 135], "feature_nam": [109, 133], "drop": [29, 42, 44, 53, 86, 89, 92, 97, 109, 114, 127], "catch_warn": [], "simplefilt": [], "lineno": [], "443": [], "linreg": [86, 109, 114, 122, 123], "26": [112, 122, 129, 133], "00": [90, 93, 95, 97, 99, 105, 106, 110, 113, 127, 128, 133], "296": [], "297": [], "298": [], "inspect": [1, 33, 61, 71, 97, 99, 102, 109, 117, 120, 126, 130, 131, 133, 134], "By": [48, 55, 95, 96, 97, 109, 114, 122, 125, 127, 134], "argument": [92, 97, 109, 124], "inclus": [14, 109], "consist": [1, 2, 24, 31, 33, 115, 120, 122, 124, 126, 130, 131, 133, 135, 136], "x_deconfound": [], "assum": [109, 124], "u": [89, 96, 108, 109, 119, 123, 127, 133, 134], "closer": [109, 114, 134], "understand": [109, 120, 123, 127, 132, 133, 135], "how": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 83, 88, 89, 92, 94, 95, 96, 100, 102, 109, 114, 116, 119, 120, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135], "could": [92, 95, 97, 109, 120, 122, 127, 131, 133, 134, 135], "achiev": [109, 123, 129, 134, 135], "autoclass": 109, "029271": 109, "057228": 109, "009658": 109, "019424": 109, "012311": [], "028194": 109, "005874": 109, "047538": 109, "015569": [], "024667": 109, "061637": [], "082913": 109, "076494": 109, "039983": 109, "017885": 109, "004734": [], "036479": 109, "081307": 109, "007659": 109, "025897": 109, "049135": 109, "029385": [], "000071": 109, "013139": 109, "032449": 109, "032632": [], "012234": 109, "025299": [], "037349": 109, "abov": [86, 108, 123, 125, 127, 134], "remove_confound__keep_confound": [], "341": 84, "342": 84, "343": [98, 99], "344": [], "present": [29, 53, 109, 115, 116, 122, 124], "becaus": [97, 109, 123, 124, 125, 127, 130, 132, 133, 134, 135], "x_transform": [], "pca_component_0": [], "pca_component_1": [], "pca_component_7": [], "pca_component_8": [], "014050": [], "075715": 109, "008604": 109, "002330": 109, "099883": 109, "062830": [], "024022": 109, "002074": [], "029014": [], "053253": 109, "001197": 109, "002579": 109, "035164": [], "001321": [], "006567": [], "003546": [], "003952": [], "025446": [], "002095": 109, "000516": [], "lastli": [109, 123], "normal": [97, 109, 114, 116, 123, 124, 135, 136], "To": [1, 46, 48, 95, 97, 103, 116, 118, 120, 122, 123, 124, 125, 128, 130, 131, 133, 134, 135], "either": [15, 16, 17, 18, 41, 95, 97, 114, 116, 123, 135], "02": [90, 97, 106, 127, 128], "437": [], "438": 133, "439": [], "440": [], "its": [1, 5, 23, 52, 60, 116, 125, 127, 128, 130, 132, 135], "sex__": [], "__continu": [84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 108, 109, 112, 122, 125, 127, 129, 133, 134, 135], "065488": [], "938537": [], "treat": [84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 103, 104, 108, 112, 122, 127, 128], "pca_component_9": [], "610": [], "run_return_confound": [109, 110], "668": [], "execut": [90, 93, 99, 106, 110, 113, 116], "auto_examples_advanc": [], "mb": [90, 93, 99, 106, 110, 113], "03": [101, 103, 106, 133], "forest": [33, 61, 88, 92, 94, 97, 99, 108, 114, 128, 133, 135], "varianc": [1, 14, 33, 61, 94, 99, 114, 124, 127, 135], "comparison": [1, 19, 33, 41, 61, 70, 93, 107, 110, 117, 120, 132], "basic_python": [], "basic_jupyt": [], "iri": [84, 89, 92, 96, 98, 105, 108, 116, 125, 131, 134, 135], "plot": [70, 84, 85, 86, 92, 95, 96, 97, 102, 108, 120, 124, 133], "heatmap": [84, 85, 102], "cross": [1, 2, 15, 16, 17, 18, 19, 31, 33, 84, 85, 96, 102, 108, 109, 114, 120, 122, 125, 126, 127, 131, 132, 133, 135], "valid": [1, 2, 15, 16, 17, 18, 19, 31, 32, 33, 77, 84, 85, 96, 102, 108, 109, 114, 120, 122, 125, 126, 127, 131, 132, 133, 135], "confus": [84, 97, 134, 135], "matrix": 84, "sn": [84, 85, 86, 95, 96, 97, 101, 102, 108, 124, 127], "matplotlib": [84, 85, 86, 95, 96, 97, 101, 102, 108, 120, 124], "pyplot": [84, 85, 86, 95, 96, 97, 101, 102, 108, 124], "plt": [84, 85, 86, 95, 96, 97, 101, 102, 108, 124], "train_test_split": [84, 85, 101, 102], "confusion_matrix": 84, "df_iri": [84, 89, 92, 96, 98, 105, 108, 116], "sepal_length": [84, 89, 92, 96, 98, 105, 108, 125, 131, 134, 135], "sepal_width": [84, 89, 92, 96, 98, 105, 108, 125, 131, 134, 135], "petal_length": [84, 89, 92, 96, 98, 105, 108, 125, 131, 134, 135], "speci": [84, 89, 92, 96, 98, 105, 108, 116, 125, 127, 131, 134, 135], "19": [98, 122, 125, 133], "219": [], "train_iri": 84, "test_iri": 84, "model_iri": [84, 96], "223": [], "224": [], "test_accuraci": [84, 89, 108, 133], "009103": [], "005780": [], "875000": 84, "008538": [], "005691": [], "916667": 84, "008537": [], "005716": [], "005675": [], "008485": [], "005754": [], "per": [42, 84, 88, 95, 102, 116, 124], "df_accuraci": 84, "unstack": [84, 85, 102], "958333": 84, "833333": 84, "over": [84, 85, 89, 92, 97, 102, 122, 123, 127, 128, 133], "font_scal": [84, 85], "fig": [84, 85, 86, 95, 96, 97, 102, 124], "ax": [84, 85, 86, 95, 96, 97, 102, 124], "subplot": [84, 85, 86, 95, 96, 97, 102, 124], "figsiz": [84, 85, 86, 95, 96, 97, 102, 124], "cmap": [84, 85, 102], "ylgnbu": [84, 85, 102], "titl": [84, 85, 102, 116], "text": [84, 85, 95, 97, 102, 116, 124], "annot": [84, 85], "cm": 84, "uniqu": [84, 88, 95, 125, 127], "build": [1, 33, 84, 88, 95, 100, 120, 121, 122, 128, 129, 130, 132, 133], "cm_sum": 84, "sum": [42, 84, 122], "keepdim": 84, "cm_perc": 84, "astyp": 84, "100": [84, 89, 92, 96, 97, 98, 104, 105, 108, 123, 125], "empty_lik": 84, "nrow": 84, "ncol": 84, "j": [84, 123], "p": [42, 84, 92, 108, 122, 133], "els": 84, "1f": [84, 85], "fmt": [84, 85], "718": [], "plot_cm_acc_multiclass": [84, 90], "30": [89, 92, 95, 97, 123, 133], "525": [], "three": [89, 92, 96, 98, 105, 108, 116, 120, 125, 133, 134], "isin": [89, 92, 96, 98, 105, 108, 116, 125], "versicolor": [84, 89, 92, 96, 98, 105, 108, 116, 125, 134, 135], "virginica": [84, 89, 92, 96, 98, 105, 108, 116, 125, 134, 135], "sepal": [89, 92, 98, 105, 108, 131, 135], "length": [89, 92, 98, 105, 108], "width": [70, 89, 92, 98, 105, 108], "petal": [89, 92, 98, 105, 108, 131, 135], "petal_width": [105, 108, 125, 131, 134, 135], "hypothesi": [41, 108], "ml": [108, 120], "classic": 108, "frequentist": 108, "statist": [92, 97, 108, 120, 132, 134], "popul": [86, 108, 124], "altern": [41, 108], "contrast": 108, "gap": 108, "approach": [108, 122, 124, 125, 130, 135], "confid": [70, 108, 127], "interv": [70, 108], "95": [70, 89, 92, 97, 98, 102, 105, 108, 124], "ci": [70, 108, 121], "below": [108, 119, 122], "claim": [95, 108, 124], "05": [42, 93, 102, 105, 106, 108, 122, 125, 127], "2000": 108, "n_bootstrap": 108, "n_element": 108, "len": [108, 109, 123], "scores_ncr": 108, "rf": [88, 92, 96, 97, 105, 108, 114, 125, 128, 133], "roc_auc": [92, 108, 133, 134], "200": [84, 97, 98, 108, 122, 124, 127, 128], "529": [], "530": [], "531": [], "initi": [1, 2, 22, 23, 41, 51, 52, 59, 60, 108, 123, 135], "again": [108, 123, 124, 125, 127, 130, 135], "scores_cr": 108, "33": 133, "304": [], "305": [], "306": [], "easier": [108, 116, 135], "long": [87, 108], "test_roc_auc": [92, 108, 133], "df_ncr_metric": 108, "stack": [1, 33, 61, 100, 106, 108, 114, 120, 126], "df_cr_metric": 108, "df_metric": 108, "933333": [], "968889": [], "948889": [], "catplot": 108, "col": 108, "swarm": 108, "tight_layout": [86, 96, 108], "them": [108, 116, 118, 119, 122, 124, 125, 133, 134, 135], "pair": 108, "systemat": 108, "differec": 108, "df_diff_metr": 108, "whisker": 108, "box": [108, 120], "97": [97, 98, 108], "boxplot": [86, 108], "whi": 108, "axhlin": 108, "color": [85, 86, 95, 108, 124], "roc": 108, "auc": 108, "higher": [86, 108, 124], "when": [15, 16, 24, 86, 108, 114, 115, 116, 118, 122, 123, 124, 125, 129, 131, 134, 135, 136], "realli": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 108, 120], "term": [108, 124, 131, 135], "mayb": [108, 133], "percentil": [108, 114], "proper": [96, 108, 121, 132], "amount": [108, 120, 127], "main": [5, 71, 108, 116, 120, 121, 123, 124, 125, 130], "point": [1, 108, 116, 123, 124, 130, 132, 133, 134, 135], "ncr_fi": 108, "i_fold": [96, 108], "enumer": [96, 108], "this_import": [96, 108], "feature_importances_": [96, 108], "cr_fi": 108, "feature_import": 108, "hue": [95, 108], "dodg": [108, 124], "diff_fi": 108, "axvlin": [108, 124], "263": [128, 135], "plot_confound_removal_classif": [108, 110], "mean_absolute_error": [85, 102], "267": [], "268": [97, 128, 135], "calcul": 85, "heat": 85, "corr": [85, 102], "xticklabel": 85, "yticklabel": 85, "axessubplot": [], "train_diabet": [85, 101, 102], "test_diabet": [85, 101, 102], "558": [], "559": [], "560": [], "009412": [], "005828": [], "906430": [], "008640": [], "005800": [], "127262": [], "008628": [], "005744": [], "136034": [], "008584": [], "005760": [], "324288": [], "008457": [], "005743": [], "47": [85, 88], "367616": [], "98214011826165": [], "mae": [85, 102], "df_mae": [85, 102], "647265": [], "816622": [], "047904": [], "788798": [], "244561": [], "546995": [], "503900": [], "895329": [], "566435": [], "413806": [], "911183": [], "881612": [], "925275": [], "304993": [], "137493": [], "955405": [], "486691": [], "46": 89, "914710": [], "613901": [], "088996": [], "coef_": [85, 109], "sort_valu": 85, "ascend": 85, "inplac": 85, "barh": 85, "blue": 85, "red": 85, "xlabel": [85, 102], "249999999999986": 85, "scatterplot": [85, 95, 97, 102], "v": [85, 102, 121, 124, 126, 135], "2f": [85, 102], "corrcoef": [85, 102], "set_styl": [85, 86, 102], "darkgrid": [85, 86, 102], "scatter": [85, 97, 102], "xmin": [85, 102], "xmax": [85, 102], "get_xlim": [85, 95, 102], "ymin": [85, 102], "ymax": [85, 102], "get_ylim": [85, 95, 102], "ylabel": [85, 102, 124], "verticalalign": [85, 102], "top": [85, 102, 120, 134], "horizontalalign": [85, 102], "fontsiz": [85, 102], "351": [], "55": [], "106": [101, 106, 125], "plot_example_regress": [85, 90], "groupshufflesplit": 95, "060": [112, 127], "061": [112, 127], "infer": [88, 95], "studi": [88, 95, 123, 124], "brain": [88, 95, 120, 122, 123], "mani": [1, 42, 88, 95, 123, 124, 134, 135], "sort": [7, 24, 54, 88, 95, 114], "condit": [88, 95], "groupbi": [88, 95], "1064": [88, 95], "exactli": [88, 95, 127, 135], "195": 104, "196": 104, "197": [], "7221618762123082": [], "decod": [95, 123], "alreadi": [22, 27, 39, 51, 59, 95, 97, 116, 123, 124, 128, 132, 135], "acquir": 95, "randomli": 95, "specif": [48, 89, 95, 97, 123, 126, 127, 130, 131, 132], "characterist": 95, "thu": [1, 5, 95, 130], "unseen": [95, 130], "whom": 95, "later": [95, 98, 116, 124, 133], "709": [], "710": [84, 90], "711": [], "7210526315789474": 95, "visual": [71, 95, 119, 120, 124, 130, 132], "interact": [92, 95, 120, 127, 133], "part": [95, 118, 120, 122, 124, 130, 133, 135], "doe": [34, 95, 130, 135], "set_titl": [95, 96, 97, 124], "raw": [95, 97, 135], "pre_x": 95, "pre_i": [], "pre_df": 95, "join": 95, "noth": [95, 125, 134], "scaler": 135, "quit": [95, 119, 122, 127], "linearli": 95, "complex": [1, 87, 95, 105, 117, 120, 123, 124, 127, 135], "clf": 95, "xlim": 95, "ylim": 95, "xx": 95, "linspac": [95, 124], "yy": 95, "meshgrid": 95, "xy": 95, "vstack": 95, "ravel": 95, "z": [1, 2, 33, 61, 95, 100, 106, 121, 127, 129, 134, 135], "decision_funct": [7, 12, 54, 95, 136], "reshap": [87, 95], "contour": 95, "alpha": [95, 122, 124], "linestyl": [95, 124], "boundari": [95, 125], "opt": [86, 89, 108, 124], "hostedtoolcach": [86, 89, 108, 124], "x64": [86, 89, 108, 124], "python3": [86, 89, 108, 124], "site": [86, 89, 108, 124], "packag": [82, 86, 89, 108, 116, 118, 119, 124, 128], "450": 95, "userwarn": [39, 86, 89, 108, 124], "svc": [103, 114, 125, 127, 134, 135], "113": [], "plot_groupcv_inspect_svm": [95, 99], "316": [], "317": [], "320": [], "321": [], "322": 134, "intern": [96, 127, 128, 134, 135], "_important_": 96, "caution": [96, 124], "read": [92, 96, 116, 120, 121, 124, 130, 132, 133, 135], "to_plot": 96, "barplot": 96, "review": [96, 116], "myself": 96, "wander": 96, "about": [96, 116, 123, 124, 127, 128, 130, 132, 133, 134, 135], "entir": [96, 134, 135], "642": 128, "643": 128, "swarmplot": [86, 96], "804": [85, 133], "plot_inspect_random_forest": [96, 99], "math": 86, "308": [], "309": [85, 101, 102], "outlier": 86, "data_df": 86, "new_df": 86, "145": [86, 102], "150": [86, 123, 134, 135], "590": 86, "580": [86, 104, 125], "597": [86, 134], "595": [86, 134], "600": [70, 86], "tmp": [84, 86, 108], "tmppi8ootq8": [], "3ee3879ef821dac18ff92447be0006d3e522f2af": [], "basic": [83, 116, 125, 131, 132, 134, 135], "plot_stratified_kfold_reg": [86, 90], "52": [92, 125, 134, 135], "settingwithcopywarn": 86, "slice": 86, "loc": 86, "row_index": 86, "col_index": 86, "pydata": 86, "user_guid": 86, "view": [86, 116], "versu": 86, "bin": [15, 16, 17, 18, 86, 124], "num_split": [], "num_bin": [], "floor": [], "num": [], "bins_on": [], "qc": [], "cut": [], "tolist": [125, 133], "divid": 124, "cv_stratifi": [86, 88], "scores_strat": 86, "334": [], "335": [], "336": [], "_split": [86, 124], "676": [], "class": [1, 2, 3, 4, 5, 6, 7, 12, 13, 15, 16, 17, 18, 19, 22, 24, 27, 29, 30, 33, 42, 43, 44, 45, 46, 47, 48, 51, 53, 54, 55, 56, 59, 62, 63, 64, 65, 66, 67, 68, 69, 84, 86, 88, 89, 92, 95, 96, 98, 103, 104, 105, 108, 114, 123, 124, 125, 127, 133, 134, 135], "member": [86, 124], "less": [41, 86, 97, 120, 124, 130], "456": [], "457": [], "458": [], "With": [86, 124, 127, 134], "df_score": 86, "434": 125, "pre": [97, 116, 119, 121, 135, 136], "low": [86, 97, 114, 122], "reduct": 97, "840": 128, "841": 128, "summari": [97, 116], "262000": [], "872000": [], "906000": [], "676000": [], "662834": [], "332751": [], "825578": [], "424769": [], "900000": [], "800000": [], "700000": [], "375000": [], "300000": [], "600000": [], "025000": [], "525000": [], "tree": [97, 114], "select_variance__threshold": [], "pca__n_compon": [], "rf__n_estim": [], "select_vari": [97, 114], "856": 105, "857": [105, 106], "858": 105, "859": [], "860": 105, "861": 105, "notic": [127, 135], "107487": [], "249219": [], "51": [85, 86], "418588": [], "440114": [], "304093": [], "975911": [], "818796": [], "185820": [], "54": 133, "259106": [], "547432": [], "413947": [], "581755": [], "146": 136, "397898": [], "335935": [], "147": [], "848759": [], "289674": [], "148": [], "139654": [], "112779": [], "149": [], "001729": [], "592856": [], "sai": 135, "eg": [], "till": [], "desir": [128, 135], "var_th_x": [], "var_th_i": [], "zscored_x": [], "zscored_i": [], "zscored_df": [], "deviat": [97, 123], "000000e": 97, "683543e": [], "269607e": [], "443845e": [], "005038e": 97, "065164e": [], "320315e": [], "599473e": [], "005180e": [], "464256e": [], "896475e": [], "761837e": [], "304244e": [], "798224e": [], "641275e": [], "535546e": [], "666111e": [], "483655e": [], "427444e": [], "949653e": [], "don": [124, 125], "shown": [], "310": [], "plot_transform_until": [], "inner": [103, 104, 125, 127, 128, 136], "itself": [3, 128], "gridsearchcv": 125, "adjust": 41, "candid": [], "resourc": 130, "model_paramet": [], "scikitlearn": [], "403": [], "run_n_job": [], "927": [], "928": [], "931": [], "932": [], "933": 134, "90": [89, 92, 133], "85": 105, "22": [123, 133], "24": [127, 133, 136], "choos": [42, 89, 92, 124, 125, 133, 135], "assess": [89, 92, 123, 127], "unbalanc": [89, 92], "df_unbalanc": [89, 92], "value_count": [89, 92], "int64": [84, 88, 89, 92, 95, 96, 98, 103, 104, 105, 108, 125, 127, 133, 134, 135], "account": [89, 123], "imbal": 89, "suitabl": [89, 119, 123], "balanced_accuraci": [89, 92, 134], "balanc": [], "wai": [2, 89, 92, 118, 120, 123, 124, 125, 127, 128, 130, 133, 134, 135], "test_balanced_accuraci": [89, 92], "313": [], "314": [], "315": 102, "895": [122, 133], "8708886668886668": [], "correctli": 89, "precis": [89, 134], "ratio": 89, "tp": 89, "precision_scor": 89, "842": [], "9223333333333333": [], "307": [], "run_simple_binary_classif": [89, 90], "auto_examples_bas": [], "09": [84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 110, 112, 122, 123, 125, 127, 128, 129, 133, 134, 135], "07": 120, "06": [84, 85, 86, 88, 89, 90, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 122, 123, 125, 127, 128, 129, 133, 134, 135], "accord": [120, 122, 124, 128, 136], "guidelin": 120, "folder": [], "clone": 116, "git": [116, 121], "com": [116, 124, 130], "omit": [], "highli": [], "recommend": [119, 131], "interfer": [], "project": [], "venv": 119, "conda": [118, 119], "env": 119, "within": [15, 16, 116, 122, 123, 128, 130, 131, 134], "stage": 41, "pip": [116, 118, 119], "cd": 116, "txt": [], "mode": [], "setup": [120, 132], "histori": [], "nevertheless": [119, 135], "_version": [], "stash": [], "forget": [], "local": 120, "find": [104, 115, 125, 132], "issu": [120, 121, 124, 127, 136], "address": 127, "explain": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 124, 135], "idea": [86, 130], "merg": 121, "fix": [15, 16, 116, 124, 136], "close": [41, 121], "permiss": [], "simpli": [97, 122, 123, 124, 127, 128, 135], "button": [92, 133], "corner": [], "onc": [121, 127, 130, 132, 135], "usernam": [], "fraimondo": [], "remot": [], "current": [], "latest": [119, 121, 136], "checkout": [116, 121], "rebas": 121, "origin": [15, 24, 42, 63, 116, 121], "Then": [101, 109, 121, 128, 130, 135], "command": [], "branch_nam": [], "relat": [107, 123, 131], "prefer": 123, "editor": [], "line": [92, 116, 124, 133], "inc": 116, "briefli": [], "made": [127, 132, 133], "yourself": 116, "contributor": 116, "workflow": [122, 127, 132, 135], "pr": 121, "built": [114, 120, 128, 133, 134, 135], "style": [], "flake8": [], "spell": [], "codespel": [], "pytest": 116, "open": 116, "_build": 116, "situat": 116, "clean": [116, 119], "rerun": 134, "fail": [], "back": 134, "happi": [], "just": [1, 116, 120, 124, 127, 132, 134, 135], "navig": 127, "fill": [], "contact": [], "manitain": [], "who": 125, "suggest": [120, 124], "everyon": [], "releas": [82, 119, 120, 136], "displai": [116, 127, 133], "sub": [15, 24, 132], "directori": 116, "advanc": 131, "plot_": 116, "run_": 116, "dependend": 116, "figur": [86, 95, 108, 116], "block": 116, "comment": 116, "descript": [114, 115, 116, 135], "direct": 124, "link": [114, 116, 132, 135], "rst": [116, 121], "refer": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 97, 114, 116, 120, 125, 132], "rest": 116, "render": [116, 134], "emb": 116, "79": [97, 116], "shall": [116, 124], "preced": 116, "wikipedia": [], "whose": [], "deriv": [], "via": [121, 132], "prefix": 116, "doubl": [], "df": [32, 41, 97, 125, 128, 131, 133, 134, 135], "common": [125, 130], "decomposit": 135, "99": [97, 98, 133], "todo": [], "techniqu": [123, 124, 125, 127], "driven": [], "yet": [119, 131], "enabl": 115, "give": [86, 114, 123, 125, 132, 133, 134], "randomizedsearchcv": 125, "deprec": [84, 116, 136], "requir": [29, 53, 75, 82, 116, 120, 125, 127, 129, 132, 135], "78": [], "randomis": [], "n_iter": [], "1000": [], "orient": 120, "librari": [88, 118, 120], "At": [92, 120, 130, 135], "aml": 120, "institut": 120, "neurosci": [120, 122], "medicin": 120, "inm": 120, "thought": [120, 135], "research": [120, 122, 123, 124], "simpler": 120, "abstract": 120, "aim": [119, 120, 135], "power": [120, 127, 128], "minor": [120, 121], "flexibilii": 120, "video": 120, "tutori": 120, "instal": [75, 82, 116, 118, 120, 121, 133, 136], "api": [6, 42, 43, 44, 45, 46, 47, 48, 114, 116, 120, 128, 132, 135], "contribut": 120, "develop": [118, 119, 120, 121, 136], "environ": [119, 120, 134], "pull": [120, 121], "request": [15, 24, 98, 120], "write": [120, 135], "maintain": 120, "page": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 120, 123, 124, 134], "avoid": [120, 123, 124, 125], "leakag": [29, 53, 120, 123, 135], "pick": [], "sepal_": [], "select": [1, 6, 7, 24, 30, 43, 44, 45, 46, 47, 48, 71, 92, 97, 120, 122, 124, 125, 127, 131, 132, 133], "except": [56, 63, 116], "ones": 42, "That": [5, 122, 123, 124, 125, 127, 135], "mind": 128, "fullmatch": [], "whole": 122, "dimension": [102, 109, 122, 125, 135], "confund": [], "dimens": 133, "ndim": 84, "written": [], "confound_nam": [], "big": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70], "betweek": [], "therefor": [115, 119, 122, 123, 134, 135], "sens": [119, 125], "offici": [116, 119], "mostli": [1, 2, 124], "strongli": 119, "virtual": [116, 119], "publish": 121, "pypi": [119, 121], "OR": [], "testpypi": 121, "url": [], "choic": 124, "commit": [116, 121], "major": 121, "micro": 121, "devn": 121, "distanc": 121, "setuptools_scm": 121, "plugin": 121, "tag": 121, "increment": [121, 135], "segment": 121, "push": [116, 121], "mileston": 121, "reach": 121, "renam": [], "whats_new": 121, "sync": 121, "branch": [116, 121], "vx": 121, "system": [120, 121], "setuptools_scm_debug": 121, "dir": 121, "dist": 121, "friendli": [115, 135], "complet": [82, 116], "section": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 124, 131, 133, 134, 135, 136], "answer": 124, "question": [123, 124], "enter": [], "shout": [], "These": [115, 118, 119, 122, 134], "modifi": 135, "behavior": [122, 123, 127, 136], "would": [124, 125, 131, 133, 135], "reduc": [102, 109, 135], "principl": 122, "limit": 123, "word": [124, 125], "preprocess_target": [], "face": 136, "own": [], "mention": 124, "apply_to": [1, 5, 6, 7, 30, 43, 44, 45, 46, 47, 48, 54, 97, 101, 102, 105, 108, 109, 123, 127, 128, 129, 135], "cross_valid": [130, 132], "applic": [118, 122, 123, 127], "predict_proba": [7, 12, 24, 54], "wrong": [], "show": [42, 83, 92, 100, 107, 111, 118, 124, 125, 133, 134, 136], "extended_scor": [], "On": [116, 123, 134], "extend": [111, 134], "unit": [114, 120], "standardscal": [95, 114, 125, 127, 129, 134, 135], "scaler_robust": 114, "median": 114, "iqr": 114, "robustscal": [114, 125], "scaler_minmax": 114, "minmaxscal": 114, "scaler_maxab": 114, "maxabsscal": 114, "scaler_norm": 114, "norm": 114, "scaler_quantil": 114, "uniform": [114, 124, 136], "robust": [114, 118], "quantiletransform": 114, "scaler_pow": 114, "gaussianis": 114, "powertransform": 114, "select_univari": 114, "genericunivariateselect": 114, "select_percentil": 114, "rank": 114, "selectpercentil": 114, "select_k": [114, 125], "selectkbest": [114, 125], "select_fdr": 114, "fdr": [41, 114], "selectfdr": 114, "select_fpr": 114, "fpr": 114, "selectfpr": 114, "select_fw": 114, "fwe": 114, "selectfw": 114, "variancethreshold": 114, "princip": [114, 135], "svr": [114, 128, 129], "randomforestclassifi": [96, 114, 125], "randomforestregressor": 114, "et": [42, 114, 122, 123, 135], "extratreesclassifi": 114, "extratreesregressor": 114, "adaboost": 114, "adaboostclassifi": 114, "adaboostregressor": 114, "bag": 114, "baggingclassifi": 114, "baggingregressor": 114, "gradientboost": 114, "gradient": 114, "boost": 114, "gradientboostingclassifi": 114, "gradientboostingregressor": 114, "gauss": 114, "gaussianprocessclassifi": 114, "gaussianprocessregressor": 114, "logit": [114, 125, 133], "logist": [105, 114, 133, 135], "aka": 114, "maxent": 114, "logisticregress": [114, 125], "logitcv": 114, "logisticregressioncv": 114, "l2": [114, 125], "ridgeclassifi": 114, "ridgecv": 114, "ridgeclassifiercv": 114, "sgd": 114, "minim": 114, "empir": [114, 124], "loss": [114, 123], "sgdclassifi": 114, "sgdregressor": 114, "nb_bernoulli": 114, "multivari": 114, "bernoulli": 114, "bernoullinb": 114, "nb_categor": 114, "categoricalnb": 114, "nb_complement": 114, "complementnb": 114, "nb_gaussian": 114, "gaussiannb": 114, "nb_multinomi": 114, "multinomi": 114, "multinomialnb": 114, "dummyclassifi": 114, "dummyregressor": 114, "baseestim": [5, 136], "confoundremov": [55, 109, 114, 123], "151": [127, 136], "bump": [121, 136], "minimum": 136, "fede": 136, "kaustubh": [102, 136], "patil": [102, 136], "refactor": [116, 136], "callabl": [3, 34, 35, 39, 42, 136], "capabl": [127, 128, 136], "dynamicselect": [114, 136], "tranform_until": 136, "63": 136, "cbpm": [1, 33, 114, 120, 126, 136], "register_model": 136, "105": [125, 136], "96": [97, 98, 136], "instruct": 136, "wrap": [7, 34, 54, 136], "94": [133, 136], "multiprocess": 136, "nos": 136, "implement": [15, 16, 42, 115, 120, 122, 123, 124, 128, 136], "135": [133, 136], "wrapper": [46, 54, 136], "122": [88, 109, 123, 133, 136], "surround": 136, "miss": [115, 136], "08": [84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 110, 112, 122, 123, 125, 127, 128, 129, 133, 134, 135], "620": 92, "dev4": [], "639": 128, "640": [95, 99, 128], "641": 128, "009058": [], "008657": [], "005757": 101, "008593": [], "005749": [], "008523": [], "005704": [], "008547": [], "005723": [], "033": [], "034": [], "035": [], "565": [], "566": [], "567": 133, "568": 89, "626": 125, "04": 99, "333": 84, "352": 123, "353": [], "354": [], "248": [], "249": [], "250": [], "425": [110, 134], "426": 134, "427": [], "428": 109, "962": 122, "963": 122, "964": [], "965": [], "059": [112, 127], "502": 129, "503": [], "504": [], "533": [], "534": [], "599": [], "601": [], "602": [], "540": 95, "290": [], "459": [], "463": [], "464": [], "465": [], "009036": [], "005690": [], "008497": [], "005657": [], "008548": [], "005656": [], "008442": [], "005648": [], "008453": [], "005636": [], "111": [], "112": [], "115": 123, "116": 123, "117": 88, "57": [92, 98, 123, 128, 133], "875": [], "876": [], "877": [], "216": 97, "868": [], "869": [], "156": [], "157": [], "158": 133, "009247": [], "005746": [], "008492": [], "005683": [], "008461": [], "005681": [], "005701": [], "008431": [], "005688": [], "091": 88, "520": [], "36": [], "621": [], "622": [], "625": [], "627": [], "920": [85, 90, 112], "921": 112, "744": 89, "948": [], "949": [], "tmpvv8qnkgi": [], "d61bcee9db7116896d326b1ef04e2a92cc163c65": [], "973": 135, "974": [96, 99, 135], "975": 135, "976": 135, "092": [], "093": 135, "094": 135, "469": [], "485": [], "486": [], "487": [], "488": 125, "489": 125, "490": 125, "288": 96, "748": 89, "246": 97, "247": [], "251": [], "252": [], "630": 125, "631": 125, "632": [88, 125], "153": 133, "154": 101, "048": [], "082": [], "2023": [84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 122, 123, 125, 127, 128, 129, 133, 134, 135], "187": [], "188": [], "dev1": [], "213": [], "214": [], "215": [], "011313": [], "007756": [], "010871": [], "007634": [], "010998": [], "007240": [], "011380": [], "007504": [], "011458": [], "007565": [], "56947555620943": [], "729": [], "730": [], "731": [], "453": 95, "454": 95, "455": [], "203": [], "511": [], "139": [], "141": 129, "142": [], "143": [], "221": [], "222": [], "357": [102, 133], "358": 102, "557": 104, "561": [], "902": [], "32": [], "515": 128, "516": 128, "517": [], "067": 86, "068": [86, 90], "069": 86, "070": [], "071": [], "528": [], "977": [], "164": 134, "925": 125, "926": 122, "930": [], "012029": [], "007759": [], "011160": [], "008272": [], "011083": [], "007746": 135, "011512": [], "007868": [], "010786": [], "007116": [], "969": [], "537": [], "538": [], "539": 95, "56": 133, "373": [123, 125], "374": 125, "375": 125, "376": 125, "867": [], "271": [97, 127, 135], "272": [127, 128, 135], "273": [97, 127, 128], "012392": [], "008185": [], "011056": [], "007788": [], "010771": [], "007982": [], "011564": [], "007719": [], "011064": [], "007536": [], "507": 135, "017": [], "563": [], "564": [], "231": 108, "232": [108, 134], "233": [108, 134], "843": [], "27": [123, 127, 133], "569": [125, 133], "259": [], "998": 86, "tmp_h5dm_nk": [], "da8d751f457f82cfc84df5a29fd62fc8ae634a88": [], "028": 104, "029": 104, "030": [], "182": 135, "183": 135, "184": [123, 133], "593": 134, "752": [], "753": [], "779": [103, 122], "780": [98, 103, 122], "781": [98, 103, 122], "782": 103, "783": 103, "785": 98, "786": 98, "011": 105, "413": [], "767": 109, "768": 109, "772": [], "773": [], "774": [], "80": [89, 92, 133], "282": 96, "283": 96, "284": 96, "970": [], "971": [], "719": [], "646": 128, "102": 125, "dev2": [], "402": [], "404": [], "405": 123, "013237": [], "010358": [], "013348": [], "008491": [], "013541": [], "008924": [], "013484": [], "008634": [], "013350": [], "008951": [], "020": [], "021": [], "022": 130, "830": [], "831": [], "832": [], "833": [], "506": 122, "002": [], "003": [], "031": [], "032": [], "784": 103, "787": 98, "788": 98, "319": [], "323": 134, "395": 108, "396": 108, "397": 108, "398": 133, "399": [], "58": [96, 133], "496": [], "497": 129, "498": 129, "045": 92, "046": [], "047": [], "687": 103, "688": 103, "689": [], "690": [], "692": [], "381": [], "37": [84, 85, 86, 88, 89, 92, 96, 98], "364": [], "312": [], "318": [], "012913": [], "008849": [], "012830": [], "008488": [], "012852": [], "008507": [], "012333": [], "008412": [], "012681": [], "008568": [], "099": [104, 125], "586": [], "591": [], "592": [], "594": 134, "896": 133, "897": [112, 133], "898": 133, "418": 101, "669": 104, "670": 104, "121": [88, 109], "123": [88, 109, 123, 127], "124": [109, 123], "013107": [], "008715": [], "013143": [], "009089": [], "013696": [], "008770": [], "013036": [], "008527": [], "012734": [], "008869": [], "738": [], "551": 125, "552": 125, "915": [], "916": [], "919": 112, "59": [96, 125], "661": 133, "662": [103, 133], "663": 133, "664": 133, "809": [], "653": [], "657": [], "658": 133, "659": [], "660": [], "tmp_yqfbgyd": [], "c3ec513dd9402f5add48d39bdde630294214a063": [], "543": 95, "544": 95, "545": [], "546": 125, "547": 125, "725": [86, 124], "726": [], "727": [], "728": [], "645": 128, "275": 135, "276": 135, "299": [], "300": [], "301": 133, "302": [], "303": [], "255": [], "633": [88, 125, 128], "198": [], "199": [], "201": [], "992": 112, "993": 112, "994": 112, "995": 112, "935": [], "signatur": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70], "pictur": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70], "creation": 1, "bit": [1, 103, 119, 128, 134], "complic": [1, 130], "helper": 1, "easili": [1, 122, 124], "columntypeslik": [1, 30, 43, 44, 45, 46, 48], "__init__": [1, 2, 3, 5, 6, 7, 12, 13, 15, 16, 17, 18, 19, 24, 29, 30, 42, 43, 44, 45, 46, 47, 48, 53, 54, 55, 56, 65, 66, 67, 68], "row_select_col_typ": [1, 6, 30, 43, 44, 45, 46, 47, 48], "row_select_v": [1, 6, 30, 43, 44, 45, 46, 47, 48], "estimatorlik": [1, 34, 46], "available_transform": 1, "columntyp": [1, 4, 5, 6, 7, 9, 30, 43, 44, 45, 46, 47, 48, 54, 55, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 122, 123, 125, 127, 128, 129, 133, 134, 135], "lead": [1, 119, 123, 124, 130, 135], "targetpipelinecr": [1, 101, 114, 123, 129], "properti": [1, 3, 7, 13, 29, 54, 55, 124], "been": [1, 56, 122, 123, 124, 127], "has_model": 1, "classmethod": 1, "from_list": 1, "union": [1, 4, 29, 30, 34, 55, 64], "pieplin": 1, "recurs": 1, "to_pipelin": [1, 2], "x_type": [1, 32, 33, 43, 44, 45, 47, 48, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 115, 122, 123, 125, 127, 128, 129, 131, 133, 134, 135], "wise": [1, 13, 33, 61, 94, 99, 130], "connectom": [1, 33, 114, 120, 126], "analog": 2, "pipelinecr": [2, 33, 97, 98, 101, 102, 103, 104, 105, 108, 109, 114, 122, 123, 125, 127, 128, 129, 132, 133, 134], "target_pipelin": [2, 123, 129], "jutargetpipelin": [2, 54, 101, 123, 129], "hold": [3, 134], "regard": [3, 131, 134], "pattern": [3, 11, 84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 109, 112, 122, 123, 125, 127, 128, 129, 133, 134, 135], "to_type_selector": 3, "selector": 3, "usabl": [3, 135], "compos": 3, "columntransform": [3, 127], "alia": [4, 15, 24, 62, 64], "needed_typ": [5, 6, 7, 29, 30, 46, 55], "awar": [5, 119], "get_needed_typ": [5, 6, 7, 43, 44, 45, 46, 47, 48, 54, 68], "get_apply_to": [5, 6, 7, 43, 44, 45, 46, 47, 48, 54, 68], "filter_column": [5, 6, 7, 43, 44, 45, 46, 47, 48, 54, 105, 114, 128], "filter": [5, 6, 7, 43, 44, 45, 46, 47, 48, 54, 114, 120, 135], "get_metadata_rout": [5, 6, 7, 15, 16, 17, 18, 19, 24, 42, 43, 44, 45, 46, 47, 48, 54], "rout": [5, 6, 7, 15, 16, 17, 18, 19, 24, 42, 43, 44, 45, 46, 47, 48, 54], "guid": [5, 6, 7, 15, 16, 17, 18, 19, 24, 42, 43, 44, 45, 46, 47, 48, 54, 116], "mechan": [5, 6, 7, 15, 16, 17, 18, 19, 24, 42, 43, 44, 45, 46, 47, 48, 54, 130], "metadatarequest": [5, 6, 7, 15, 16, 17, 18, 19, 24, 42, 43, 44, 45, 46, 47, 48, 54], "encapsul": [5, 6, 7, 15, 16, 17, 18, 19, 24, 42, 43, 44, 45, 46, 47, 48, 54], "set_output": [6, 42, 43, 44, 45, 46, 47, 48], "unchang": [6, 15, 24, 42, 43, 44, 45, 46, 47, 48], "modellik": [7, 24, 25, 27, 48, 54, 55], "datalik": [7, 24, 29, 45, 53, 54, 55], "outcom": [7, 24, 54, 135], "appear": [7, 24, 54, 134], "classes_": [7, 24, 54], "n_class": [7, 54], "predict_log_proba": [7, 12], "new_typ": 8, "attr": 9, "ensur": [9, 43, 45, 47, 48, 84, 124, 127], "func": [12, 135], "with_column_typ": [14, 95], "certain": [14, 115, 131, 134, 135], "n_bin": [15, 16, 17, 18, 86, 124], "discret": [15, 16, 124, 135], "quantil": [15, 16, 17, 18, 124], "batch": [15, 16], "approxim": [15, 16], "global": [15, 16, 115], "affect": [15, 16, 127], "leav": [15, 16, 124], "get_n_split": [15, 16, 17, 18, 19], "set_split_request": 15, "relev": [15, 24, 127], "enable_metadata_rout": [15, 24], "set_config": [15, 24, 115], "meta": [15, 24], "metadata_rout": [15, 24], "retain": [15, 24], "effect": [15, 24, 123, 127], "continuousstratifiedgroupkfold": [17, 124], "contion": 18, "continuousstratifiedkfold": [18, 86, 124, 136], "searcher_nam": 22, "referenc": [22, 27, 51, 59], "decid": [22, 27, 39, 59], "ensembl": [24, 128], "ds_split": 24, "random_state_algorithm": 24, "deslib": [24, 71, 114, 119, 120], "randomforest": 24, "metad": 24, "singlebest": 24, "staticselect": 24, "stackedclassifi": 24, "knorau": 24, "knora": 24, "desp": 24, "ola": 24, "mcb": 24, "knop": 24, "sample_weight": 24, "weight": [24, 125, 135], "set_score_request": 24, "model_nam": 27, "classification_cl": 27, "regression_cl": 27, "behav": [27, 51], "unlik": [29, 53, 130], "encod": [29, 53], "jutargettransform": [29, 57, 59], "transformerlik": [29, 33, 135], "inverse_transform": 29, "invers": [29, 123], "can_inverse_transform": 29, "factori": 30, "params_to_tun": 30, "juestimatorlik": 30, "estimatorlikefit1": [30, 64], "estimatorlikefit2": [30, 64], "estimatorlikef": [30, 64], "inconsist": [31, 32], "df_x": 32, "df_y": 32, "df_group": 32, "return_inspector": [33, 98, 127], "inspector": [33, 98, 127], "scorerlik": [33, 34, 35, 39], "wrap_scor": 34, "non_invers": 34, "scalar": [35, 39, 84], "greater": [35, 39, 41, 127], "Will": [35, 39, 133], "arraylik": [37, 38], "bonferroni": 41, "side": 41, "correct": [41, 92, 128, 133], "degre": [41, 127], "freedom": 41, "pvalu": 41, "letter": 41, "sidak": 41, "holm": 41, "down": 41, "sime": 41, "hochberg": 41, "hommel": 41, "non": [41, 42], "neg": [41, 42, 122], "fdr_bh": 41, "benjamini": 41, "fdr_by": 41, "yekuti": 41, "fdr_tsbh": 41, "fdr_tsbky": 41, "underli": [41, 114, 123, 127], "unequ": 41, "significance_threshold": [42, 122], "corr_method": [42, 122], "agg_method": [42, 122], "corr_sign": [42, 122], "posneg": [42, 122], "aggreg": [42, 122], "significantli": 42, "signific": [42, 92, 122, 127], "aggregate": 42, "procedur": [42, 124, 130], "shen": [42, 122], "finn": [42, 122], "scheinost": 42, "al": [42, 122, 123], "doi": [42, 123], "1038": 42, "nprot": 42, "178": [42, 135], "po": [42, 122], "correlation_valu": 42, "used_corr_sign_": 42, "y_mean_": 42, "x_y_correlations_": 42, "significant_mask_": 42, "pos_mask_": 42, "pos_significant_mask_": 42, "neg_significant_mask_": 42, "used_significant_mask_": 42, "threhsold": 42, "get_feature_names_out": [42, 43, 45, 46, 47, 48], "input_featur": [42, 43, 45, 46, 47, 48], "x_types_renam": 43, "kept": [43, 45, 46, 47, 48, 109], "junif": 46, "around": 46, "feature_names_in_": 46, "x0": 46, "x1": 46, "n_features_in_": 46, "syntax": 48, "o": 50, "transformer_nam": [51, 59], "transformer_cl": [51, 59], "arg": [53, 56, 65, 66, 67, 68, 86, 108], "_model_": 54, "transform_target": 54, "with_traceback": 56, "tb": 56, "__traceback__": 56, "pathlib": 61, "subclass": [63, 69], "800": 70, "height": 70, "panel": [70, 92, 118, 119, 133], "dashboard": 70, "dynam": [71, 119, 120], "vizual": [], "currentmodul": [], "protocol": 81, "experiment": 82, "futur": [82, 84, 124], "particularli": [82, 124, 134], "reli": 82, "beta": 82, "viz": [82, 92, 119, 120, 133], "666": [], "667": [], "home": [84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 103, 104, 108, 112, 122, 127, 128, 133], "runner": [84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 103, 104, 108, 112, 122, 127, 128, 133], "238": [84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 103, 104, 108, 112, 122, 127, 128, 133], "120": [84, 88, 109], "setosa": [84, 131, 134, 135], "cv_mdsum": [84, 85, 98, 101, 102, 109, 112, 123, 129, 134, 135], "005968": [], "003384": [], "fa5ab7a2b930761687a8e82d9971ebca": 84, "005735": [], "003390": [], "005926": [], "003168": [], "005540": [], "003177": [], "005581": [], "003121": [], "750000": 84, "791667": 84, "tmpy4hmj28m": [], "b711d9d97aa6d8c1ca2a28fcff96d89559baff19": [], "00_start": [84, 86], "104": [84, 125], "deprecationwarn": 84, "convers": 84, "singl": [84, 115, 127, 133], "019907": [85, 86, 101, 102, 109, 112, 129], "068332": [85, 86, 101, 102, 109, 112, 129], "002861": [85, 86, 101, 102, 109, 112, 129], "022688": [85, 86, 101, 102, 109, 112, 129], "031988": [85, 86, 101, 102, 109, 112, 129], "647": 134, "648": [], "649": [], "650": [], "005923": [], "003031": [], "b10eef89b4192178d482d7a1587a248a": [85, 101, 102, 109, 112, 123, 129, 134, 135], "005515": [], "002936": [], "005389": [], "002967": [], "005441": [], "002924": [], "005433": [], "002896": [], "44408444147061": 85, "783874": 85, "573568": 85, "617474": 85, "686852": 85, "558655": 85, "649999999999999": 85, "347": 85, "737": [], "leonard": [86, 97, 108], "sass": [86, 97, 108], "423": 134, "chosen": 86, "coupl": 86, "histrogram": 86, "displot": 86, "60": [86, 133], "axisgrid": [86, 108], "118": [86, 88, 108, 123], "layout": [86, 108], "tight": [86, 108], "_figur": [86, 108], "facetgrid": 86, "0x7f7387b8e980": [], "histogram": 86, "uniformli": [86, 124], "skew": 86, "toward": 86, "lower": [86, 124], "granular": 86, "010": 105, "012": [], "013": [], "449": [86, 95], "912": 125, "groupkfold": 88, "kimia": 88, "nazarzadeh": 88, "necessari": [88, 118, 123, 128], "stratifiedgroupkfold": 88, "836": 122, "862": 105, "863": 127, "864": [], "865": [], "6841826838300122": 88, "6898496240601504": 88, "107": 125, "110": [], "6879699248120301": 88, "run_grouped_cv": [88, 90], "137": [], "562": [], "70": [89, 92], "balanced_accuracy_scor": 89, "614": [], "615": 92, "616": 92, "617": 92, "618": 92, "_classif": 89, "2394": 89, "8625": 89, "8678571428571429": 89, "672": 104, "673": 104, "674": 104, "675": [], "421": 95, "auto_examples_00_start": 90, "repeatedstratifiedkfold": [92, 98, 133, 134], "corrected_ttest": [92, 133], "287": 96, "289": 96, "291": [], "scores1": [92, 118, 125, 133], "345": [], "scores2": [92, 118, 125, 133], "691": [], "third": [92, 134], "scores3": [92, 118, 125, 133], "svm_linear": 92, "746": 89, "747": 89, "749": 89, "750": 89, "stats_df": [92, 133], "model_2": [92, 128, 133], "val": [92, 133], "175075": 92, "062567": 92, "895662": 92, "151390": 92, "782741": 92, "108944": 92, "835331": 92, "236153": 92, "685092": 92, "669010": 92, "324331": 92, "viewer": 92, "plot_scor": [92, 118, 133], "uncom": [92, 133], "holoviz": [92, 133], "getting_start": [92, 133], "build_app": [92, 133], "deploi": [92, 127, 133], "pane": 92, "unknown": 92, "keyword": [92, 97, 122], "widget": 92, "button_typ": 92, "zoom": [92, 133], "hover": [92, 133], "plot_simple_model_comparison": [92, 93], "auto_examples_01_model_comparison": 93, "demonstr": [94, 116, 128, 134], "410": [], "435": [], "436": 123, "7218303650149884": 95, "512": [], "513": [], "parietal__": 95, "frontal__": 95, "xy_df": 95, "754": [], "755": [], "756": [], "757": [], "understandhow": 96, "535": [], "536": [102, 106], "542": 95, "make_regress": [97, 122, 123, 128], "075": [], "n_inform": 97, "nois": [97, 123], "first_two": 97, "determin": [97, 125, 135], "belong": [97, 109], "x_to_zscor": 97, "111790": 97, "141618": 97, "023682": 97, "167718": 97, "686170": 97, "977322": 97, "972988": 97, "087946": 97, "895011": 97, "741431": 97, "069985": 97, "772593": 97, "552990": 97, "659172": 97, "204": 97, "293317": 97, "751257": 97, "484100": 97, "759419": 97, "688891": 97, "64": 97, "724008": 97, "206729": 97, "194442": 97, "028152": 97, "174160": 97, "789944": 97, "421885": 97, "724302": 97, "772156": 97, "408321": 97, "392804": 97, "943621": 97, "256723": 97, "383145": 97, "259309": 97, "221085": 97, "explicitli": [97, 103, 123, 125], "declar": 97, "init": 97, "special": 97, "cannot": [97, 123, 135], "pipeline_cr": [97, 102, 105, 109, 123, 127, 128], "n_compon": [97, 102, 135], "n_estim": [97, 128], "creator": [97, 98, 101, 102, 103, 104, 108, 109, 122, 125, 129, 134, 135], "hand": [97, 116, 122, 123, 128, 131], "r2": [97, 102, 123, 134], "x_after_pca": 97, "earlier": 97, "x_after_zscor": 97, "high": [97, 115, 122], "pca__pca0": [97, 109], "pca__pca1": [97, 109], "__x_to_zscor": 97, "095": [104, 135], "096": [104, 135], "098": [104, 135], "725696": 97, "582295": 97, "314458": 97, "942935": 97, "977336": 97, "463217": 97, "525139": 97, "219493": 97, "618559": 97, "908592": 97, "395105": 97, "743192": 97, "328111": 97, "670912": 97, "573900": 97, "401304": 97, "98": [97, 98, 124, 133], "918034": 97, "137435": 97, "894566": 97, "357729": 97, "1__": 97, "4__": 97, "013728": 97, "426259": 97, "364686": 97, "944446": 97, "118838": 97, "931848": 97, "004437": 97, "030684": 97, "309092": 97, "523891": 97, "206189": 97, "157667": 97, "099154": 97, "028182": 97, "335538": 97, "252795": 97, "049139": 97, "133702": 97, "240085": 97, "443863": 97, "689893e": 97, "387779e": 97, "013728e": 97, "010202e": 97, "576015e": 97, "463286e": 97, "763131e": 97, "456486e": 97, "488094e": 97, "018781e": 97, "113700e": 97, "184776e": 97, "plot_preprocess": [97, 99], "shufflesplit": 98, "355": [], "356": [], "005821": [], "003106": [], "42489ff0163b2f12752440a6b7ef74c7": 98, "005444": [], "003085": [], "005461": [], "003054": [], "005448": [], "003032": [], "005432": [], "003091": [], "005420": [], "003014": [], "005407": [], "003038": [], "005362": [], "003074": [], "005379": [], "003083": [], "005380": [], "003059": [], "005401": [], "003000": [], "005443": [], "003044": [], "003053": [], "005404": [], "003040": [], "005464": [], "003075": [], "005358": [], "003045": [], "005372": [], "003005": [], "003019": [], "005400": [], "003061": [], "005419": [], "003067": [], "cv_predict": 98, "repeat0_p0": [98, 127], "repeat1_p0": [98, 127], "repeat2_p0": [98, 127], "repeat3_p0": 98, "_pipelin": 98, "pipelineinspector": 98, "0x7f73876bf5e0": [], "run_binary_inspect_fold": [98, 99], "auto_examples_02_inspect": 99, "lya": 101, "paa": 101, "olivero": 101, "crucial": [101, 123], "target_cr": [101, 129], "target_pipeline_cr": [101, 123], "0x7f7388690550": [], "806": [85, 122], "807": 85, "808": [85, 133], "005371": [], "003930": [], "004951": [], "003868": [], "004941": [], "003839": [], "004920": [], "003828": [], "004894": [], "003854": [], "0615805903489": 101, "089": 88, "run_apply_to_target": [101, 106], "subset": [102, 125, 130], "georgio": 102, "antonopoulo": 102, "481": [], "assign": [102, 116], "pca1": 102, "pca2": 102, "pca_feats1": 102, "pca_feats2": 102, "499": 129, "__pca1": 102, "__pca2": 102, "500": 129, "__categor": [102, 129], "0x7f7387664250": [], "501": [], "505": [], "016735": [], "007327": [], "016019": [], "007398": [], "015834": [], "007486": [], "015935": [], "007582": [], "015769": [], "007432": [], "3107976743678922": 102, "untouch": 102, "data_processed1": 102, "data_processed2": 102, "pca_feats1__pca0": 102, "161": [102, 134], "063175": 102, "133274": 102, "108111": 102, "075741": 102, "085907": 102, "054779": 102, "030464": 102, "033246": 102, "015491": 102, "098172": 102, "033216": 102, "015999": 102, "050783": 102, "032289": 102, "012577": 102, "067737": 102, "013504": 102, "045025": 102, "031454": 102, "010903": 102, "001078": 102, "pca_feats2__pca0": 102, "234716": 102, "012141": 102, "078784": 102, "006290": 102, "026190": 102, "341472": 102, "348168": 102, "269257": 102, "286067": 102, "309025": 102, "run_example_pca_featset": [102, 106], "986": [], "004": [92, 93], "005": [], "006": [], "007": 131, "5939164168576971": [103, 104], "auto": [103, 125], "080": [], "081": [], "083": 92, "084": [88, 90, 92], "085": 92, "set_column_typ": [103, 125, 127, 134], "setcolumntyp": [103, 125, 127, 134], "086": [88, 92], "087": [88, 92], "7087109857168048": [103, 104], "671": 104, "run_hyperparameter_multiple_grid": [103, 106], "377": [], "378": [], "379": 102, "380": 102, "588308940222183": 104, "736": [], "739": [], "740": [87, 90], "741": 123, "665": 133, "5188855581026275": 104, "365": [], "366": [], "367": 123, "368": 123, "369": 123, "370": 125, "078": [], "model_sep": 105, "model_pet": 105, "771": [], "__sepal": [105, 135], "__petal": [105, 135], "0x7f738803e3b0": [], "0x7f738803d390": [], "905": [], "906": [], "907": [], "409": [], "run_stacked_model": [105, 106], "706": [], "auto_examples_03_complex_model": 106, "036": [], "037": [], "038": [], "039": [], "tell": [108, 123, 134], "confound_remov": [108, 109, 114, 123], "__featur": [108, 123], "526": [], "527": [], "04_confound": 108, "155": 108, "235": [108, 134], "0x7f7387966f50": [], "df_deconfound": 109, "012310": 109, "015568": 109, "061639": 109, "004736": 109, "029380": 109, "032631": 109, "025295": 109, "372": [123, 125], "0x7f7387966950": [], "df_transform": 109, "pca__pca2": 109, "pca__pca7": 109, "pca__pca8": 109, "014051": 109, "017395": 109, "062829": 109, "014516": 109, "002075": 109, "029015": 109, "032477": 109, "035162": 109, "001324": 109, "106807": 109, "006566": [109, 135], "003545": 109, "003951": 109, "025445": 109, "000421": 109, "000517": 109, "654": [], "655": [], "656": [], "028116": [], "010659": [], "027679": [], "010737": [], "028076": [], "010711": [], "027617": [], "010738": [], "028215": [], "010704": [], "802": [], "auto_examples_04_confound": 110, "variou": 111, "aspect": [111, 124, 135], "947": [], "966": [], "967": [], "968": [], "005837": [], "002931": [], "005413": [], "002875": [], "005396": [], "002845": [], "005355": [], "002821": [], "264653948271885": 112, "264654": 112, "486498": 112, "auto_examples_05_custom": 113, "short": [114, 116, 123], "drop_column": 114, "dropcolumn": 114, "change_column_typ": 114, "filtercolumn": 114, "stackingclassifi": [114, 128], "stackingregressor": [114, 128], "meant": 115, "come": [115, 116, 124, 127, 131, 135], "cost": 115, "potenti": [115, 123, 127], "flag": [115, 116], "disabl": 115, "config": 115, "disable_x_check": 115, "unmatch": 115, "think": [115, 123], "disable_xtypes_check": 115, "meth": 115, "undefin": 115, "disable_x_verbos": 115, "expaned": [], "disable_xtypes_verbos": 115, "expan": [], "fork": 116, "repositori": 116, "never": [116, 135], "feat": 116, "help": [116, 119, 120, 123, 127, 133, 135], "regularli": 116, "save": [116, 135], "smaller": 116, "semant": 116, "suit": [116, 127], "tox": 116, "submit": 116, "templat": 116, "web": 116, "interfac": [116, 128], "meet": 116, "rare": 116, "circumst": 116, "coverag": 116, "decreas": 116, "report": 116, "codecov": 116, "usag": [116, 119, 130, 135], "draft": [116, 121], "id": 116, "liner": [116, 133], "newsfrag": 116, "bug": [116, 136], "bugfix": 116, "enhanc": 116, "enh": 116, "improv": [116, 119], "miscellan": 116, "misc": 116, "record": 116, "101": [104, 116, 125], "content": 116, "typo": 116, "intro": 116, "biggest": 116, "fan": 116, "someon": [116, 124], "core": [116, 130, 133], "team": 116, "success": [116, 125, 130], "intend": 116, "bokeh": [118, 119], "through": [118, 135], "manag": 118, "forg": 118, "standalon": 118, "browser": 118, "jupyter_bokeh": 118, "servabl": 118, "0rc1": 119, "0b1": 119, "although": 119, "promin": 119, "oftentim": 119, "newest": 119, "relas": 119, "insal": [], "mod": 119, "offer": [120, 131], "essenti": [120, 127], "benefit": 120, "therebi": 120, "nice": [120, 131, 134, 135], "deeper": [120, 127, 132, 133], "topic": [120, 124, 132, 133], "overview": [120, 127, 133, 135], "frequenli": [], "ask": [], "towncrier": 121, "proceed": [121, 135], "changelog": 121, "reflect": 121, "chage": [], "vd": 121, "neuroimag": [122, 123], "typic": 122, "problemat": 122, "due": [122, 124], "curs": 122, "especi": 122, "recent": 122, "propos": 122, "fluid": 122, "intellig": 122, "sustain": 122, "attent": 122, "connect": [122, 123], "nutshel": 122, "summar": 122, "subsequ": 122, "commonli": [122, 135], "leverag": [122, 127], "x_name": [122, 128], "feature_": [122, 123, 128], "cbpm_pipeline_cr": 122, "final_model": [122, 127], "feature_1": [122, 123, 128], "feature_2": [122, 123, 128], "feature_3": [122, 123, 128], "feature_4": [122, 123, 128], "feature_5": [122, 123, 128], "feature_6": [122, 123, 128], "feature_7": [122, 123, 128], "feature_8": [122, 123, 128], "feature_9": [122, 123, 128], "feature_10": [122, 123, 128], "feature_11": [122, 123, 128], "feature_12": [122, 123, 128], "feature_13": [122, 123, 128], "feature_14": [122, 123, 128], "feature_15": [122, 123, 128], "feature_16": [122, 123, 128], "feature_17": [122, 123, 128], "feature_18": [122, 123, 128], "feature_19": [122, 123, 128], "feature_20": [122, 128], "No": [122, 124], "rid": 122, "769": 109, "795": [], "customis": [122, 128], "increas": 122, "798": [], "799": [], "cbpm__significance_threshold": 122, "noteworthi": 122, "sign": 122, "spearmanr": 122, "801": [], "0x7f738cdc71c0": [], "0x7f739aba43a0": [], "0x7f739aba0c30": [], "guess": 122, "spearman": 122, "xilin": 122, "individu": [122, 127, 134], "nat": 122, "protoc": 122, "2017": [122, 123], "mar": [122, 123], "518": 122, "emili": 122, "fingerprint": 122, "2015": 122, "nov": 122, "1664": 122, "71": 122, "rosenberg": 122, "monica": 122, "neuromark": 122, "jan": [122, 123], "165": [122, 134], "ultim": 123, "real": [123, 127], "world": [123, 127], "scenario": [123, 134, 135], "relationship": 123, "un": 123, "observ": 123, "often": [123, 130, 135], "similarli": [123, 127], "rather": 123, "jointli": 123, "prevent": [123, 125], "laid": 123, "rel": [123, 128], "littl": 123, "involv": 123, "simul": 123, "artifici": [123, 128, 135], "normal_dist_conf_on": 123, "normal_dist_conf_two": 123, "noise_conf_on": 123, "rand": [123, 124], "noise_conf_two": 123, "multipli": 123, "factor": 123, "confound_on": 123, "confound_two": 123, "human": 123, "readabl": 123, "confound_1": 123, "confound_2": 123, "my_target": 123, "distinguish": [123, 128, 135], "predictor": 123, "accordingli": [123, 130], "parametris": 123, "initialis": [123, 128], "feature_0": 123, "205": [], "028424": [], "008476": [], "027653": [], "008401": [], "027893": [], "008447": [], "027614": [], "008393": [], "027694": [], "008444": [], "slightli": 123, "target_confound_remov": 123, "0x7f7387859b70": [], "insert": 123, "401": [], "0x7f73878586d0": [], "406": [], "420": [95, 123], "space": 123, "433": [109, 125], "446": [], "460": [], "473": [], "007755": [], "005007": [], "007445": [], "004981": [], "007478": [], "004946": [], "007549": [], "005003": [], "007497": [], "004967": [], "fashion": 123, "reason": [123, 124], "further": [123, 130], "consider": 123, "why": [123, 124, 125, 132], "mitig": 123, "bia": [123, 124], "accur": 123, "argu": 123, "appropri": 123, "valuabl": [123, 127, 130], "difficult": [123, 125], "challeng": 123, "ineffect": 123, "particular": [123, 127, 135], "fact": [123, 127], "collid": 123, "spuriou": 123, "evid": [123, 124], "leak": [123, 130], "bias": [123, 124], "care": [123, 135], "thorough": 123, "strength": 123, "rao": 123, "anil": 123, "presenc": 123, "volum": [123, 124], "april": 123, "snoek": 123, "luka": 123, "januari": 123, "2019": [123, 133], "760": 123, "he": 123, "tong": 123, "neural": [123, 135], "network": [123, 135], "206": 123, "februari": 123, "2020": 123, "116276": 123, "knowledg": [123, 127], "discoveri": 123, "databas": 123, "scienc": [123, 130], "demo": 123, "track": 123, "2021": 123, "12461": 123, "chyzhyk": 123, "darya": 123, "biomark": 123, "gigasci": 123, "holmberg": 123, "mathia": 123, "jama": 123, "327": 123, "1282": 123, "1283": 123, "1001": [123, 133], "1820": 123, "arxiv": 123, "2210": 123, "09232": 123, "revis": 123, "oct": 123, "_almost_": 124, "infinit": 124, "unbias": 124, "overestim": 124, "rememb": [124, 127, 134], "_unseen_": 124, "surpris": 124, "imposs": 124, "bengio": 124, "grandvalet": 124, "colleagu": 124, "few": [124, 127, 130], "thumb": [124, 135], "compromis": 124, "loocv": 124, "holdout": 124, "taken": 124, "intens": 124, "unconclus": 124, "intuit": [124, 127, 133], "thread": 124, "emir": 124, "extrem": 124, "fun": 124, "begin": 124, "variant": 124, "solv": [124, 130], "shed": 124, "light": 124, "poorli": 124, "stratifiedkfold": [124, 134], "rescu": 124, "matter": [124, 130, 133], "quantiz": 124, "histplot": 124, "train_set": 124, "test_set": 124, "shrink": [124, 127], "suptitl": 124, "gaussian": 124, "almost": 124, "discrete_i": 124, "digit": 124, "kdeplot": 124, "layer": 124, "dash": 124, "repeatedcontinuousstratifiedkfold": [124, 136], "repeatedcontinuousstratifiedgroupkfold": 124, "jmlr": 124, "decemb": 124, "2004": 124, "1089": 124, "1105": 124, "stackexchang": 124, "61783": 124, "kohavi": 124, "ijcai": 124, "1137": 124, "1145": 124, "743": [], "flower": 125, "pprint": [125, 127, 134], "pretti": 125, "creator2": [125, 133], "8099999999999999": 125, "056": 127, "057": 112, "058": [112, 127], "etc": 125, "optimist": 125, "loop": 125, "scores_tun": 125, "model_tun": 125, "9100000000000001": 125, "tri": 125, "conclud": 125, "292": [], "mixtur": 125, "0001": 125, "789": 98, "790": 98, "791": [], "792": [], "793": [], "select_k__k": 125, "concept": [125, 130], "receiv": 125, "veri": [125, 127, 128, 130, 131], "construct": 125, "diment": 125, "lot": [125, 127], "consum": 125, "those": [125, 130], "unnecessari": 125, "model1": 125, "849": 105, "850": 105, "851": [], "852": [], "853": [], "854": 105, "855": 105, "93": 125, "forc": 125, "repat": 125, "creator1": [125, 133], "model2": 125, "623": 125, "624": 125, "628": 125, "629": 125, "inde": [125, 134], "equival": 125, "param_grid": [125, 127], "stop": 125, "creator3": [125, 133], "max_depth": [125, 128], "creator4": 125, "penalti": 125, "l1": 125, "dual": 125, "solver": 125, "liblinear": 125, "model3": 125, "441": [], "444": [], "model__c": 125, "model__gamma": 125, "445": 133, "447": [], "model__max_depth": 125, "448": [], "model__penalti": 125, "451": 95, "452": [95, 123], "9200000000000002": 125, "beat": 125, "gain": 127, "insight": 127, "impact": 127, "analyz": 127, "abil": 127, "critic": 127, "influenc": 127, "deploy": 127, "focu": [127, 131], "anomali": 127, "logger": [127, 128], "toi": [127, 128], "plai": 127, "penguin": 127, "penguins_df": 127, "island": 127, "queri": 127, "chinstrap": 127, "dropna": 127, "adeli": 127, "gentoo": 127, "929": [], "fairli": 127, "geomspac": [127, 128], "1e2": [127, 128], "903": [], "nformat": 127, "bill_length_mm": 127, "bill_depth_mm": 127, "flipper_length_mm": 127, "body_mass_g": 127, "908": 99, "909": 125, "274": [97, 127, 135], "910": 125, "quick": 127, "error_scor": 127, "nan": 127, "jucolumntransform": 127, "with_mean": [127, 135], "with_std": 127, "wrapmodel": 127, "break_ti": 127, "cache_s": 127, "class_weight": 127, "coef0": 127, "decision_function_shap": 127, "ovr": 127, "max_it": 127, "tol": 127, "estimator__memori": 127, "estimator__set_column_typ": 127, "estimator__set_column_types__x_typ": 127, "estimator__set_column_types__row_select_col_typ": 127, "estimator__set_column_types__row_select_v": 127, "estimator__step": 127, "estimator__svm": 127, "estimator__svm__c": 127, "estimator__svm__apply_to": 127, "estimator__svm__break_ti": 127, "estimator__svm__cache_s": 127, "estimator__svm__class_weight": 127, "estimator__svm__coef0": 127, "estimator__svm__decision_function_shap": 127, "estimator__svm__degre": 127, "estimator__svm__gamma": 127, "estimator__svm__kernel": 127, "estimator__svm__max_it": 127, "estimator__svm__model": 127, "estimator__svm__needed_typ": 127, "estimator__svm__prob": 127, "estimator__svm__random_st": 127, "estimator__svm__shrink": 127, "estimator__svm__tol": 127, "estimator__svm__verbos": 127, "estimator__verbos": 127, "estimator__zscor": 127, "estimator__zscore__apply_to": 127, "estimator__zscore__copi": 127, "estimator__zscore__nam": 127, "estimator__zscore__needed_typ": 127, "estimator__zscore__row_select_col_typ": 127, "estimator__zscore__row_select_v": 127, "estimator__zscore__transform": 127, "estimator__zscore__with_mean": 127, "estimator__zscore__with_std": 127, "pre_dispatch": 127, "refit": 127, "get_fitted_param": 127, "set_column_types__column_mapper_": 127, "bill_depth_mm__": 127, "bill_length_mm__": 127, "body_mass_g__": 127, "flipper_length_mm__": 127, "set_column_types__feature_names_in_": 127, "svm__model_": 127, "zscore__column_transformer_": 127, "remaind": 127, "passthrough": 127, "make_type_selector": 127, "0x7f7387d5ec80": [], "verbose_feature_names_out": 127, "zscore__feature_names_in_": 127, "zscore__mean_": 127, "70291971": 127, "83613139": 127, "202": 127, "17883212": 127, "4318": 127, "06569343": 127, "zscore__n_features_in_": 127, "zscore__n_samples_seen_": 127, "zscore__scale_": 127, "18607683": 127, "00973207": 127, "02045287": 127, "834": 127, "40628575": 127, "zscore__var_": 127, "68953929e": 127, "03902299e": 127, "25614004e": 127, "96233850e": 127, "somewhat": [127, 128], "structur": [127, 131], "handi": [127, 131, 135], "fold_predict": 127, "repeat8_p0": 127, "repeat9_p0": 127, "269": [97, 127, 128, 135], "270": [97, 127, 128, 135], "foldsinspector": 127, "_c_": 127, "c_valu": 127, "fold_inspector": 127, "fold_model": 127, "realis": 127, "ever": 127, "aris": 127, "serv": 127, "asset": 127, "transpar": [127, 130], "reliabl": 127, "har": 127, "953": [], "flexibl": 128, "cours": 128, "607": [], "arbitrari": [128, 134], "model_1": [128, 133], "609": [], "00000000e": 128, "78255940e": 128, "74263683e": 128, "15443469e": 128, "99484250e": 128, "66810054e": 128, "64158883e": 128, "29154967e": 128, "59381366e": 128, "0x7f7387891060": [], "min_samples_leaf": 128, "min_samples_split": 128, "611": 92, "0x7f73875b88e0": [], "0x7f73875bafb0": [], "612": [], "613": [], "rf__max_depth": 128, "rf__min_samples_leaf": 128, "rf__min_samples_split": 128, "type1": 128, "type2": 128, "type1_": 128, "type2_": 128, "383": 102, "384": [], "__type1": 128, "0x7f7387785690": [], "385": 102, "__type2": 128, "0x7f73875bbee0": [], "386": [102, 133], "type1_1": 128, "type1_2": 128, "type1_3": 128, "type1_4": 128, "type1_5": 128, "type1_6": 128, "type1_7": 128, "type1_8": 128, "type1_9": 128, "type1_10": 128, "type2_1": 128, "type2_2": 128, "type2_3": 128, "type2_4": 128, "type2_5": 128, "type2_6": 128, "type2_7": 128, "type2_8": 128, "type2_9": 128, "type2_10": 128, "388": [], "389": 123, "390": 108, "391": [101, 108], "392": 108, "393": 108, "394": [], "flexibli": 128, "Of": 128, "cover": [129, 131, 135], "far": [129, 131, 134, 135], "conist": 129, "manner": [129, 130, 131, 133, 135], "clear": 129, "422": 134, "target_jutargetpipelin": 129, "0x7f7387a9e1d0": [], "424": 134, "012395": [], "004222": [], "010808": [], "004154": [], "011394": [], "004113": [], "011174": [], "004122": [], "011237": [], "004115": [], "overal": 129, "114": [], "goal": 130, "beyond": 130, "domingo": 130, "2012": 130, "ressourc": [], "efficeint": 130, "disadvantag": 130, "small": 130, "unstabl": 130, "overcom": 130, "accident": 130, "quickli": 130, "obviou": 130, "straightforward": [130, 135], "prone": [130, 133], "mistak": 130, "www": 130, "sciencedirect": 130, "articl": 130, "pii": 130, "s105381191630595x": 130, "natur": 130, "s41746": 130, "00592": 130, "s1053811917305311": 130, "commun": 131, "capac": 131, "colum": 131, "manipul": 131, "anyth": [131, 134], "meaning": 131, "_sepal_": 131, "_petal_": 131, "hundr": 131, "thousand": 131, "saw": [131, 133, 134, 135], "parametr": [131, 135], "backbon": 132, "magic": 132, "goe": 132, "utmost": 132, "glanc": [132, 134], "chapter": 132, "ist": [], "familiar": 132, "along": 132, "fundament": 132, "essenc": 132, "fanci": 132, "stuff": 132, "decent": 133, "benchmark": 133, "enough": 133, "tediou": 133, "sound": 133, "switch": 133, "breast": 133, "cancer": 133, "malign": 133, "benign": 133, "load_breast_canc": 133, "radiu": 133, "textur": 133, "perimet": 133, "area": 133, "smooth": 133, "compact": 133, "concav": 133, "symmetri": 133, "fractal": 133, "worst": 133, "11840": 133, "27760": 133, "3001": 133, "14710": 133, "2419": 133, "07871": 133, "0950": 133, "9053": 133, "589": 133, "006399": 133, "04904": 133, "05373": 133, "01587": 133, "03003": 133, "006193": 133, "1622": 133, "6656": 133, "7119": 133, "2654": 133, "4601": 133, "11890": 133, "132": 133, "1326": 133, "08474": 133, "07864": 133, "0869": 133, "07017": 133, "1812": 133, "05667": 133, "5435": 133, "7339": 133, "74": 133, "005225": 133, "01308": 133, "01860": 133, "01340": 133, "01389": 133, "003532": 133, "1956": 133, "1238": 133, "1866": 133, "2416": 133, "1860": 133, "2750": 133, "08902": 133, "69": 133, "130": [127, 133], "1203": 133, "10960": 133, "15990": 133, "1974": 133, "12790": 133, "2069": 133, "05999": 133, "7456": 133, "7869": 133, "585": 133, "006150": 133, "04006": 133, "03832": 133, "02058": 133, "02250": 133, "004571": 133, "1709": 133, "1444": 133, "4245": 133, "4504": 133, "2430": 133, "3613": 133, "08758": 133, "14250": 133, "28390": 133, "2414": 133, "10520": 133, "2597": 133, "09744": 133, "4956": 133, "1560": 133, "009110": 133, "07458": 133, "05661": 133, "01867": 133, "05963": 133, "009208": 133, "91": 133, "2098": 133, "8663": 133, "6869": 133, "2575": 133, "6638": 133, "17300": 133, "1297": 133, "10030": 133, "13280": 133, "1980": 133, "10430": 133, "1809": 133, "05883": 133, "7572": 133, "7813": 133, "011490": 133, "02461": 133, "05688": 133, "01885": 133, "01756": 133, "005115": 133, "67": 133, "1575": 133, "1374": 133, "2050": 133, "4000": 133, "1625": 133, "2364": 133, "07678": 133, "cv_splitter": [133, 134], "253": [], "256": [], "257": 86, "258": 86, "212": 133, "461": 85, "763": [], "764": [], "765": 109, "766": 109, "957": [], "960": 122, "961": 122, "pairwis": 133, "neither": 133, "nor": 133, "946304": 133, "083461": 133, "250382": 133, "140882": 133, "891066": 133, "285373": 133, "048138": 133, "144413": 133, "361847": 133, "206356": 133, "619069": 133, "014156": 133, "989015": 133, "093249": 133, "302681": 133, "908044": 133, "dive": 133, "curiou": 133, "_iris_": 134, "014": [], "006134": [], "003162": [], "003132": [], "005652": [], "003088": [], "005599": [], "003154": [], "005588": [], "003081": [], "overfit": 134, "072": [], "073": [], "074": [], "005714": [], "003128": [], "005631": [], "003125": [], "005541": [], "003096": [], "005571": [], "003158": [], "005554": [], "003051": [], "train_scor": 134, "cryptic": 134, "verifi": [116, 134], "worri": 134, "doesn": 134, "005703": [], "003171": [], "005605": [], "003114": [], "005530": [], "003103": [], "005592": [], "003126": [], "005538": [], "x27": 134, "cell": 134, "represent": 134, "trust": 134, "unabl": 134, "nbviewer": 134, "pipelinepipelin": 134, "setcolumntypessetcolumntyp": 134, "standardscalerstandardscal": 134, "svcsvc": 134, "weather": 134, "didn": 134, "got": 134, "five": 134, "ourselv": 134, "fourth": 134, "234": [108, 134], "236": [112, 113, 134], "237": [], "005855": [], "7449876d309382acfef94df9d102aa76": 134, "005633": [], "003135": [], "005655": [], "003116": [], "005601": [], "003109": [], "005671": [], "005664": [], "003086": [], "005638": [], "003050": [], "005573": [], "003046": [], "005606": [], "assumpt": 134, "list_scor": 134, "adjusted_mutual_info_scor": 134, "adjusted_rand_scor": 134, "average_precis": 134, "completeness_scor": 134, "explained_vari": 134, "f1": 134, "f1_macro": 134, "f1_micro": 134, "f1_sampl": 134, "f1_weight": 134, "fowlkes_mallows_scor": 134, "homogeneity_scor": 134, "jaccard": 134, "jaccard_macro": 134, "jaccard_micro": 134, "jaccard_sampl": 134, "jaccard_weight": 134, "matthews_corrcoef": 134, "max_error": 134, "mutual_info_scor": 134, "neg_brier_scor": 134, "neg_log_loss": 134, "neg_mean_absolute_percentage_error": 134, "neg_mean_gamma_devi": 134, "neg_mean_poisson_devi": 134, "neg_mean_squared_error": 134, "neg_mean_squared_log_error": 134, "neg_median_absolute_error": 134, "neg_negative_likelihood_ratio": 134, "neg_root_mean_squared_error": 134, "normalized_mutual_info_scor": 134, "positive_likelihood_ratio": 134, "precision_macro": 134, "precision_micro": 134, "precision_sampl": 134, "precision_weight": 134, "rand_scor": 134, "recal": 134, "recall_macro": 134, "recall_micro": 134, "recall_sampl": 134, "recall_weight": 134, "roc_auc_ovo": 134, "roc_auc_ovo_weight": 134, "roc_auc_ovr": 134, "roc_auc_ovr_weight": 134, "top_k_accuraci": 134, "v_measure_scor": 134, "r_corr": 134, "005629": [], "004751": [], "005596": [], "004669": [], "004735": 135, "005593": [], "004687": [], "005548": [], "004717": [], "005569": [], "004706": [], "005587": [], "005614": [], "004716": [], "005626": [], "004700": [], "005670": [], "004690": [], "autom": 135, "pipe": 135, "fed": 135, "safe": 135, "681": 92, "682": 92, "683": 103, "684": 103, "685": 103, "003735": [], "002167": [], "003447": [], "002099": [], "003382": [], "002081": [], "003364": [], "002117": [], "003376": [], "002118": [], "voil\u00e0": 135, "resembl": 135, "wish": 135, "005882": [], "003155": [], "003131": [], "005586": [], "003108": [], "005639": [], "003115": [], "003097": [], "previous": 135, "007229": [], "004184": [], "007061": [], "004101": [], "006925": [], "004097": [], "007022": [], "006912": [], "004053": [], "intranspar": 135, "simplifi": 135, "neat": 135, "functiona": 135, "007130": [], "004080": [], "007035": [], "004096": [], "006945": [], "004061": [], "006955": [], "004103": [], "006883": [], "004117": [], "awesom": 135, "jump": 135, "aren": 135, "shouldn": 135, "ye": 135, "turn": 135, "_configur": 135, "learnt": 135, "experi": 135, "heurist": 135, "_tuned_": 135, "rate": 135, "sigma": 135, "basi": 135, "comma": 135, "wonder": 135, "besid": 135, "definit": 135, "data_usag": 135, "featuer": 135, "937": [], "pca_1": 135, "938": [], "_pca_": 135, "939": [], "940": [], "942": [], "943": [], "944": [], "021576": [], "009113": [], "021119": [], "009114": [], "020892": [], "009082": [], "021063": [], "009216": [], "020930": [], "009117": [], "boser": 135, "guyon": 135, "vapnik": 135, "margin": 135, "colt": 135, "92": 135, "fifth": 135, "annual": 135, "workshop": 135, "theori": 135, "1992": 135, "jul": 135, "144": 135, "contin": [], "128": [], "dev9": [], "133": [], "134": [], "136": [], "006471": [], "003389": [], "005981": [], "003284": [], "005940": [], "003326": [], "005914": [], "003330": [], "005895": [], "003303": [], "tmpumkvqfrv": [], "00e8c2755b60494bf6c9c7f084cdc4cabfe1bb4a": [], "119": [88, 109, 123], "429": [109, 125], "430": [109, 125], "431": [109, 125], "006626": [], "003202": [], "005888": [], "005933": [], "003160": [], "005980": [], "821": 125, "0x7f95639b99f0": [], "138": [], "996": [], "997": 86, "476": [], "477": [], "478": [], "479": [], "480": [], "758": [], "759": [], "761": [], "762": [], "820": 125, "822": 125, "823": 125, "824": [], "883": 89, "884": [], "885": [], "886": [], "887": [], "888": [], "180": 135, "185": [], "186": [], "189": [], "242": [], "243": [], "244": [], "245": [], "131": 124, "475": [], "278": 96, "279": [], "280": [], "281": 96, "371": 123, "324": 134, "325": 134, "326": 134, "328": [], "217": [], "076": [], "844": [], "006408": [], "003308": [], "005872": 101, "003278": [], "005905": [], "003238": [], "005806": [], "003245": [], "003236": [], "005775": [], "003250": [], "005740": [], "003227": [], "005771": [], "003213": [], "005708": [], "003231": [], "005685": [], "003216": [], "005779": [], "003243": [], "005726": [], "003246": [], "005734": [], "003247": [], "005684": [], "005747": [], "005724": [], "005705": [], "003223": [], "0x7f956387f4c0": [], "387": [], "985": [], "0x7f956372afb0": [], "008": 105, "009": 105, "005773": [], "004182": [], "005273": [], "004079": [], "005193": [], "005177": [], "005217": [], "004185": [], "097": [104, 135], "880": 89, "881": 89, "901": [], "0x7f9563035ab0": [], "904": 90, "017688": [], "007835": [], "016798": [], "007817": [], "016588": [], "007805": [], "017072": [], "008072": [], "016654": [], "007803": [], "254": [], "277": 96, "363": [], "805": 85, "466": [], "467": [108, 110], "468": [], "470": [], "471": [], "873": [], "874": [], "878": 89, "230": 108, "0x7f956339ebf0": [], "0x7f956339feb0": [], "239": [], "241": [], "698": [], "462": 85, "570": 125, "598": [], "0x7f956339f3d0": [], "603": [], "879": 89, "0x7f9564011000": [], "882": 89, "190": [104, 122], "192": 104, "030874": [], "011455": [], "031078": [], "011573": [], "030738": [], "011443": [], "030891": [], "012007": [], "030832": [], "011670": [], "006394": [], "003169": [], "005847": [], "003058": [], "005748": [], "003048": [], "003039": [], "519": [], "577": [104, 125, 133], "578": [104, 125], "579": [104, 125], "218": [], "349": [], "493": 125, "494": 125, "495": [], "0x7f9568857400": [], "0x7f9579998700": [], "0x7f95799947b0": [], "179": 135, "032391": [], "009257": [], "031681": [], "009259": [], "031713": [], "009280": [], "031560": [], "009119": [], "031201": [], "009094": [], "0x7f9562e4e6b0": [], "0x7f9562e4e710": [], "337": [], "338": 84, "382": [89, 90, 102], "008477": [], "005418": [], "007983": [], "005442": [], "005369": [], "007947": [], "005408": [], "007945": [], "958": [109, 110], "959": 122, "934": [], "936": [], "941": [], "066": 86, "260": 128, "261": 128, "262": 128, "679": 92, "044": 92, "052": 127, "053": 127, "0x7f95637f00a0": [], "605": [], "606": [], "0x7f95635cd030": [], "0x7f95634d6890": [], "608": [], "0x7f95634d5ff0": [], "554": [], "555": [], "556": 104, "0x7f9563493a30": [], "0x7f95635cde40": [], "794": [], "0x7f9562e0cbe0": [], "040": 92, "041": 92, "042": 92, "043": 92, "013713": [], "004616": 135, "012109": [], "004397": [], "012652": [], "004354": [], "012212": [], "004330": [], "012254": [], "004243": [], "125": 109, "019": [], "023": 135, "581": [104, 125], "582": [104, 125], "583": 125, "584": 125, "587": [], "797": [], "911": 125, "596": 134, "006580": [], "006022": [], "003290": [], "006006": [], "006030": [], "003276": [], "005987": [], "006291": 98, "003324": [], "006082": [], "003257": [], "006005": [], "003269": [], "003314": [], "006127": [], "003312": [], "742": [], "745": 89, "003350": [], "006099": [], "003264": [], "006004": [], "006058": [], "006040": [], "003248": [], "835": [], "837": [], "006386": 134, "003346": [], "006075": [], "003225": [], "006003": [], "003265": [], "003241": [], "005997": [], "006062": [], "003251": [], "006093": [], "006186": [], "003239": [], "987": [], "988": [], "989": [], "990": [], "991": 112, "006161": [], "005087": [], "006000": [], "004950": [], "006064": [], "005051": [], "006154": [], "005004": [], "006052": [], "004990": [], "006068": [], "005008": [], "006142": [], "006113": [], "004926": [], "006313": [], "005243": [], "588": [], "004021": [], "002283": [], "003715": 98, "002272": [], "003659": [], "002248": [], "003625": 135, "002213": [], "003524": [], "002217": [], "411": [], "412": [], "414": 101, "006325": [], "003321": [], "006001": [], "003253": [], "005878": [], "003283": [], "003320": [], "005899": [], "003258": [], "474": [], "007828": [], "004331": [], "007433": [], "004308": [], "007442": [], "004302": [], "007401": [], "004284": [], "007380": [], "004276": [], "553": [105, 106], "007708": [], "007492": [], "004348": [], "004300": [], "007454": [], "004294": [], "007435": [], "634": [88, 125], "023140": [], "009728": [], "022439": [], "009753": [], "022122": [], "009740": [], "022396": [], "009703": [], "022230": [], "009746": [], "dev50": [], "006307": [], "003397": [], "005930": [], "003332": [], "005934": [], "005880": [], "003299": [], "tmp7l9ymbni": [], "74b8600de9ba31e9c9bc52271fd60bed7993c648": [], "571": [125, 133], "572": [125, 133], "006559": [], "003203": [], "006034": [], "005902": [], "005958": [], "003145": [], "005867": [], "813": 89, "0x7f442b68d450": [], "845": [], "frame": 87, "wide": 87, "330": [], "229": [], "892": [], "978": [], "015": [], "016": [], "018": [], "077": [], "285": 96, "293": [], "350": [], "722": [], "723": [], "724": [], "400": [], "482": [], "483": [], "103": 125, "126": 109, "006316": [], "003294": [], "003261": [], "005729": [], "005700": [], "003235": [], "003262": [], "005732": [], "003272": [], "005812": [], "005737": [], "003256": [], "005767": [], "003263": [], "005794": [], "005756": [], "005808": [], "003228": [], "005763": [], "005712": [], "003237": [], "005781": 123, "005719": [], "0x7f442b1a5b40": [], "062": [], "063": [], "0x7f442bc49810": [], "005922": [], "004309": [], "005457": [], "004153": [], "005349": [], "005282": [], "004162": [], "005319": [], "004149": [], "951": [97, 99], "0x7f442b620100": [], "017902": [], "007839": [], "017241": [], "007869": [], "017107": [], "007813": [], "016904": [], "008010": [], "016824": [], "007884": [], "332": [], "415": 101, "416": 101, "417": 101, "419": [], "979": [], "980": [], "981": [], "982": [], "732": [], "733": [], "0x7f442b70f9d0": [], "0x7f442b70cf10": [], "0x7f442c2a7820": [], "0x7f442c2a4e20": [], "917": [], "918": 112, "220": [], "029887": [], "011311": [], "029470": [], "011294": [], "030106": [], "011364": [], "029464": [], "011268": [], "030123": [], "521": [], "541": 95, "006302": [], "003198": [], "005863": [], "005816": [], "003110": [], "005866": [], "faq": 120, "331": [], "0x7f44309bf640": [], "0x7f4441b70820": [], "0x7f4441b6d5f0": [], "176": [], "032228": [], "009215": [], "031763": [], "009171": [], "031854": [], "009068": [], "031252": [], "009124": [], "032155": [], "009184": [], "0x7f442af8c1c0": [], "0x7f442af51f60": [], "008458": [], "005395": [], "005393": [], "008012": [], "005334": [], "005409": [], "008103": [], "005399": 134, "900": [], "127": [], "181": 135, "432": 125, "159": [], "160": [], "191": 104, "193": 104, "514": [], "548": 125, "549": 125, "550": 125, "0x7f442b68c430": [], "0x7f442af8fc40": [], "0x7f442af8e290": [], "0x7f442af8d2d0": [], "329": [], "0x7f442b509b70": [], "0x7f442b237f40": [], "339": 84, "079": [], "0x7f442b1c7cd0": [], "013489": [], "004422": [], "011806": [], "004366": [], "012522": [], "004375": 101, "012259": [], "004293": [], "012215": [], "004255": [], "923": [], "924": [], "524": [], "956": 122, "006539": [], "003293": [], "006139": [], "003319": [], "005961": [], "005941": [], "003298": [], "003260": [], "006135": [], "003273": [], "005929": [], "003289": [], "006197": [], "003440": [], "693": [], "694": [], "695": [], "003291": [], "005988": [], "005892": [], "006263": [], "003268": [], "005920": [], "003252": [], "006065": [], "003255": [], "005994": [], "006262": [], "005155": [], "006145": [], "005015": [], "006112": [], "005002": [], "006086": [], "005041": [], "005021": [], "006239": [], "006198": [], "005056": [], "006168": [], "004985": [], "004977": [], "006072": [], "286": 96, "004003": [], "002326": [], "003697": [], "002222": [], "003587": [], "002239": [], "003619": [], "002221": [], "003550": [], "002228": [], "006424": [], "003380": 112, "006039": [], "003295": [], "005938": [], "003286": [], "005956": [], "003302": [], "005913": [], "003270": [], "007674": [], "004350": [], "007489": [], "004339": [], "007392": [], "004335": [], "007415": [], "004321": [], "007330": [], "004314": [], "007783": [], "004345": [], "004329": [], "007359": [], "004303": [], "007358": [], "004327": [], "007373": [], "004286": [], "022960": [], "009706": [], "022348": [], "009713": [], "021914": [], "009733": [], "022349": [], "009652": [], "021923": [], "009721": [], "dev58": [84, 85, 86, 88, 89, 92, 95, 96, 97, 98, 101, 102, 103, 104, 105, 108, 112, 127, 128], "340": 84, "006988": 84, "003642": 84, "006527": 84, "003752": 84, "006469": [84, 98], "003647": 84, "006572": 84, "003698": 84, "006613": [84, 134], "003775": 84, "tmp7ckux81f": [84, 86, 108], "dba30719ec47527400682bd3bbb833207b119042": [84, 86, 108], "007184": 85, "003555": 85, "006518": 85, "003441": 85, "006454": 85, "003356": 85, "006494": 85, "003405": 85, "006623": [85, 134], "003325": 85, "0x7f0dd90a11b0": 86, "999": 86, "000": 86, "090": 88, "810": 89, "811": 89, "812": [89, 133], "814": 89, "815": 89, "619": 92, "678": 92, "680": 92, "006876": 98, "003611": 98, "006460": 98, "003548": 98, "006294": 98, "003614": 98, "006282": 98, "003510": 98, "006188": 98, "003513": 98, "006356": 98, "003521": 98, "003468": 98, "006361": 98, "003573": 98, "006390": 98, "003481": 98, "006478": 98, "003485": 98, "006603": 98, "003519": 98, "003580": 98, "006392": 98, "003489": 98, "006702": 98, "003544": 98, "006373": 98, "003578": 98, "006350": 98, "003490": [98, 134], "006519": 98, "003486": 98, "006255": [98, 112], "003623": 98, "006521": [98, 134], "006985": 98, "003801": 98, "0x7f0dd90580a0": 98, "0x7f0dd9959c30": 101, "006137": 101, "004767": 101, "004679": 101, "005871": 101, "004480": 101, "005696": [101, 134], "004778": 101, "0x7f0dd93e9990": 102, "019350": 102, "008408": 102, "018560": 102, "008730": 102, "018550": 102, "008641": 102, "018168": 102, "008878": 102, "018478": 102, "008861": 102, "686": 103, "775": 103, "194": 104, "0x7f0dd8b59a50": 105, "0x7f0dd8b597e0": 105, "225": 108, "226": 108, "0x7f0dd8d98cd0": 109, "0x7f0de9296290": 109, "770": 109, "033383": 109, "012476": 109, "032954": 109, "012750": 109, "033362": 109, "012491": 109, "032877": 109, "012300": 109, "034142": 109, "012926": 109, "006688": 112, "003599": 112, "006210": 112, "003428": 112, "003395": 112, "006121": 112, "003399": 112, "006071": 112, "hook": 116, "wip": 116, "866": 122, "0x7f0dde1e3640": 122, "0x7f0df3478820": 122, "0x7f0df34758f0": 122, "035564": 123, "010242": 123, "033861": 123, "009900": 123, "035265": 123, "010115": 123, "035371": 123, "010102": 123, "034449": 123, "010044": 123, "0x7f0dd93ea470": 123, "0x7f0dd93ea620": 123, "009274": 123, "008687": 123, "005813": 123, "009060": 123, "005881": 123, "008752": 123, "005970": 123, "008879": 123, "006025": 123, "491": 125, "492": 125, "818": 125, "819": 125, "913": 125, "914": 125, "573": [125, 133], "574": [125, 133], "575": [125, 133], "576": [125, 133], "129": 127, "055": 127, "0x7f0dd8a5e770": 127, "0x7f0dd901a0e0": 128, "0x7f0dd87dbd00": 128, "0x7f0dd87dba00": 128, "0x7f0de9295960": 128, "0x7f0dd8822b30": 128, "264": [128, 135], "0x7f0dd879f670": 129, "015376": 129, "005039": 129, "013735": 129, "005216": 129, "014185": 129, "004780": [129, 135], "014308": 129, "004964": 129, "014292": 129, "004846": 129, "893": 133, "894": 133, "899": 133, "803": 133, "162": 134, "163": 134, "006981": 134, "003541": 134, "006659": 134, "003574": 134, "006505": 134, "003517": 134, "006766": 134, "003770": 134, "006719": 134, "003760": 134, "006817": 134, "003633": 134, "006601": 134, "003551": 134, "006568": 134, "003499": 134, "006477": [134, 135], "003515": 134, "006342": 134, "003675": 134, "006592": 134, "003662": 134, "006502": 134, "003631": 134, "006540": 134, "003484": 134, "006674": 134, "003671": 134, "006872": 134, "003768": 134, "006587": 134, "003750": 134, "006827": 134, "003744": 134, "003689": 134, "006740": 134, "003773": 134, "006751": 134, "003687": 134, "003736": 134, "006727": 134, "003583": 134, "006641": 134, "003666": 134, "003470": 134, "005817": 134, "005546": 134, "005462": 134, "006586": 134, "006474": 134, "005337": 134, "006557": 134, "006634": 134, "005727": 134, "006617": 134, "005375": 134, "006705": 134, "005459": 134, "006571": 134, "005519": 134, "972": 135, "004230": 135, "002601": 135, "003974": 135, "002484": 135, "003936": 135, "002340": 135, "003819": 135, "002461": 135, "003837": 135, "002350": 135, "006939": 135, "003820": 135, "006844": 135, "003503": 135, "003523": 135, "006482": 135, "003478": 135, "008350": 135, "004771": 135, "008064": 135, "004628": 135, "008159": 135, "008070": 135, "004642": 135, "007931": 135, "004833": 135, "177": 135, "008231": 135, "004765": 135, "008353": 135, "008238": 135, "004691": 135, "008177": 135, "004709": 135, "265": 135, "024658": 135, "010493": 135, "024333": 135, "010471": 135, "024042": 135, "010623": 135, "024140": 135, "010567": 135, "024481": 135, "010523": 135}, "objects": {"julearn": [[1, 0, 1, "", "PipelineCreator"], [2, 0, 1, "", "TargetPipelineCreator"], [73, 3, 0, "-", "api"], [0, 3, 0, "-", "base"], [72, 3, 0, "-", "inspect"], [74, 3, 0, "-", "model_selection"], [75, 3, 0, "-", "models"], [76, 3, 0, "-", "pipeline"], [77, 3, 0, "-", "prepare"], [33, 5, 1, "", "run_cross_validation"], [78, 3, 0, "-", "scoring"], [79, 3, 0, "-", "stats"], [80, 3, 0, "-", "transformers"], [81, 3, 0, "-", "utils"], [82, 3, 0, "-", "viz"]], "julearn.PipelineCreator": [[1, 1, 1, "", "__init__"], [1, 1, 1, "", "add"], [1, 1, 1, "", "copy"], [1, 1, 1, "", "from_list"], [1, 1, 1, "", "has_model"], [1, 1, 1, "", "split"], [1, 2, 1, "", "steps"], [1, 1, 1, "", "to_pipeline"]], "julearn.TargetPipelineCreator": [[2, 1, 1, "", "__init__"], [2, 1, 1, "", "add"], [2, 1, 1, "", "to_pipeline"]], "julearn.base": [[3, 0, 1, "", "ColumnTypes"], [4, 4, 1, "", "ColumnTypesLike"], [5, 0, 1, "", "JuBaseEstimator"], [6, 0, 1, "", "JuTransformer"], [7, 0, 1, "", "WrapModel"], [8, 5, 1, "", "change_column_type"], [9, 5, 1, "", "ensure_column_types"], [10, 5, 1, "", "get_column_type"], [11, 5, 1, "", "make_type_selector"]], "julearn.base.ColumnTypes": [[3, 1, 1, "", "__init__"], [3, 1, 1, "", "add"], [3, 1, 1, "", "copy"], [3, 2, 1, "", "pattern"], [3, 1, 1, "", "to_type_selector"]], "julearn.base.JuBaseEstimator": [[5, 1, 1, "", "__init__"], [5, 1, 1, "", "filter_columns"], [5, 1, 1, "", "get_apply_to"], [5, 1, 1, "", "get_metadata_routing"], [5, 1, 1, "", "get_needed_types"], [5, 1, 1, "", "get_params"], [5, 1, 1, "", "set_params"]], "julearn.base.JuTransformer": [[6, 1, 1, "", "__init__"], [6, 1, 1, "", "filter_columns"], [6, 1, 1, "", "fit"], [6, 1, 1, "", "fit_transform"], [6, 1, 1, "", "get_apply_to"], [6, 1, 1, "", "get_metadata_routing"], [6, 1, 1, "", "get_needed_types"], [6, 1, 1, "", "get_params"], [6, 1, 1, "", "set_output"], [6, 1, 1, "", "set_params"]], "julearn.base.WrapModel": [[7, 1, 1, "", "__init__"], [7, 2, 1, "", "classes_"], [7, 1, 1, "", "decision_function"], [7, 1, 1, "", "filter_columns"], [7, 1, 1, "", "fit"], [7, 1, 1, "", "get_apply_to"], [7, 1, 1, "", "get_metadata_routing"], [7, 1, 1, "", "get_needed_types"], [7, 1, 1, "", "get_params"], [7, 1, 1, "", "predict"], [7, 1, 1, "", "predict_log_proba"], [7, 1, 1, "", "predict_proba"], [7, 1, 1, "", "score"], [7, 1, 1, "", "set_params"]], "julearn.inspect": [[12, 0, 1, "", "FoldsInspector"], [13, 0, 1, "", "Inspector"], [14, 5, 1, "", "preprocess"]], "julearn.inspect.FoldsInspector": [[12, 1, 1, "", "__init__"], [12, 1, 1, "", "decision_function"], [12, 1, 1, "", "predict"], [12, 1, 1, "", "predict_log_proba"], [12, 1, 1, "", "predict_proba"]], "julearn.inspect.Inspector": [[13, 1, 1, "", "__init__"], [13, 2, 1, "", "folds"], [13, 2, 1, "", "model"]], "julearn.model_selection": [[15, 0, 1, "", "ContinuousStratifiedGroupKFold"], [16, 0, 1, "", "ContinuousStratifiedKFold"], [17, 0, 1, "", "RepeatedContinuousStratifiedGroupKFold"], [18, 0, 1, "", "RepeatedContinuousStratifiedKFold"], [19, 0, 1, "", "StratifiedBootstrap"], [20, 5, 1, "", "get_searcher"], [21, 5, 1, "", "list_searchers"], [22, 5, 1, "", "register_searcher"], [23, 5, 1, "", "reset_searcher_register"]], "julearn.model_selection.ContinuousStratifiedGroupKFold": [[15, 1, 1, "", "__init__"], [15, 1, 1, "", "get_metadata_routing"], [15, 1, 1, "", "get_n_splits"], [15, 1, 1, "", "set_split_request"], [15, 1, 1, "", "split"]], "julearn.model_selection.ContinuousStratifiedKFold": [[16, 1, 1, "", "__init__"], [16, 1, 1, "", "get_metadata_routing"], [16, 1, 1, "", "get_n_splits"], [16, 1, 1, "", "split"]], "julearn.model_selection.RepeatedContinuousStratifiedGroupKFold": [[17, 1, 1, "", "__init__"], [17, 1, 1, "", "get_metadata_routing"], [17, 1, 1, "", "get_n_splits"], [17, 1, 1, "", "split"]], "julearn.model_selection.RepeatedContinuousStratifiedKFold": [[18, 1, 1, "", "__init__"], [18, 1, 1, "", "get_metadata_routing"], [18, 1, 1, "", "get_n_splits"], [18, 1, 1, "", "split"]], "julearn.model_selection.StratifiedBootstrap": [[19, 1, 1, "", "__init__"], [19, 1, 1, "", "get_metadata_routing"], [19, 1, 1, "", "get_n_splits"], [19, 1, 1, "", "split"]], "julearn.models": [[75, 3, 0, "-", "dynamic"], [25, 5, 1, "", "get_model"], [26, 5, 1, "", "list_models"], [27, 5, 1, "", "register_model"], [28, 5, 1, "", "reset_model_register"]], "julearn.models.dynamic": [[24, 0, 1, "", "DynamicSelection"]], "julearn.models.dynamic.DynamicSelection": [[24, 1, 1, "", "__init__"], [24, 1, 1, "", "fit"], [24, 1, 1, "", "get_metadata_routing"], [24, 1, 1, "", "get_params"], [24, 1, 1, "", "predict"], [24, 1, 1, "", "predict_proba"], [24, 1, 1, "", "score"], [24, 1, 1, "", "set_params"], [24, 1, 1, "", "set_score_request"]], "julearn.pipeline": [[29, 0, 1, "", "JuTargetPipeline"]], "julearn.pipeline.JuTargetPipeline": [[29, 1, 1, "", "__init__"], [29, 1, 1, "", "can_inverse_transform"], [29, 1, 1, "", "fit"], [29, 1, 1, "", "fit_transform"], [29, 1, 1, "", "inverse_transform"], [29, 2, 1, "", "needed_types"], [29, 1, 1, "", "transform"]], "julearn.pipeline.pipeline_creator": [[30, 0, 1, "", "Step"]], "julearn.pipeline.pipeline_creator.Step": [[30, 1, 1, "", "__init__"], [30, 4, 1, "", "apply_to"], [30, 4, 1, "", "estimator"], [30, 4, 1, "", "name"], [30, 4, 1, "", "needed_types"], [30, 4, 1, "", "params_to_tune"], [30, 4, 1, "", "row_select_col_type"], [30, 4, 1, "", "row_select_vals"]], "julearn.prepare": [[31, 5, 1, "", "check_consistency"], [32, 5, 1, "", "prepare_input_data"]], "julearn.scoring": [[34, 5, 1, "", "check_scoring"], [35, 5, 1, "", "get_scorer"], [36, 5, 1, "", "list_scorers"], [78, 3, 0, "-", "metrics"], [39, 5, 1, "", "register_scorer"], [40, 5, 1, "", "reset_scorer_register"]], "julearn.scoring.metrics": [[37, 5, 1, "", "r2_corr"], [38, 5, 1, "", "r_corr"]], "julearn.stats": [[41, 5, 1, "", "corrected_ttest"]], "julearn.transformers": [[42, 0, 1, "", "CBPM"], [43, 0, 1, "", "ChangeColumnTypes"], [44, 0, 1, "", "DropColumns"], [45, 0, 1, "", "FilterColumns"], [46, 0, 1, "", "JuColumnTransformer"], [47, 0, 1, "", "SetColumnTypes"], [49, 5, 1, "", "get_transformer"], [50, 5, 1, "", "list_transformers"], [51, 5, 1, "", "register_transformer"], [52, 5, 1, "", "reset_transformer_register"], [80, 3, 0, "-", "target"]], "julearn.transformers.CBPM": [[42, 1, 1, "", "__init__"], [42, 1, 1, "", "aggregate"], [42, 1, 1, "", "fit"], [42, 1, 1, "", "fit_transform"], [42, 1, 1, "", "get_feature_names_out"], [42, 1, 1, "", "get_metadata_routing"], [42, 1, 1, "", "get_params"], [42, 1, 1, "", "set_output"], [42, 1, 1, "", "set_params"], [42, 1, 1, "", "transform"]], "julearn.transformers.ChangeColumnTypes": [[43, 1, 1, "", "__init__"], [43, 1, 1, "", "filter_columns"], [43, 1, 1, "", "fit"], [43, 1, 1, "", "fit_transform"], [43, 1, 1, "", "get_apply_to"], [43, 1, 1, "", "get_feature_names_out"], [43, 1, 1, "", "get_metadata_routing"], [43, 1, 1, "", "get_needed_types"], [43, 1, 1, "", "get_params"], [43, 1, 1, "", "set_output"], [43, 1, 1, "", "set_params"], [43, 1, 1, "", "transform"]], "julearn.transformers.DropColumns": [[44, 1, 1, "", "__init__"], [44, 1, 1, "", "filter_columns"], [44, 1, 1, "", "fit"], [44, 1, 1, "", "fit_transform"], [44, 1, 1, "", "get_apply_to"], [44, 1, 1, "", "get_metadata_routing"], [44, 1, 1, "", "get_needed_types"], [44, 1, 1, "", "get_params"], [44, 1, 1, "", "get_support"], [44, 1, 1, "", "set_output"], [44, 1, 1, "", "set_params"], [44, 1, 1, "", "transform"]], "julearn.transformers.FilterColumns": [[45, 1, 1, "", "__init__"], [45, 1, 1, "", "filter_columns"], [45, 1, 1, "", "fit"], [45, 1, 1, "", "fit_transform"], [45, 1, 1, "", "get_apply_to"], [45, 1, 1, "", "get_feature_names_out"], [45, 1, 1, "", "get_metadata_routing"], [45, 1, 1, "", "get_needed_types"], [45, 1, 1, "", "get_params"], [45, 1, 1, "", "set_output"], [45, 1, 1, "", "set_params"], [45, 1, 1, "", "transform"]], "julearn.transformers.JuColumnTransformer": [[46, 1, 1, "", "__init__"], [46, 1, 1, "", "filter_columns"], [46, 1, 1, "", "fit"], [46, 1, 1, "", "fit_transform"], [46, 1, 1, "", "get_apply_to"], [46, 1, 1, "", "get_feature_names_out"], [46, 1, 1, "", "get_metadata_routing"], [46, 1, 1, "", "get_needed_types"], [46, 1, 1, "", "get_params"], [46, 1, 1, "", "set_output"], [46, 1, 1, "", "set_params"], [46, 1, 1, "", "transform"]], "julearn.transformers.SetColumnTypes": [[47, 1, 1, "", "__init__"], [47, 1, 1, "", "filter_columns"], [47, 1, 1, "", "fit"], [47, 1, 1, "", "fit_transform"], [47, 1, 1, "", "get_apply_to"], [47, 1, 1, "", "get_feature_names_out"], [47, 1, 1, "", "get_metadata_routing"], [47, 1, 1, "", "get_needed_types"], [47, 1, 1, "", "get_params"], [47, 1, 1, "", "set_output"], [47, 1, 1, "", "set_params"], [47, 1, 1, "", "transform"]], "julearn.transformers.confound_remover": [[48, 0, 1, "", "ConfoundRemover"]], "julearn.transformers.confound_remover.ConfoundRemover": [[48, 1, 1, "", "__init__"], [48, 1, 1, "", "filter_columns"], [48, 1, 1, "", "fit"], [48, 1, 1, "", "fit_transform"], [48, 1, 1, "", "get_apply_to"], [48, 1, 1, "", "get_feature_names_out"], [48, 1, 1, "", "get_metadata_routing"], [48, 1, 1, "", "get_needed_types"], [48, 1, 1, "", "get_params"], [48, 1, 1, "", "get_support"], [48, 1, 1, "", "set_output"], [48, 1, 1, "", "set_params"], [48, 1, 1, "", "transform"]], "julearn.transformers.target": [[53, 0, 1, "", "JuTargetTransformer"], [54, 0, 1, "", "JuTransformedTargetModel"], [55, 0, 1, "", "TargetConfoundRemover"], [56, 0, 1, "", "TransformedTargetWarning"], [57, 5, 1, "", "get_target_transformer"], [58, 5, 1, "", "list_target_transformers"], [59, 5, 1, "", "register_target_transformer"], [60, 5, 1, "", "reset_target_transformer_register"]], "julearn.transformers.target.JuTargetTransformer": [[53, 1, 1, "", "__init__"], [53, 1, 1, "", "fit"], [53, 1, 1, "", "fit_transform"], [53, 1, 1, "", "transform"]], "julearn.transformers.target.JuTransformedTargetModel": [[54, 1, 1, "", "__init__"], [54, 2, 1, "", "classes_"], [54, 1, 1, "", "decision_function"], [54, 1, 1, "", "filter_columns"], [54, 1, 1, "", "fit"], [54, 1, 1, "", "get_apply_to"], [54, 1, 1, "", "get_metadata_routing"], [54, 1, 1, "", "get_needed_types"], [54, 1, 1, "", "get_params"], [54, 1, 1, "", "predict"], [54, 1, 1, "", "predict_proba"], [54, 1, 1, "", "score"], [54, 1, 1, "", "set_params"], [54, 1, 1, "", "transform_target"]], "julearn.transformers.target.TargetConfoundRemover": [[55, 1, 1, "", "__init__"], [55, 1, 1, "", "fit"], [55, 1, 1, "", "fit_transform"], [55, 2, 1, "", "needed_types"], [55, 1, 1, "", "transform"]], "julearn.transformers.target.TransformedTargetWarning": [[56, 1, 1, "", "__init__"], [56, 4, 1, "", "args"], [56, 1, 1, "", "with_traceback"]], "julearn.utils": [[61, 5, 1, "", "configure_logging"], [62, 4, 1, "", "logger"], [63, 5, 1, "", "raise_error"], [81, 3, 0, "-", "typing"], [69, 5, 1, "", "warn_with_log"]], "julearn.utils.typing": [[64, 4, 1, "", "EstimatorLike"], [65, 0, 1, "", "EstimatorLikeFit1"], [66, 0, 1, "", "EstimatorLikeFit2"], [67, 0, 1, "", "EstimatorLikeFity"], [68, 0, 1, "", "JuEstimatorLike"]], "julearn.utils.typing.EstimatorLikeFit1": [[65, 1, 1, "", "__init__"], [65, 1, 1, "", "fit"], [65, 1, 1, "", "get_params"], [65, 1, 1, "", "set_params"]], "julearn.utils.typing.EstimatorLikeFit2": [[66, 1, 1, "", "__init__"], [66, 1, 1, "", "fit"], [66, 1, 1, "", "get_params"], [66, 1, 1, "", "set_params"]], "julearn.utils.typing.EstimatorLikeFity": [[67, 1, 1, "", "__init__"], [67, 1, 1, "", "fit"], [67, 1, 1, "", "get_params"], [67, 1, 1, "", "set_params"]], "julearn.utils.typing.JuEstimatorLike": [[68, 1, 1, "", "__init__"], [68, 1, 1, "", "fit"], [68, 1, 1, "", "get_apply_to"], [68, 1, 1, "", "get_needed_types"], [68, 1, 1, "", "get_params"], [68, 1, 1, "", "set_params"]], "julearn.viz": [[70, 5, 1, "", "plot_scores"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:module", "4": "py:attribute", "5": "py:function"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "module", "Python module"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "function", "Python function"]}, "titleterms": {"refer": [71, 87, 88, 95, 103, 104, 122, 123, 124, 130, 135], "main": 73, "api": [71, 73, 136], "function": [0, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 112], "model": [24, 25, 26, 27, 28, 74, 75, 91, 92, 95, 96, 100, 108, 114, 122, 125, 127, 128, 133, 134, 135], "transform": [42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 80, 101, 114], "log": [], "cross": [88, 95, 123, 124, 130, 134], "valid": [88, 95, 123, 124, 130, 134], "class": [0, 72, 74, 75, 76, 80, 81], "advanc": [], "exampl": [1, 2, 13, 14, 16, 19, 33, 36, 39, 41, 61, 70, 116, 117], "work": 87, "panda": 87, "from": 123, "long": [], "wide": [], "format": [], "merg": 87, "join": 87, "data": 131, "frame": [], "reshap": [], "more": 125, "complex": 100, "custom": [111, 112, 114], "score": [34, 35, 36, 37, 38, 39, 40, 78, 101, 112, 133, 134], "regress": [85, 86, 102, 112, 123], "tune": [103, 104, 125], "hyperparamet": [103, 104, 125, 135], "return": [109, 134], "confound": [107, 108, 109, 123], "remov": [108, 109, 123], "typic": 109, "us": [1, 2, 13, 14, 16, 19, 33, 36, 39, 41, 61, 70, 109, 118, 123, 135], "case": 109, "comput": [90, 93, 99, 106, 110, 113], "time": [90, 93, 99, 106, 110, 113], "basic": [], "multiclass": 84, "classif": [84, 89, 105], "comparison": [91, 92, 108, 133], "analysi": [85, 86, 102], "inspect": [12, 13, 14, 72, 94, 95, 96, 98, 127], "svm": 95, "deal": [88, 95], "techniqu": [88, 95], "random": 96, "forest": 96, "variabl": [96, 101], "import": 96, "stratifi": 86, "k": 86, "fold": [86, 98], "cv": [86, 88], "preprocess": [14, 97, 129, 135], "varianc": 97, "threshold": 97, "zscore": 97, "pca": 97, "parallel": [], "julearn": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 83, 115, 116, 120, 122, 123, 136], "simpl": [89, 92], "binari": 89, "contribut": 116, "set": [116, 135], "up": 116, "develop": 116, "environ": 116, "download": [], "sourc": [], "code": [], "creat": [], "virtual": [], "instal": 119, "requir": 119, "pull": 116, "request": 116, "fork": [], "github": 116, "repositori": [], "branch": [], "your": [], "modif": [], "do": 118, "chang": 136, "commit": [], "push": [], "test": 116, "build": [116, 135], "document": [116, 120, 136], "write": 116, "welcom": 120, "": [120, 136], "content": [117, 120, 126], "indic": 120, "tabl": [120, 126], "input": 131, "datafram": [87, 114], "recommend": [], "regular": [], "express": [], "numpi": [], "arrai": [], "latest": [], "releas": 121, "version": 121, "local": 116, "git": [], "maintain": 121, "new": [121, 136], "understand": [], "pipelin": [29, 30, 76, 114, 135], "problem": [], "type": [64, 65, 66, 67, 68, 81, 128, 131, 135], "concept": [], "inform": [], "The": [130, 134], "extend": [], "extendeddataframepipelin": [], "where": [], "behav": [], "usual": [], "caveat": [], "addit": [], "intern": [], "scorer": [], "avail": 114, "step": [30, 114], "featur": [114, 123, 128, 131, 135, 136], "scaler": 114, "select": [74, 75, 114, 126, 135], "decomposit": 114, "target": [53, 54, 55, 56, 57, 58, 59, 60, 80, 101, 123, 129], "support": 114, "vector": 114, "machin": 114, "ensembl": 114, "gaussian": 114, "process": 114, "linear": 114, "naiv": 114, "bay": 114, "dummi": 114, "what": [120, 132, 136], "current": [], "0": 136, "2": 136, "6": [], "dev": [], "enhanc": 136, "bug": [], "5": 136, "base": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 122], "pipelinecr": [1, 135], "targetpipelinecr": 2, "columntyp": 3, "columntypeslik": 4, "jubaseestim": 5, "jutransform": 6, "wrapmodel": 7, "change_column_typ": 8, "ensure_column_typ": 9, "get_column_typ": 10, "make_type_selector": 11, "foldsinspector": 12, "inspector": 13, "model_select": [15, 16, 17, 18, 19, 20, 21, 22, 23], "continuousstratifiedgroupkfold": 15, "continuousstratifiedkfold": 16, "repeatedcontinuousstratifiedgroupkfold": 17, "repeatedcontinuousstratifiedkfold": 18, "stratifiedbootstrap": 19, "get_search": 20, "list_search": 21, "register_search": 22, "reset_searcher_regist": 23, "dynam": [24, 75, 114], "dynamicselect": 24, "get_model": 25, "list_model": 26, "register_model": 27, "reset_model_regist": 28, "jutargetpipelin": 29, "pipeline_cr": 30, "prepar": [31, 32, 77], "check_consist": 31, "prepare_input_data": 32, "run_cross_valid": [33, 130, 131, 134, 135], "check_scor": 34, "get_scor": 35, "list_scor": 36, "metric": [37, 38, 78, 134], "r2_corr": 37, "r_corr": 38, "register_scor": 39, "reset_scorer_regist": 40, "stat": [41, 79], "corrected_ttest": 41, "cbpm": [42, 122], "changecolumntyp": 43, "dropcolumn": 44, "filtercolumn": 45, "jucolumntransform": 46, "setcolumntyp": 47, "confound_remov": 48, "confoundremov": 48, "get_transform": 49, "list_transform": 50, "register_transform": 51, "reset_transformer_regist": 52, "jutargettransform": 53, "jutransformedtargetmodel": 54, "targetconfoundremov": 55, "transformedtargetwarn": 56, "get_target_transform": 57, "list_target_transform": 58, "register_target_transform": 59, "reset_target_transformer_regist": 60, "util": [61, 62, 63, 64, 65, 66, 67, 68, 69, 81], "configure_log": 61, "logger": 62, "raise_error": 63, "estimatorlik": 64, "estimatorlikefit1": 65, "estimatorlikefit2": 66, "estimatorlikef": 67, "juestimatorlik": 68, "warn_with_log": 69, "viz": [70, 118], "plot_scor": 70, "deslib": 75, "vizual": [], "start": [83, 119], "group": [88, 124], "wise": 98, "predict": [98, 122], "z": 101, "multipl": 103, "grid": [103, 125], "stack": [105, 128], "overview": 114, "oper": 114, "estim": [114, 128, 134], "configur": 115, "guidelin": 116, "run": 116, "unit": 116, "ad": 116, "frequenli": [], "ask": [], "question": [], "how": 118, "i": [118, 120, 123], "interact": 118, "plot": 118, "get": 119, "setup": 119, "suggest": 119, "option": 119, "depend": [118, 119], "why": [120, 130], "connectom": 122, "consist": 123, "should": 123, "splitter": [124, 134], "stratif": 124, "paramet": 125, "v": 125, "searcher": 125, "than": 125, "one": 125, "deeper": 126, "topic": 126, "fit": 128, "each": 128, "all": 128, "specif": [128, 135], "appli": 129, "fundament": 130, "essenc": 130, "give": 131, "you": 132, "realli": 132, "need": 132, "know": 132, "statist": 133, "visual": [82, 133], "evalu": 134, "output": 134, "made": 135, "easi": 135, "2022": 136, "07": 136, "21": 136, "bugfix": 136, "improv": 136, "faq": 118, "have": 118, "issu": 118, "modul": 118}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"Base": [[0, "module-julearn.base"]], "Classes": [[0, "classes"], [72, "classes"], [74, "classes"], [75, "classes"], [76, "classes"], [80, "classes"], [80, "id1"], [81, "classes"], [81, "id1"]], "Functions": [[0, "functions"], [72, "functions"], [73, "functions"], [74, "functions"], [75, "functions"], [77, "functions"], [78, "functions"], [78, "id1"], [79, "functions"], [80, "functions"], [80, "id2"], [81, "functions"], [82, "functions"]], "julearn.PipelineCreator": [[1, "julearn-pipelinecreator"]], "Examples using julearn.PipelineCreator": [[1, "examples-using-julearn-pipelinecreator"]], "julearn.TargetPipelineCreator": [[2, "julearn-targetpipelinecreator"]], "Examples using julearn.TargetPipelineCreator": [[2, "examples-using-julearn-targetpipelinecreator"]], "julearn.base.ColumnTypes": [[3, "julearn-base-columntypes"]], "julearn.base.ColumnTypesLike": [[4, "julearn-base-columntypeslike"]], "julearn.base.JuBaseEstimator": [[5, "julearn-base-jubaseestimator"]], "julearn.base.JuTransformer": [[6, "julearn-base-jutransformer"]], "julearn.base.WrapModel": [[7, "julearn-base-wrapmodel"]], "julearn.base.change_column_type": [[8, "julearn-base-change-column-type"]], "julearn.base.ensure_column_types": [[9, "julearn-base-ensure-column-types"]], "julearn.base.get_column_type": [[10, "julearn-base-get-column-type"]], "julearn.base.make_type_selector": [[11, "julearn-base-make-type-selector"]], "julearn.inspect.FoldsInspector": [[12, "julearn-inspect-foldsinspector"]], "julearn.inspect.Inspector": [[13, "julearn-inspect-inspector"]], "Examples using julearn.inspect.Inspector": [[13, "examples-using-julearn-inspect-inspector"]], "julearn.inspect.preprocess": [[14, "julearn-inspect-preprocess"]], "Examples using julearn.inspect.preprocess": [[14, "examples-using-julearn-inspect-preprocess"]], "julearn.model_selection.ContinuousStratifiedGroupKFold": [[15, "julearn-model-selection-continuousstratifiedgroupkfold"]], "julearn.model_selection.ContinuousStratifiedKFold": [[16, "julearn-model-selection-continuousstratifiedkfold"]], "Examples using julearn.model_selection.ContinuousStratifiedKFold": [[16, "examples-using-julearn-model-selection-continuousstratifiedkfold"]], "julearn.model_selection.RepeatedContinuousStratifiedGroupKFold": [[17, "julearn-model-selection-repeatedcontinuousstratifiedgroupkfold"]], "julearn.model_selection.RepeatedContinuousStratifiedKFold": [[18, "julearn-model-selection-repeatedcontinuousstratifiedkfold"]], "julearn.model_selection.StratifiedBootstrap": [[19, "julearn-model-selection-stratifiedbootstrap"]], "Examples using julearn.model_selection.StratifiedBootstrap": [[19, "examples-using-julearn-model-selection-stratifiedbootstrap"]], "julearn.model_selection.get_searcher": [[20, "julearn-model-selection-get-searcher"]], "julearn.model_selection.list_searchers": [[21, "julearn-model-selection-list-searchers"]], "julearn.model_selection.register_searcher": [[22, "julearn-model-selection-register-searcher"]], "julearn.model_selection.reset_searcher_register": [[23, "julearn-model-selection-reset-searcher-register"]], "julearn.models.dynamic.DynamicSelection": [[24, "julearn-models-dynamic-dynamicselection"]], "julearn.models.get_model": [[25, "julearn-models-get-model"]], "julearn.models.list_models": [[26, "julearn-models-list-models"]], "julearn.models.register_model": [[27, "julearn-models-register-model"]], "julearn.models.reset_model_register": [[28, "julearn-models-reset-model-register"]], "julearn.pipeline.JuTargetPipeline": [[29, "julearn-pipeline-jutargetpipeline"]], "julearn.pipeline.pipeline_creator.Step": [[30, "julearn-pipeline-pipeline-creator-step"]], "julearn.prepare.check_consistency": [[31, "julearn-prepare-check-consistency"]], "julearn.prepare.prepare_input_data": [[32, "julearn-prepare-prepare-input-data"]], "julearn.run_cross_validation": [[33, "julearn-run-cross-validation"]], "Examples using julearn.run_cross_validation": [[33, "examples-using-julearn-run-cross-validation"]], "julearn.scoring.check_scoring": [[34, "julearn-scoring-check-scoring"]], "julearn.scoring.get_scorer": [[35, "julearn-scoring-get-scorer"]], "julearn.scoring.list_scorers": [[36, "julearn-scoring-list-scorers"]], "Examples using julearn.scoring.list_scorers": [[36, "examples-using-julearn-scoring-list-scorers"]], "julearn.scoring.metrics.r2_corr": [[37, "julearn-scoring-metrics-r2-corr"]], "julearn.scoring.metrics.r_corr": [[38, "julearn-scoring-metrics-r-corr"]], "julearn.scoring.register_scorer": [[39, "julearn-scoring-register-scorer"]], "Examples using julearn.scoring.register_scorer": [[39, "examples-using-julearn-scoring-register-scorer"]], "julearn.scoring.reset_scorer_register": [[40, "julearn-scoring-reset-scorer-register"]], "julearn.stats.corrected_ttest": [[41, "julearn-stats-corrected-ttest"]], "Examples using julearn.stats.corrected_ttest": [[41, "examples-using-julearn-stats-corrected-ttest"]], "julearn.transformers.CBPM": [[42, "julearn-transformers-cbpm"]], "julearn.transformers.ChangeColumnTypes": [[43, "julearn-transformers-changecolumntypes"]], "julearn.transformers.DropColumns": [[44, "julearn-transformers-dropcolumns"]], "julearn.transformers.FilterColumns": [[45, "julearn-transformers-filtercolumns"]], "julearn.transformers.JuColumnTransformer": [[46, "julearn-transformers-jucolumntransformer"]], "julearn.transformers.SetColumnTypes": [[47, "julearn-transformers-setcolumntypes"]], "julearn.transformers.confound_remover.ConfoundRemover": [[48, "julearn-transformers-confound-remover-confoundremover"]], "julearn.transformers.get_transformer": [[49, "julearn-transformers-get-transformer"]], "julearn.transformers.list_transformers": [[50, "julearn-transformers-list-transformers"]], "julearn.transformers.register_transformer": [[51, "julearn-transformers-register-transformer"]], "julearn.transformers.reset_transformer_register": [[52, "julearn-transformers-reset-transformer-register"]], "julearn.transformers.target.JuTargetTransformer": [[53, "julearn-transformers-target-jutargettransformer"]], "julearn.transformers.target.JuTransformedTargetModel": [[54, "julearn-transformers-target-jutransformedtargetmodel"]], "julearn.transformers.target.TargetConfoundRemover": [[55, "julearn-transformers-target-targetconfoundremover"]], "julearn.transformers.target.TransformedTargetWarning": [[56, "julearn-transformers-target-transformedtargetwarning"]], "julearn.transformers.target.get_target_transformer": [[57, "julearn-transformers-target-get-target-transformer"]], "julearn.transformers.target.list_target_transformers": [[58, "julearn-transformers-target-list-target-transformers"]], "julearn.transformers.target.register_target_transformer": [[59, "julearn-transformers-target-register-target-transformer"]], "julearn.transformers.target.reset_target_transformer_register": [[60, "julearn-transformers-target-reset-target-transformer-register"]], "julearn.utils.configure_logging": [[61, "julearn-utils-configure-logging"]], "Examples using julearn.utils.configure_logging": [[61, "examples-using-julearn-utils-configure-logging"]], "julearn.utils.logger": [[62, "julearn-utils-logger"]], "julearn.utils.raise_error": [[63, "julearn-utils-raise-error"]], "julearn.utils.typing.EstimatorLike": [[64, "julearn-utils-typing-estimatorlike"]], "julearn.utils.typing.EstimatorLikeFit1": [[65, "julearn-utils-typing-estimatorlikefit1"]], "julearn.utils.typing.EstimatorLikeFit2": [[66, "julearn-utils-typing-estimatorlikefit2"]], "julearn.utils.typing.EstimatorLikeFity": [[67, "julearn-utils-typing-estimatorlikefity"]], "julearn.utils.typing.JuEstimatorLike": [[68, "julearn-utils-typing-juestimatorlike"]], "julearn.utils.warn_with_log": [[69, "julearn-utils-warn-with-log"]], "julearn.viz.plot_scores": [[70, "julearn-viz-plot-scores"]], "Examples using julearn.viz.plot_scores": [[70, "examples-using-julearn-viz-plot-scores"]], "API Reference": [[71, "api-reference"]], "Inspect": [[72, "module-julearn.inspect"]], "Main API": [[73, "module-julearn.api"]], "Model Selection": [[74, "module-julearn.model_selection"]], "Models": [[75, "module-julearn.models"]], "Dynamic Selection (DESLib)": [[75, "dynamic-selection-deslib"]], "Pipeline": [[76, "module-julearn.pipeline"]], "Prepare": [[77, "module-julearn.prepare"]], "Scoring": [[78, "module-julearn.scoring"]], "Scoring Metrics": [[78, "module-julearn.scoring.metrics"]], "Stats": [[79, "module-julearn.stats"]], "Transformers": [[80, "module-julearn.transformers"], [114, "transformers"]], "Target Transformers": [[80, "module-julearn.transformers.target"]], "Utils": [[81, "module-julearn.utils"]], "Typing": [[81, "module-julearn.utils.typing"]], "Visualization": [[82, "visualization"]], "Starting with julearn": [[83, "starting-with-julearn"]], "Multiclass Classification": [[84, "multiclass-classification"]], "Regression Analysis": [[85, "regression-analysis"], [102, "regression-analysis"]], "Stratified K-fold CV for regression analysis": [[86, "stratified-k-fold-cv-for-regression-analysis"]], "Working with pandas": [[87, "working-with-pandas"]], "References": [[87, "references"], [88, "references"], [95, "references"], [103, "references"], [104, "references"]], "Merging or joining DataFrame": [[87, "merging-or-joining-dataframe"]], "Grouped CV": [[88, "grouped-cv"]], "Dealing with Cross-Validation techniques": [[88, "dealing-with-cross-validation-techniques"], [95, "dealing-with-cross-validation-techniques"]], "Simple Binary Classification": [[89, "simple-binary-classification"]], "Computation times": [[90, "computation-times"], [93, "computation-times"], [99, "computation-times"], [106, "computation-times"], [110, "computation-times"], [113, "computation-times"]], "Model Comparison": [[91, "model-comparison"]], "Simple Model Comparison": [[92, "simple-model-comparison"]], "Inspection": [[94, "inspection"]], "Inspecting SVM models": [[95, "inspecting-svm-models"]], "Inspecting Random Forest models": [[96, "inspecting-random-forest-models"]], "Random Forest variable importance": [[96, "random-forest-variable-importance"]], "Preprocessing with variance threshold, zscore and PCA": [[97, "preprocessing-with-variance-threshold-zscore-and-pca"]], "Inspecting the fold-wise predictions": [[98, "inspecting-the-fold-wise-predictions"]], "Complex Models": [[100, "complex-models"]], "Transforming target variable with z-score": [[101, "transforming-target-variable-with-z-score"]], "Tuning Multiple Hyperparameters Grids": [[103, "tuning-multiple-hyperparameters-grids"]], "Tuning Hyperparameters": [[104, "tuning-hyperparameters"]], "Stacking Classification": [[105, "stacking-classification"]], "Confounds": [[107, "confounds"]], "Confound Removal (model comparison)": [[108, "confound-removal-model-comparison"]], "Return Confounds in Confound Removal": [[109, "return-confounds-in-confound-removal"]], "Confound Removal Typical Use Case": [[109, "confound-removal-typical-use-case"]], "Customization": [[111, "customization"]], "Custom Scoring Function for Regression": [[112, "custom-scoring-function-for-regression"]], "Overview of available Pipeline Steps": [[114, "overview-of-available-pipeline-steps"]], "Scalers": [[114, "scalers"]], "Feature Selection": [[114, "feature-selection"]], "DataFrame operations": [[114, "dataframe-operations"]], "Decomposition": [[114, "decomposition"]], "Custom": [[114, "custom"]], "Models (Estimators)": [[114, "models-estimators"]], "Support Vector Machines": [[114, "support-vector-machines"]], "Ensemble": [[114, "ensemble"]], "Gaussian Processes": [[114, "gaussian-processes"]], "Linear Models": [[114, "linear-models"]], "Naive Bayes": [[114, "naive-bayes"]], "Dynamic Selection": [[114, "dynamic-selection"]], "Dummy": [[114, "dummy"]], "Configuring julearn": [[115, "configuring-julearn"]], "Contributing to julearn": [[116, "contributing-to-julearn"]], "Setting up the local development environment": [[116, "setting-up-the-local-development-environment"]], "GitHub Pull Request guidelines": [[116, "github-pull-request-guidelines"]], "Running unit tests": [[116, "running-unit-tests"]], "Adding and building documentation": [[116, "adding-and-building-documentation"]], "Writing Examples": [[116, "writing-examples"]], "Examples": [[117, "examples"]], "Contents:": [[117, null]], "FAQs": [[118, "faqs"]], "I have issues with the dependencies for the viz module.": [[118, "i-have-issues-with-the-dependencies-for-the-viz-module"]], "How do I use the viz interactive plots?": [[118, "how-do-i-use-the-viz-interactive-plots"]], "Getting started": [[119, "getting-started"]], "Requirements": [[119, "requirements"]], "Setup suggestion": [[119, "setup-suggestion"]], "Installing": [[119, "installing"]], "Optional Dependencies": [[119, "optional-dependencies"]], "Welcome to julearn\u2019s documentation!": [[120, "welcome-to-julearn-s-documentation"]], "What is Julearn?": [[120, "what-is-julearn"]], "Why Julearn?": [[120, "why-julearn"]], "Table of Contents": [[120, "table-of-contents"], [126, null]], "Indices and tables": [[120, "indices-and-tables"]], "Maintaining": [[121, "maintaining"]], "Versioning": [[121, "versioning"]], "Releasing a new version": [[121, "releasing-a-new-version"]], "Connectome-based Predictive Modeling (CBPM)": [[122, "connectome-based-predictive-modeling-cbpm"]], "CBPM in Julearn": [[122, "cbpm-in-julearn"]], "References:": [[122, null], [123, null], [124, null], [130, null], [135, null]], "Cross-validation consistent Confound Removal": [[123, "cross-validation-consistent-confound-removal"]], "Confound Removal in Julearn": [[123, "confound-removal-in-julearn"]], "Removing Confounds from the Features": [[123, "removing-confounds-from-the-features"]], "Removing Confounds from the Target": [[123, "removing-confounds-from-the-target"]], "Should I use Confound Regression?": [[123, "should-i-use-confound-regression"]], "Cross-validation splitters": [[124, "cross-validation-splitters"], [134, "cross-validation-splitters"]], "Stratification": [[124, "stratification"]], "Grouping": [[124, "grouping"]], "Hyperparameter Tuning": [[125, "hyperparameter-tuning"], [125, "id1"]], "Parameters vs Hyperparameters": [[125, "parameters-vs-hyperparameters"]], "Searchers": [[125, "searchers"]], "Tuning more than one grid": [[125, "tuning-more-than-one-grid"]], "Models as hyperparameters": [[125, "models-as-hyperparameters"]], "Selected deeper topics": [[126, "selected-deeper-topics"]], "Inspecting Models": [[127, "inspecting-models"]], "Stacking Models": [[128, "stacking-models"]], "Fitting each estimator on all of the features": [[128, "fitting-each-estimator-on-all-of-the-features"]], "Fitting each estimator on a specific feature type": [[128, "fitting-each-estimator-on-a-specific-feature-type"]], "Applying preprocessing to the target": [[129, "applying-preprocessing-to-the-target"]], "Why cross validation?": [[130, "why-cross-validation"]], "Cross-validation - The fundamentals": [[130, "cross-validation-the-fundamentals"]], "The essence of run_cross_validation()": [[130, "the-essence-of-run-cross-validation"]], "Data": [[131, "data"]], "Data input to run_cross_validation()": [[131, "data-input-to-run-cross-validation"]], "Giving types to features": [[131, "giving-types-to-features"]], "What you really need to know": [[132, "what-you-really-need-to-know"]], "Model comparison": [[133, "model-comparison"]], "Statistical comparisons": [[133, "statistical-comparisons"]], "Score visualizations": [[133, "score-visualizations"]], "Model Evaluation": [[134, "model-evaluation"]], "The output of run_cross_validation()": [[134, "the-output-of-run-cross-validation"]], "Cross-validation scores": [[134, "cross-validation-scores"]], "Returning a model (estimator)": [[134, "returning-a-model-estimator"]], "Scoring metrics": [[134, "scoring-metrics"]], "Model Building": [[135, "model-building"]], "Pipeline specification in run_cross_validation()": [[135, "pipeline-specification-in-run-cross-validation"]], "Feature preprocessing": [[135, "feature-preprocessing"]], "Pipeline specification made easy with the PipelineCreator": [[135, "pipeline-specification-made-easy-with-the-pipelinecreator"]], "Setting hyperparameters": [[135, "setting-hyperparameters"]], "Selective preprocessing using feature types": [[135, "selective-preprocessing-using-feature-types"]], "What\u2019s new": [[136, "what-s-new"]], "Julearn 0.2.5 (2022-07-21)": [[136, "julearn-0-2-5-2022-07-21"]], "API Changes": [[136, "api-changes"]], "Bugfixes": [[136, "bugfixes"]], "Improved Documentation": [[136, "improved-documentation"]], "Enhancements": [[136, "enhancements"]], "Features": [[136, "features"]]}, "indexentries": {"julearn.base": [[0, "module-julearn.base"]], "module": [[0, "module-julearn.base"], [72, "module-julearn.inspect"], [73, "module-julearn.api"], [74, "module-julearn.model_selection"], [75, "module-julearn.models"], [75, "module-julearn.models.dynamic"], [76, "module-julearn.pipeline"], [77, "module-julearn.prepare"], [78, "module-julearn.scoring"], [78, "module-julearn.scoring.metrics"], [79, "module-julearn.stats"], [80, "module-julearn.transformers"], [80, "module-julearn.transformers.target"], [81, "module-julearn.utils"], [81, "module-julearn.utils.typing"], [82, "module-julearn.viz"]], "pipelinecreator (class in julearn)": [[1, "julearn.PipelineCreator"]], "__init__() (julearn.pipelinecreator method)": [[1, "julearn.PipelineCreator.__init__"]], "add() (julearn.pipelinecreator method)": [[1, "julearn.PipelineCreator.add"]], "copy() (julearn.pipelinecreator method)": [[1, "julearn.PipelineCreator.copy"]], "from_list() (julearn.pipelinecreator class method)": [[1, "julearn.PipelineCreator.from_list"]], "has_model() (julearn.pipelinecreator method)": [[1, "julearn.PipelineCreator.has_model"]], "split() (julearn.pipelinecreator method)": [[1, "julearn.PipelineCreator.split"]], "steps (julearn.pipelinecreator property)": [[1, "julearn.PipelineCreator.steps"]], "to_pipeline() (julearn.pipelinecreator method)": [[1, "julearn.PipelineCreator.to_pipeline"]], "targetpipelinecreator (class in julearn)": [[2, "julearn.TargetPipelineCreator"]], "__init__() (julearn.targetpipelinecreator method)": [[2, "julearn.TargetPipelineCreator.__init__"]], "add() (julearn.targetpipelinecreator method)": [[2, "julearn.TargetPipelineCreator.add"]], "to_pipeline() (julearn.targetpipelinecreator method)": [[2, "julearn.TargetPipelineCreator.to_pipeline"]], "columntypes (class in julearn.base)": [[3, "julearn.base.ColumnTypes"]], "__init__() (julearn.base.columntypes method)": [[3, "julearn.base.ColumnTypes.__init__"]], "add() (julearn.base.columntypes method)": [[3, "julearn.base.ColumnTypes.add"]], "copy() (julearn.base.columntypes method)": [[3, "julearn.base.ColumnTypes.copy"]], "pattern (julearn.base.columntypes property)": [[3, "julearn.base.ColumnTypes.pattern"]], "to_type_selector() (julearn.base.columntypes method)": [[3, "julearn.base.ColumnTypes.to_type_selector"]], "columntypeslike (in module julearn.base)": [[4, "julearn.base.ColumnTypesLike"]], "jubaseestimator (class in julearn.base)": [[5, "julearn.base.JuBaseEstimator"]], "__init__() (julearn.base.jubaseestimator method)": [[5, "julearn.base.JuBaseEstimator.__init__"]], "filter_columns() (julearn.base.jubaseestimator method)": [[5, "julearn.base.JuBaseEstimator.filter_columns"]], "get_apply_to() (julearn.base.jubaseestimator method)": [[5, "julearn.base.JuBaseEstimator.get_apply_to"]], "get_metadata_routing() (julearn.base.jubaseestimator method)": [[5, "julearn.base.JuBaseEstimator.get_metadata_routing"]], "get_needed_types() (julearn.base.jubaseestimator method)": [[5, "julearn.base.JuBaseEstimator.get_needed_types"]], "get_params() (julearn.base.jubaseestimator method)": [[5, "julearn.base.JuBaseEstimator.get_params"]], "set_params() (julearn.base.jubaseestimator method)": [[5, "julearn.base.JuBaseEstimator.set_params"]], "jutransformer (class in julearn.base)": [[6, "julearn.base.JuTransformer"]], "__init__() (julearn.base.jutransformer method)": [[6, "julearn.base.JuTransformer.__init__"]], "filter_columns() (julearn.base.jutransformer method)": [[6, "julearn.base.JuTransformer.filter_columns"]], "fit() (julearn.base.jutransformer method)": [[6, "julearn.base.JuTransformer.fit"]], "fit_transform() (julearn.base.jutransformer method)": [[6, "julearn.base.JuTransformer.fit_transform"]], "get_apply_to() (julearn.base.jutransformer method)": [[6, "julearn.base.JuTransformer.get_apply_to"]], "get_metadata_routing() (julearn.base.jutransformer method)": [[6, "julearn.base.JuTransformer.get_metadata_routing"]], "get_needed_types() (julearn.base.jutransformer method)": [[6, "julearn.base.JuTransformer.get_needed_types"]], "get_params() (julearn.base.jutransformer method)": [[6, "julearn.base.JuTransformer.get_params"]], "set_output() (julearn.base.jutransformer method)": [[6, "julearn.base.JuTransformer.set_output"]], "set_params() (julearn.base.jutransformer method)": [[6, "julearn.base.JuTransformer.set_params"]], "wrapmodel (class in julearn.base)": [[7, "julearn.base.WrapModel"]], "__init__() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.__init__"]], "classes_ (julearn.base.wrapmodel property)": [[7, "julearn.base.WrapModel.classes_"]], "decision_function() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.decision_function"]], "filter_columns() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.filter_columns"]], "fit() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.fit"]], "get_apply_to() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.get_apply_to"]], "get_metadata_routing() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.get_metadata_routing"]], "get_needed_types() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.get_needed_types"]], "get_params() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.get_params"]], "predict() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.predict"]], "predict_log_proba() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.predict_log_proba"]], "predict_proba() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.predict_proba"]], "score() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.score"]], "set_params() (julearn.base.wrapmodel method)": [[7, "julearn.base.WrapModel.set_params"]], "change_column_type() (in module julearn.base)": [[8, "julearn.base.change_column_type"]], "ensure_column_types() (in module julearn.base)": [[9, "julearn.base.ensure_column_types"]], "get_column_type() (in module julearn.base)": [[10, "julearn.base.get_column_type"]], "make_type_selector() (in module julearn.base)": [[11, "julearn.base.make_type_selector"]], "foldsinspector (class in julearn.inspect)": [[12, "julearn.inspect.FoldsInspector"]], "__init__() (julearn.inspect.foldsinspector method)": [[12, "julearn.inspect.FoldsInspector.__init__"]], "decision_function() (julearn.inspect.foldsinspector method)": [[12, "julearn.inspect.FoldsInspector.decision_function"]], "predict() (julearn.inspect.foldsinspector method)": [[12, "julearn.inspect.FoldsInspector.predict"]], "predict_log_proba() (julearn.inspect.foldsinspector method)": [[12, "julearn.inspect.FoldsInspector.predict_log_proba"]], "predict_proba() (julearn.inspect.foldsinspector method)": [[12, "julearn.inspect.FoldsInspector.predict_proba"]], "inspector (class in julearn.inspect)": [[13, "julearn.inspect.Inspector"]], "__init__() (julearn.inspect.inspector method)": [[13, "julearn.inspect.Inspector.__init__"]], "folds (julearn.inspect.inspector property)": [[13, "julearn.inspect.Inspector.folds"]], "model (julearn.inspect.inspector property)": [[13, "julearn.inspect.Inspector.model"]], "preprocess() (in module julearn.inspect)": [[14, "julearn.inspect.preprocess"]], "continuousstratifiedgroupkfold (class in julearn.model_selection)": [[15, "julearn.model_selection.ContinuousStratifiedGroupKFold"]], "__init__() (julearn.model_selection.continuousstratifiedgroupkfold method)": [[15, "julearn.model_selection.ContinuousStratifiedGroupKFold.__init__"]], "get_metadata_routing() (julearn.model_selection.continuousstratifiedgroupkfold method)": [[15, "julearn.model_selection.ContinuousStratifiedGroupKFold.get_metadata_routing"]], "get_n_splits() (julearn.model_selection.continuousstratifiedgroupkfold method)": [[15, "julearn.model_selection.ContinuousStratifiedGroupKFold.get_n_splits"]], "set_split_request() (julearn.model_selection.continuousstratifiedgroupkfold method)": [[15, "julearn.model_selection.ContinuousStratifiedGroupKFold.set_split_request"]], "split() (julearn.model_selection.continuousstratifiedgroupkfold method)": [[15, "julearn.model_selection.ContinuousStratifiedGroupKFold.split"]], "continuousstratifiedkfold (class in julearn.model_selection)": [[16, "julearn.model_selection.ContinuousStratifiedKFold"]], "__init__() (julearn.model_selection.continuousstratifiedkfold method)": [[16, "julearn.model_selection.ContinuousStratifiedKFold.__init__"]], "get_metadata_routing() (julearn.model_selection.continuousstratifiedkfold method)": [[16, "julearn.model_selection.ContinuousStratifiedKFold.get_metadata_routing"]], "get_n_splits() (julearn.model_selection.continuousstratifiedkfold method)": [[16, "julearn.model_selection.ContinuousStratifiedKFold.get_n_splits"]], "split() (julearn.model_selection.continuousstratifiedkfold method)": [[16, "julearn.model_selection.ContinuousStratifiedKFold.split"]], "repeatedcontinuousstratifiedgroupkfold (class in julearn.model_selection)": [[17, "julearn.model_selection.RepeatedContinuousStratifiedGroupKFold"]], "__init__() (julearn.model_selection.repeatedcontinuousstratifiedgroupkfold method)": [[17, "julearn.model_selection.RepeatedContinuousStratifiedGroupKFold.__init__"]], "get_metadata_routing() (julearn.model_selection.repeatedcontinuousstratifiedgroupkfold method)": [[17, "julearn.model_selection.RepeatedContinuousStratifiedGroupKFold.get_metadata_routing"]], "get_n_splits() (julearn.model_selection.repeatedcontinuousstratifiedgroupkfold method)": [[17, "julearn.model_selection.RepeatedContinuousStratifiedGroupKFold.get_n_splits"]], "split() (julearn.model_selection.repeatedcontinuousstratifiedgroupkfold method)": [[17, "julearn.model_selection.RepeatedContinuousStratifiedGroupKFold.split"]], "repeatedcontinuousstratifiedkfold (class in julearn.model_selection)": [[18, "julearn.model_selection.RepeatedContinuousStratifiedKFold"]], "__init__() (julearn.model_selection.repeatedcontinuousstratifiedkfold method)": [[18, "julearn.model_selection.RepeatedContinuousStratifiedKFold.__init__"]], "get_metadata_routing() (julearn.model_selection.repeatedcontinuousstratifiedkfold method)": [[18, "julearn.model_selection.RepeatedContinuousStratifiedKFold.get_metadata_routing"]], "get_n_splits() (julearn.model_selection.repeatedcontinuousstratifiedkfold method)": [[18, "julearn.model_selection.RepeatedContinuousStratifiedKFold.get_n_splits"]], "split() (julearn.model_selection.repeatedcontinuousstratifiedkfold method)": [[18, "julearn.model_selection.RepeatedContinuousStratifiedKFold.split"]], "stratifiedbootstrap (class in julearn.model_selection)": [[19, "julearn.model_selection.StratifiedBootstrap"]], "__init__() (julearn.model_selection.stratifiedbootstrap method)": [[19, "julearn.model_selection.StratifiedBootstrap.__init__"]], "get_metadata_routing() (julearn.model_selection.stratifiedbootstrap method)": [[19, "julearn.model_selection.StratifiedBootstrap.get_metadata_routing"]], "get_n_splits() (julearn.model_selection.stratifiedbootstrap method)": [[19, "julearn.model_selection.StratifiedBootstrap.get_n_splits"]], "split() (julearn.model_selection.stratifiedbootstrap method)": [[19, "julearn.model_selection.StratifiedBootstrap.split"]], "get_searcher() (in module julearn.model_selection)": [[20, "julearn.model_selection.get_searcher"]], "list_searchers() (in module julearn.model_selection)": [[21, "julearn.model_selection.list_searchers"]], "register_searcher() (in module julearn.model_selection)": [[22, "julearn.model_selection.register_searcher"]], "reset_searcher_register() (in module julearn.model_selection)": [[23, "julearn.model_selection.reset_searcher_register"]], "dynamicselection (class in julearn.models.dynamic)": [[24, "julearn.models.dynamic.DynamicSelection"]], "__init__() (julearn.models.dynamic.dynamicselection method)": [[24, "julearn.models.dynamic.DynamicSelection.__init__"]], "fit() (julearn.models.dynamic.dynamicselection method)": [[24, "julearn.models.dynamic.DynamicSelection.fit"]], "get_metadata_routing() (julearn.models.dynamic.dynamicselection method)": [[24, "julearn.models.dynamic.DynamicSelection.get_metadata_routing"]], "get_params() (julearn.models.dynamic.dynamicselection method)": [[24, "julearn.models.dynamic.DynamicSelection.get_params"]], "predict() (julearn.models.dynamic.dynamicselection method)": [[24, "julearn.models.dynamic.DynamicSelection.predict"]], "predict_proba() (julearn.models.dynamic.dynamicselection method)": [[24, "julearn.models.dynamic.DynamicSelection.predict_proba"]], "score() (julearn.models.dynamic.dynamicselection method)": [[24, "julearn.models.dynamic.DynamicSelection.score"]], "set_params() (julearn.models.dynamic.dynamicselection method)": [[24, "julearn.models.dynamic.DynamicSelection.set_params"]], "set_score_request() (julearn.models.dynamic.dynamicselection method)": [[24, "julearn.models.dynamic.DynamicSelection.set_score_request"]], "get_model() (in module julearn.models)": [[25, "julearn.models.get_model"]], "list_models() (in module julearn.models)": [[26, "julearn.models.list_models"]], "register_model() (in module julearn.models)": [[27, "julearn.models.register_model"]], "reset_model_register() (in module julearn.models)": [[28, "julearn.models.reset_model_register"]], "jutargetpipeline (class in julearn.pipeline)": [[29, "julearn.pipeline.JuTargetPipeline"]], "__init__() (julearn.pipeline.jutargetpipeline method)": [[29, "julearn.pipeline.JuTargetPipeline.__init__"]], "can_inverse_transform() (julearn.pipeline.jutargetpipeline method)": [[29, "julearn.pipeline.JuTargetPipeline.can_inverse_transform"]], "fit() (julearn.pipeline.jutargetpipeline method)": [[29, "julearn.pipeline.JuTargetPipeline.fit"]], "fit_transform() (julearn.pipeline.jutargetpipeline method)": [[29, "julearn.pipeline.JuTargetPipeline.fit_transform"]], "inverse_transform() (julearn.pipeline.jutargetpipeline method)": [[29, "julearn.pipeline.JuTargetPipeline.inverse_transform"]], "needed_types (julearn.pipeline.jutargetpipeline property)": [[29, "julearn.pipeline.JuTargetPipeline.needed_types"]], "transform() (julearn.pipeline.jutargetpipeline method)": [[29, "julearn.pipeline.JuTargetPipeline.transform"]], "step (class in julearn.pipeline.pipeline_creator)": [[30, "julearn.pipeline.pipeline_creator.Step"]], "__init__() (julearn.pipeline.pipeline_creator.step method)": [[30, "julearn.pipeline.pipeline_creator.Step.__init__"]], "apply_to (julearn.pipeline.pipeline_creator.step attribute)": [[30, "julearn.pipeline.pipeline_creator.Step.apply_to"]], "estimator (julearn.pipeline.pipeline_creator.step attribute)": [[30, "julearn.pipeline.pipeline_creator.Step.estimator"]], "name (julearn.pipeline.pipeline_creator.step attribute)": [[30, "julearn.pipeline.pipeline_creator.Step.name"]], "needed_types (julearn.pipeline.pipeline_creator.step attribute)": [[30, "julearn.pipeline.pipeline_creator.Step.needed_types"]], "params_to_tune (julearn.pipeline.pipeline_creator.step attribute)": [[30, "julearn.pipeline.pipeline_creator.Step.params_to_tune"]], "row_select_col_type (julearn.pipeline.pipeline_creator.step attribute)": [[30, "julearn.pipeline.pipeline_creator.Step.row_select_col_type"]], "row_select_vals (julearn.pipeline.pipeline_creator.step attribute)": [[30, "julearn.pipeline.pipeline_creator.Step.row_select_vals"]], "check_consistency() (in module julearn.prepare)": [[31, "julearn.prepare.check_consistency"]], "prepare_input_data() (in module julearn.prepare)": [[32, "julearn.prepare.prepare_input_data"]], "run_cross_validation() (in module julearn)": [[33, "julearn.run_cross_validation"]], "check_scoring() (in module julearn.scoring)": [[34, "julearn.scoring.check_scoring"]], "get_scorer() (in module julearn.scoring)": [[35, "julearn.scoring.get_scorer"]], "list_scorers() (in module julearn.scoring)": [[36, "julearn.scoring.list_scorers"]], "r2_corr() (in module julearn.scoring.metrics)": [[37, "julearn.scoring.metrics.r2_corr"]], "r_corr() (in module julearn.scoring.metrics)": [[38, "julearn.scoring.metrics.r_corr"]], "register_scorer() (in module julearn.scoring)": [[39, "julearn.scoring.register_scorer"]], "reset_scorer_register() (in module julearn.scoring)": [[40, "julearn.scoring.reset_scorer_register"]], "corrected_ttest() (in module julearn.stats)": [[41, "julearn.stats.corrected_ttest"]], "cbpm (class in julearn.transformers)": [[42, "julearn.transformers.CBPM"]], "__init__() (julearn.transformers.cbpm method)": [[42, "julearn.transformers.CBPM.__init__"]], "aggregate() (julearn.transformers.cbpm method)": [[42, "julearn.transformers.CBPM.aggregate"]], "fit() (julearn.transformers.cbpm method)": [[42, "julearn.transformers.CBPM.fit"]], "fit_transform() (julearn.transformers.cbpm method)": [[42, "julearn.transformers.CBPM.fit_transform"]], "get_feature_names_out() (julearn.transformers.cbpm method)": [[42, "julearn.transformers.CBPM.get_feature_names_out"]], "get_metadata_routing() (julearn.transformers.cbpm method)": [[42, "julearn.transformers.CBPM.get_metadata_routing"]], "get_params() (julearn.transformers.cbpm method)": [[42, "julearn.transformers.CBPM.get_params"]], "set_output() (julearn.transformers.cbpm method)": [[42, "julearn.transformers.CBPM.set_output"]], "set_params() (julearn.transformers.cbpm method)": [[42, "julearn.transformers.CBPM.set_params"]], "transform() (julearn.transformers.cbpm method)": [[42, "julearn.transformers.CBPM.transform"]], "changecolumntypes (class in julearn.transformers)": [[43, "julearn.transformers.ChangeColumnTypes"]], "__init__() (julearn.transformers.changecolumntypes method)": [[43, "julearn.transformers.ChangeColumnTypes.__init__"]], "filter_columns() (julearn.transformers.changecolumntypes method)": [[43, "julearn.transformers.ChangeColumnTypes.filter_columns"]], "fit() (julearn.transformers.changecolumntypes method)": [[43, "julearn.transformers.ChangeColumnTypes.fit"]], "fit_transform() (julearn.transformers.changecolumntypes method)": [[43, "julearn.transformers.ChangeColumnTypes.fit_transform"]], "get_apply_to() (julearn.transformers.changecolumntypes method)": [[43, "julearn.transformers.ChangeColumnTypes.get_apply_to"]], "get_feature_names_out() (julearn.transformers.changecolumntypes method)": [[43, "julearn.transformers.ChangeColumnTypes.get_feature_names_out"]], "get_metadata_routing() (julearn.transformers.changecolumntypes method)": [[43, "julearn.transformers.ChangeColumnTypes.get_metadata_routing"]], "get_needed_types() (julearn.transformers.changecolumntypes method)": [[43, "julearn.transformers.ChangeColumnTypes.get_needed_types"]], "get_params() (julearn.transformers.changecolumntypes method)": [[43, "julearn.transformers.ChangeColumnTypes.get_params"]], "set_output() (julearn.transformers.changecolumntypes method)": [[43, "julearn.transformers.ChangeColumnTypes.set_output"]], "set_params() (julearn.transformers.changecolumntypes method)": [[43, "julearn.transformers.ChangeColumnTypes.set_params"]], "transform() (julearn.transformers.changecolumntypes method)": [[43, "julearn.transformers.ChangeColumnTypes.transform"]], "dropcolumns (class in julearn.transformers)": [[44, "julearn.transformers.DropColumns"]], "__init__() (julearn.transformers.dropcolumns method)": [[44, "julearn.transformers.DropColumns.__init__"]], "filter_columns() (julearn.transformers.dropcolumns method)": [[44, "julearn.transformers.DropColumns.filter_columns"]], "fit() (julearn.transformers.dropcolumns method)": [[44, "julearn.transformers.DropColumns.fit"]], "fit_transform() (julearn.transformers.dropcolumns method)": [[44, "julearn.transformers.DropColumns.fit_transform"]], "get_apply_to() (julearn.transformers.dropcolumns method)": [[44, "julearn.transformers.DropColumns.get_apply_to"]], "get_metadata_routing() (julearn.transformers.dropcolumns method)": [[44, "julearn.transformers.DropColumns.get_metadata_routing"]], "get_needed_types() (julearn.transformers.dropcolumns method)": [[44, "julearn.transformers.DropColumns.get_needed_types"]], "get_params() (julearn.transformers.dropcolumns method)": [[44, "julearn.transformers.DropColumns.get_params"]], "get_support() (julearn.transformers.dropcolumns method)": [[44, "julearn.transformers.DropColumns.get_support"]], "set_output() (julearn.transformers.dropcolumns method)": [[44, "julearn.transformers.DropColumns.set_output"]], "set_params() (julearn.transformers.dropcolumns method)": [[44, "julearn.transformers.DropColumns.set_params"]], "transform() (julearn.transformers.dropcolumns method)": [[44, "julearn.transformers.DropColumns.transform"]], "filtercolumns (class in julearn.transformers)": [[45, "julearn.transformers.FilterColumns"]], "__init__() (julearn.transformers.filtercolumns method)": [[45, "julearn.transformers.FilterColumns.__init__"]], "filter_columns() (julearn.transformers.filtercolumns method)": [[45, "julearn.transformers.FilterColumns.filter_columns"]], "fit() (julearn.transformers.filtercolumns method)": [[45, "julearn.transformers.FilterColumns.fit"]], "fit_transform() (julearn.transformers.filtercolumns method)": [[45, "julearn.transformers.FilterColumns.fit_transform"]], "get_apply_to() (julearn.transformers.filtercolumns method)": [[45, "julearn.transformers.FilterColumns.get_apply_to"]], "get_feature_names_out() (julearn.transformers.filtercolumns method)": [[45, "julearn.transformers.FilterColumns.get_feature_names_out"]], "get_metadata_routing() (julearn.transformers.filtercolumns method)": [[45, "julearn.transformers.FilterColumns.get_metadata_routing"]], "get_needed_types() (julearn.transformers.filtercolumns method)": [[45, "julearn.transformers.FilterColumns.get_needed_types"]], "get_params() (julearn.transformers.filtercolumns method)": [[45, "julearn.transformers.FilterColumns.get_params"]], "set_output() (julearn.transformers.filtercolumns method)": [[45, "julearn.transformers.FilterColumns.set_output"]], "set_params() (julearn.transformers.filtercolumns method)": [[45, "julearn.transformers.FilterColumns.set_params"]], "transform() (julearn.transformers.filtercolumns method)": [[45, "julearn.transformers.FilterColumns.transform"]], "jucolumntransformer (class in julearn.transformers)": [[46, "julearn.transformers.JuColumnTransformer"]], "__init__() (julearn.transformers.jucolumntransformer method)": [[46, "julearn.transformers.JuColumnTransformer.__init__"]], "filter_columns() (julearn.transformers.jucolumntransformer method)": [[46, "julearn.transformers.JuColumnTransformer.filter_columns"]], "fit() (julearn.transformers.jucolumntransformer method)": [[46, "julearn.transformers.JuColumnTransformer.fit"]], "fit_transform() (julearn.transformers.jucolumntransformer method)": [[46, "julearn.transformers.JuColumnTransformer.fit_transform"]], "get_apply_to() (julearn.transformers.jucolumntransformer method)": [[46, "julearn.transformers.JuColumnTransformer.get_apply_to"]], "get_feature_names_out() (julearn.transformers.jucolumntransformer method)": [[46, "julearn.transformers.JuColumnTransformer.get_feature_names_out"]], "get_metadata_routing() (julearn.transformers.jucolumntransformer method)": [[46, "julearn.transformers.JuColumnTransformer.get_metadata_routing"]], "get_needed_types() (julearn.transformers.jucolumntransformer method)": [[46, "julearn.transformers.JuColumnTransformer.get_needed_types"]], "get_params() (julearn.transformers.jucolumntransformer method)": [[46, "julearn.transformers.JuColumnTransformer.get_params"]], "set_output() (julearn.transformers.jucolumntransformer method)": [[46, "julearn.transformers.JuColumnTransformer.set_output"]], "set_params() (julearn.transformers.jucolumntransformer method)": [[46, "julearn.transformers.JuColumnTransformer.set_params"]], "transform() (julearn.transformers.jucolumntransformer method)": [[46, "julearn.transformers.JuColumnTransformer.transform"]], "setcolumntypes (class in julearn.transformers)": [[47, "julearn.transformers.SetColumnTypes"]], "__init__() (julearn.transformers.setcolumntypes method)": [[47, "julearn.transformers.SetColumnTypes.__init__"]], "filter_columns() (julearn.transformers.setcolumntypes method)": [[47, "julearn.transformers.SetColumnTypes.filter_columns"]], "fit() (julearn.transformers.setcolumntypes method)": [[47, "julearn.transformers.SetColumnTypes.fit"]], "fit_transform() (julearn.transformers.setcolumntypes method)": [[47, "julearn.transformers.SetColumnTypes.fit_transform"]], "get_apply_to() (julearn.transformers.setcolumntypes method)": [[47, "julearn.transformers.SetColumnTypes.get_apply_to"]], "get_feature_names_out() (julearn.transformers.setcolumntypes method)": [[47, "julearn.transformers.SetColumnTypes.get_feature_names_out"]], "get_metadata_routing() (julearn.transformers.setcolumntypes method)": [[47, "julearn.transformers.SetColumnTypes.get_metadata_routing"]], "get_needed_types() (julearn.transformers.setcolumntypes method)": [[47, "julearn.transformers.SetColumnTypes.get_needed_types"]], "get_params() (julearn.transformers.setcolumntypes method)": [[47, "julearn.transformers.SetColumnTypes.get_params"]], "set_output() (julearn.transformers.setcolumntypes method)": [[47, "julearn.transformers.SetColumnTypes.set_output"]], "set_params() (julearn.transformers.setcolumntypes method)": [[47, "julearn.transformers.SetColumnTypes.set_params"]], "transform() (julearn.transformers.setcolumntypes method)": [[47, "julearn.transformers.SetColumnTypes.transform"]], "confoundremover (class in julearn.transformers.confound_remover)": [[48, "julearn.transformers.confound_remover.ConfoundRemover"]], "__init__() (julearn.transformers.confound_remover.confoundremover method)": [[48, "julearn.transformers.confound_remover.ConfoundRemover.__init__"]], "filter_columns() (julearn.transformers.confound_remover.confoundremover method)": [[48, "julearn.transformers.confound_remover.ConfoundRemover.filter_columns"]], "fit() (julearn.transformers.confound_remover.confoundremover method)": [[48, "julearn.transformers.confound_remover.ConfoundRemover.fit"]], "fit_transform() (julearn.transformers.confound_remover.confoundremover method)": [[48, "julearn.transformers.confound_remover.ConfoundRemover.fit_transform"]], "get_apply_to() (julearn.transformers.confound_remover.confoundremover method)": [[48, "julearn.transformers.confound_remover.ConfoundRemover.get_apply_to"]], "get_feature_names_out() (julearn.transformers.confound_remover.confoundremover method)": [[48, "julearn.transformers.confound_remover.ConfoundRemover.get_feature_names_out"]], "get_metadata_routing() (julearn.transformers.confound_remover.confoundremover method)": [[48, "julearn.transformers.confound_remover.ConfoundRemover.get_metadata_routing"]], "get_needed_types() (julearn.transformers.confound_remover.confoundremover method)": [[48, "julearn.transformers.confound_remover.ConfoundRemover.get_needed_types"]], "get_params() (julearn.transformers.confound_remover.confoundremover method)": [[48, "julearn.transformers.confound_remover.ConfoundRemover.get_params"]], "get_support() (julearn.transformers.confound_remover.confoundremover method)": [[48, "julearn.transformers.confound_remover.ConfoundRemover.get_support"]], "set_output() (julearn.transformers.confound_remover.confoundremover method)": [[48, "julearn.transformers.confound_remover.ConfoundRemover.set_output"]], "set_params() (julearn.transformers.confound_remover.confoundremover method)": [[48, "julearn.transformers.confound_remover.ConfoundRemover.set_params"]], "transform() (julearn.transformers.confound_remover.confoundremover method)": [[48, "julearn.transformers.confound_remover.ConfoundRemover.transform"]], "get_transformer() (in module julearn.transformers)": [[49, "julearn.transformers.get_transformer"]], "list_transformers() (in module julearn.transformers)": [[50, "julearn.transformers.list_transformers"]], "register_transformer() (in module julearn.transformers)": [[51, "julearn.transformers.register_transformer"]], "reset_transformer_register() (in module julearn.transformers)": [[52, "julearn.transformers.reset_transformer_register"]], "jutargettransformer (class in julearn.transformers.target)": [[53, "julearn.transformers.target.JuTargetTransformer"]], "__init__() (julearn.transformers.target.jutargettransformer method)": [[53, "julearn.transformers.target.JuTargetTransformer.__init__"]], "fit() (julearn.transformers.target.jutargettransformer method)": [[53, "julearn.transformers.target.JuTargetTransformer.fit"]], "fit_transform() (julearn.transformers.target.jutargettransformer method)": [[53, "julearn.transformers.target.JuTargetTransformer.fit_transform"]], "transform() (julearn.transformers.target.jutargettransformer method)": [[53, "julearn.transformers.target.JuTargetTransformer.transform"]], "jutransformedtargetmodel (class in julearn.transformers.target)": [[54, "julearn.transformers.target.JuTransformedTargetModel"]], "__init__() (julearn.transformers.target.jutransformedtargetmodel method)": [[54, "julearn.transformers.target.JuTransformedTargetModel.__init__"]], "classes_ (julearn.transformers.target.jutransformedtargetmodel property)": [[54, "julearn.transformers.target.JuTransformedTargetModel.classes_"]], "decision_function() (julearn.transformers.target.jutransformedtargetmodel method)": [[54, "julearn.transformers.target.JuTransformedTargetModel.decision_function"]], "filter_columns() (julearn.transformers.target.jutransformedtargetmodel method)": [[54, "julearn.transformers.target.JuTransformedTargetModel.filter_columns"]], "fit() (julearn.transformers.target.jutransformedtargetmodel method)": [[54, "julearn.transformers.target.JuTransformedTargetModel.fit"]], "get_apply_to() (julearn.transformers.target.jutransformedtargetmodel method)": [[54, "julearn.transformers.target.JuTransformedTargetModel.get_apply_to"]], "get_metadata_routing() (julearn.transformers.target.jutransformedtargetmodel method)": [[54, "julearn.transformers.target.JuTransformedTargetModel.get_metadata_routing"]], "get_needed_types() (julearn.transformers.target.jutransformedtargetmodel method)": [[54, "julearn.transformers.target.JuTransformedTargetModel.get_needed_types"]], "get_params() (julearn.transformers.target.jutransformedtargetmodel method)": [[54, "julearn.transformers.target.JuTransformedTargetModel.get_params"]], "predict() (julearn.transformers.target.jutransformedtargetmodel method)": [[54, "julearn.transformers.target.JuTransformedTargetModel.predict"]], "predict_proba() (julearn.transformers.target.jutransformedtargetmodel method)": [[54, "julearn.transformers.target.JuTransformedTargetModel.predict_proba"]], "score() (julearn.transformers.target.jutransformedtargetmodel method)": [[54, "julearn.transformers.target.JuTransformedTargetModel.score"]], "set_params() (julearn.transformers.target.jutransformedtargetmodel method)": [[54, "julearn.transformers.target.JuTransformedTargetModel.set_params"]], "transform_target() (julearn.transformers.target.jutransformedtargetmodel method)": [[54, "julearn.transformers.target.JuTransformedTargetModel.transform_target"]], "targetconfoundremover (class in julearn.transformers.target)": [[55, "julearn.transformers.target.TargetConfoundRemover"]], "__init__() (julearn.transformers.target.targetconfoundremover method)": [[55, "julearn.transformers.target.TargetConfoundRemover.__init__"]], "fit() (julearn.transformers.target.targetconfoundremover method)": [[55, "julearn.transformers.target.TargetConfoundRemover.fit"]], "fit_transform() (julearn.transformers.target.targetconfoundremover method)": [[55, "julearn.transformers.target.TargetConfoundRemover.fit_transform"]], "needed_types (julearn.transformers.target.targetconfoundremover property)": [[55, "julearn.transformers.target.TargetConfoundRemover.needed_types"]], "transform() (julearn.transformers.target.targetconfoundremover method)": [[55, "julearn.transformers.target.TargetConfoundRemover.transform"]], "transformedtargetwarning (class in julearn.transformers.target)": [[56, "julearn.transformers.target.TransformedTargetWarning"]], "__init__() (julearn.transformers.target.transformedtargetwarning method)": [[56, "julearn.transformers.target.TransformedTargetWarning.__init__"]], "args (julearn.transformers.target.transformedtargetwarning attribute)": [[56, "julearn.transformers.target.TransformedTargetWarning.args"]], "with_traceback() (julearn.transformers.target.transformedtargetwarning method)": [[56, "julearn.transformers.target.TransformedTargetWarning.with_traceback"]], "get_target_transformer() (in module julearn.transformers.target)": [[57, "julearn.transformers.target.get_target_transformer"]], "list_target_transformers() (in module julearn.transformers.target)": [[58, "julearn.transformers.target.list_target_transformers"]], "register_target_transformer() (in module julearn.transformers.target)": [[59, "julearn.transformers.target.register_target_transformer"]], "reset_target_transformer_register() (in module julearn.transformers.target)": [[60, "julearn.transformers.target.reset_target_transformer_register"]], "configure_logging() (in module julearn.utils)": [[61, "julearn.utils.configure_logging"]], "logger (in module julearn.utils)": [[62, "julearn.utils.logger"]], "raise_error() (in module julearn.utils)": [[63, "julearn.utils.raise_error"]], "estimatorlike (in module julearn.utils.typing)": [[64, "julearn.utils.typing.EstimatorLike"]], "estimatorlikefit1 (class in julearn.utils.typing)": [[65, "julearn.utils.typing.EstimatorLikeFit1"]], "__init__() (julearn.utils.typing.estimatorlikefit1 method)": [[65, "julearn.utils.typing.EstimatorLikeFit1.__init__"]], "fit() (julearn.utils.typing.estimatorlikefit1 method)": [[65, "julearn.utils.typing.EstimatorLikeFit1.fit"]], "get_params() (julearn.utils.typing.estimatorlikefit1 method)": [[65, "julearn.utils.typing.EstimatorLikeFit1.get_params"]], "set_params() (julearn.utils.typing.estimatorlikefit1 method)": [[65, "julearn.utils.typing.EstimatorLikeFit1.set_params"]], "estimatorlikefit2 (class in julearn.utils.typing)": [[66, "julearn.utils.typing.EstimatorLikeFit2"]], "__init__() (julearn.utils.typing.estimatorlikefit2 method)": [[66, "julearn.utils.typing.EstimatorLikeFit2.__init__"]], "fit() (julearn.utils.typing.estimatorlikefit2 method)": [[66, "julearn.utils.typing.EstimatorLikeFit2.fit"]], "get_params() (julearn.utils.typing.estimatorlikefit2 method)": [[66, "julearn.utils.typing.EstimatorLikeFit2.get_params"]], "set_params() (julearn.utils.typing.estimatorlikefit2 method)": [[66, "julearn.utils.typing.EstimatorLikeFit2.set_params"]], "estimatorlikefity (class in julearn.utils.typing)": [[67, "julearn.utils.typing.EstimatorLikeFity"]], "__init__() (julearn.utils.typing.estimatorlikefity method)": [[67, "julearn.utils.typing.EstimatorLikeFity.__init__"]], "fit() (julearn.utils.typing.estimatorlikefity method)": [[67, "julearn.utils.typing.EstimatorLikeFity.fit"]], "get_params() (julearn.utils.typing.estimatorlikefity method)": [[67, "julearn.utils.typing.EstimatorLikeFity.get_params"]], "set_params() (julearn.utils.typing.estimatorlikefity method)": [[67, "julearn.utils.typing.EstimatorLikeFity.set_params"]], "juestimatorlike (class in julearn.utils.typing)": [[68, "julearn.utils.typing.JuEstimatorLike"]], "__init__() (julearn.utils.typing.juestimatorlike method)": [[68, "julearn.utils.typing.JuEstimatorLike.__init__"]], "fit() (julearn.utils.typing.juestimatorlike method)": [[68, "julearn.utils.typing.JuEstimatorLike.fit"]], "get_apply_to() (julearn.utils.typing.juestimatorlike method)": [[68, "julearn.utils.typing.JuEstimatorLike.get_apply_to"]], "get_needed_types() (julearn.utils.typing.juestimatorlike method)": [[68, "julearn.utils.typing.JuEstimatorLike.get_needed_types"]], "get_params() (julearn.utils.typing.juestimatorlike method)": [[68, "julearn.utils.typing.JuEstimatorLike.get_params"]], "set_params() (julearn.utils.typing.juestimatorlike method)": [[68, "julearn.utils.typing.JuEstimatorLike.set_params"]], "warn_with_log() (in module julearn.utils)": [[69, "julearn.utils.warn_with_log"]], "plot_scores() (in module julearn.viz)": [[70, "julearn.viz.plot_scores"]], "julearn.inspect": [[72, "module-julearn.inspect"]], "julearn.api": [[73, "module-julearn.api"]], "julearn.model_selection": [[74, "module-julearn.model_selection"]], "julearn.models": [[75, "module-julearn.models"]], "julearn.models.dynamic": [[75, "module-julearn.models.dynamic"]], "julearn.pipeline": [[76, "module-julearn.pipeline"]], "julearn.prepare": [[77, "module-julearn.prepare"]], "julearn.scoring": [[78, "module-julearn.scoring"]], "julearn.scoring.metrics": [[78, "module-julearn.scoring.metrics"]], "julearn.stats": [[79, "module-julearn.stats"]], "julearn.transformers": [[80, "module-julearn.transformers"]], "julearn.transformers.target": [[80, "module-julearn.transformers.target"]], "julearn.utils": [[81, "module-julearn.utils"]], "julearn.utils.typing": [[81, "module-julearn.utils.typing"]], "julearn.viz": [[82, "module-julearn.viz"]]}})